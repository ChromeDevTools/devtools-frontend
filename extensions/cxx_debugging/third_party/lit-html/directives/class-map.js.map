{"version":3,"file":"class-map.js","sourceRoot":"","sources":["../src/directives/class-map.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {AttributePart, directive, Part, PropertyPart} from '../lit-html.js';\n\n// IE11 doesn't support classList on SVG elements, so we emulate it with a Set\nclass ClassList {\n  element: Element;\n  classes: Set<string> = new Set();\n  changed = false;\n\n  constructor(element: Element) {\n    this.element = element;\n    const classList = (element.getAttribute('class') || '').split(/\\s+/);\n    for (const cls of classList) {\n      this.classes.add(cls);\n    }\n  }\n  add(cls: string) {\n    this.classes.add(cls);\n    this.changed = true;\n  }\n\n  remove(cls: string) {\n    this.classes.delete(cls);\n    this.changed = true;\n  }\n\n  commit() {\n    if (this.changed) {\n      let classString = '';\n      this.classes.forEach((cls) => classString += cls + ' ');\n      this.element.setAttribute('class', classString);\n    }\n  }\n}\n\nexport interface ClassInfo {\n  readonly [name: string]: string|boolean|number;\n}\n\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst previousClassesCache = new WeakMap<Part, Set<string>>();\n\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element's `class` if the property value is truthy; if the property value is\n * falsey, the property name is removed from the element's `class`. For example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\nexport const classMap = directive((classInfo: ClassInfo) => (part: Part) => {\n  if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n      part.committer.name !== 'class' || part.committer.parts.length > 1) {\n    throw new Error(\n        'The `classMap` directive must be used in the `class` attribute ' +\n        'and must be the only part in the attribute.');\n  }\n\n  const {committer} = part;\n  const {element} = committer;\n\n  let previousClasses = previousClassesCache.get(part);\n  if (previousClasses === undefined) {\n    // Write static classes once\n    // Use setAttribute() because className isn't a string on SVG elements\n    element.setAttribute('class', committer.strings.join(' '));\n    previousClassesCache.set(part, previousClasses = new Set());\n  }\n\n  const classList =\n      (element.classList || new ClassList(element)) as DOMTokenList | ClassList;\n\n  // Remove old classes that no longer apply\n  // We use forEach() instead of for-of so that re don't require down-level\n  // iteration.\n  previousClasses.forEach((name) => {\n    if (!(name in classInfo)) {\n      classList.remove(name);\n      previousClasses!.delete(name);\n    }\n  });\n\n  // Add or remove classes based on their classMap value\n  for (const name in classInfo) {\n    const value = classInfo[name];\n    if (value != previousClasses.has(name)) {\n      // We explicitly want a loose truthy check of `value` because it seems\n      // more convenient that '' and 0 are skipped.\n      if (value) {\n        classList.add(name);\n        previousClasses.add(name);\n      } else {\n        classList.remove(name);\n        previousClasses.delete(name);\n      }\n    }\n  }\n  if (typeof (classList as ClassList).commit === 'function') {\n    (classList as ClassList).commit();\n  }\n});\n"]}