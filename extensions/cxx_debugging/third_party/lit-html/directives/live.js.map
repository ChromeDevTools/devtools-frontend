{"version":3,"file":"live.js","sourceRoot":"","sources":["../src/directives/live.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;AAEH,OAAO,EAAC,aAAa,EAAE,oBAAoB,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,YAAY,EAAC,MAAM,gBAAgB,CAAC;AAEjH;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,MAAM,CAAC,MAAM,IAAI,GAAG,SAAS,CACzB,CAAC,KAAc,EAAE,EAAE,CAAC,CAAC,IACoB,EAAE,EAAE;IAC3C,IAAI,aAAsB,CAAC;IAC3B,IAAI,IAAI,YAAY,SAAS,IAAI,IAAI,YAAY,QAAQ,EAAE;QACzD,MAAM,IAAI,KAAK,CACX,+DAA+D,CAAC,CAAC;KACtE;IACD,IAAI,IAAI,YAAY,oBAAoB,EAAE;QACxC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3B,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrD,oEAAoE;QACpE,6DAA6D;QAC7D,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;KAC5B;SAAM;QACL,MAAM,EAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAC,GAAG,IAAI,CAAC,SAAS,CAAC;QAChD,YAAY,CAAC,OAAO,CAAC,CAAC;QACtB,IAAI,IAAI,YAAY,YAAY,EAAE;YAChC,8DAA8D;YAC9D,aAAa,GAAI,OAAe,CAAC,IAAI,CAAC,CAAC;YACvC,IAAI,aAAa,KAAK,KAAK,EAAE;gBAC3B,OAAO;aACR;SACF;aAAM,IAAI,IAAI,YAAY,aAAa,EAAE;YACxC,aAAa,GAAG,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SAC5C;QACD,IAAI,aAAa,KAAK,MAAM,CAAC,KAAK,CAAC,EAAE;YACnC,OAAO;SACR;KACF;IACD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC;AAEP,MAAM,YAAY,GAAG,CAAC,OAA0B,EAAE,EAAE;IAClD,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;QAClE,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;KACzE;AACH,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright (c) 2020 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {AttributePart, BooleanAttributePart, directive, EventPart, NodePart, PropertyPart} from '../lit-html.js';\n\n/**\n * Checks binding values against live DOM values, instead of previously bound\n * values, when determining whether to update the value.\n *\n * This is useful for cases where the DOM value may change from outside of\n * lit-html, such as with a binding to an `<input>` element's `value` property,\n * a content editable elements text, or to a custom element that changes it's\n * own properties or attributes.\n *\n * In these cases if the DOM value changes, but the value set through lit-html\n * bindings hasn't, lit-html won't know to update the DOM value and will leave\n * it alone. If this is not what you want—if you want to overwrite the DOM\n * value with the bound value no matter what—use the `live()` directive:\n *\n *     html`<input .value=${live(x)}>`\n *\n * `live()` performs a strict equality check agains the live DOM value, and if\n * the new value is equal to the live value, does nothing. This means that\n * `live()` should not be used when the binding will cause a type conversion. If\n * you use `live()` with an attribute binding, make sure that only strings are\n * passed in, or the binding will update every render.\n */\nexport const live = directive(\n    (value: unknown) => (part: AttributePart|PropertyPart|\n                         BooleanAttributePart) => {\n      let previousValue: unknown;\n      if (part instanceof EventPart || part instanceof NodePart) {\n        throw new Error(\n            'The `live` directive is not allowed on text or event bindings');\n      }\n      if (part instanceof BooleanAttributePart) {\n        checkStrings(part.strings);\n        previousValue = part.element.hasAttribute(part.name);\n        // This is a hack needed because BooleanAttributePart doesn't have a\n        // committer and does its own dirty checking after directives\n        part.value = previousValue;\n      } else {\n        const {element, name, strings} = part.committer;\n        checkStrings(strings);\n        if (part instanceof PropertyPart) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          previousValue = (element as any)[name];\n          if (previousValue === value) {\n            return;\n          }\n        } else if (part instanceof AttributePart) {\n          previousValue = element.getAttribute(name);\n        }\n        if (previousValue === String(value)) {\n          return;\n        }\n      }\n      part.setValue(value);\n    });\n\nconst checkStrings = (strings: readonly string[]) => {\n  if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n    throw new Error('`live` bindings can only contain a single expression');\n  }\n};\n"]}