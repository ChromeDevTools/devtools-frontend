{"version":3,"file":"template-content.js","sourceRoot":"","sources":["../src/directives/template-content.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;AAEH,OAAO,EAAC,SAAS,EAAE,QAAQ,EAAO,MAAM,gBAAgB,CAAC;AAOzD,8EAA8E;AAC9E,6EAA6E;AAC7E,2EAA2E;AAC3E,4EAA4E;AAC5E,iDAAiD;AACjD,MAAM,cAAc,GAAG,IAAI,OAAO,EAA2B,CAAC;AAE9D;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,eAAe,GACxB,SAAS,CAAC,CAAC,QAA6B,EAAE,EAAE,CAAC,CAAC,IAAU,EAAQ,EAAE;IAChE,IAAI,CAAC,CAAC,IAAI,YAAY,QAAQ,CAAC,EAAE;QAC/B,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;KACtE;IAED,MAAM,aAAa,GAAG,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAE/C,IAAI,aAAa,KAAK,SAAS,IAAI,QAAQ,KAAK,aAAa,CAAC,QAAQ;QAClE,IAAI,CAAC,KAAK,KAAK,aAAa,CAAC,QAAQ,EAAE;QACzC,OAAO;KACR;IAED,MAAM,QAAQ,GAAG,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC7D,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACxB,cAAc,CAAC,GAAG,CAAC,IAAI,EAAE,EAAC,QAAQ,EAAE,QAAQ,EAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright (c) 2020 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {directive, NodePart, Part} from '../lit-html.js';\n\ninterface PreviousValue {\n  readonly template: HTMLTemplateElement;\n  readonly fragment: DocumentFragment;\n}\n\n// For each part, remember the value that was last rendered to the part by the\n// templateContent directive, and the DocumentFragment that was last set as a\n// value. The DocumentFragment is used as a unique key to check if the last\n// value rendered to the part was with templateContent. If not, we'll always\n// re-render the value passed to templateContent.\nconst previousValues = new WeakMap<NodePart, PreviousValue>();\n\n/**\n * Renders the content of a template element as HTML.\n *\n * Note, the template should be developer controlled and not user controlled.\n * Rendering a user-controlled template with this directive\n * could lead to cross-site-scripting vulnerabilities.\n */\nexport const templateContent =\n    directive((template: HTMLTemplateElement) => (part: Part): void => {\n      if (!(part instanceof NodePart)) {\n        throw new Error('templateContent can only be used in text bindings');\n      }\n\n      const previousValue = previousValues.get(part);\n\n      if (previousValue !== undefined && template === previousValue.template &&\n          part.value === previousValue.fragment) {\n        return;\n      }\n\n      const fragment = document.importNode(template.content, true);\n      part.setValue(fragment);\n      previousValues.set(part, {template, fragment});\n    });\n"]}