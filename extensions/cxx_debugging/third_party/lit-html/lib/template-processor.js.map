{"version":3,"file":"template-processor.js","sourceRoot":"","sources":["../src/lib/template-processor.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\n\nexport interface TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the element,\n   * attribute name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name, including a possible prefix. The name may\n   *   be prefixed by `.` (for a property binding), `@` (for an event binding)\n   * or\n   *   `?` (for a boolean attribute binding).\n   * @param strings The array of literal strings that form the static part of\n   *     the\n   *   attribute value. There are always at least two strings,\n   *   even for fully-controlled bindings with a single expression. For example,\n   *   for the binding `attr=\"${e1}-${e2}\"`, the `strings` array includes three\n   *   strings (`['', '-', '']`)â€”the text _before_ the first expression (the\n   * empty string), the text between the two expressions (`'-'`), and the text\n   * after the last expression (another empty string).\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: ReadonlyArray<string>,\n      options: RenderOptions): ReadonlyArray<Part>;\n\n  /**\n   * Create parts for a text-position binding.\n   * @param partOptions\n   */\n  handleTextExpression(options: RenderOptions): NodePart;\n}\n"]}