{
  "version": 3,
  "sources": ["../../../../../../front_end/core/common/Base64.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport const BASE64_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nexport const BASE64_CODES = new Uint8Array(123);\nfor (let index = 0; index < BASE64_CHARS.length; ++index) {\n  BASE64_CODES[BASE64_CHARS.charCodeAt(index)] = index;\n}\n\n/**\n * Decodes Base64-encoded data from a string without performing any kind of checking.\n */\nexport function decode(input: string): Uint8Array<ArrayBuffer> {\n  let bytesLength = ((input.length * 3) / 4) >>> 0;\n  if (input.charCodeAt(input.length - 2) === 0x3d /* '=' */) {\n    bytesLength -= 2;\n  } else if (input.charCodeAt(input.length - 1) === 0x3d /* '=' */) {\n    bytesLength -= 1;\n  }\n\n  const bytes = new Uint8Array(bytesLength);\n  for (let index = 0, offset = 0; index < input.length; index += 4) {\n    const a = BASE64_CODES[input.charCodeAt(index + 0)];\n    const b = BASE64_CODES[input.charCodeAt(index + 1)];\n    const c = BASE64_CODES[input.charCodeAt(index + 2)];\n    const d = BASE64_CODES[input.charCodeAt(index + 3)];\n    bytes[offset++] = (a << 2) | (b >> 4);\n    bytes[offset++] = ((b & 0x0f) << 4) | (c >> 2);\n    bytes[offset++] = ((c & 0x03) << 6) | (d & 0x3f);\n  }\n  return bytes;\n}\n\nexport function encode(input: BlobPart): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onerror = () => reject(new Error('failed to convert to base64'));\n    reader.onload = () => {\n      const blobAsUrl = reader.result as string;\n      const [, base64] = blobAsUrl.split(',', 2);\n      resolve(base64);\n    };\n\n    reader.readAsDataURL(new Blob([input]));\n  });\n}\n"],
  "mappings": ";AAIO,aAAM,eAAe;AACrB,aAAM,eAAe,IAAI,WAAW,GAAG;AAC9C,SAAS,QAAQ,GAAG,QAAQ,aAAa,QAAQ,EAAE,OAAO;AACxD,eAAa,aAAa,WAAW,KAAK,CAAC,IAAI;AACjD;AAKO,gBAAS,OAAO,OAAwC;AAC7D,MAAI,cAAgB,MAAM,SAAS,IAAK,MAAO;AAC/C,MAAI,MAAM,WAAW,MAAM,SAAS,CAAC,MAAM,IAAgB;AACzD,mBAAe;AAAA,EACjB,WAAW,MAAM,WAAW,MAAM,SAAS,CAAC,MAAM,IAAgB;AAChE,mBAAe;AAAA,EACjB;AAEA,QAAM,QAAQ,IAAI,WAAW,WAAW;AACxC,WAAS,QAAQ,GAAG,SAAS,GAAG,QAAQ,MAAM,QAAQ,SAAS,GAAG;AAChE,UAAM,IAAI,aAAa,MAAM,WAAW,QAAQ,CAAC,CAAC;AAClD,UAAM,IAAI,aAAa,MAAM,WAAW,QAAQ,CAAC,CAAC;AAClD,UAAM,IAAI,aAAa,MAAM,WAAW,QAAQ,CAAC,CAAC;AAClD,UAAM,IAAI,aAAa,MAAM,WAAW,QAAQ,CAAC,CAAC;AAClD,UAAM,QAAQ,IAAK,KAAK,IAAM,KAAK;AACnC,UAAM,QAAQ,KAAM,IAAI,OAAS,IAAM,KAAK;AAC5C,UAAM,QAAQ,KAAM,IAAI,MAAS,IAAM,IAAI;AAAA,EAC7C;AACA,SAAO;AACT;AAEO,gBAAS,OAAO,OAAkC;AACvD,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAM,SAAS,IAAI,WAAW;AAC9B,WAAO,UAAU,MAAM,OAAO,IAAI,MAAM,6BAA6B,CAAC;AACtE,WAAO,SAAS,MAAM;AACpB,YAAM,YAAY,OAAO;AACzB,YAAM,CAAC,EAAE,MAAM,IAAI,UAAU,MAAM,KAAK,CAAC;AACzC,cAAQ,MAAM;AAAA,IAChB;AAEA,WAAO,cAAc,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;AAAA,EACxC,CAAC;AACH;",
  "names": []
}
