{
  "version": 3,
  "sources": ["../../../../../../front_end/core/common/Color.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2009 Apple Inc.  All rights reserved.\n * Copyright (C) 2009 Joseph Pecoraro\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Platform from '../platform/platform.js';\n\nimport {ColorConverter} from './ColorConverter.js';\nimport {\n  blendColors,\n  type Color3D,\n  type Color4D,\n  type Color4DOr3D,\n  contrastRatioAPCA,\n  desiredLuminanceAPCA,\n  luminance,\n  luminanceAPCA,\n  rgbToHsl,\n  rgbToHwb,\n} from './ColorUtils.js';\n\n/**\n * <hue> is defined as a <number> or <angle>\n * and we hold this in degrees. However, after\n * the conversions, these degrees can result in\n * negative values. That's why we normalize the hue to be\n * between [0 - 360].\n **/\nfunction normalizeHue(hue: number): number {\n  // Even though it is highly unlikely, hue can be\n  // very negative like -400. The initial modulo\n  // operation makes sure that the if the number is\n  // negative, it is between [-360, 0].\n  return ((hue % 360) + 360) % 360;\n}\n\n/**\n * Parses angle in the form of\n * `<angle>deg`, `<angle>turn`, `<angle>grad and `<angle>rad`\n * and returns the canonicalized `degree`.\n **/\nfunction parseAngle(angleText: string): number|null {\n  const angle = angleText.replace(/(deg|g?rad|turn)$/, '');\n  // @ts-expect-error: isNaN can accept strings\n  if (isNaN(angle) || angleText.match(/\\s+(deg|g?rad|turn)/)) {\n    return null;\n  }\n\n  const number = parseFloat(angle);\n  if (angleText.includes('turn')) {\n    // 1turn === 360deg\n    return number * 360;\n  }\n\n  if (angleText.includes('grad')) {\n    // 1grad === 0.9deg\n    return number * 9 / 10;\n  }\n\n  if (angleText.includes('rad')) {\n    // \u03C0rad === 180deg\n    return number * 180 / Math.PI;\n  }\n\n  // 1deg === 1deg ^_^\n  return number;\n}\n\n/** Returns the `Format` equivalent from the format text **/\nexport function getFormat(formatText: string): Format|null {\n  switch (formatText) {\n    case Format.HEX:\n      return Format.HEX;\n    case Format.HEXA:\n      return Format.HEXA;\n    case Format.RGB:\n      return Format.RGB;\n    case Format.RGBA:\n      return Format.RGBA;\n    case Format.HSL:\n      return Format.HSL;\n    case Format.HSLA:\n      return Format.HSLA;\n    case Format.HWB:\n      return Format.HWB;\n    case Format.HWBA:\n      return Format.HWBA;\n    case Format.LCH:\n      return Format.LCH;\n    case Format.OKLCH:\n      return Format.OKLCH;\n    case Format.LAB:\n      return Format.LAB;\n    case Format.OKLAB:\n      return Format.OKLAB;\n  }\n\n  return getColorSpace(formatText);\n}\n\n// Returns the `ColorSpace` equivalent from the color space text\ntype ColorSpace = Format.SRGB|Format.SRGB_LINEAR|Format.DISPLAY_P3|Format.A98_RGB|Format.PROPHOTO_RGB|\n                  Format.REC_2020|Format.XYZ|Format.XYZ_D50|Format.XYZ_D65;\nfunction getColorSpace(colorSpaceText: string): ColorSpace|null {\n  switch (colorSpaceText) {\n    case Format.SRGB:\n      return Format.SRGB;\n    case Format.SRGB_LINEAR:\n      return Format.SRGB_LINEAR;\n    case Format.DISPLAY_P3:\n      return Format.DISPLAY_P3;\n    case Format.A98_RGB:\n      return Format.A98_RGB;\n    case Format.PROPHOTO_RGB:\n      return Format.PROPHOTO_RGB;\n    case Format.REC_2020:\n      return Format.REC_2020;\n    case Format.XYZ:\n      return Format.XYZ;\n    case Format.XYZ_D50:\n      return Format.XYZ_D50;\n    case Format.XYZ_D65:\n      return Format.XYZ_D65;\n  }\n\n  return null;\n}\n\nexport const enum ColorChannel {\n  A = 'a',\n  ALPHA = 'alpha',\n  B = 'b',\n  C = 'c',\n  G = 'g',\n  H = 'h',\n  L = 'l',\n  R = 'r',\n  S = 's',\n  W = 'w',\n  X = 'x',\n  Y = 'y',\n  Z = 'z',\n}\n\n/**\n * Percents in color spaces are mapped to ranges.\n * These ranges change based on the syntax.\n * For example, for 'C' in lch() c: 0% = 0, 100% = 150.\n * See: https://www.w3.org/TR/css-color-4/#funcdef-lch\n * Some percentage values can be negative\n * though their ranges don't change depending on the sign\n * (for now, according to spec).\n * @param percent % value of the number. 42 for 42%.\n * @param range Range of [min, max]. Including `min` and `max`.\n */\nfunction mapPercentToRange(percent: number, range: [number, number]): number {\n  const sign = Math.sign(percent);\n  const absPercent = Math.abs(percent);\n  const [outMin, outMax] = range;\n\n  return sign * (absPercent * (outMax - outMin) / 100 + outMin);\n}\n\ninterface SplitColorFunctionParametersOptions {\n  allowCommas: boolean;\n  convertNoneToZero: boolean;\n}\n\nexport function parse(text: string): Color|null {\n  // #hex, nickname\n  if (!text.match(/\\s/)) {\n    const match = text.toLowerCase().match(/^(?:#([0-9a-f]{3,4}|[0-9a-f]{6}|[0-9a-f]{8})|(\\w+))$/i);\n    if (match) {\n      if (match[1]) {\n        return Legacy.fromHex(match[1], text);\n      }\n\n      if (match[2]) {\n        return Nickname.fromName(match[2], text);\n      }\n\n      return null;\n    }\n  }\n\n  // rgb/rgba(), hsl/hsla(), hwb/hwba(), lch(), oklch(), lab(), oklab() and color()\n  const match =\n      text.toLowerCase().match(/^\\s*(?:(rgba?)|(hsla?)|(hwba?)|(lch)|(oklch)|(lab)|(oklab)|(color))\\((.*)\\)\\s*$/);\n  if (match) {\n    const isRgbaMatch = Boolean(match[1]);   // rgb/rgba()\n    const isHslaMatch = Boolean(match[2]);   // hsl/hsla()\n    const isHwbaMatch = Boolean(match[3]);   // hwb/hwba()\n    const isLchMatch = Boolean(match[4]);    // lch()\n    const isOklchMatch = Boolean(match[5]);  // oklch()\n    const isLabMatch = Boolean(match[6]);    // lab()\n    const isOklabMatch = Boolean(match[7]);  // oklab()\n    const isColorMatch = Boolean(match[8]);  // color()\n    const valuesText = match[9];\n\n    // Parse color function first because extracting values for\n    // this function is not the same as the other ones\n    // so, we're not using any of the logic below.\n    if (isColorMatch) {\n      return ColorFunction.fromSpec(text, valuesText);\n    }\n\n    const isOldSyntax = isRgbaMatch || isHslaMatch || isHwbaMatch;\n    const allowCommas = isRgbaMatch || isHslaMatch;\n    const convertNoneToZero = !isOldSyntax;  // Convert 'none' keyword to zero in new syntaxes\n\n    const values = splitColorFunctionParameters(valuesText, {allowCommas, convertNoneToZero});\n    if (!values) {\n      return null;\n    }\n    const spec: ColorParameterSpec = [values[0], values[1], values[2], values[3]];\n    if (isRgbaMatch) {\n      return Legacy.fromRGBAFunction(values[0], values[1], values[2], values[3], text);\n    }\n\n    if (isHslaMatch) {\n      return HSL.fromSpec(spec, text);\n    }\n\n    if (isHwbaMatch) {\n      return HWB.fromSpec(spec, text);\n    }\n\n    if (isLchMatch) {\n      return LCH.fromSpec(spec, text);\n    }\n\n    if (isOklchMatch) {\n      return Oklch.fromSpec(spec, text);\n    }\n\n    if (isLabMatch) {\n      return Lab.fromSpec(spec, text);\n    }\n\n    if (isOklabMatch) {\n      return Oklab.fromSpec(spec, text);\n    }\n  }\n\n  return null;\n}\n\n/**\n * Split the color parameters of (e.g.) rgb(a), hsl(a), hwb(a) functions.\n */\nfunction splitColorFunctionParameters(\n    content: string, {allowCommas, convertNoneToZero}: SplitColorFunctionParametersOptions): string[]|null {\n  const components = content.trim();\n  let values: string[] = [];\n\n  if (allowCommas) {\n    values = components.split(/\\s*,\\s*/);\n  }\n  if (!allowCommas || values.length === 1) {\n    values = components.split(/\\s+/);\n    if (values[3] === '/') {\n      values.splice(3, 1);\n      if (values.length !== 4) {\n        return null;\n      }\n    } else if (\n        (values.length > 2 && values[2].indexOf('/') !== -1) || (values.length > 3 && values[3].indexOf('/') !== -1)) {\n      const alpha = values.slice(2, 4).join('');\n      values = values.slice(0, 2).concat(alpha.split(/\\//)).concat(values.slice(4));\n    } else if (values.length >= 4) {\n      return null;\n    }\n  }\n  if (values.length !== 3 && values.length !== 4 || values.indexOf('') > -1) {\n    return null;\n  }\n\n  // Question: what should we do with `alpha` being none?\n  if (convertNoneToZero) {\n    return values.map(value => value === 'none' ? '0' : value);\n  }\n\n  return values;\n}\n\nfunction clamp(value: number, {min, max}: {min?: number, max?: number}): number;\nfunction clamp(value: null, {min, max}: {min?: number, max?: number}): null;\nfunction clamp(value: number|null, {min, max}: {min?: number, max?: number}): number|null;\nfunction clamp(value: number|null, {min, max}: {min?: number, max?: number}): number|null {\n  if (value === null) {\n    return value;\n  }\n  if (min !== undefined) {\n    value = Math.max(value, min);\n  }\n  if (max !== undefined) {\n    value = Math.min(value, max);\n  }\n  return value;\n}\n\nfunction parsePercentage(value: string, range: [number, number]): number|null {\n  if (!value.endsWith('%')) {\n    return null;\n  }\n  const percentage = parseFloat(value.substr(0, value.length - 1));\n  return isNaN(percentage) ? null : mapPercentToRange(percentage, range);\n}\n\nfunction parseNumber(value: string): number|null {\n  const number = parseFloat(value);\n  return isNaN(number) ? null : number;\n}\n\nfunction parseAlpha(value: string|undefined): number|null {\n  if (value === undefined) {\n    return null;\n  }\n  return clamp(parsePercentage(value, [0, 1]) ?? parseNumber(value), {min: 0, max: 1});\n}\n\n/**\n *\n * @param value Text value to be parsed in the form of 'number|percentage'.\n * @param range Range to map the percentage.\n * @returns If it is not percentage, returns number directly; otherwise,\n * maps the percentage to the range. For example:\n * - 30% in range [0, 100] is 30\n * - 20% in range [0, 1] is 0.5\n */\nfunction parsePercentOrNumber(value: string, range: [number, number] = [0, 1]): number|null {\n  // @ts-expect-error: isNaN can accept strings\n  if (isNaN(value.replace('%', ''))) {\n    return null;\n  }\n  const parsed = parseFloat(value);\n\n  if (value.indexOf('%') !== -1) {\n    if (value.indexOf('%') !== value.length - 1) {\n      return null;\n    }\n    return mapPercentToRange(parsed, range);\n  }\n  return parsed;\n}\n\nfunction parseRgbNumeric(value: string): number|null {\n  const parsed = parsePercentOrNumber(value);\n  if (parsed === null) {\n    return null;\n  }\n\n  if (value.indexOf('%') !== -1) {\n    return parsed;\n  }\n  return parsed / 255;\n}\n\nexport function parseHueNumeric(value: string): number|null {\n  const angle = value.replace(/(deg|g?rad|turn)$/, '');\n  // @ts-expect-error: isNaN can accept strings\n  if (isNaN(angle) || value.match(/\\s+(deg|g?rad|turn)/)) {\n    return null;\n  }\n  const number = parseFloat(angle);\n\n  if (value.indexOf('turn') !== -1) {\n    return number % 1;\n  }\n  if (value.indexOf('grad') !== -1) {\n    return (number / 400) % 1;\n  }\n  if (value.indexOf('rad') !== -1) {\n    return (number / (2 * Math.PI)) % 1;\n  }\n  return (number / 360) % 1;\n}\n\nfunction parseSatLightNumeric(value: string): number|null {\n  // @ts-expect-error: isNaN can accept strings\n  if (value.indexOf('%') !== value.length - 1 || isNaN(value.replace('%', ''))) {\n    return null;\n  }\n  const parsed = parseFloat(value);\n  return parsed / 100;\n}\n\nfunction parseAlphaNumeric(value: string): number|null {\n  return parsePercentOrNumber(value);\n}\n\nfunction hsva2hsla(hsva: Color4D): Color4D {\n  const h = hsva[0];\n  let s: 0|number = hsva[1];\n  const v = hsva[2];\n\n  const t = (2 - s) * v;\n  if (v === 0 || s === 0) {\n    s = 0;\n  } else {\n    s *= v / (t < 1 ? t : 2 - t);\n  }\n\n  return [h, s, t / 2, hsva[3]];\n}\n\nexport function hsl2rgb(hsl: Color4D): Color4D {\n  const h = hsl[0];\n  let s: 0|number = hsl[1];\n  const l = hsl[2];\n\n  function hue2rgb(p: number, q: number, h: number): number {\n    if (h < 0) {\n      h += 1;\n    } else if (h > 1) {\n      h -= 1;\n    }\n\n    if ((h * 6) < 1) {\n      return p + (q - p) * h * 6;\n    }\n    if ((h * 2) < 1) {\n      return q;\n    }\n    if ((h * 3) < 2) {\n      return p + (q - p) * ((2 / 3) - h) * 6;\n    }\n    return p;\n  }\n\n  if (s < 0) {\n    s = 0;\n  }\n\n  let q;\n  if (l <= 0.5) {\n    q = l * (1 + s);\n  } else {\n    q = l + s - (l * s);\n  }\n\n  const p = 2 * l - q;\n\n  const tr = h + (1 / 3);\n  const tg = h;\n  const tb = h - (1 / 3);\n\n  return [hue2rgb(p, q, tr), hue2rgb(p, q, tg), hue2rgb(p, q, tb), hsl[3]];\n}\n\nfunction hwb2rgb(hwb: Color4D): Color4D {\n  const h = hwb[0];\n  const w = hwb[1];\n  const b = hwb[2];\n\n  const whiteRatio = w / (w + b);\n  let result: Color4D = [whiteRatio, whiteRatio, whiteRatio, hwb[3]];\n\n  if (w + b < 1) {\n    result = hsl2rgb([h, 1, 0.5, hwb[3]]);\n    for (let i = 0; i < 3; ++i) {\n      result[i] += w - (w + b) * result[i];\n    }\n  }\n\n  return result;\n}\n\nexport function hsva2rgba(hsva: Color4D): Color4D {\n  return hsl2rgb(hsva2hsla(hsva));\n}\n\nexport function rgb2hsv(rgba: Color3D): Color3D {\n  const hsla = rgbToHsl(rgba);\n  const h = hsla[0];\n  let s = hsla[1];\n  const l = hsla[2];\n\n  s *= l < 0.5 ? l : 1 - l;\n  return [h, s !== 0 ? 2 * s / (l + s) : 0, (l + s)];\n}\n\n/**\n * Compute a desired luminance given a given luminance and a desired contrast\n * ratio.\n */\nexport function desiredLuminance(luminance: number, contrast: number, lighter: boolean): number {\n  function computeLuminance(): number {\n    if (lighter) {\n      return (luminance + 0.05) * contrast - 0.05;\n    }\n    return (luminance + 0.05) / contrast - 0.05;\n  }\n  let desiredLuminance = computeLuminance();\n  if (desiredLuminance < 0 || desiredLuminance > 1) {\n    lighter = !lighter;\n    desiredLuminance = computeLuminance();\n  }\n  return desiredLuminance;\n}\n\n/**\n * Approach a value of the given component of `candidateHSVA` such that the\n * calculated luminance of `candidateHSVA` approximates `desiredLuminance`.\n */\nexport function approachColorValue(\n    candidateHSVA: Color4D, index: number, desiredLuminance: number,\n    candidateLuminance: (arg0: Color4D) => number): number|null {\n  const epsilon = 0.0002;\n\n  let x = candidateHSVA[index];\n  let multiplier = 1;\n  let dLuminance: number = candidateLuminance(candidateHSVA) - desiredLuminance;\n  let previousSign = Math.sign(dLuminance);\n\n  for (let guard = 100; guard; guard--) {\n    if (Math.abs(dLuminance) < epsilon) {\n      candidateHSVA[index] = x;\n      return x;\n    }\n\n    const sign = Math.sign(dLuminance);\n    if (sign !== previousSign) {\n      // If `x` overshoots the correct value, halve the step size.\n      multiplier /= 2;\n      previousSign = sign;\n    } else if (x < 0 || x > 1) {\n      // If there is no overshoot and `x` is out of bounds, there is no\n      // acceptable value for `x`.\n      return null;\n    }\n\n    // Adjust `x` by a multiple of `dLuminance` to decrease step size as\n    // the computed luminance converges on `desiredLuminance`.\n    x += multiplier * (index === 2 ? -dLuminance : dLuminance);\n\n    candidateHSVA[index] = x;\n\n    dLuminance = candidateLuminance(candidateHSVA) - desiredLuminance;\n  }\n\n  return null;\n}\n\nexport function findFgColorForContrast(fgColor: Legacy, bgColor: Legacy, requiredContrast: number): Legacy|null {\n  const candidateHSVA = fgColor.as(Format.HSL).hsva();\n  const bgRGBA = bgColor.rgba();\n\n  const candidateLuminance = (candidateHSVA: Color4D): number => {\n    return luminance(blendColors(Legacy.fromHSVA(candidateHSVA).rgba(), bgRGBA));\n  };\n\n  const bgLuminance = luminance(bgColor.rgba());\n  const fgLuminance = candidateLuminance(candidateHSVA);\n  const fgIsLighter = fgLuminance > bgLuminance;\n\n  const desired = desiredLuminance(bgLuminance, requiredContrast, fgIsLighter);\n\n  const saturationComponentIndex = 1;\n  const valueComponentIndex = 2;\n\n  if (approachColorValue(candidateHSVA, valueComponentIndex, desired, candidateLuminance)) {\n    return Legacy.fromHSVA(candidateHSVA);\n  }\n\n  candidateHSVA[valueComponentIndex] = 1;\n  if (approachColorValue(candidateHSVA, saturationComponentIndex, desired, candidateLuminance)) {\n    return Legacy.fromHSVA(candidateHSVA);\n  }\n\n  return null;\n}\n\nexport function findFgColorForContrastAPCA(fgColor: Legacy, bgColor: Legacy, requiredContrast: number): Legacy|null {\n  const candidateHSVA = fgColor.as(Format.HSL).hsva();\n\n  const candidateLuminance = (candidateHSVA: Color4D): number => {\n    return luminanceAPCA(Legacy.fromHSVA(candidateHSVA).rgba());\n  };\n\n  const bgLuminance = luminanceAPCA(bgColor.rgba());\n  const fgLuminance = candidateLuminance(candidateHSVA);\n  const fgIsLighter = fgLuminance >= bgLuminance;\n  const desiredLuminance = desiredLuminanceAPCA(bgLuminance, requiredContrast, fgIsLighter);\n\n  const saturationComponentIndex = 1;\n  const valueComponentIndex = 2;\n\n  if (approachColorValue(candidateHSVA, valueComponentIndex, desiredLuminance, candidateLuminance)) {\n    const candidate = Legacy.fromHSVA(candidateHSVA);\n    if (Math.abs(contrastRatioAPCA(bgColor.rgba(), candidate.rgba())) >= requiredContrast) {\n      return candidate;\n    }\n  }\n\n  candidateHSVA[valueComponentIndex] = 1;\n  if (approachColorValue(candidateHSVA, saturationComponentIndex, desiredLuminance, candidateLuminance)) {\n    const candidate = Legacy.fromHSVA(candidateHSVA);\n    if (Math.abs(contrastRatioAPCA(bgColor.rgba(), candidate.rgba())) >= requiredContrast) {\n      return candidate;\n    }\n  }\n\n  return null;\n}\n\ntype ColorParameterSpec = [string, string, string, string | undefined];\n\ninterface ColorConversions<T = void> {\n  [Format.HEX](self: T): Legacy;\n  [Format.HEXA](self: T): Legacy;\n  [Format.RGB](self: T): Legacy;\n  [Format.RGBA](self: T): Legacy;\n  [Format.HSL](self: T): HSL;\n  [Format.HSLA](self: T): HSL;\n  [Format.HWB](self: T): HWB;\n  [Format.HWBA](self: T): HWB;\n  [Format.LCH](self: T): LCH;\n  [Format.OKLCH](self: T): Oklch;\n  [Format.LAB](self: T): Lab;\n  [Format.OKLAB](self: T): Oklab;\n\n  [Format.SRGB](self: T): ColorFunction;\n  [Format.SRGB_LINEAR](self: T): ColorFunction;\n  [Format.DISPLAY_P3](self: T): ColorFunction;\n  [Format.A98_RGB](self: T): ColorFunction;\n  [Format.PROPHOTO_RGB](self: T): ColorFunction;\n  [Format.REC_2020](self: T): ColorFunction;\n  [Format.XYZ](self: T): ColorFunction;\n  [Format.XYZ_D50](self: T): ColorFunction;\n  [Format.XYZ_D65](self: T): ColorFunction;\n}\n\nexport interface Color {\n  readonly alpha: number|null;\n  readonly channels: [ColorChannel, ColorChannel, ColorChannel, ColorChannel];\n\n  equal(color: Color): boolean;\n  asString(format?: Format): string;\n  setAlpha(alpha: number): Color;\n  format(): Format;\n  as<T extends Format>(format: T): ReturnType<ColorConversions[T]>;\n  is<T extends Format>(format: T): this is ReturnType<ColorConversions[T]>;\n  asLegacyColor(): Legacy;\n\n  // The authored text is the text that was used to define the color. If set, it may be different from what `asString`\n  // returns, for example if the latter normalizes or clamps color channel values. It is also possible that the authored\n  // text is not a parsable color outside of the context in which the color was produced, e.g., when the color stems\n  // from a custom property, the authored text may look like \"var(--color)\".\n  getAuthoredText(): string|null;\n\n  getRawParameters(): Color3D;\n  getAsRawString(format?: Format): string;\n  isGamutClipped(): boolean;\n}\n\nconst EPSILON = 0.01;\nconst WIDE_RANGE_EPSILON = 1;  // For comparisons on channels with a wider range than [0,1]\nfunction equals(a: number[], b: number[], accuracy?: number): boolean;\nfunction equals(a: number|null, b: number|null, accuracy?: number): boolean;\nfunction equals(a: number|null|number[], b: number|null|number[], accuracy = EPSILON): boolean {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (const i in a) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  if (Array.isArray(a) || Array.isArray(b)) {\n    return false;\n  }\n  if (a === null || b === null) {\n    return a === b;\n  }\n  return Math.abs(a - b) < accuracy;\n}\nfunction lessOrEquals(a: number, b: number, accuracy = EPSILON): boolean {\n  return a - b <= accuracy;\n}\n\nexport const enum Format {\n  HEX = 'hex',\n  HEXA = 'hexa',\n  RGB = 'rgb',\n  RGBA = 'rgba',\n  HSL = 'hsl',\n  HSLA = 'hsla',\n  HWB = 'hwb',\n  HWBA = 'hwba',\n  LCH = 'lch',\n  OKLCH = 'oklch',\n  LAB = 'lab',\n  OKLAB = 'oklab',\n  SRGB = 'srgb',\n  SRGB_LINEAR = 'srgb-linear',\n  DISPLAY_P3 = 'display-p3',\n  A98_RGB = 'a98-rgb',\n  PROPHOTO_RGB = 'prophoto-rgb',\n  REC_2020 = 'rec2020',\n  XYZ = 'xyz',\n  XYZ_D50 = 'xyz-d50',\n  XYZ_D65 = 'xyz-d65',\n}\n\nexport class Lab implements Color {\n  readonly l: number;\n  readonly a: number;\n  readonly b: number;\n  readonly alpha: number|null;\n  readonly #authoredText?: string;\n  readonly #rawParams: Color3D;\n  readonly channels: [ColorChannel, ColorChannel, ColorChannel, ColorChannel] =\n      [ColorChannel.L, ColorChannel.A, ColorChannel.B, ColorChannel.ALPHA];\n\n  static readonly #conversions: ColorConversions<Lab> = {\n    [Format.HEX]: (self: Lab) => new Legacy(self.#getRGBArray(/* withAlpha= */ false), Format.HEX),\n    [Format.HEXA]: (self: Lab) => new Legacy(self.#getRGBArray(/* withAlpha= */ true), Format.HEXA),\n    [Format.RGB]: (self: Lab) => new Legacy(self.#getRGBArray(/* withAlpha= */ false), Format.RGB),\n    [Format.RGBA]: (self: Lab) => new Legacy(self.#getRGBArray(/* withAlpha= */ true), Format.RGBA),\n    [Format.HSL]: (self: Lab) => new HSL(...rgbToHsl(self.#getRGBArray(/* withAlpha= */ false)), self.alpha),\n    [Format.HSLA]: (self: Lab) => new HSL(...rgbToHsl(self.#getRGBArray(/* withAlpha= */ false)), self.alpha),\n    [Format.HWB]: (self: Lab) => new HWB(...rgbToHwb(self.#getRGBArray(/* withAlpha= */ false)), self.alpha),\n    [Format.HWBA]: (self: Lab) => new HWB(...rgbToHwb(self.#getRGBArray(/* withAlpha= */ false)), self.alpha),\n    [Format.LCH]: (self: Lab) => new LCH(...ColorConverter.labToLch(self.l, self.a, self.b), self.alpha),\n    [Format.OKLCH]: (self: Lab) => new Oklch(...ColorConverter.xyzd50ToOklch(...self.#toXyzd50()), self.alpha),\n    [Format.LAB]: (self: Lab) => self,\n    [Format.OKLAB]: (self: Lab) =>\n        new Oklab(...ColorConverter.xyzd65ToOklab(...ColorConverter.xyzd50ToD65(...self.#toXyzd50())), self.alpha),\n\n    [Format.SRGB]: (self: Lab) =>\n        new ColorFunction(Format.SRGB, ...ColorConverter.xyzd50ToSrgb(...self.#toXyzd50()), self.alpha),\n    [Format.SRGB_LINEAR]: (self: Lab) =>\n        new ColorFunction(Format.SRGB_LINEAR, ...ColorConverter.xyzd50TosRGBLinear(...self.#toXyzd50()), self.alpha),\n    [Format.DISPLAY_P3]: (self: Lab) =>\n        new ColorFunction(Format.DISPLAY_P3, ...ColorConverter.xyzd50ToDisplayP3(...self.#toXyzd50()), self.alpha),\n    [Format.A98_RGB]: (self: Lab) =>\n        new ColorFunction(Format.A98_RGB, ...ColorConverter.xyzd50ToAdobeRGB(...self.#toXyzd50()), self.alpha),\n    [Format.PROPHOTO_RGB]: (self: Lab) =>\n        new ColorFunction(Format.PROPHOTO_RGB, ...ColorConverter.xyzd50ToProPhoto(...self.#toXyzd50()), self.alpha),\n    [Format.REC_2020]: (self: Lab) =>\n        new ColorFunction(Format.REC_2020, ...ColorConverter.xyzd50ToRec2020(...self.#toXyzd50()), self.alpha),\n    [Format.XYZ]: (self: Lab) =>\n        new ColorFunction(Format.XYZ, ...ColorConverter.xyzd50ToD65(...self.#toXyzd50()), self.alpha),\n    [Format.XYZ_D50]: (self: Lab) => new ColorFunction(Format.XYZ_D50, ...self.#toXyzd50(), self.alpha),\n    [Format.XYZ_D65]: (self: Lab) =>\n        new ColorFunction(Format.XYZ_D65, ...ColorConverter.xyzd50ToD65(...self.#toXyzd50()), self.alpha),\n  };\n\n  #toXyzd50(): Color3D {\n    return ColorConverter.labToXyzd50(this.l, this.a, this.b);\n  }\n\n  #getRGBArray(withAlpha: true): Color4DOr3D;\n  #getRGBArray(withAlpha: false): Color3D;\n  #getRGBArray(withAlpha = true): Color3D|Color4DOr3D {\n    const params = ColorConverter.xyzd50ToSrgb(...this.#toXyzd50());\n    if (withAlpha) {\n      return [...params, this.alpha ?? undefined];\n    }\n    return params;\n  }\n\n  constructor(l: number, a: number, b: number, alpha: number|null, authoredText?: string|undefined) {\n    this.#rawParams = [l, a, b];\n    this.l = clamp(l, {min: 0, max: 100});\n    if (equals(this.l, 0, WIDE_RANGE_EPSILON) || equals(this.l, 100, WIDE_RANGE_EPSILON)) {\n      a = b = 0;\n    }\n    this.a = a;\n    this.b = b;\n    this.alpha = clamp(alpha, {min: 0, max: 1});\n    this.#authoredText = authoredText;\n  }\n  is<T extends Format>(format: T): this is ReturnType<ColorConversions[T]> {\n    return format === this.format();\n  }\n  as<T extends Format>(format: T): ReturnType<ColorConversions[T]> {\n    return Lab.#conversions[format](this) as ReturnType<ColorConversions[T]>;\n  }\n  asLegacyColor(): Legacy {\n    return this.as(Format.RGBA);\n  }\n  equal(color: Color): boolean {\n    const lab = color.as(Format.LAB);\n    return equals(lab.l, this.l, WIDE_RANGE_EPSILON) && equals(lab.a, this.a) && equals(lab.b, this.b) &&\n        equals(lab.alpha, this.alpha);\n  }\n  format(): Format {\n    return Format.LAB;\n  }\n  setAlpha(alpha: number): Lab {\n    return new Lab(this.l, this.a, this.b, alpha, undefined);\n  }\n  asString(format?: Format): string {\n    if (format) {\n      return this.as(format).asString();\n    }\n    return this.#stringify(this.l, this.a, this.b);\n  }\n  #stringify(l: number, a: number, b: number): string {\n    const alpha = this.alpha === null || equals(this.alpha, 1) ?\n        '' :\n        ` / ${Platform.StringUtilities.stringifyWithPrecision(this.alpha)}`;\n    return `lab(${Platform.StringUtilities.stringifyWithPrecision(l, 0)} ${\n        Platform.StringUtilities.stringifyWithPrecision(\n            a)} ${Platform.StringUtilities.stringifyWithPrecision(b)}${alpha})`;\n  }\n  getAuthoredText(): string|null {\n    return this.#authoredText ?? null;\n  }\n\n  getRawParameters(): Color3D {\n    return [...this.#rawParams];\n  }\n  getAsRawString(format?: Format): string {\n    if (format) {\n      return this.as(format).getAsRawString();\n    }\n    return this.#stringify(...this.#rawParams);\n  }\n  isGamutClipped(): boolean {\n    return false;\n  }\n\n  static fromSpec(spec: ColorParameterSpec, text: string): Lab|null {\n    const L = parsePercentage(spec[0], [0, 100]) ?? parseNumber(spec[0]);\n    if (L === null) {\n      return null;\n    }\n    const a = parsePercentage(spec[1], [0, 125]) ?? parseNumber(spec[1]);\n    if (a === null) {\n      return null;\n    }\n    const b = parsePercentage(spec[2], [0, 125]) ?? parseNumber(spec[2]);\n    if (b === null) {\n      return null;\n    }\n    const alpha = parseAlpha(spec[3]);\n\n    return new Lab(L, a, b, alpha, text);\n  }\n}\n\nexport class LCH implements Color {\n  readonly #rawParams: Color3D;\n  readonly l: number;\n  readonly c: number;\n  readonly h: number;\n  readonly alpha: number|null;\n  readonly #authoredText?: string;\n  readonly channels: [ColorChannel, ColorChannel, ColorChannel, ColorChannel] =\n      [ColorChannel.L, ColorChannel.C, ColorChannel.H, ColorChannel.ALPHA];\n\n  static readonly #conversions: ColorConversions<LCH> = {\n    [Format.HEX]: (self: LCH) => new Legacy(self.#getRGBArray(/* withAlpha= */ false), Format.HEX),\n    [Format.HEXA]: (self: LCH) => new Legacy(self.#getRGBArray(/* withAlpha= */ true), Format.HEXA),\n    [Format.RGB]: (self: LCH) => new Legacy(self.#getRGBArray(/* withAlpha= */ false), Format.RGB),\n    [Format.RGBA]: (self: LCH) => new Legacy(self.#getRGBArray(/* withAlpha= */ true), Format.RGBA),\n    [Format.HSL]: (self: LCH) => new HSL(...rgbToHsl(self.#getRGBArray(/* withAlpha= */ false)), self.alpha),\n    [Format.HSLA]: (self: LCH) => new HSL(...rgbToHsl(self.#getRGBArray(/* withAlpha= */ false)), self.alpha),\n    [Format.HWB]: (self: LCH) => new HWB(...rgbToHwb(self.#getRGBArray(/* withAlpha= */ false)), self.alpha),\n    [Format.HWBA]: (self: LCH) => new HWB(...rgbToHwb(self.#getRGBArray(/* withAlpha= */ false)), self.alpha),\n    [Format.LCH]: (self: LCH) => self,\n    [Format.OKLCH]: (self: LCH) => new Oklch(...ColorConverter.xyzd50ToOklch(...self.#toXyzd50()), self.alpha),\n    [Format.LAB]: (self: LCH) => new Lab(...ColorConverter.lchToLab(self.l, self.c, self.h), self.alpha),\n    [Format.OKLAB]: (self: LCH) =>\n        new Oklab(...ColorConverter.xyzd65ToOklab(...ColorConverter.xyzd50ToD65(...self.#toXyzd50())), self.alpha),\n\n    [Format.SRGB]: (self: LCH) =>\n        new ColorFunction(Format.SRGB, ...ColorConverter.xyzd50ToSrgb(...self.#toXyzd50()), self.alpha),\n    [Format.SRGB_LINEAR]: (self: LCH) =>\n        new ColorFunction(Format.SRGB_LINEAR, ...ColorConverter.xyzd50TosRGBLinear(...self.#toXyzd50()), self.alpha),\n    [Format.DISPLAY_P3]: (self: LCH) =>\n        new ColorFunction(Format.DISPLAY_P3, ...ColorConverter.xyzd50ToDisplayP3(...self.#toXyzd50()), self.alpha),\n    [Format.A98_RGB]: (self: LCH) =>\n        new ColorFunction(Format.A98_RGB, ...ColorConverter.xyzd50ToAdobeRGB(...self.#toXyzd50()), self.alpha),\n    [Format.PROPHOTO_RGB]: (self: LCH) =>\n        new ColorFunction(Format.PROPHOTO_RGB, ...ColorConverter.xyzd50ToProPhoto(...self.#toXyzd50()), self.alpha),\n    [Format.REC_2020]: (self: LCH) =>\n        new ColorFunction(Format.REC_2020, ...ColorConverter.xyzd50ToRec2020(...self.#toXyzd50()), self.alpha),\n    [Format.XYZ]: (self: LCH) =>\n        new ColorFunction(Format.XYZ, ...ColorConverter.xyzd50ToD65(...self.#toXyzd50()), self.alpha),\n    [Format.XYZ_D50]: (self: LCH) => new ColorFunction(Format.XYZ_D50, ...self.#toXyzd50(), self.alpha),\n    [Format.XYZ_D65]: (self: LCH) =>\n        new ColorFunction(Format.XYZ_D65, ...ColorConverter.xyzd50ToD65(...self.#toXyzd50()), self.alpha),\n  };\n\n  #toXyzd50(): Color3D {\n    return ColorConverter.labToXyzd50(...ColorConverter.lchToLab(this.l, this.c, this.h));\n  }\n\n  #getRGBArray(withAlpha: true): Color4DOr3D;\n  #getRGBArray(withAlpha: false): Color3D;\n  #getRGBArray(withAlpha = true): Color4DOr3D|Color3D {\n    const params = ColorConverter.xyzd50ToSrgb(...this.#toXyzd50());\n    if (withAlpha) {\n      return [...params, this.alpha ?? undefined];\n    }\n    return params;\n  }\n\n  constructor(l: number, c: number, h: number, alpha: number|null, authoredText?: string|undefined) {\n    this.#rawParams = [l, c, h];\n    this.l = clamp(l, {min: 0, max: 100});\n    c = equals(this.l, 0, WIDE_RANGE_EPSILON) || equals(this.l, 100, WIDE_RANGE_EPSILON) ? 0 : c;\n    this.c = clamp(c, {min: 0});\n    h = equals(c, 0) ? 0 : h;\n    this.h = normalizeHue(h);\n    this.alpha = clamp(alpha, {min: 0, max: 1});\n    this.#authoredText = authoredText;\n  }\n  asLegacyColor(): Legacy {\n    return this.as(Format.RGBA);\n  }\n  is<T extends Format>(format: T): this is ReturnType<ColorConversions[T]> {\n    return format === this.format();\n  }\n  as<T extends Format>(format: T): ReturnType<ColorConversions[T]> {\n    return LCH.#conversions[format](this) as ReturnType<ColorConversions[T]>;\n  }\n  equal(color: Color): boolean {\n    const lch = color.as(Format.LCH);\n    return equals(lch.l, this.l, WIDE_RANGE_EPSILON) && equals(lch.c, this.c) && equals(lch.h, this.h) &&\n        equals(lch.alpha, this.alpha);\n  }\n  format(): Format {\n    return Format.LCH;\n  }\n  setAlpha(alpha: number): Color {\n    return new LCH(this.l, this.c, this.h, alpha);\n  }\n  asString(format?: Format): string {\n    if (format) {\n      return this.as(format).asString();\n    }\n    return this.#stringify(this.l, this.c, this.h);\n  }\n  #stringify(l: number, c: number, h: number): string {\n    const alpha = this.alpha === null || equals(this.alpha, 1) ?\n        '' :\n        ` / ${Platform.StringUtilities.stringifyWithPrecision(this.alpha)}`;\n    return `lch(${Platform.StringUtilities.stringifyWithPrecision(l, 0)} ${\n        Platform.StringUtilities.stringifyWithPrecision(\n            c)} ${Platform.StringUtilities.stringifyWithPrecision(h)}${alpha})`;\n  }\n  getAuthoredText(): string|null {\n    return this.#authoredText ?? null;\n  }\n\n  getRawParameters(): Color3D {\n    return [...this.#rawParams];\n  }\n  getAsRawString(format?: Format): string {\n    if (format) {\n      return this.as(format).getAsRawString();\n    }\n    return this.#stringify(...this.#rawParams);\n  }\n  isGamutClipped(): boolean {\n    return false;\n  }\n  // See \"powerless\" component definitions in\n  // https://www.w3.org/TR/css-color-4/#specifying-lab-lch\n  isHuePowerless(): boolean {\n    return equals(this.c, 0);\n  }\n  static fromSpec(spec: ColorParameterSpec, text: string): LCH|null {\n    const L = parsePercentage(spec[0], [0, 100]) ?? parseNumber(spec[0]);\n    if (L === null) {\n      return null;\n    }\n    const c = parsePercentage(spec[1], [0, 150]) ?? parseNumber(spec[1]);\n    if (c === null) {\n      return null;\n    }\n    const h = parseAngle(spec[2]);\n    if (h === null) {\n      return null;\n    }\n    const alpha = parseAlpha(spec[3]);\n\n    return new LCH(L, c, h, alpha, text);\n  }\n}\n\nexport class Oklab implements Color {\n  readonly #rawParams: Color3D;\n  readonly l: number;\n  readonly a: number;\n  readonly b: number;\n  readonly alpha: number|null;\n  readonly #authoredText?: string;\n  readonly channels: [ColorChannel, ColorChannel, ColorChannel, ColorChannel] =\n      [ColorChannel.L, ColorChannel.A, ColorChannel.B, ColorChannel.ALPHA];\n\n  static readonly #conversions: ColorConversions<Oklab> = {\n    [Format.HEX]: (self: Oklab) => new Legacy(self.#getRGBArray(/* withAlpha= */ false), Format.HEX),\n    [Format.HEXA]: (self: Oklab) => new Legacy(self.#getRGBArray(/* withAlpha= */ true), Format.HEXA),\n    [Format.RGB]: (self: Oklab) => new Legacy(self.#getRGBArray(/* withAlpha= */ false), Format.RGB),\n    [Format.RGBA]: (self: Oklab) => new Legacy(self.#getRGBArray(/* withAlpha= */ true), Format.RGBA),\n    [Format.HSL]: (self: Oklab) => new HSL(...rgbToHsl(self.#getRGBArray(/* withAlpha= */ false)), self.alpha),\n    [Format.HSLA]: (self: Oklab) => new HSL(...rgbToHsl(self.#getRGBArray(/* withAlpha= */ false)), self.alpha),\n    [Format.HWB]: (self: Oklab) => new HWB(...rgbToHwb(self.#getRGBArray(/* withAlpha= */ false)), self.alpha),\n    [Format.HWBA]: (self: Oklab) => new HWB(...rgbToHwb(self.#getRGBArray(/* withAlpha= */ false)), self.alpha),\n    [Format.LCH]: (self: Oklab) =>\n        new LCH(...ColorConverter.labToLch(...ColorConverter.xyzd50ToLab(...self.#toXyzd50())), self.alpha),\n    [Format.OKLCH]: (self: Oklab) => new Oklch(...ColorConverter.xyzd50ToOklch(...self.#toXyzd50()), self.alpha),\n    [Format.LAB]: (self: Oklab) => new Lab(...ColorConverter.xyzd50ToLab(...self.#toXyzd50()), self.alpha),\n    [Format.OKLAB]: (self: Oklab) => self,\n\n    [Format.SRGB]: (self: Oklab) =>\n        new ColorFunction(Format.SRGB, ...ColorConverter.xyzd50ToSrgb(...self.#toXyzd50()), self.alpha),\n    [Format.SRGB_LINEAR]: (self: Oklab) =>\n        new ColorFunction(Format.SRGB_LINEAR, ...ColorConverter.xyzd50TosRGBLinear(...self.#toXyzd50()), self.alpha),\n    [Format.DISPLAY_P3]: (self: Oklab) =>\n        new ColorFunction(Format.DISPLAY_P3, ...ColorConverter.xyzd50ToDisplayP3(...self.#toXyzd50()), self.alpha),\n    [Format.A98_RGB]: (self: Oklab) =>\n        new ColorFunction(Format.A98_RGB, ...ColorConverter.xyzd50ToAdobeRGB(...self.#toXyzd50()), self.alpha),\n    [Format.PROPHOTO_RGB]: (self: Oklab) =>\n        new ColorFunction(Format.PROPHOTO_RGB, ...ColorConverter.xyzd50ToProPhoto(...self.#toXyzd50()), self.alpha),\n    [Format.REC_2020]: (self: Oklab) =>\n        new ColorFunction(Format.REC_2020, ...ColorConverter.xyzd50ToRec2020(...self.#toXyzd50()), self.alpha),\n    [Format.XYZ]: (self: Oklab) =>\n        new ColorFunction(Format.XYZ, ...ColorConverter.xyzd50ToD65(...self.#toXyzd50()), self.alpha),\n    [Format.XYZ_D50]: (self: Oklab) => new ColorFunction(Format.XYZ_D50, ...self.#toXyzd50(), self.alpha),\n    [Format.XYZ_D65]: (self: Oklab) =>\n        new ColorFunction(Format.XYZ_D65, ...ColorConverter.xyzd50ToD65(...self.#toXyzd50()), self.alpha),\n  };\n\n  #toXyzd50(): Color3D {\n    return ColorConverter.xyzd65ToD50(...ColorConverter.oklabToXyzd65(this.l, this.a, this.b));\n  }\n\n  #getRGBArray(withAlpha: true): Color4DOr3D;\n  #getRGBArray(withAlpha: false): Color3D;\n  #getRGBArray(withAlpha = true): Color4DOr3D|Color3D {\n    const params = ColorConverter.xyzd50ToSrgb(...this.#toXyzd50());\n    if (withAlpha) {\n      return [...params, this.alpha ?? undefined];\n    }\n    return params;\n  }\n\n  constructor(l: number, a: number, b: number, alpha: number|null, authoredText?: string|undefined) {\n    this.#rawParams = [l, a, b];\n    this.l = clamp(l, {min: 0, max: 1});\n    if (equals(this.l, 0) || equals(this.l, 1)) {\n      a = b = 0;\n    }\n    this.a = a;\n    this.b = b;\n    this.alpha = clamp(alpha, {min: 0, max: 1});\n    this.#authoredText = authoredText;\n  }\n  asLegacyColor(): Legacy {\n    return this.as(Format.RGBA);\n  }\n  is<T extends Format>(format: T): this is ReturnType<ColorConversions[T]> {\n    return format === this.format();\n  }\n  as<T extends Format>(format: T): ReturnType<ColorConversions[T]> {\n    return Oklab.#conversions[format](this) as ReturnType<ColorConversions[T]>;\n  }\n  equal(color: Color): boolean {\n    const oklab = color.as(Format.OKLAB);\n    return equals(oklab.l, this.l) && equals(oklab.a, this.a) && equals(oklab.b, this.b) &&\n        equals(oklab.alpha, this.alpha);\n  }\n  format(): Format {\n    return Format.OKLAB;\n  }\n  setAlpha(alpha: number): Color {\n    return new Oklab(this.l, this.a, this.b, alpha);\n  }\n  asString(format?: Format): string {\n    if (format) {\n      return this.as(format).asString();\n    }\n    return this.#stringify(this.l, this.a, this.b);\n  }\n  #stringify(l: number, a: number, b: number): string {\n    const alpha = this.alpha === null || equals(this.alpha, 1) ?\n        '' :\n        ` / ${Platform.StringUtilities.stringifyWithPrecision(this.alpha)}`;\n    return `oklab(${Platform.StringUtilities.stringifyWithPrecision(l)} ${\n        Platform.StringUtilities.stringifyWithPrecision(\n            a)} ${Platform.StringUtilities.stringifyWithPrecision(b)}${alpha})`;\n  }\n  getAuthoredText(): string|null {\n    return this.#authoredText ?? null;\n  }\n\n  getRawParameters(): Color3D {\n    return [...this.#rawParams];\n  }\n  getAsRawString(format?: Format): string {\n    if (format) {\n      return this.as(format).getAsRawString();\n    }\n    return this.#stringify(...this.#rawParams);\n  }\n  isGamutClipped(): boolean {\n    return false;\n  }\n\n  static fromSpec(spec: ColorParameterSpec, text: string): Oklab|null {\n    const L = parsePercentage(spec[0], [0, 1]) ?? parseNumber(spec[0]);\n    if (L === null) {\n      return null;\n    }\n    const a = parsePercentage(spec[1], [0, 0.4]) ?? parseNumber(spec[1]);\n    if (a === null) {\n      return null;\n    }\n    const b = parsePercentage(spec[2], [0, 0.4]) ?? parseNumber(spec[2]);\n    if (b === null) {\n      return null;\n    }\n    const alpha = parseAlpha(spec[3]);\n\n    return new Oklab(L, a, b, alpha, text);\n  }\n}\n\nexport class Oklch implements Color {\n  readonly #rawParams: Color3D;\n  readonly l: number;\n  readonly c: number;\n  readonly h: number;\n  readonly alpha: number|null;\n  readonly #authoredText?: string;\n  readonly channels: [ColorChannel, ColorChannel, ColorChannel, ColorChannel] =\n      [ColorChannel.L, ColorChannel.C, ColorChannel.H, ColorChannel.ALPHA];\n\n  static readonly #conversions: ColorConversions<Oklch> = {\n    [Format.HEX]: (self: Oklch) => new Legacy(self.#getRGBArray(/* withAlpha= */ false), Format.HEX),\n    [Format.HEXA]: (self: Oklch) => new Legacy(self.#getRGBArray(/* withAlpha= */ true), Format.HEXA),\n    [Format.RGB]: (self: Oklch) => new Legacy(self.#getRGBArray(/* withAlpha= */ false), Format.RGB),\n    [Format.RGBA]: (self: Oklch) => new Legacy(self.#getRGBArray(/* withAlpha= */ true), Format.RGBA),\n    [Format.HSL]: (self: Oklch) => new HSL(...rgbToHsl(self.#getRGBArray(/* withAlpha= */ false)), self.alpha),\n    [Format.HSLA]: (self: Oklch) => new HSL(...rgbToHsl(self.#getRGBArray(/* withAlpha= */ false)), self.alpha),\n    [Format.HWB]: (self: Oklch) => new HWB(...rgbToHwb(self.#getRGBArray(/* withAlpha= */ false)), self.alpha),\n    [Format.HWBA]: (self: Oklch) => new HWB(...rgbToHwb(self.#getRGBArray(/* withAlpha= */ false)), self.alpha),\n    [Format.LCH]: (self: Oklch) =>\n        new LCH(...ColorConverter.labToLch(...ColorConverter.xyzd50ToLab(...self.#toXyzd50())), self.alpha),\n    [Format.OKLCH]: (self: Oklch) => self,\n    [Format.LAB]: (self: Oklch) => new Lab(...ColorConverter.xyzd50ToLab(...self.#toXyzd50()), self.alpha),\n    [Format.OKLAB]: (self: Oklch) =>\n        new Oklab(...ColorConverter.xyzd65ToOklab(...ColorConverter.xyzd50ToD65(...self.#toXyzd50())), self.alpha),\n    [Format.SRGB]: (self: Oklch) =>\n        new ColorFunction(Format.SRGB, ...ColorConverter.xyzd50ToSrgb(...self.#toXyzd50()), self.alpha),\n    [Format.SRGB_LINEAR]: (self: Oklch) =>\n        new ColorFunction(Format.SRGB_LINEAR, ...ColorConverter.xyzd50TosRGBLinear(...self.#toXyzd50()), self.alpha),\n    [Format.DISPLAY_P3]: (self: Oklch) =>\n        new ColorFunction(Format.DISPLAY_P3, ...ColorConverter.xyzd50ToDisplayP3(...self.#toXyzd50()), self.alpha),\n    [Format.A98_RGB]: (self: Oklch) =>\n        new ColorFunction(Format.A98_RGB, ...ColorConverter.xyzd50ToAdobeRGB(...self.#toXyzd50()), self.alpha),\n    [Format.PROPHOTO_RGB]: (self: Oklch) =>\n        new ColorFunction(Format.PROPHOTO_RGB, ...ColorConverter.xyzd50ToProPhoto(...self.#toXyzd50()), self.alpha),\n    [Format.REC_2020]: (self: Oklch) =>\n        new ColorFunction(Format.REC_2020, ...ColorConverter.xyzd50ToRec2020(...self.#toXyzd50()), self.alpha),\n    [Format.XYZ]: (self: Oklch) =>\n        new ColorFunction(Format.XYZ, ...ColorConverter.xyzd50ToD65(...self.#toXyzd50()), self.alpha),\n    [Format.XYZ_D50]: (self: Oklch) => new ColorFunction(Format.XYZ_D50, ...self.#toXyzd50(), self.alpha),\n    [Format.XYZ_D65]: (self: Oklch) =>\n        new ColorFunction(Format.XYZ_D65, ...ColorConverter.xyzd50ToD65(...self.#toXyzd50()), self.alpha),\n  };\n\n  #toXyzd50(): Color3D {\n    return ColorConverter.oklchToXyzd50(this.l, this.c, this.h);\n  }\n\n  #getRGBArray(withAlpha: true): Color4DOr3D;\n  #getRGBArray(withAlpha: false): Color3D;\n  #getRGBArray(withAlpha = true): Color4DOr3D|Color3D {\n    const params = ColorConverter.xyzd50ToSrgb(...this.#toXyzd50());\n    if (withAlpha) {\n      return [...params, this.alpha ?? undefined];\n    }\n    return params;\n  }\n\n  constructor(l: number, c: number, h: number, alpha: number|null, authoredText?: string|undefined) {\n    this.#rawParams = [l, c, h];\n    this.l = clamp(l, {min: 0, max: 1});\n    c = equals(this.l, 0) || equals(this.l, 1) ? 0 : c;\n    this.c = clamp(c, {min: 0});\n    h = equals(c, 0) ? 0 : h;\n    this.h = normalizeHue(h);\n    this.alpha = clamp(alpha, {min: 0, max: 1});\n    this.#authoredText = authoredText;\n  }\n  asLegacyColor(): Legacy {\n    return this.as(Format.RGBA);\n  }\n  is<T extends Format>(format: T): this is ReturnType<ColorConversions[T]> {\n    return format === this.format();\n  }\n  as<T extends Format>(format: T): ReturnType<ColorConversions[T]> {\n    return Oklch.#conversions[format](this) as ReturnType<ColorConversions[T]>;\n  }\n  equal(color: Color): boolean {\n    const oklch = color.as(Format.OKLCH);\n    return equals(oklch.l, this.l) && equals(oklch.c, this.c) && equals(oklch.h, this.h) &&\n        equals(oklch.alpha, this.alpha);\n  }\n  format(): Format {\n    return Format.OKLCH;\n  }\n  setAlpha(alpha: number): Color {\n    return new Oklch(this.l, this.c, this.h, alpha);\n  }\n  asString(format?: Format): string {\n    if (format) {\n      return this.as(format).asString();\n    }\n    return this.#stringify(this.l, this.c, this.h);\n  }\n  #stringify(l: number, c: number, h: number): string {\n    const alpha = this.alpha === null || equals(this.alpha, 1) ?\n        '' :\n        ` / ${Platform.StringUtilities.stringifyWithPrecision(this.alpha)}`;\n    return `oklch(${Platform.StringUtilities.stringifyWithPrecision(l)} ${\n        Platform.StringUtilities.stringifyWithPrecision(\n            c)} ${Platform.StringUtilities.stringifyWithPrecision(h)}${alpha})`;\n  }\n  getAuthoredText(): string|null {\n    return this.#authoredText ?? null;\n  }\n\n  getRawParameters(): Color3D {\n    return [...this.#rawParams];\n  }\n  getAsRawString(format?: Format): string {\n    if (format) {\n      return this.as(format).getAsRawString();\n    }\n    return this.#stringify(...this.#rawParams);\n  }\n  isGamutClipped(): boolean {\n    return false;\n  }\n\n  static fromSpec(spec: ColorParameterSpec, text: string): Oklch|null {\n    const L = parsePercentage(spec[0], [0, 1]) ?? parseNumber(spec[0]);\n    if (L === null) {\n      return null;\n    }\n    const c = parsePercentage(spec[1], [0, 0.4]) ?? parseNumber(spec[1]);\n    if (c === null) {\n      return null;\n    }\n    const h = parseAngle(spec[2]);\n    if (h === null) {\n      return null;\n    }\n    const alpha = parseAlpha(spec[3]);\n\n    return new Oklch(L, c, h, alpha, text);\n  }\n}\n\nexport class ColorFunction implements Color {\n  readonly #rawParams: Color3D;\n  readonly p0: number;\n  readonly p1: number;\n  readonly p2: number;\n  readonly alpha: number|null;\n  readonly colorSpace: ColorSpace;\n  readonly #authoredText?: string;\n  get channels(): [ColorChannel, ColorChannel, ColorChannel, ColorChannel] {\n    return this.isXYZ() ? [ColorChannel.X, ColorChannel.Y, ColorChannel.Z, ColorChannel.ALPHA] :\n                          [ColorChannel.R, ColorChannel.G, ColorChannel.B, ColorChannel.ALPHA];\n  }\n\n  static readonly #conversions: ColorConversions<ColorFunction> = {\n    [Format.HEX]: (self: ColorFunction) => new Legacy(self.#getRGBArray(/* withAlpha= */ false), Format.HEX),\n    [Format.HEXA]: (self: ColorFunction) => new Legacy(self.#getRGBArray(/* withAlpha= */ true), Format.HEXA),\n    [Format.RGB]: (self: ColorFunction) => new Legacy(self.#getRGBArray(/* withAlpha= */ false), Format.RGB),\n    [Format.RGBA]: (self: ColorFunction) => new Legacy(self.#getRGBArray(/* withAlpha= */ true), Format.RGBA),\n    [Format.HSL]: (self: ColorFunction) => new HSL(...rgbToHsl(self.#getRGBArray(/* withAlpha= */ false)), self.alpha),\n    [Format.HSLA]: (self: ColorFunction) => new HSL(...rgbToHsl(self.#getRGBArray(/* withAlpha= */ false)), self.alpha),\n    [Format.HWB]: (self: ColorFunction) => new HWB(...rgbToHwb(self.#getRGBArray(/* withAlpha= */ false)), self.alpha),\n    [Format.HWBA]: (self: ColorFunction) => new HWB(...rgbToHwb(self.#getRGBArray(/* withAlpha= */ false)), self.alpha),\n    [Format.LCH]: (self: ColorFunction) =>\n        new LCH(...ColorConverter.labToLch(...ColorConverter.xyzd50ToLab(...self.#toXyzd50())), self.alpha),\n    [Format.OKLCH]: (self: ColorFunction) =>\n        new Oklch(...ColorConverter.xyzd50ToOklch(...self.#toXyzd50()), self.alpha),\n    [Format.LAB]: (self: ColorFunction) => new Lab(...ColorConverter.xyzd50ToLab(...self.#toXyzd50()), self.alpha),\n    [Format.OKLAB]: (self: ColorFunction) =>\n        new Oklab(...ColorConverter.xyzd65ToOklab(...ColorConverter.xyzd50ToD65(...self.#toXyzd50())), self.alpha),\n\n    [Format.SRGB]: (self: ColorFunction) =>\n        new ColorFunction(Format.SRGB, ...ColorConverter.xyzd50ToSrgb(...self.#toXyzd50()), self.alpha),\n    [Format.SRGB_LINEAR]: (self: ColorFunction) =>\n        new ColorFunction(Format.SRGB_LINEAR, ...ColorConverter.xyzd50TosRGBLinear(...self.#toXyzd50()), self.alpha),\n    [Format.DISPLAY_P3]: (self: ColorFunction) =>\n        new ColorFunction(Format.DISPLAY_P3, ...ColorConverter.xyzd50ToDisplayP3(...self.#toXyzd50()), self.alpha),\n    [Format.A98_RGB]: (self: ColorFunction) =>\n        new ColorFunction(Format.A98_RGB, ...ColorConverter.xyzd50ToAdobeRGB(...self.#toXyzd50()), self.alpha),\n    [Format.PROPHOTO_RGB]: (self: ColorFunction) =>\n        new ColorFunction(Format.PROPHOTO_RGB, ...ColorConverter.xyzd50ToProPhoto(...self.#toXyzd50()), self.alpha),\n    [Format.REC_2020]: (self: ColorFunction) =>\n        new ColorFunction(Format.REC_2020, ...ColorConverter.xyzd50ToRec2020(...self.#toXyzd50()), self.alpha),\n    [Format.XYZ]: (self: ColorFunction) =>\n        new ColorFunction(Format.XYZ, ...ColorConverter.xyzd50ToD65(...self.#toXyzd50()), self.alpha),\n    [Format.XYZ_D50]: (self: ColorFunction) => new ColorFunction(Format.XYZ_D50, ...self.#toXyzd50(), self.alpha),\n    [Format.XYZ_D65]: (self: ColorFunction) =>\n        new ColorFunction(Format.XYZ_D65, ...ColorConverter.xyzd50ToD65(...self.#toXyzd50()), self.alpha),\n  };\n\n  #toXyzd50(): Color3D {\n    // With color(), out-of-gamut inputs are to be used for intermediate computations\n    const [p0, p1, p2] = this.#rawParams;\n    switch (this.colorSpace) {\n      case Format.SRGB:\n        return ColorConverter.srgbToXyzd50(p0, p1, p2);\n      case Format.SRGB_LINEAR:\n        return ColorConverter.srgbLinearToXyzd50(p0, p1, p2);\n      case Format.DISPLAY_P3:\n        return ColorConverter.displayP3ToXyzd50(p0, p1, p2);\n      case Format.A98_RGB:\n        return ColorConverter.adobeRGBToXyzd50(p0, p1, p2);\n      case Format.PROPHOTO_RGB:\n        return ColorConverter.proPhotoToXyzd50(p0, p1, p2);\n      case Format.REC_2020:\n        return ColorConverter.rec2020ToXyzd50(p0, p1, p2);\n      case Format.XYZ_D50:\n        return [p0, p1, p2];\n      case Format.XYZ:\n      case Format.XYZ_D65:\n        return ColorConverter.xyzd65ToD50(p0, p1, p2);\n    }\n    throw new Error('Invalid color space');\n  }\n\n  #getRGBArray(withAlpha: true): Color4DOr3D;\n  #getRGBArray(withAlpha: false): Color3D;\n  #getRGBArray(withAlpha = true): Color4DOr3D|Color3D {\n    // With color(), out-of-gamut inputs are to be used for intermediate computations\n    const [p0, p1, p2] = this.#rawParams;\n    const params: Color3D =\n        this.colorSpace === Format.SRGB ? [p0, p1, p2] : [...ColorConverter.xyzd50ToSrgb(...this.#toXyzd50())];\n    if (withAlpha) {\n      return [...params, this.alpha ?? undefined];\n    }\n    return params;\n  }\n\n  constructor(\n      colorSpace: ColorSpace, p0: number, p1: number, p2: number, alpha: number|null, authoredText?: string|undefined) {\n    this.#rawParams = [p0, p1, p2];\n    this.colorSpace = colorSpace;\n    this.#authoredText = authoredText;\n    if (this.colorSpace !== Format.XYZ_D50 && this.colorSpace !== Format.XYZ_D65 && this.colorSpace !== Format.XYZ) {\n      p0 = clamp(p0, {min: 0, max: 1});\n      p1 = clamp(p1, {min: 0, max: 1});\n      p2 = clamp(p2, {min: 0, max: 1});\n    }\n\n    this.p0 = p0;\n    this.p1 = p1;\n    this.p2 = p2;\n    this.alpha = clamp(alpha, {min: 0, max: 1});\n  }\n  asLegacyColor(): Legacy {\n    return this.as(Format.RGBA);\n  }\n  is<T extends Format>(format: T): this is ReturnType<ColorConversions[T]> {\n    return format === this.format();\n  }\n  as<T extends Format>(format: T): ReturnType<ColorConversions[T]> {\n    if (this.colorSpace === format) {\n      return this as ReturnType<ColorConversions[T]>;\n    }\n    return ColorFunction.#conversions[format](this) as ReturnType<ColorConversions[T]>;\n  }\n  equal(color: Color): boolean {\n    const space = color.as(this.colorSpace);\n    return equals(this.p0, space.p0) && equals(this.p1, space.p1) && equals(this.p2, space.p2) &&\n        equals(this.alpha, space.alpha);\n  }\n  format(): Format {\n    return this.colorSpace;\n  }\n  setAlpha(alpha: number): Color {\n    return new ColorFunction(this.colorSpace, this.p0, this.p1, this.p2, alpha);\n  }\n  asString(format?: Format): string {\n    if (format) {\n      return this.as(format).asString();\n    }\n    return this.#stringify(this.p0, this.p1, this.p2);\n  }\n  #stringify(p0: number, p1: number, p2: number): string {\n    const alpha = this.alpha === null || equals(this.alpha, 1) ?\n        '' :\n        ` / ${Platform.StringUtilities.stringifyWithPrecision(this.alpha)}`;\n    return `color(${this.colorSpace} ${Platform.StringUtilities.stringifyWithPrecision(p0)} ${\n        Platform.StringUtilities.stringifyWithPrecision(\n            p1)} ${Platform.StringUtilities.stringifyWithPrecision(p2)}${alpha})`;\n  }\n  getAuthoredText(): string|null {\n    return this.#authoredText ?? null;\n  }\n\n  getRawParameters(): Color3D {\n    return [...this.#rawParams];\n  }\n  getAsRawString(format?: Format): string {\n    if (format) {\n      return this.as(format).getAsRawString();\n    }\n    return this.#stringify(...this.#rawParams);\n  }\n  isGamutClipped(): boolean {\n    if (this.colorSpace !== Format.XYZ_D50 && this.colorSpace !== Format.XYZ_D65 && this.colorSpace !== Format.XYZ) {\n      return !equals(this.#rawParams, [this.p0, this.p1, this.p2]);\n    }\n    return false;\n  }\n\n  isXYZ(): boolean {\n    switch (this.colorSpace) {\n      case Format.XYZ:\n      case Format.XYZ_D50:\n      case Format.XYZ_D65:\n        return true;\n    }\n    return false;\n  }\n\n  /**\n   * Parses given `color()` function definition and returns the `Color` object.\n   * We want to special case its parsing here because it's a bit different\n   * than other color functions: rgb, lch etc. accepts 3 arguments with\n   * optional alpha. This accepts 4 arguments with optional alpha.\n   *\n   * Instead of making `splitColorFunctionParameters` work for this case too\n   * I've decided to implement it specifically.\n   * @param authoredText Original definition of the color with `color`\n   * @param parametersText Inside of the `color()` function. ex, `display-p3 0.1 0.2 0.3 / 0%`\n   * @returns `Color` object\n   */\n  static fromSpec(authoredText: string, parametersWithAlphaText: string): ColorFunction|null {\n    const [parametersText, alphaText] = parametersWithAlphaText.split('/', 2);\n    const parameters = parametersText.trim().split(/\\s+/);\n    const [colorSpaceText, ...remainingParams] = parameters;\n    const colorSpace = getColorSpace(colorSpaceText);\n    // Color space is not known to us, do not parse the Color.\n    if (!colorSpace) {\n      return null;\n    }\n\n    // `color(<color-space>)` is a valid syntax\n    if (remainingParams.length === 0 && alphaText === undefined) {\n      return new ColorFunction(colorSpace, 0, 0, 0, null, authoredText);\n    }\n\n    // Check if it contains `/ <alpha>` part, if so, it should be at the end\n    if (remainingParams.length === 0 && alphaText !== undefined && alphaText.trim().split(/\\s+/).length > 1) {\n      // Invalid syntax: like `color(<space> / <alpha> <number>)`\n      return null;\n    }\n\n    // `color` cannot contain more than 3 parameters without alpha\n    if (remainingParams.length > 3) {\n      return null;\n    }\n\n    // Replace `none`s with 0s\n    const nonesReplacedParams = remainingParams.map(param => param === 'none' ? '0' : param);\n\n    // At this point, we know that all the values are there so we can\n    // safely try to parse all the values as number or percentage\n    const values = nonesReplacedParams.map(param => parsePercentOrNumber(param, [0, 1]));\n    const containsNull = values.includes(null);\n    // At least one value is malformatted (not a number or percentage)\n    if (containsNull) {\n      return null;\n    }\n\n    const alphaValue = alphaText ? parsePercentOrNumber(alphaText, [0, 1]) ?? 1 : 1;\n\n    // Depending on the color space\n    // this either reflects `rgb` parameters in that color space\n    // or `xyz` parameters in the given `xyz` space.\n    const rgbOrXyza: Color4D = [\n      values[0] ?? 0,\n      values[1] ?? 0,\n      values[2] ?? 0,\n      alphaValue,\n    ];\n\n    return new ColorFunction(colorSpace, ...rgbOrXyza, authoredText);\n  }\n}\n\nexport class HSL implements Color {\n  readonly h: number;\n  readonly s: number;\n  readonly l: number;\n  readonly alpha: number|null;\n  readonly #rawParams: Color3D;\n  #authoredText: string|undefined;\n  readonly channels: [ColorChannel, ColorChannel, ColorChannel, ColorChannel] =\n      [ColorChannel.H, ColorChannel.S, ColorChannel.L, ColorChannel.ALPHA];\n\n  static readonly #conversions: ColorConversions<HSL> = {\n    [Format.HEX]: (self: HSL) => new Legacy(self.#getRGBArray(/* withAlpha= */ false), Format.HEX),\n    [Format.HEXA]: (self: HSL) => new Legacy(self.#getRGBArray(/* withAlpha= */ true), Format.HEXA),\n    [Format.RGB]: (self: HSL) => new Legacy(self.#getRGBArray(/* withAlpha= */ false), Format.RGB),\n    [Format.RGBA]: (self: HSL) => new Legacy(self.#getRGBArray(/* withAlpha= */ true), Format.RGBA),\n    [Format.HSL]: (self: HSL) => self,\n    [Format.HSLA]: (self: HSL) => self,\n    [Format.HWB]: (self: HSL) => new HWB(...rgbToHwb(self.#getRGBArray(/* withAlpha= */ false)), self.alpha),\n    [Format.HWBA]: (self: HSL) => new HWB(...rgbToHwb(self.#getRGBArray(/* withAlpha= */ false)), self.alpha),\n    [Format.LCH]: (self: HSL) =>\n        new LCH(...ColorConverter.labToLch(...ColorConverter.xyzd50ToLab(...self.#toXyzd50())), self.alpha),\n    [Format.OKLCH]: (self: HSL) => new Oklch(...ColorConverter.xyzd50ToOklch(...self.#toXyzd50()), self.alpha),\n    [Format.LAB]: (self: HSL) => new Lab(...ColorConverter.xyzd50ToLab(...self.#toXyzd50()), self.alpha),\n    [Format.OKLAB]: (self: HSL) =>\n        new Oklab(...ColorConverter.xyzd65ToOklab(...ColorConverter.xyzd50ToD65(...self.#toXyzd50())), self.alpha),\n\n    [Format.SRGB]: (self: HSL) =>\n        new ColorFunction(Format.SRGB, ...ColorConverter.xyzd50ToSrgb(...self.#toXyzd50()), self.alpha),\n    [Format.SRGB_LINEAR]: (self: HSL) =>\n        new ColorFunction(Format.SRGB_LINEAR, ...ColorConverter.xyzd50TosRGBLinear(...self.#toXyzd50()), self.alpha),\n    [Format.DISPLAY_P3]: (self: HSL) =>\n        new ColorFunction(Format.DISPLAY_P3, ...ColorConverter.xyzd50ToDisplayP3(...self.#toXyzd50()), self.alpha),\n    [Format.A98_RGB]: (self: HSL) =>\n        new ColorFunction(Format.A98_RGB, ...ColorConverter.xyzd50ToAdobeRGB(...self.#toXyzd50()), self.alpha),\n    [Format.PROPHOTO_RGB]: (self: HSL) =>\n        new ColorFunction(Format.PROPHOTO_RGB, ...ColorConverter.xyzd50ToProPhoto(...self.#toXyzd50()), self.alpha),\n    [Format.REC_2020]: (self: HSL) =>\n        new ColorFunction(Format.REC_2020, ...ColorConverter.xyzd50ToRec2020(...self.#toXyzd50()), self.alpha),\n    [Format.XYZ]: (self: HSL) =>\n        new ColorFunction(Format.XYZ, ...ColorConverter.xyzd50ToD65(...self.#toXyzd50()), self.alpha),\n    [Format.XYZ_D50]: (self: HSL) => new ColorFunction(Format.XYZ_D50, ...self.#toXyzd50(), self.alpha),\n    [Format.XYZ_D65]: (self: HSL) =>\n        new ColorFunction(Format.XYZ_D65, ...ColorConverter.xyzd50ToD65(...self.#toXyzd50()), self.alpha),\n  };\n\n  #getRGBArray(withAlpha: true): Color4DOr3D;\n  #getRGBArray(withAlpha: false): Color3D;\n  #getRGBArray(withAlpha = true): Color4DOr3D|Color3D {\n    const rgb = hsl2rgb([this.h, this.s, this.l, 0]);\n    if (withAlpha) {\n      return [rgb[0], rgb[1], rgb[2], this.alpha ?? undefined];\n    }\n    return [rgb[0], rgb[1], rgb[2]];\n  }\n\n  #toXyzd50(): Color3D {\n    const rgb = this.#getRGBArray(false);\n    return ColorConverter.srgbToXyzd50(rgb[0], rgb[1], rgb[2]);\n  }\n\n  constructor(h: number, s: number, l: number, alpha: number|null|undefined, authoredText?: string) {\n    this.#rawParams = [h, s, l];\n    this.l = clamp(l, {min: 0, max: 1});\n    s = equals(this.l, 0) || equals(this.l, 1) ? 0 : s;\n    this.s = clamp(s, {min: 0, max: 1});\n    h = equals(this.s, 0) ? 0 : h;\n    this.h = normalizeHue(h * 360) / 360;\n    this.alpha = clamp(alpha ?? null, {min: 0, max: 1});\n    this.#authoredText = authoredText;\n  }\n\n  equal(color: Color): boolean {\n    const hsl = color.as(Format.HSL);\n    return equals(this.h, hsl.h) && equals(this.s, hsl.s) && equals(this.l, hsl.l) && equals(this.alpha, hsl.alpha);\n  }\n  asString(format?: Format|undefined): string {\n    if (format) {\n      return this.as(format).asString();\n    }\n    return this.#stringify(this.h, this.s, this.l);\n  }\n  #stringify(h: number, s: number, l: number): string {\n    const start = Platform.StringUtilities.sprintf(\n        'hsl(%sdeg %s% %s%', Platform.StringUtilities.stringifyWithPrecision(h * 360),\n        Platform.StringUtilities.stringifyWithPrecision(s * 100),\n        Platform.StringUtilities.stringifyWithPrecision(l * 100));\n    if (this.alpha !== null && this.alpha !== 1) {\n      return start +\n          Platform.StringUtilities.sprintf(\n              ' / %s%)', Platform.StringUtilities.stringifyWithPrecision(this.alpha * 100));\n    }\n    return start + ')';\n  }\n  setAlpha(alpha: number): HSL {\n    return new HSL(this.h, this.s, this.l, alpha);\n  }\n  format(): Format {\n    return this.alpha === null || this.alpha === 1 ? Format.HSL : Format.HSLA;\n  }\n  is<T extends Format>(format: T): this is ReturnType<ColorConversions[T]> {\n    return format === this.format();\n  }\n  as<T extends Format>(format: T): ReturnType<ColorConversions[T]> {\n    if (format === this.format()) {\n      return this as ReturnType<ColorConversions[T]>;\n    }\n    return HSL.#conversions[format](this) as ReturnType<ColorConversions[T]>;\n  }\n  asLegacyColor(): Legacy {\n    return this.as(Format.RGBA);\n  }\n  getAuthoredText(): string|null {\n    return this.#authoredText ?? null;\n  }\n  getRawParameters(): Color3D {\n    return [...this.#rawParams];\n  }\n  getAsRawString(format?: Format): string {\n    if (format) {\n      return this.as(format).getAsRawString();\n    }\n    return this.#stringify(...this.#rawParams);\n  }\n  isGamutClipped(): boolean {\n    return !lessOrEquals(this.#rawParams[1], 1) || !lessOrEquals(0, this.#rawParams[1]);\n  }\n\n  static fromSpec(spec: ColorParameterSpec, text: string): HSL|null {\n    const h = parseHueNumeric(spec[0]);\n    if (h === null) {\n      return null;\n    }\n    const s = parseSatLightNumeric(spec[1]);\n    if (s === null) {\n      return null;\n    }\n    const l = parseSatLightNumeric(spec[2]);\n    if (l === null) {\n      return null;\n    }\n    const alpha = parseAlpha(spec[3]);\n\n    return new HSL(h, s, l, alpha, text);\n  }\n\n  hsva(): Color4D {\n    const s = this.s * (this.l < 0.5 ? this.l : 1 - this.l);\n    return [this.h, s !== 0 ? 2 * s / (this.l + s) : 0, (this.l + s), this.alpha ?? 1];\n  }\n  canonicalHSLA(): number[] {\n    return [Math.round(this.h * 360), Math.round(this.s * 100), Math.round(this.l * 100), this.alpha ?? 1];\n  }\n}\n\nexport class HWB implements Color {\n  readonly h: number;\n  readonly w: number;\n  readonly b: number;\n  readonly alpha: number|null;\n  readonly #rawParams: Color3D;\n  #authoredText: string|undefined;\n  readonly channels: [ColorChannel, ColorChannel, ColorChannel, ColorChannel] =\n      [ColorChannel.H, ColorChannel.W, ColorChannel.B, ColorChannel.ALPHA];\n\n  static readonly #conversions: ColorConversions<HWB> = {\n    [Format.HEX]: (self: HWB) => new Legacy(self.#getRGBArray(/* withAlpha= */ false), Format.HEX),\n    [Format.HEXA]: (self: HWB) => new Legacy(self.#getRGBArray(/* withAlpha= */ true), Format.HEXA),\n    [Format.RGB]: (self: HWB) => new Legacy(self.#getRGBArray(/* withAlpha= */ false), Format.RGB),\n    [Format.RGBA]: (self: HWB) => new Legacy(self.#getRGBArray(/* withAlpha= */ true), Format.RGBA),\n    [Format.HSL]: (self: HWB) => new HSL(...rgbToHsl(self.#getRGBArray(/* withAlpha= */ false)), self.alpha),\n    [Format.HSLA]: (self: HWB) => new HSL(...rgbToHsl(self.#getRGBArray(/* withAlpha= */ false)), self.alpha),\n    [Format.HWB]: (self: HWB) => self,\n    [Format.HWBA]: (self: HWB) => self,\n    [Format.LCH]: (self: HWB) =>\n        new LCH(...ColorConverter.labToLch(...ColorConverter.xyzd50ToLab(...self.#toXyzd50())), self.alpha),\n    [Format.OKLCH]: (self: HWB) => new Oklch(...ColorConverter.xyzd50ToOklch(...self.#toXyzd50()), self.alpha),\n    [Format.LAB]: (self: HWB) => new Lab(...ColorConverter.xyzd50ToLab(...self.#toXyzd50()), self.alpha),\n    [Format.OKLAB]: (self: HWB) =>\n        new Oklab(...ColorConverter.xyzd65ToOklab(...ColorConverter.xyzd50ToD65(...self.#toXyzd50())), self.alpha),\n\n    [Format.SRGB]: (self: HWB) =>\n        new ColorFunction(Format.SRGB, ...ColorConverter.xyzd50ToSrgb(...self.#toXyzd50()), self.alpha),\n    [Format.SRGB_LINEAR]: (self: HWB) =>\n        new ColorFunction(Format.SRGB_LINEAR, ...ColorConverter.xyzd50TosRGBLinear(...self.#toXyzd50()), self.alpha),\n    [Format.DISPLAY_P3]: (self: HWB) =>\n        new ColorFunction(Format.DISPLAY_P3, ...ColorConverter.xyzd50ToDisplayP3(...self.#toXyzd50()), self.alpha),\n    [Format.A98_RGB]: (self: HWB) =>\n        new ColorFunction(Format.A98_RGB, ...ColorConverter.xyzd50ToAdobeRGB(...self.#toXyzd50()), self.alpha),\n    [Format.PROPHOTO_RGB]: (self: HWB) =>\n        new ColorFunction(Format.PROPHOTO_RGB, ...ColorConverter.xyzd50ToProPhoto(...self.#toXyzd50()), self.alpha),\n    [Format.REC_2020]: (self: HWB) =>\n        new ColorFunction(Format.REC_2020, ...ColorConverter.xyzd50ToRec2020(...self.#toXyzd50()), self.alpha),\n    [Format.XYZ]: (self: HWB) =>\n        new ColorFunction(Format.XYZ, ...ColorConverter.xyzd50ToD65(...self.#toXyzd50()), self.alpha),\n    [Format.XYZ_D50]: (self: HWB) => new ColorFunction(Format.XYZ_D50, ...self.#toXyzd50(), self.alpha),\n    [Format.XYZ_D65]: (self: HWB) =>\n        new ColorFunction(Format.XYZ_D65, ...ColorConverter.xyzd50ToD65(...self.#toXyzd50()), self.alpha),\n  };\n\n  #getRGBArray(withAlpha: true): Color4DOr3D;\n  #getRGBArray(withAlpha: false): Color3D;\n  #getRGBArray(withAlpha = true): Color4DOr3D|Color3D {\n    const rgb = hwb2rgb([this.h, this.w, this.b, 0]);\n    if (withAlpha) {\n      return [rgb[0], rgb[1], rgb[2], this.alpha ?? undefined];\n    }\n    return [rgb[0], rgb[1], rgb[2]];\n  }\n\n  #toXyzd50(): Color3D {\n    const rgb = this.#getRGBArray(false);\n    return ColorConverter.srgbToXyzd50(rgb[0], rgb[1], rgb[2]);\n  }\n  constructor(h: number, w: number, b: number, alpha: number|null, authoredText?: string) {\n    this.#rawParams = [h, w, b];\n    this.w = clamp(w, {min: 0, max: 1});\n    this.b = clamp(b, {min: 0, max: 1});\n    h = lessOrEquals(1, this.w + this.b) ? 0 : h;\n    this.h = normalizeHue(h * 360) / 360;\n    this.alpha = clamp(alpha, {min: 0, max: 1});\n    if (lessOrEquals(1, this.w + this.b)) {\n      // normalize to a sum of 100% respecting the ratio, see https://www.w3.org/TR/css-color-4/#the-hwb-notation\n      const ratio = this.w / this.b;\n      this.b = 1 / (1 + ratio);\n      this.w = 1 - this.b;\n    }\n    this.#authoredText = authoredText;\n  }\n  equal(color: Color): boolean {\n    const hwb = color.as(Format.HWB);\n    return equals(this.h, hwb.h) && equals(this.w, hwb.w) && equals(this.b, hwb.b) && equals(this.alpha, hwb.alpha);\n  }\n  asString(format?: Format|undefined): string {\n    if (format) {\n      return this.as(format).asString();\n    }\n    return this.#stringify(this.h, this.w, this.b);\n  }\n  #stringify(h: number, w: number, b: number): string {\n    const start = Platform.StringUtilities.sprintf(\n        'hwb(%sdeg %s% %s%', Platform.StringUtilities.stringifyWithPrecision(h * 360),\n        Platform.StringUtilities.stringifyWithPrecision(w * 100),\n        Platform.StringUtilities.stringifyWithPrecision(b * 100));\n    if (this.alpha !== null && this.alpha !== 1) {\n      return start +\n          Platform.StringUtilities.sprintf(\n              ' / %s%)', Platform.StringUtilities.stringifyWithPrecision(this.alpha * 100));\n    }\n    return start + ')';\n  }\n  setAlpha(alpha: number): HWB {\n    return new HWB(this.h, this.w, this.b, alpha, this.#authoredText);\n  }\n  format(): Format {\n    return this.alpha !== null && !equals(this.alpha, 1) ? Format.HWBA : Format.HWB;\n  }\n  is<T extends Format>(format: T): this is ReturnType<ColorConversions[T]> {\n    return format === this.format();\n  }\n  as<T extends Format>(format: T): ReturnType<ColorConversions[T]> {\n    if (format === this.format()) {\n      return this as ReturnType<ColorConversions[T]>;\n    }\n    return HWB.#conversions[format](this) as ReturnType<ColorConversions[T]>;\n  }\n  asLegacyColor(): Legacy {\n    return this.as(Format.RGBA);\n  }\n  getAuthoredText(): string|null {\n    return this.#authoredText ?? null;\n  }\n\n  canonicalHWBA(): number[] {\n    return [\n      Math.round(this.h * 360),\n      Math.round(this.w * 100),\n      Math.round(this.b * 100),\n      this.alpha ?? 1,\n    ];\n  }\n  getRawParameters(): Color3D {\n    return [...this.#rawParams];\n  }\n  getAsRawString(format?: Format): string {\n    if (format) {\n      return this.as(format).getAsRawString();\n    }\n    return this.#stringify(...this.#rawParams);\n  }\n  isGamutClipped(): boolean {\n    return !lessOrEquals(this.#rawParams[1], 1) || !lessOrEquals(0, this.#rawParams[1]) ||\n        !lessOrEquals(this.#rawParams[2], 1) || !lessOrEquals(0, this.#rawParams[2]);\n  }\n\n  static fromSpec(spec: ColorParameterSpec, text: string): HWB|null {\n    const h = parseHueNumeric(spec[0]);\n    if (h === null) {\n      return null;\n    }\n    const w = parseSatLightNumeric(spec[1]);\n    if (w === null) {\n      return null;\n    }\n    const b = parseSatLightNumeric(spec[2]);\n    if (b === null) {\n      return null;\n    }\n    const alpha = parseAlpha(spec[3]);\n    return new HWB(h, w, b, alpha, text);\n  }\n}\n\ntype LegacyColor = Format.HEX|Format.HEXA|Format.RGB|Format.RGBA;\n\nfunction toRgbValue(value: number): number {\n  return Math.round(value * 255);\n}\n\nabstract class ShortFormatColorBase implements Color {\n  protected readonly color: Legacy;\n  readonly channels: [ColorChannel, ColorChannel, ColorChannel, ColorChannel] =\n      [ColorChannel.R, ColorChannel.G, ColorChannel.B, ColorChannel.ALPHA];\n  constructor(color: Legacy) {\n    this.color = color;\n  }\n  get alpha(): number|null {\n    return this.color.alpha;\n  }\n  rgba(): Color4D {\n    return this.color.rgba();\n  }\n  equal(color: Color): boolean {\n    return this.color.equal(color);\n  }\n  setAlpha(alpha: number): Color {\n    return this.color.setAlpha(alpha);\n  }\n  format(): Format {\n    return (this.alpha ?? 1) !== 1 ? Format.HEXA : Format.HEX;\n  }\n  as<T extends Format>(format: T): ReturnType<ColorConversions<void>[T]> {\n    return this.color.as(format);\n  }\n  is<T extends Format>(format: T): this is ReturnType<ColorConversions<void>[T]> {\n    return this.color.is(format);\n  }\n  asLegacyColor(): Legacy {\n    return this.color.asLegacyColor();\n  }\n  getAuthoredText(): string|null {\n    return this.color.getAuthoredText();\n  }\n  getRawParameters(): Color3D {\n    return this.color.getRawParameters();\n  }\n  isGamutClipped(): boolean {\n    return this.color.isGamutClipped();\n  }\n  asString(format?: Format|undefined): string {\n    if (format) {\n      return this.as(format).asString();\n    }\n    const [r, g, b] = this.color.rgba();\n    return this.stringify(r, g, b);\n  }\n  getAsRawString(format?: Format): string {\n    if (format) {\n      return this.as(format).getAsRawString();\n    }\n    const [r, g, b] = this.getRawParameters();\n    return this.stringify(r, g, b);\n  }\n\n  protected abstract stringify(r: number, g: number, b: number): string;\n}\n\nexport class ShortHex extends ShortFormatColorBase {\n  override setAlpha(alpha: number): Color {\n    return new ShortHex(this.color.setAlpha(alpha));\n  }\n\n  override asString(format?: Format|undefined): string {\n    return format && format !== this.format() ? super.as(format).asString() : super.asString();\n  }\n\n  protected override stringify(r: number, g: number, b: number): string {\n    function toShortHexValue(value: number): string {\n      return (Math.round(value * 255) / 17).toString(16);\n    }\n\n    if (this.color.hasAlpha()) {\n      return Platform.StringUtilities\n          .sprintf(\n              '#%s%s%s%s', toShortHexValue(r), toShortHexValue(g), toShortHexValue(b), toShortHexValue(this.alpha ?? 1))\n          .toLowerCase();\n    }\n    return Platform.StringUtilities.sprintf('#%s%s%s', toShortHexValue(r), toShortHexValue(g), toShortHexValue(b))\n        .toLowerCase();\n  }\n}\n\nexport class Nickname extends ShortFormatColorBase {\n  readonly nickname: string;\n  constructor(nickname: string, color: Legacy) {\n    super(color);\n    this.nickname = nickname;\n  }\n\n  static fromName(name: string, text: string): Nickname|null {\n    const nickname = name.toLowerCase();\n    const rgba = Nicknames.get(nickname);\n    if (rgba !== undefined) {\n      return new Nickname(nickname, Legacy.fromRGBA(rgba, text));\n    }\n    return null;\n  }\n\n  protected override stringify(): string {\n    return this.nickname;\n  }\n\n  override getAsRawString(format?: Format|undefined): string {\n    return this.color.getAsRawString(format);\n  }\n}\n\nexport class Legacy implements Color {\n  readonly #rawParams: Color3D;\n  #rgba: Color4D;\n  readonly #authoredText: string|null;\n  #format: LegacyColor;\n  readonly channels: [ColorChannel, ColorChannel, ColorChannel, ColorChannel] =\n      [ColorChannel.R, ColorChannel.G, ColorChannel.B, ColorChannel.ALPHA];\n\n  static readonly #conversions: ColorConversions<Legacy> = {\n    [Format.HEX]: (self: Legacy) => new Legacy(self.#rgba, Format.HEX),\n    [Format.HEXA]: (self: Legacy) => new Legacy(self.#rgba, Format.HEXA),\n    [Format.RGB]: (self: Legacy) => new Legacy(self.#rgba, Format.RGB),\n    [Format.RGBA]: (self: Legacy) => new Legacy(self.#rgba, Format.RGBA),\n    [Format.HSL]: (self: Legacy) => new HSL(...rgbToHsl([self.#rgba[0], self.#rgba[1], self.#rgba[2]]), self.alpha),\n    [Format.HSLA]: (self: Legacy) => new HSL(...rgbToHsl([self.#rgba[0], self.#rgba[1], self.#rgba[2]]), self.alpha),\n    [Format.HWB]: (self: Legacy) => new HWB(...rgbToHwb([self.#rgba[0], self.#rgba[1], self.#rgba[2]]), self.alpha),\n    [Format.HWBA]: (self: Legacy) => new HWB(...rgbToHwb([self.#rgba[0], self.#rgba[1], self.#rgba[2]]), self.alpha),\n    [Format.LCH]: (self: Legacy) =>\n        new LCH(...ColorConverter.labToLch(...ColorConverter.xyzd50ToLab(...self.#toXyzd50())), self.alpha),\n    [Format.OKLCH]: (self: Legacy) => new Oklch(...ColorConverter.xyzd50ToOklch(...self.#toXyzd50()), self.alpha),\n    [Format.LAB]: (self: Legacy) => new Lab(...ColorConverter.xyzd50ToLab(...self.#toXyzd50()), self.alpha),\n    [Format.OKLAB]: (self: Legacy) =>\n        new Oklab(...ColorConverter.xyzd65ToOklab(...ColorConverter.xyzd50ToD65(...self.#toXyzd50())), self.alpha),\n    [Format.SRGB]: (self: Legacy) =>\n        new ColorFunction(Format.SRGB, ...ColorConverter.xyzd50ToSrgb(...self.#toXyzd50()), self.alpha),\n    [Format.SRGB_LINEAR]: (self: Legacy) =>\n        new ColorFunction(Format.SRGB_LINEAR, ...ColorConverter.xyzd50TosRGBLinear(...self.#toXyzd50()), self.alpha),\n    [Format.DISPLAY_P3]: (self: Legacy) =>\n        new ColorFunction(Format.DISPLAY_P3, ...ColorConverter.xyzd50ToDisplayP3(...self.#toXyzd50()), self.alpha),\n    [Format.A98_RGB]: (self: Legacy) =>\n        new ColorFunction(Format.A98_RGB, ...ColorConverter.xyzd50ToAdobeRGB(...self.#toXyzd50()), self.alpha),\n    [Format.PROPHOTO_RGB]: (self: Legacy) =>\n        new ColorFunction(Format.PROPHOTO_RGB, ...ColorConverter.xyzd50ToProPhoto(...self.#toXyzd50()), self.alpha),\n    [Format.REC_2020]: (self: Legacy) =>\n        new ColorFunction(Format.REC_2020, ...ColorConverter.xyzd50ToRec2020(...self.#toXyzd50()), self.alpha),\n    [Format.XYZ]: (self: Legacy) =>\n        new ColorFunction(Format.XYZ, ...ColorConverter.xyzd50ToD65(...self.#toXyzd50()), self.alpha),\n    [Format.XYZ_D50]: (self: Legacy) => new ColorFunction(Format.XYZ_D50, ...self.#toXyzd50(), self.alpha),\n    [Format.XYZ_D65]: (self: Legacy) =>\n        new ColorFunction(Format.XYZ_D65, ...ColorConverter.xyzd50ToD65(...self.#toXyzd50()), self.alpha),\n  };\n\n  #toXyzd50(): Color3D {\n    const [r, g, b] = this.#rgba;\n    return ColorConverter.srgbToXyzd50(r, g, b);\n  }\n\n  get alpha(): number|null {\n    switch (this.format()) {\n      case Format.HEXA:\n      case Format.RGBA:\n        return this.#rgba[3];\n      default:\n        return null;\n    }\n  }\n\n  asLegacyColor(): Legacy {\n    return this;\n  }\n\n  nickname(): Nickname|null {\n    const nickname = RGBAToNickname.get(String(this.canonicalRGBA()));\n    return nickname ? new Nickname(nickname, this) : null;\n  }\n\n  shortHex(): ShortHex|null {\n    for (let i = 0; i < 4; ++i) {\n      const c = Math.round(this.#rgba[i] * 255);\n      // Check if the two digits of each are identical: #aabbcc => #abc\n      if (c % 0x11) {\n        return null;\n      }\n    }\n    return new ShortHex(this);\n  }\n\n  constructor(rgba: Color3D|Color4DOr3D, format: LegacyColor, authoredText?: string) {\n    this.#authoredText = authoredText || null;\n    this.#format = format;\n    this.#rawParams = [rgba[0], rgba[1], rgba[2]];\n\n    this.#rgba = [\n      clamp(rgba[0], {min: 0, max: 1}),\n      clamp(rgba[1], {min: 0, max: 1}),\n      clamp(rgba[2], {min: 0, max: 1}),\n      clamp(rgba[3] ?? 1, {min: 0, max: 1}),\n    ];\n  }\n\n  static fromHex(hex: string, text: string): Legacy|ShortHex {\n    hex = hex.toLowerCase();\n    // Possible hex representations with alpha are fffA and ffffffAA\n    const hasAlpha = hex.length === 4 || hex.length === 8;\n    const format = hasAlpha ? Format.HEXA : Format.HEX;\n    const isShort = hex.length <= 4;\n    if (isShort) {\n      hex = hex.charAt(0) + hex.charAt(0) + hex.charAt(1) + hex.charAt(1) + hex.charAt(2) + hex.charAt(2) +\n          hex.charAt(3) + hex.charAt(3);\n    }\n    const r = parseInt(hex.substring(0, 2), 16);\n    const g = parseInt(hex.substring(2, 4), 16);\n    const b = parseInt(hex.substring(4, 6), 16);\n    let a = 1;\n    if (hex.length === 8) {\n      a = parseInt(hex.substring(6, 8), 16) / 255;\n    }\n    const color = new Legacy([r / 255, g / 255, b / 255, a], format, text);\n    return isShort ? new ShortHex(color) : color;\n  }\n\n  static fromRGBAFunction(r: string, g: string, b: string, alpha: string|undefined, text: string): Legacy|null {\n    const rgba = [\n      parseRgbNumeric(r),\n      parseRgbNumeric(g),\n      parseRgbNumeric(b),\n      alpha ? parseAlphaNumeric(alpha) : 1,\n    ];\n\n    if (!Platform.ArrayUtilities.arrayDoesNotContainNullOrUndefined(rgba)) {\n      return null;\n    }\n    return new Legacy(rgba as Color4D, alpha ? Format.RGBA : Format.RGB, text);\n  }\n\n  static fromRGBA(rgba: number[], authoredText?: string): Legacy {\n    return new Legacy([rgba[0] / 255, rgba[1] / 255, rgba[2] / 255, rgba[3]], Format.RGBA, authoredText);\n  }\n\n  static fromHSVA(hsva: Color4D): Legacy {\n    const rgba = hsva2rgba(hsva);\n    return new Legacy(rgba, Format.RGBA);\n  }\n\n  is<T extends Format>(format: T): this is ReturnType<ColorConversions[T]> {\n    return format === this.format();\n  }\n  as<T extends Format>(format: T): ReturnType<ColorConversions[T]> {\n    if (format === this.format()) {\n      return this as ReturnType<ColorConversions[T]>;\n    }\n    return Legacy.#conversions[format](this) as ReturnType<ColorConversions[T]>;\n  }\n\n  format(): LegacyColor {\n    return this.#format;\n  }\n\n  hasAlpha(): boolean {\n    return this.#rgba[3] !== 1;\n  }\n\n  detectHEXFormat(): Format {\n    const hasAlpha = this.hasAlpha();\n    return hasAlpha ? Format.HEXA : Format.HEX;\n  }\n\n  asString(format?: Format): string {\n    if (format) {\n      return this.as(format).asString();\n    }\n    return this.#stringify(format, this.#rgba[0], this.#rgba[1], this.#rgba[2]);\n  }\n  #stringify(format: LegacyColor|undefined, r: number, g: number, b: number): string {\n    if (!format) {\n      format = this.#format;\n    }\n\n    function toHexValue(value: number): string {\n      const hex = Math.round(value * 255).toString(16);\n      return hex.length === 1 ? '0' + hex : hex;\n    }\n\n    switch (format) {\n      case Format.RGB:\n      case Format.RGBA: {\n        const start = Platform.StringUtilities.sprintf('rgb(%d %d %d', toRgbValue(r), toRgbValue(g), toRgbValue(b));\n        if (this.hasAlpha()) {\n          return start + Platform.StringUtilities.sprintf(' / %d%)', Math.round(this.#rgba[3] * 100));\n        }\n        return start + ')';\n      }\n      case Format.HEX:\n      case Format.HEXA: {\n        if (this.hasAlpha()) {\n          return Platform.StringUtilities\n              .sprintf('#%s%s%s%s', toHexValue(r), toHexValue(g), toHexValue(b), toHexValue(this.#rgba[3]))\n              .toLowerCase();\n        }\n        return Platform.StringUtilities.sprintf('#%s%s%s', toHexValue(r), toHexValue(g), toHexValue(b)).toLowerCase();\n      }\n    }\n  }\n  getAuthoredText(): string|null {\n    return this.#authoredText ?? null;\n  }\n\n  getRawParameters(): Color3D {\n    return [...this.#rawParams];\n  }\n  getAsRawString(format?: Format): string {\n    if (format) {\n      return this.as(format).getAsRawString();\n    }\n    return this.#stringify(format, ...this.#rawParams);\n  }\n  isGamutClipped(): boolean {\n    return !equals(\n        this.#rawParams.map(toRgbValue), [this.#rgba[0], this.#rgba[1], this.#rgba[2]].map(toRgbValue),\n        WIDE_RANGE_EPSILON);\n  }\n\n  rgba(): Color4D {\n    return [...this.#rgba];\n  }\n\n  canonicalRGBA(): Color4D {\n    const rgba = new Array(4);\n    for (let i = 0; i < 3; ++i) {\n      rgba[i] = Math.round(this.#rgba[i] * 255);\n    }\n    rgba[3] = this.#rgba[3];\n    return rgba as Color4D;\n  }\n\n  toProtocolRGBA(): {\n    r: number,\n    g: number,\n    b: number,\n    a: (number|undefined),\n  } {\n    const rgba = this.canonicalRGBA();\n    const result: {\n      r: number,\n      g: number,\n      b: number,\n      a: number|undefined,\n    } = {r: rgba[0], g: rgba[1], b: rgba[2], a: undefined};\n    if (rgba[3] !== 1) {\n      result.a = rgba[3];\n    }\n    return result;\n  }\n\n  invert(): Legacy {\n    const rgba: Color4D = [0, 0, 0, 0];\n    rgba[0] = 1 - this.#rgba[0];\n    rgba[1] = 1 - this.#rgba[1];\n    rgba[2] = 1 - this.#rgba[2];\n    rgba[3] = this.#rgba[3];\n    return new Legacy(rgba, Format.RGBA);\n  }\n\n  /**\n   * Returns a new color using the NTSC formula for making a RGB color grayscale.\n   * Note: We override with an alpha of 50% to enhance the dimming effect.\n   */\n  grayscale(): Legacy {\n    const [r, g, b] = this.#rgba;\n    const gray = r * 0.299 + g * 0.587 + b * 0.114;\n    return new Legacy([gray, gray, gray, 0.5], Format.RGBA);\n  }\n\n  setAlpha(alpha: number): Legacy {\n    const rgba: Color4D = [...this.#rgba];\n    rgba[3] = alpha;\n    return new Legacy(rgba, Format.RGBA);\n  }\n\n  blendWith(fgColor: Legacy): Legacy {\n    const rgba: Color4D = blendColors(fgColor.#rgba, this.#rgba);\n    return new Legacy(rgba, Format.RGBA);\n  }\n\n  blendWithAlpha(alpha: number): Legacy {\n    const rgba: Color4D = [...this.#rgba];\n    rgba[3] *= alpha;\n    return new Legacy(rgba, Format.RGBA);\n  }\n\n  setFormat(format: LegacyColor): void {\n    this.#format = format;\n  }\n\n  equal(other: Color): boolean {\n    const legacy = other.as(this.#format);\n    return equals(toRgbValue(this.#rgba[0]), toRgbValue(legacy.#rgba[0]), WIDE_RANGE_EPSILON) &&\n        equals(toRgbValue(this.#rgba[1]), toRgbValue(legacy.#rgba[1]), WIDE_RANGE_EPSILON) &&\n        equals(toRgbValue(this.#rgba[2]), toRgbValue(legacy.#rgba[2]), WIDE_RANGE_EPSILON) &&\n        equals(this.#rgba[3], legacy.#rgba[3]);\n  }\n}\n\nexport const Regex =\n    /((?:rgba?|hsla?|hwba?|lab|lch|oklab|oklch|color)\\([^)]+\\)|#[0-9a-fA-F]{8}|#[0-9a-fA-F]{6}|#[0-9a-fA-F]{3,4}|\\b[a-zA-Z]+\\b(?!-))/g;\nexport const ColorMixRegex = /color-mix\\(.*,\\s*(?<firstColor>.+)\\s*,\\s*(?<secondColor>.+)\\s*\\)/g;\n\nconst COLOR_TO_RGBA_ENTRIES: Array<readonly[string, number[]]> = [\n  ['aliceblue', [240, 248, 255]],\n  ['antiquewhite', [250, 235, 215]],\n  ['aqua', [0, 255, 255]],\n  ['aquamarine', [127, 255, 212]],\n  ['azure', [240, 255, 255]],\n  ['beige', [245, 245, 220]],\n  ['bisque', [255, 228, 196]],\n  ['black', [0, 0, 0]],\n  ['blanchedalmond', [255, 235, 205]],\n  ['blue', [0, 0, 255]],\n  ['blueviolet', [138, 43, 226]],\n  ['brown', [165, 42, 42]],\n  ['burlywood', [222, 184, 135]],\n  ['cadetblue', [95, 158, 160]],\n  ['chartreuse', [127, 255, 0]],\n  ['chocolate', [210, 105, 30]],\n  ['coral', [255, 127, 80]],\n  ['cornflowerblue', [100, 149, 237]],\n  ['cornsilk', [255, 248, 220]],\n  ['crimson', [237, 20, 61]],\n  ['cyan', [0, 255, 255]],\n  ['darkblue', [0, 0, 139]],\n  ['darkcyan', [0, 139, 139]],\n  ['darkgoldenrod', [184, 134, 11]],\n  ['darkgray', [169, 169, 169]],\n  ['darkgrey', [169, 169, 169]],\n  ['darkgreen', [0, 100, 0]],\n  ['darkkhaki', [189, 183, 107]],\n  ['darkmagenta', [139, 0, 139]],\n  ['darkolivegreen', [85, 107, 47]],\n  ['darkorange', [255, 140, 0]],\n  ['darkorchid', [153, 50, 204]],\n  ['darkred', [139, 0, 0]],\n  ['darksalmon', [233, 150, 122]],\n  ['darkseagreen', [143, 188, 143]],\n  ['darkslateblue', [72, 61, 139]],\n  ['darkslategray', [47, 79, 79]],\n  ['darkslategrey', [47, 79, 79]],\n  ['darkturquoise', [0, 206, 209]],\n  ['darkviolet', [148, 0, 211]],\n  ['deeppink', [255, 20, 147]],\n  ['deepskyblue', [0, 191, 255]],\n  ['dimgray', [105, 105, 105]],\n  ['dimgrey', [105, 105, 105]],\n  ['dodgerblue', [30, 144, 255]],\n  ['firebrick', [178, 34, 34]],\n  ['floralwhite', [255, 250, 240]],\n  ['forestgreen', [34, 139, 34]],\n  ['fuchsia', [255, 0, 255]],\n  ['gainsboro', [220, 220, 220]],\n  ['ghostwhite', [248, 248, 255]],\n  ['gold', [255, 215, 0]],\n  ['goldenrod', [218, 165, 32]],\n  ['gray', [128, 128, 128]],\n  ['grey', [128, 128, 128]],\n  ['green', [0, 128, 0]],\n  ['greenyellow', [173, 255, 47]],\n  ['honeydew', [240, 255, 240]],\n  ['hotpink', [255, 105, 180]],\n  ['indianred', [205, 92, 92]],\n  ['indigo', [75, 0, 130]],\n  ['ivory', [255, 255, 240]],\n  ['khaki', [240, 230, 140]],\n  ['lavender', [230, 230, 250]],\n  ['lavenderblush', [255, 240, 245]],\n  ['lawngreen', [124, 252, 0]],\n  ['lemonchiffon', [255, 250, 205]],\n  ['lightblue', [173, 216, 230]],\n  ['lightcoral', [240, 128, 128]],\n  ['lightcyan', [224, 255, 255]],\n  ['lightgoldenrodyellow', [250, 250, 210]],\n  ['lightgreen', [144, 238, 144]],\n  ['lightgray', [211, 211, 211]],\n  ['lightgrey', [211, 211, 211]],\n  ['lightpink', [255, 182, 193]],\n  ['lightsalmon', [255, 160, 122]],\n  ['lightseagreen', [32, 178, 170]],\n  ['lightskyblue', [135, 206, 250]],\n  ['lightslategray', [119, 136, 153]],\n  ['lightslategrey', [119, 136, 153]],\n  ['lightsteelblue', [176, 196, 222]],\n  ['lightyellow', [255, 255, 224]],\n  ['lime', [0, 255, 0]],\n  ['limegreen', [50, 205, 50]],\n  ['linen', [250, 240, 230]],\n  ['magenta', [255, 0, 255]],\n  ['maroon', [128, 0, 0]],\n  ['mediumaquamarine', [102, 205, 170]],\n  ['mediumblue', [0, 0, 205]],\n  ['mediumorchid', [186, 85, 211]],\n  ['mediumpurple', [147, 112, 219]],\n  ['mediumseagreen', [60, 179, 113]],\n  ['mediumslateblue', [123, 104, 238]],\n  ['mediumspringgreen', [0, 250, 154]],\n  ['mediumturquoise', [72, 209, 204]],\n  ['mediumvioletred', [199, 21, 133]],\n  ['midnightblue', [25, 25, 112]],\n  ['mintcream', [245, 255, 250]],\n  ['mistyrose', [255, 228, 225]],\n  ['moccasin', [255, 228, 181]],\n  ['navajowhite', [255, 222, 173]],\n  ['navy', [0, 0, 128]],\n  ['oldlace', [253, 245, 230]],\n  ['olive', [128, 128, 0]],\n  ['olivedrab', [107, 142, 35]],\n  ['orange', [255, 165, 0]],\n  ['orangered', [255, 69, 0]],\n  ['orchid', [218, 112, 214]],\n  ['palegoldenrod', [238, 232, 170]],\n  ['palegreen', [152, 251, 152]],\n  ['paleturquoise', [175, 238, 238]],\n  ['palevioletred', [219, 112, 147]],\n  ['papayawhip', [255, 239, 213]],\n  ['peachpuff', [255, 218, 185]],\n  ['peru', [205, 133, 63]],\n  ['pink', [255, 192, 203]],\n  ['plum', [221, 160, 221]],\n  ['powderblue', [176, 224, 230]],\n  ['purple', [128, 0, 128]],\n  ['rebeccapurple', [102, 51, 153]],\n  ['red', [255, 0, 0]],\n  ['rosybrown', [188, 143, 143]],\n  ['royalblue', [65, 105, 225]],\n  ['saddlebrown', [139, 69, 19]],\n  ['salmon', [250, 128, 114]],\n  ['sandybrown', [244, 164, 96]],\n  ['seagreen', [46, 139, 87]],\n  ['seashell', [255, 245, 238]],\n  ['sienna', [160, 82, 45]],\n  ['silver', [192, 192, 192]],\n  ['skyblue', [135, 206, 235]],\n  ['slateblue', [106, 90, 205]],\n  ['slategray', [112, 128, 144]],\n  ['slategrey', [112, 128, 144]],\n  ['snow', [255, 250, 250]],\n  ['springgreen', [0, 255, 127]],\n  ['steelblue', [70, 130, 180]],\n  ['tan', [210, 180, 140]],\n  ['teal', [0, 128, 128]],\n  ['thistle', [216, 191, 216]],\n  ['tomato', [255, 99, 71]],\n  ['turquoise', [64, 224, 208]],\n  ['violet', [238, 130, 238]],\n  ['wheat', [245, 222, 179]],\n  ['white', [255, 255, 255]],\n  ['whitesmoke', [245, 245, 245]],\n  ['yellow', [255, 255, 0]],\n  ['yellowgreen', [154, 205, 50]],\n  ['transparent', [0, 0, 0, 0]],\n];\n\nconsole.assert(\n    COLOR_TO_RGBA_ENTRIES.every(([nickname]) => nickname.toLowerCase() === nickname),\n    'All color nicknames must be lowercase.');\n\nexport const Nicknames = new Map(COLOR_TO_RGBA_ENTRIES);\n\nconst RGBAToNickname = new Map(\n    // Default opacity to 1 if the color only specified 3 channels\n    COLOR_TO_RGBA_ENTRIES.map(([nickname, [r, g, b, a = 1]]) => {\n      return [String([r, g, b, a]), nickname];\n    }),\n);\n\nconst LAYOUT_LINES_HIGHLIGHT_COLOR = [127, 32, 210];\n\nexport const PageHighlight = {\n  Content: Legacy.fromRGBA([111, 168, 220, .66]),\n  ContentLight: Legacy.fromRGBA([111, 168, 220, .5]),\n  ContentOutline: Legacy.fromRGBA([9, 83, 148]),\n  Padding: Legacy.fromRGBA([147, 196, 125, .55]),\n  PaddingLight: Legacy.fromRGBA([147, 196, 125, .4]),\n  Border: Legacy.fromRGBA([255, 229, 153, .66]),\n  BorderLight: Legacy.fromRGBA([255, 229, 153, .5]),\n  Margin: Legacy.fromRGBA([246, 178, 107, .66]),\n  MarginLight: Legacy.fromRGBA([246, 178, 107, .5]),\n  EventTarget: Legacy.fromRGBA([255, 196, 196, .66]),\n  Shape: Legacy.fromRGBA([96, 82, 177, 0.8]),\n  ShapeMargin: Legacy.fromRGBA([96, 82, 127, .6]),\n  CssGrid: Legacy.fromRGBA([0x4b, 0, 0x82, 1]),\n  LayoutLine: Legacy.fromRGBA([...LAYOUT_LINES_HIGHLIGHT_COLOR, 1]),\n  GridBorder: Legacy.fromRGBA([...LAYOUT_LINES_HIGHLIGHT_COLOR, 1]),\n  GapBackground: Legacy.fromRGBA([...LAYOUT_LINES_HIGHLIGHT_COLOR, .3]),\n  GapHatch: Legacy.fromRGBA([...LAYOUT_LINES_HIGHLIGHT_COLOR, .8]),\n  GridAreaBorder: Legacy.fromRGBA([26, 115, 232, 1]),\n};\n\nexport const SourceOrderHighlight = {\n  ParentOutline: Legacy.fromRGBA([224, 90, 183, 1]),\n  ChildOutline: Legacy.fromRGBA([0, 120, 212, 1]),\n};\n\nexport const IsolationModeHighlight = {\n  Resizer: Legacy.fromRGBA([222, 225, 230, 1]),  // --color-background-elevation-2\n  ResizerHandle: Legacy.fromRGBA([166, 166, 166, 1]),\n  Mask: Legacy.fromRGBA([248, 249, 249, 1]),\n};\n\ntype Space = number|{\n  min: number,\n  max: number,\n  count: (number|undefined),\n};\n\nexport class Generator {\n  readonly #hueSpace: Space;\n  readonly #satSpace: Space;\n  readonly #lightnessSpace: Space;\n  readonly #alphaSpace: Space;\n  readonly #colors = new Map<string, string>();\n  constructor(hueSpace?: Space, satSpace?: Space, lightnessSpace?: Space, alphaSpace?: Space) {\n    this.#hueSpace = hueSpace || {min: 0, max: 360, count: undefined};\n    this.#satSpace = satSpace || 67;\n    this.#lightnessSpace = lightnessSpace || 80;\n    this.#alphaSpace = alphaSpace || 1;\n  }\n\n  setColorForID(id: string, color: string): void {\n    this.#colors.set(id, color);\n  }\n\n  colorForID(id: string): string {\n    let color = this.#colors.get(id);\n    if (!color) {\n      color = this.generateColorForID(id);\n      this.#colors.set(id, color);\n    }\n    return color;\n  }\n\n  private generateColorForID(id: string): string {\n    const hash = Platform.StringUtilities.hashCode(id);\n    const h = this.indexToValueInSpace(hash, this.#hueSpace);\n    const s = this.indexToValueInSpace(hash >> 8, this.#satSpace);\n    const l = this.indexToValueInSpace(hash >> 16, this.#lightnessSpace);\n    const a = this.indexToValueInSpace(hash >> 24, this.#alphaSpace);\n    const start = `hsl(${h}deg ${s}% ${l}%`;\n    if (a !== 1) {\n      return `${start} / ${Math.floor(a * 100)}%)`;\n    }\n    return `${start})`;\n  }\n\n  private indexToValueInSpace(index: number, space: Space): number {\n    if (typeof space === 'number') {\n      return space;\n    }\n    const count = space.count || space.max - space.min;\n    index %= count;\n    return space.min + Math.floor(index / (count - 1) * (space.max - space.min));\n  }\n}\n"],
  "mappings": "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",
  "names": ["ColorChannel", "match", "p", "q", "h", "luminance", "desiredLuminance", "candidateHSVA", "Format"]
}
