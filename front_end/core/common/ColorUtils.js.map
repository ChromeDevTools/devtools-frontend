{
  "version": 3,
  "sources": ["../../../../../../front_end/core/common/ColorUtils.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * Combine the two given colors according to alpha blending.\n */\nexport type Color4D = [number, number, number, number];\nexport type Color3D = [number, number, number];\nexport type Color4DOr3D = [number, number, number, number | undefined];\nexport function blendColors(fgRGBA: Color4D, bgRGBA: Color4D): Color4D {\n  const alpha = fgRGBA[3];\n  return [\n    ((1 - alpha) * bgRGBA[0]) + (alpha * fgRGBA[0]),\n    ((1 - alpha) * bgRGBA[1]) + (alpha * fgRGBA[1]),\n    ((1 - alpha) * bgRGBA[2]) + (alpha * fgRGBA[2]),\n    alpha + (bgRGBA[3] * (1 - alpha)),\n  ];\n}\n\nfunction rgbToHue([r, g, b]: number[]): number {\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const diff = max - min;\n\n  let h;\n  if (min === max) {\n    h = 0;\n  } else if (r === max) {\n    h = ((1 / 6 * (g - b) / diff) + 1) % 1;\n  } else if (g === max) {\n    h = (1 / 6 * (b - r) / diff) + 1 / 3;\n  } else {\n    h = (1 / 6 * (r - g) / diff) + 2 / 3;\n  }\n  return h;\n}\n\nexport function rgbToHsl(rgb: Color3D): Color3D {\n  const [h, s, l] = rgbaToHsla([...rgb, undefined]);\n  return [h, s, l];\n}\nexport function rgbaToHsla([r, g, b, a]: Color4DOr3D): Color4DOr3D {\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const diff = max - min;\n  const sum = max + min;\n\n  const h = rgbToHue([r, g, b]);\n  const l = 0.5 * sum;\n\n  let s;\n  if (l === 0) {\n    s = 0;\n  } else if (l === 1) {\n    s = 0;\n  } else if (l <= 0.5) {\n    s = diff / sum;\n  } else {\n    s = diff / (2 - sum);\n  }\n\n  return [h, s, l, a];\n}\n\nexport function rgbToHwb(rgb: Color3D): Color3D {\n  const [h, w, b] = rgbaToHwba([...rgb, undefined]);\n  return [h, w, b];\n}\nexport function rgbaToHwba([r, g, b, a]: Color4DOr3D): Color4DOr3D {\n  const h = rgbToHue([r, g, b]);\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n\n  return [h, min, 1 - max, a];\n}\n\n/**\n * Calculate the luminance of this color using the WCAG algorithm.\n * See https://www.w3.org/TR/WCAG21/#dfn-relative-luminance.\n */\nexport function luminance([rSRGB, gSRGB, bSRGB]: number[]): number {\n  const r = rSRGB <= 0.04045 ? rSRGB / 12.92 : Math.pow(((rSRGB + 0.055) / 1.055), 2.4);\n  const g = gSRGB <= 0.04045 ? gSRGB / 12.92 : Math.pow(((gSRGB + 0.055) / 1.055), 2.4);\n  const b = bSRGB <= 0.04045 ? bSRGB / 12.92 : Math.pow(((bSRGB + 0.055) / 1.055), 2.4);\n\n  return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n}\n\n/**\n * Calculate the contrast ratio between a foreground and a background color.\n * Returns the ratio to 1, for example for two two colors with a contrast ratio of 21:1, this function will return 21.\n * See http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n */\nexport function contrastRatio(fgRGBA: Color4D, bgRGBA: Color4D): number {\n  const blendedFg = blendColors(fgRGBA, bgRGBA);\n  const fgLuminance = luminance(blendedFg);\n  const bgLuminance = luminance(bgRGBA);\n  const contrastRatio = (Math.max(fgLuminance, bgLuminance) + 0.05) / (Math.min(fgLuminance, bgLuminance) + 0.05);\n  return contrastRatio;\n}\n\n// Constants for basic APCA version.\n// See https://github.com/Myndex/SAPC-APCA\nconst mainTRC = 2.4;\nconst normBgExp = 0.56;\nconst normFgExp = 0.57;\nconst revBgExp = 0.65;\nconst revFgExp = 0.62;\nconst blkThrs = 0.022;\nconst blkClmp = 1.414;\nconst scaleBoW = 1.14;\nconst scaleWoB = 1.14;\nconst loConOffset = 0.027;\nconst loClip = 0.1;\nconst deltaLuminanceMin = 0.0005;\n\n/**\n * Calculate relative luminance of a color.\n * See https://github.com/Myndex/SAPC-APCA\n */\nexport function luminanceAPCA([rSRGB, gSRGB, bSRGB]: number[]): number {\n  const r = Math.pow(rSRGB, mainTRC);\n  const g = Math.pow(gSRGB, mainTRC);\n  const b = Math.pow(bSRGB, mainTRC);\n\n  return 0.2126729 * r + 0.7151522 * g + 0.0721750 * b;\n}\n\n/**\n * Calculate the contrast ratio between a foreground and a background color.\n * Returns the percentage of the predicted visual contrast.\n * See https://github.com/Myndex/SAPC-APCA\n */\nexport function contrastRatioAPCA(fgRGBA: Color4D, bgRGBA: Color4D): number {\n  const blendedFg = blendColors(fgRGBA, bgRGBA);\n  return contrastRatioByLuminanceAPCA(luminanceAPCA(blendedFg), luminanceAPCA(bgRGBA));\n}\n\nfunction clampLuminance(value: number): number {\n  return value > blkThrs ? value : (value + Math.pow(blkThrs - value, blkClmp));\n}\n\nexport function contrastRatioByLuminanceAPCA(fgLuminance: number, bgLuminance: number): number {\n  fgLuminance = clampLuminance(fgLuminance);\n  bgLuminance = clampLuminance(bgLuminance);\n  if (Math.abs(fgLuminance - bgLuminance) < deltaLuminanceMin) {\n    return 0;\n  }\n  let result = 0;\n  if (bgLuminance > fgLuminance) {  // Black text on white.\n    result = (Math.pow(bgLuminance, normBgExp) - Math.pow(fgLuminance, normFgExp)) * scaleBoW;\n    result = result < loClip ? 0 : result - loConOffset;\n  } else {\n    // White text on black.\n    result = (Math.pow(bgLuminance, revBgExp) - Math.pow(fgLuminance, revFgExp)) * scaleWoB;\n    result = result > -loClip ? 0 : result + loConOffset;\n  }\n  return result * 100;\n}\n\n/**\n * Compute a desired luminance given a given luminance and a desired contrast\n * percentage according to APCA.\n */\nexport function desiredLuminanceAPCA(luminance: number, contrast: number, lighter: boolean): number {\n  luminance = clampLuminance(luminance);\n  contrast /= 100;\n  function computeLuminance(): number {\n    if (!lighter) {  // Black text on white.\n      return Math.pow(Math.abs(Math.pow(luminance, normBgExp) - (contrast + loConOffset) / scaleBoW), 1 / normFgExp);\n    }\n    // White text on black.\n    return Math.pow(Math.abs(Math.pow(luminance, revBgExp) - (-contrast - loConOffset) / scaleWoB), 1 / revFgExp);\n  }\n  let desiredLuminance = computeLuminance();\n  if (desiredLuminance < 0 || desiredLuminance > 1) {\n    lighter = !lighter;\n    desiredLuminance = computeLuminance();\n  }\n  return desiredLuminance;\n}\n\n// clang-format off\nconst contrastAPCALookupTable = [\n  // See https://github.com/Myndex/SAPC-APCA\n  // font size in px | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 weights\n  [12, -1, -1, -1, -1, 100, 90, 80, -1, -1],\n  [14, -1, -1, -1, 100, 90, 80, 60, 60, -1],\n  [16, -1, -1, 100, 90, 80, 60, 55, 50, 50],\n  [18, -1, -1, 90, 80, 60, 55, 50, 40, 40],\n  [24, -1, 100, 80, 60, 55, 50, 40, 38, 35],\n  [30, -1, 90, 70, 55, 50, 40, 38, 35, 40],\n  [36, -1, 80, 60, 50, 40, 38, 35, 30, 25],\n  [48, 100, 70, 55, 40, 38, 35, 30, 25, 20],\n  [60, 90, 60, 50, 38, 35, 30, 25, 20, 20],\n  [72, 80, 55, 40, 35, 30, 25, 20, 20, 20],\n  [96, 70, 50, 35, 30, 25, 20, 20, 20, 20],\n  [120, 60, 40, 30, 25, 20, 20, 20, 20, 20],\n];\n// clang-format on\n\ncontrastAPCALookupTable.reverse();\n\nexport function getAPCAThreshold(fontSize: string, fontWeight: string): number|null {\n  const size = parseFloat(fontSize.replace('px', ''));\n  const weight = parseFloat(fontWeight);\n\n  // Go over the table backwards to find the first matching font size and then the weight.\n  // Fonts larger than 96px, use the thresholds for 96px.\n  // Fonts smaller than 12px, don't get any threshold meaning the font size needs to be increased.\n  for (const [rowSize, ...rowWeights] of contrastAPCALookupTable) {\n    if (size >= rowSize) {\n      for (const [idx, keywordWeight] of [900, 800, 700, 600, 500, 400, 300, 200, 100].entries()) {\n        if (weight >= keywordWeight) {\n          const threshold = rowWeights[rowWeights.length - 1 - idx];\n          return threshold === -1 ? null : threshold;\n        }\n      }\n    }\n  }\n\n  return null;\n}\n\nexport function isLargeFont(fontSize: string, fontWeight: string): boolean {\n  const boldWeights = ['bold', 'bolder'];\n\n  const fontSizePx = parseFloat(fontSize.replace('px', ''));\n  const isBold = isNaN(Number(fontWeight)) ? boldWeights.includes(fontWeight) : Number(fontWeight) >= 600;\n\n  const fontSizePt = fontSizePx * 72 / 96;\n  if (isBold) {\n    return fontSizePt >= 14;\n  }\n  return fontSizePt >= 18;\n}\n\nconst contrastThresholds = {\n  largeFont: {aa: 3.0, aaa: 4.5},\n  normalFont: {aa: 4.5, aaa: 7.0},\n};\n\nexport function getContrastThreshold(fontSize: string, fontWeight: string): {\n  aa: number,\n  aaa: number,\n} {\n  if (isLargeFont(fontSize, fontWeight)) {\n    return contrastThresholds.largeFont;\n  }\n  return contrastThresholds.normalFont;\n}\n"],
  "mappings": "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",
  "names": ["contrastRatio", "luminance"]
}
