{"version":3,"file":"Console.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/Console.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,aAAa,EAAC,MAAM,aAAa,CAAC;AAC1C,OAAO,EAAC,MAAM,EAAC,MAAM,eAAe,CAAC;AAErC,IAAI,eAAkC,CAAC;AAEvC,MAAM,OAAO,OAAQ,SAAQ,aAAyB;IAC3C,SAAS,GAAc,EAAE,CAAC;IAEnC,MAAM,CAAC,QAAQ,CAAC,IAA0B;QACxC,IAAI,CAAC,eAAe,IAAI,IAAI,EAAE,QAAQ,EAAE,CAAC;YACvC,eAAe,GAAG,IAAI,OAAO,EAAE,CAAC;QAClC,CAAC;QAED,OAAO,eAAe,CAAC;IACzB,CAAC;IAED,MAAM,CAAC,cAAc;QACnB,eAAe,GAAG,SAAS,CAAC;IAC9B,CAAC;IAED;;;;;;;OAOG;IACH,UAAU,CAAC,IAAY,EAAE,KAAK,iCAAoB,EAAE,IAAI,GAAG,KAAK,EAAE,MAA8B;QAC9F,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;QACnE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC7B,IAAI,CAAC,wBAAwB,4CAAuB,OAAO,CAAC,CAAC;IAC/D,CAAC;IAED,GAAG,CAAC,IAAY;QACd,IAAI,CAAC,UAAU,CAAC,IAAI,iCAAoB,CAAC;IAC3C,CAAC;IAED,IAAI,CAAC,IAAY,EAAE,MAA8B;QAC/C,IAAI,CAAC,UAAU,CAAC,IAAI,wCAAwB,SAAS,EAAE,MAAM,CAAC,CAAC;IACjE,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,IAAY,EAAE,IAAI,GAAG,IAAI;QAC7B,IAAI,CAAC,UAAU,CAAC,IAAI,oCAAsB,IAAI,CAAC,CAAC;IAClD,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,IAAI;QACF,KAAK,IAAI,CAAC,WAAW,EAAE,CAAC;IAC1B,CAAC;IAED,WAAW;QACT,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC;IACtB,CAAC;CACF;AAgBD,MAAM,CAAN,IAAY,qBAMX;AAND,WAAY,qBAAqB;IAC/B,oCAAW,CAAA;IACX,sFAAsF;IACtF,mDAA0B,CAAA;IAC1B,oDAA2B,CAAA;IAC3B,8CAAqB,CAAA;AACvB,CAAC,EANW,qBAAqB,KAArB,qBAAqB,QAMhC;AAED,MAAM,OAAO,OAAO;IAClB,IAAI,CAAS;IACb,KAAK,CAAe;IACpB,SAAS,CAAS;IAClB,IAAI,CAAU;IACd,MAAM,CAAyB;IAC/B,YAAY,IAAY,EAAE,KAAmB,EAAE,SAAiB,EAAE,IAAa,EAAE,MAA8B;QAC7G,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG,CAAC,OAAO,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;QAC1E,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,MAAM,EAAE,CAAC;YACX,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACvB,CAAC;IACH,CAAC;CACF","sourcesContent":["// Copyright 2014 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {ObjectWrapper} from './Object.js';\nimport {reveal} from './Revealer.js';\n\nlet consoleInstance: Console|undefined;\n\nexport class Console extends ObjectWrapper<EventTypes> {\n  readonly #messages: Message[] = [];\n\n  static instance(opts?: {forceNew: boolean}): Console {\n    if (!consoleInstance || opts?.forceNew) {\n      consoleInstance = new Console();\n    }\n\n    return consoleInstance;\n  }\n\n  static removeInstance(): void {\n    consoleInstance = undefined;\n  }\n\n  /**\n   * Add a message to the Console panel.\n   *\n   * @param text the message text.\n   * @param level the message level.\n   * @param show whether to show the Console panel (if it's not already shown).\n   * @param source the message source.\n   */\n  addMessage(text: string, level = MessageLevel.INFO, show = false, source?: FrontendMessageSource): void {\n    const message = new Message(text, level, Date.now(), show, source);\n    this.#messages.push(message);\n    this.dispatchEventToListeners(Events.MESSAGE_ADDED, message);\n  }\n\n  log(text: string): void {\n    this.addMessage(text, MessageLevel.INFO);\n  }\n\n  warn(text: string, source?: FrontendMessageSource): void {\n    this.addMessage(text, MessageLevel.WARNING, undefined, source);\n  }\n\n  /**\n   * Adds an error message to the Console panel.\n   *\n   * @param text the message text.\n   * @param show whether to show the Console panel (if it's not already shown).\n   */\n  error(text: string, show = true): void {\n    this.addMessage(text, MessageLevel.ERROR, show);\n  }\n\n  messages(): Message[] {\n    return this.#messages;\n  }\n\n  show(): void {\n    void this.showPromise();\n  }\n\n  showPromise(): Promise<void> {\n    return reveal(this);\n  }\n}\n\nexport const enum Events {\n  MESSAGE_ADDED = 'messageAdded',\n}\n\nexport interface EventTypes {\n  [Events.MESSAGE_ADDED]: Message;\n}\n\nexport const enum MessageLevel {\n  INFO = 'info',\n  WARNING = 'warning',\n  ERROR = 'error',\n}\n\nexport enum FrontendMessageSource {\n  CSS = 'css',\n  // eslint-disable-next-line @typescript-eslint/naming-convention -- Used by web_tests.\n  ConsoleAPI = 'console-api',\n  ISSUE_PANEL = 'issue-panel',\n  SELF_XSS = 'self-xss',\n}\n\nexport class Message {\n  text: string;\n  level: MessageLevel;\n  timestamp: number;\n  show: boolean;\n  source?: FrontendMessageSource;\n  constructor(text: string, level: MessageLevel, timestamp: number, show: boolean, source?: FrontendMessageSource) {\n    this.text = text;\n    this.level = level;\n    this.timestamp = (typeof timestamp === 'number') ? timestamp : Date.now();\n    this.show = show;\n    if (source) {\n      this.source = source;\n    }\n  }\n}\n"]}