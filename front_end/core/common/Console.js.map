{
  "version": 3,
  "sources": ["../../../../../../front_end/core/common/Console.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {ObjectWrapper} from './Object.js';\nimport {reveal} from './Revealer.js';\n\nlet consoleInstance: Console|undefined;\n\nexport class Console extends ObjectWrapper<EventTypes> {\n  readonly #messages: Message[] = [];\n\n  static instance(opts?: {forceNew: boolean}): Console {\n    if (!consoleInstance || opts?.forceNew) {\n      consoleInstance = new Console();\n    }\n\n    return consoleInstance;\n  }\n\n  static removeInstance(): void {\n    consoleInstance = undefined;\n  }\n\n  /**\n   * Add a message to the Console panel.\n   *\n   * @param text the message text.\n   * @param level the message level.\n   * @param show whether to show the Console panel (if it's not already shown).\n   * @param source the message source.\n   */\n  addMessage(text: string, level = MessageLevel.INFO, show = false, source?: FrontendMessageSource): void {\n    const message = new Message(text, level, Date.now(), show, source);\n    this.#messages.push(message);\n    this.dispatchEventToListeners(Events.MESSAGE_ADDED, message);\n  }\n\n  log(text: string): void {\n    this.addMessage(text, MessageLevel.INFO);\n  }\n\n  warn(text: string, source?: FrontendMessageSource): void {\n    this.addMessage(text, MessageLevel.WARNING, undefined, source);\n  }\n\n  /**\n   * Adds an error message to the Console panel.\n   *\n   * @param text the message text.\n   * @param show whether to show the Console panel (if it's not already shown).\n   */\n  error(text: string, show = true): void {\n    this.addMessage(text, MessageLevel.ERROR, show);\n  }\n\n  messages(): Message[] {\n    return this.#messages;\n  }\n\n  show(): void {\n    void this.showPromise();\n  }\n\n  showPromise(): Promise<void> {\n    return reveal(this);\n  }\n}\n\nexport const enum Events {\n  MESSAGE_ADDED = 'messageAdded',\n}\n\nexport interface EventTypes {\n  [Events.MESSAGE_ADDED]: Message;\n}\n\nexport const enum MessageLevel {\n  INFO = 'info',\n  WARNING = 'warning',\n  ERROR = 'error',\n}\n\nexport enum FrontendMessageSource {\n  CSS = 'css',\n  // eslint-disable-next-line @typescript-eslint/naming-convention -- Used by web_tests.\n  ConsoleAPI = 'console-api',\n  ISSUE_PANEL = 'issue-panel',\n  SELF_XSS = 'self-xss',\n}\n\nexport class Message {\n  text: string;\n  level: MessageLevel;\n  timestamp: number;\n  show: boolean;\n  source?: FrontendMessageSource;\n  constructor(text: string, level: MessageLevel, timestamp: number, show: boolean, source?: FrontendMessageSource) {\n    this.text = text;\n    this.level = level;\n    this.timestamp = (typeof timestamp === 'number') ? timestamp : Date.now();\n    this.show = show;\n    if (source) {\n      this.source = source;\n    }\n  }\n}\n"],
  "mappings": ";AAIA,SAAQ,qBAAoB;AAC5B,SAAQ,cAAa;AAErB,IAAI;AAEG,aAAM,gBAAgB,cAA0B;AAAA,EAC5C,YAAuB,CAAC;AAAA,EAEjC,OAAO,SAAS,MAAqC;AACnD,QAAI,CAAC,mBAAmB,MAAM,UAAU;AACtC,wBAAkB,IAAI,QAAQ;AAAA,IAChC;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,iBAAuB;AAC5B,sBAAkB;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,WAAW,MAAc,QAAQ,mBAAmB,OAAO,OAAO,QAAsC;AACtG,UAAM,UAAU,IAAI,QAAQ,MAAM,OAAO,KAAK,IAAI,GAAG,MAAM,MAAM;AACjE,SAAK,UAAU,KAAK,OAAO;AAC3B,SAAK,yBAAyB,oCAAsB,OAAO;AAAA,EAC7D;AAAA,EAEA,IAAI,MAAoB;AACtB,SAAK,WAAW,MAAM,iBAAiB;AAAA,EACzC;AAAA,EAEA,KAAK,MAAc,QAAsC;AACvD,SAAK,WAAW,MAAM,yBAAsB,QAAW,MAAM;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,MAAc,OAAO,MAAY;AACrC,SAAK,WAAW,MAAM,qBAAoB,IAAI;AAAA,EAChD;AAAA,EAEA,WAAsB;AACpB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,OAAa;AACX,SAAK,KAAK,YAAY;AAAA,EACxB;AAAA,EAEA,cAA6B;AAC3B,WAAO,OAAO,IAAI;AAAA,EACpB;AACF;AAEO,WAAW,SAAX,kBAAWA,YAAX;AACL,EAAAA,QAAA,mBAAgB;AADA,SAAAA;AAAA,GAAA;AAQX,WAAW,eAAX,kBAAWC,kBAAX;AACL,EAAAA,cAAA,UAAO;AACP,EAAAA,cAAA,aAAU;AACV,EAAAA,cAAA,WAAQ;AAHQ,SAAAA;AAAA,GAAA;AAMX,WAAK,wBAAL,kBAAKC,2BAAL;AACL,EAAAA,uBAAA,SAAM;AAEN,EAAAA,uBAAA,gBAAa;AACb,EAAAA,uBAAA,iBAAc;AACd,EAAAA,uBAAA,cAAW;AALD,SAAAA;AAAA,GAAA;AAQL,aAAM,QAAQ;AAAA,EACnB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAY,MAAc,OAAqB,WAAmB,MAAe,QAAgC;AAC/G,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,YAAa,OAAO,cAAc,WAAY,YAAY,KAAK,IAAI;AACxE,SAAK,OAAO;AACZ,QAAI,QAAQ;AACV,WAAK,SAAS;AAAA,IAChB;AAAA,EACF;AACF;",
  "names": ["Events", "MessageLevel", "FrontendMessageSource"]
}
