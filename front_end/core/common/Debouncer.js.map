{"version":3,"file":"Debouncer.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/Debouncer.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B;;GAEG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,UAAS,IAA8B,EAAE,KAAa;IAC5E,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,MAAM,SAAS,GAAG,CAAC,GAAG,IAAW,EAAQ,EAAE;QACzC,YAAY,CAAC,KAAK,CAAC,CAAC;QACpB,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;IACxD,CAAC,CAAC;IACF,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * Debounce utility function, ensures that the function passed in is only called once the function stops being called and the delay has expired.\n */\nexport const debounce = function(func: (...args: any[]) => void, delay: number): (...args: any[]) => void {\n  let timer = 0;\n  const debounced = (...args: any[]): void => {\n    clearTimeout(timer);\n    timer = window.setTimeout(() => func(...args), delay);\n  };\n  return debounced;\n};\n"]}