{"version":3,"file":"EventTarget.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/EventTarget.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAY7B,MAAM,UAAU,oBAAoB,CAAC,SAA4B;IAC/D,KAAK,MAAM,SAAS,IAAI,SAAS,EAAE,CAAC;QAClC,SAAS,CAAC,WAAW,CAAC,mBAAmB,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC;IAC3G,CAAC;IACD,sDAAsD;IACtD,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC;AAsBD,MAAM,UAAU,SAAS,CAAC,IAAY,EAAE,SAAkB,EAAE,EAAE,SAA6B,MAAM;IAC/F,MAAM,GAAG,GAAG,IAAI,WAAW,CAAC,IAAI,EAAE,EAAC,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;IAC7E,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;AAC5B,CAAC","sourcesContent":["// Copyright 2021 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../platform/platform.js';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface EventDescriptor<Events = any, T extends keyof Events = any> {\n  eventTarget: EventTarget<Events>;\n  eventType: T;\n  thisObject?: Object;\n  listener: EventListener<Events, T>;\n}\n\nexport function removeEventListeners(eventList: EventDescriptor[]): void {\n  for (const eventInfo of eventList) {\n    eventInfo.eventTarget.removeEventListener(eventInfo.eventType, eventInfo.listener, eventInfo.thisObject);\n  }\n  // Do not hold references on unused event descriptors.\n  eventList.splice(0);\n}\n\n// This type can be used as the type parameter for `EventTarget`/`ObjectWrapper`\n// when the set of events is not known at compile time.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type GenericEvents = Record<string, any>;\n\nexport type EventPayloadToRestParameters<Events, T extends keyof Events> = Events[T] extends void ? [] : [Events[T]];\nexport type EventListener<Events, T extends keyof Events> = (arg0: EventTargetEvent<Events[T], Events>) => void;\n\nexport interface EventTarget<Events> {\n  addEventListener<T extends keyof Events>(eventType: T, listener: EventListener<Events, T>, thisObject?: Object):\n      EventDescriptor<Events, T>;\n  once<T extends keyof Events>(eventType: T): Promise<Events[T]>;\n  removeEventListener<T extends keyof Events>(eventType: T, listener: EventListener<Events, T>, thisObject?: Object):\n      void;\n  hasEventListeners(eventType: keyof Events): boolean;\n  dispatchEventToListeners<T extends keyof Events>(\n      eventType: Platform.TypeScriptUtilities.NoUnion<T>,\n      ...[eventData]: EventPayloadToRestParameters<Events, T>): void;\n}\n\nexport function fireEvent(name: string, detail: unknown = {}, target: HTMLElement|Window = window): void {\n  const evt = new CustomEvent(name, {bubbles: true, cancelable: true, detail});\n  target.dispatchEvent(evt);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface EventTargetEvent<T, Events = any> {\n  data: T;\n  source?: EventTarget<Events>;\n}\n"]}