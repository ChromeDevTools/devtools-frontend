{
  "version": 3,
  "sources": ["../../../../../../front_end/core/common/Lazy.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst UNINITIALIZED = Symbol('uninitialized');\nconst ERROR_STATE = Symbol('error');\n\n/**\n * Very basic memoizer. Will only invoke its callback the first time, returning the cached value all subsequent calls.\n */\nexport function lazy<T>(producer: () => T): () => symbol | T {\n  let value: T|typeof ERROR_STATE|typeof UNINITIALIZED = UNINITIALIZED;\n  let error: Error = new Error('Initial');\n\n  return (): symbol|T => {\n    if (value === ERROR_STATE) {\n      throw error;\n    } else if (value !== UNINITIALIZED) {\n      return value;\n    }\n\n    try {\n      value = producer();\n      return value;\n    } catch (err) {\n      error = err instanceof Error ? err : new Error(err);\n      value = ERROR_STATE;\n      throw error;\n    }\n  };\n}\n"],
  "mappings": ";AAIA,MAAM,gBAAgB,OAAO,eAAe;AAC5C,MAAM,cAAc,OAAO,OAAO;AAK3B,gBAAS,KAAQ,UAAqC;AAC3D,MAAI,QAAmD;AACvD,MAAI,QAAe,IAAI,MAAM,SAAS;AAEtC,SAAO,MAAgB;AACrB,QAAI,UAAU,aAAa;AACzB,YAAM;AAAA,IACR,WAAW,UAAU,eAAe;AAClC,aAAO;AAAA,IACT;AAEA,QAAI;AACF,cAAQ,SAAS;AACjB,aAAO;AAAA,IACT,SAAS,KAAK;AACZ,cAAQ,eAAe,QAAQ,MAAM,IAAI,MAAM,GAAG;AAClD,cAAQ;AACR,YAAM;AAAA,IACR;AAAA,EACF;AACF;",
  "names": []
}
