{"version":3,"file":"ParsedURL.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/ParsedURL.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2012 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../platform/platform.js';\n\n/**\n * http://tools.ietf.org/html/rfc3986#section-5.2.4\n */\nexport function normalizePath(path: string): string {\n  if (path.indexOf('..') === -1 && path.indexOf('.') === -1) {\n    return path;\n  }\n\n  // Remove leading slash (will be added back below) so we\n  // can handle all (including empty) segments consistently.\n  const segments = (path[0] === '/' ? path.substring(1) : path).split('/');\n  const normalizedSegments = [];\n  for (const segment of segments) {\n    if (segment === '.') {\n      continue;\n    } else if (segment === '..') {\n      normalizedSegments.pop();\n    } else {\n      normalizedSegments.push(segment);\n    }\n  }\n  let normalizedPath = normalizedSegments.join('/');\n  if (path[0] === '/' && normalizedPath) {\n    normalizedPath = '/' + normalizedPath;\n  }\n  if (normalizedPath[normalizedPath.length - 1] !== '/' &&\n      ((path[path.length - 1] === '/') || (segments[segments.length - 1] === '.') ||\n       (segments[segments.length - 1] === '..'))) {\n    normalizedPath = normalizedPath + '/';\n  }\n\n  return normalizedPath;\n}\n\nexport function schemeIs(url: Platform.DevToolsPath.UrlString, scheme: string): boolean {\n  try {\n    return (new URL(url)).protocol === scheme;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * File paths in DevTools that are represented either as unencoded absolute or relative paths, or encoded paths, or URLs.\n * @example\n * RawPathString: “/Hello World/file.js”\n * EncodedPathString: “/Hello%20World/file.js”\n * UrlString: “file:///Hello%20World/file/js”\n */\ntype BrandedPathString =\n    Platform.DevToolsPath.UrlString|Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.EncodedPathString;\n\nexport class ParsedURL {\n  isValid = false;\n  url: string;\n  scheme = '';\n  user = '';\n  host = '';\n  port = '';\n  path = '';\n  queryParams = '';\n  fragment = '';\n  folderPathComponents = '';\n  lastPathComponent = '';\n  readonly blobInnerScheme: string|undefined;\n  #displayName?: string;\n  #dataURLDisplayName?: string;\n\n  constructor(url: string) {\n    this.url = url;\n\n    const isBlobUrl = this.url.startsWith('blob:');\n    const urlToMatch = isBlobUrl ? url.substring(5) : url;\n    const match = urlToMatch.match(ParsedURL.urlRegex());\n    if (match) {\n      this.isValid = true;\n      if (isBlobUrl) {\n        this.blobInnerScheme = match[2].toLowerCase();\n        this.scheme = 'blob';\n      } else {\n        this.scheme = match[2].toLowerCase();\n      }\n      this.user = match[3] ?? '';\n      this.host = match[4] ?? '';\n      this.port = match[5] ?? '';\n      this.path = match[6] ?? '/';\n      this.queryParams = match[7] ?? '';\n      this.fragment = match[8] ?? '';\n    } else {\n      if (this.url.startsWith('data:')) {\n        this.scheme = 'data';\n        return;\n      }\n      if (this.url.startsWith('blob:')) {\n        this.scheme = 'blob';\n        return;\n      }\n      if (this.url === 'about:blank') {\n        this.scheme = 'about';\n        return;\n      }\n      this.path = this.url;\n    }\n\n    const lastSlashExceptTrailingIndex = this.path.lastIndexOf('/', this.path.length - 2);\n    if (lastSlashExceptTrailingIndex !== -1) {\n      this.lastPathComponent = this.path.substring(lastSlashExceptTrailingIndex + 1);\n    } else {\n      this.lastPathComponent = this.path;\n    }\n    const lastSlashIndex = this.path.lastIndexOf('/');\n    if (lastSlashIndex !== -1) {\n      this.folderPathComponents = this.path.substring(0, lastSlashIndex);\n    }\n  }\n\n  static fromString(string: string): ParsedURL|null {\n    const parsedURL = new ParsedURL(string.toString());\n    if (parsedURL.isValid) {\n      return parsedURL;\n    }\n    return null;\n  }\n\n  static preEncodeSpecialCharactersInPath(path: string): string {\n    // Based on net::FilePathToFileURL. Ideally we would handle\n    // '\\\\' as well on non-Windows file systems.\n    for (const specialChar of ['%', ';', '#', '?', ' ']) {\n      (path) = path.replaceAll(specialChar, encodeURIComponent(specialChar));\n    }\n    return path;\n  }\n\n  static rawPathToEncodedPathString(path: Platform.DevToolsPath.RawPathString):\n      Platform.DevToolsPath.EncodedPathString {\n    const partiallyEncoded = ParsedURL.preEncodeSpecialCharactersInPath(path);\n    if (path.startsWith('/')) {\n      return new URL(partiallyEncoded, 'file:///').pathname as Platform.DevToolsPath.EncodedPathString;\n    }\n    // URL prepends a '/'\n    return new URL('/' + partiallyEncoded, 'file:///').pathname.substr(1) as Platform.DevToolsPath.EncodedPathString;\n  }\n\n  /**\n   * @param name Must not be encoded\n   */\n  static encodedFromParentPathAndName(parentPath: Platform.DevToolsPath.EncodedPathString, name: string):\n      Platform.DevToolsPath.EncodedPathString {\n    return ParsedURL.concatenate(parentPath, '/', ParsedURL.preEncodeSpecialCharactersInPath(name));\n  }\n\n  /**\n   * @param name Must not be encoded\n   */\n  static urlFromParentUrlAndName(parentUrl: Platform.DevToolsPath.UrlString, name: string):\n      Platform.DevToolsPath.UrlString {\n    return ParsedURL.concatenate(parentUrl, '/', ParsedURL.preEncodeSpecialCharactersInPath(name));\n  }\n\n  static encodedPathToRawPathString(encPath: Platform.DevToolsPath.EncodedPathString):\n      Platform.DevToolsPath.RawPathString {\n    return decodeURIComponent(encPath) as Platform.DevToolsPath.RawPathString;\n  }\n\n  static rawPathToUrlString(fileSystemPath: Platform.DevToolsPath.RawPathString): Platform.DevToolsPath.UrlString {\n    let preEncodedPath: string = ParsedURL.preEncodeSpecialCharactersInPath(\n        fileSystemPath.replace(/\\\\/g, '/') as Platform.DevToolsPath.RawPathString);\n    preEncodedPath = preEncodedPath.replace(/\\\\/g, '/');\n    if (!preEncodedPath.startsWith('file://')) {\n      if (preEncodedPath.startsWith('/')) {\n        preEncodedPath = 'file://' + preEncodedPath;\n      } else {\n        preEncodedPath = 'file:///' + preEncodedPath;\n      }\n    }\n    return new URL(preEncodedPath).toString() as Platform.DevToolsPath.UrlString;\n  }\n\n  static relativePathToUrlString(\n      relativePath: Platform.DevToolsPath.RawPathString,\n      baseURL: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.UrlString {\n    const preEncodedPath: string = ParsedURL.preEncodeSpecialCharactersInPath(\n        relativePath.replace(/\\\\/g, '/') as Platform.DevToolsPath.RawPathString);\n    return new URL(preEncodedPath, baseURL).toString() as Platform.DevToolsPath.UrlString;\n  }\n\n  static urlToRawPathString(fileURL: Platform.DevToolsPath.UrlString, isWindows?: boolean):\n      Platform.DevToolsPath.RawPathString {\n    console.assert(fileURL.startsWith('file://'), 'This must be a file URL.');\n    const decodedFileURL = decodeURIComponent(fileURL);\n    if (isWindows) {\n      return decodedFileURL.substr('file:///'.length).replace(/\\//g, '\\\\') as Platform.DevToolsPath.RawPathString;\n    }\n    return decodedFileURL.substr('file://'.length) as Platform.DevToolsPath.RawPathString;\n  }\n\n  static sliceUrlToEncodedPathString(url: Platform.DevToolsPath.UrlString, start: number):\n      Platform.DevToolsPath.EncodedPathString {\n    return url.substring(start) as Platform.DevToolsPath.EncodedPathString;\n  }\n\n  static substr<DevToolsPathType extends BrandedPathString>(\n      devToolsPath: DevToolsPathType, from: number, length?: number): DevToolsPathType {\n    return devToolsPath.substr(from, length) as DevToolsPathType;\n  }\n\n  static substring<DevToolsPathType extends BrandedPathString>(\n      devToolsPath: DevToolsPathType, start: number, end?: number): DevToolsPathType {\n    return devToolsPath.substring(start, end) as DevToolsPathType;\n  }\n\n  static prepend<DevToolsPathType extends BrandedPathString>(prefix: string, devToolsPath: DevToolsPathType):\n      DevToolsPathType {\n    return prefix + devToolsPath as DevToolsPathType;\n  }\n\n  static concatenate<DevToolsPathType extends BrandedPathString>(\n      devToolsPath: DevToolsPathType, ...appendage: string[]): DevToolsPathType {\n    return devToolsPath.concat(...appendage) as DevToolsPathType;\n  }\n\n  static trim<DevToolsPathType extends BrandedPathString>(devToolsPath: DevToolsPathType): DevToolsPathType {\n    return devToolsPath.trim() as DevToolsPathType;\n  }\n\n  static slice<DevToolsPathType extends BrandedPathString>(\n      devToolsPath: DevToolsPathType, start?: number, end?: number): DevToolsPathType {\n    return devToolsPath.slice(start, end) as DevToolsPathType;\n  }\n\n  static join<DevToolsPathType extends BrandedPathString>(devToolsPaths: DevToolsPathType[], separator?: string):\n      DevToolsPathType {\n    return devToolsPaths.join(separator) as DevToolsPathType;\n  }\n\n  static split<DevToolsPathType extends BrandedPathString>(\n      devToolsPath: DevToolsPathType, separator: string|RegExp, limit?: number): DevToolsPathType[] {\n    return devToolsPath.split(separator, limit) as DevToolsPathType[];\n  }\n\n  static toLowerCase<DevToolsPathType extends BrandedPathString>(devToolsPath: DevToolsPathType): DevToolsPathType {\n    return devToolsPath.toLowerCase() as DevToolsPathType;\n  }\n\n  static isValidUrlString(str: string): str is Platform.DevToolsPath.UrlString {\n    return new ParsedURL(str).isValid;\n  }\n\n  static urlWithoutHash(url: string): string {\n    const hashIndex = url.indexOf('#');\n    if (hashIndex !== -1) {\n      return url.substr(0, hashIndex);\n    }\n    return url;\n  }\n\n  static urlRegex(): RegExp {\n    if (ParsedURL.urlRegexInstance) {\n      return ParsedURL.urlRegexInstance;\n    }\n    // RegExp groups:\n    // 1 - scheme, hostname, ?port\n    // 2 - scheme (using the RFC3986 grammar)\n    // 3 - ?user:password\n    // 4 - hostname\n    // 5 - ?port\n    // 6 - ?path\n    // 7 - ?query\n    // 8 - ?fragment\n    const schemeRegex = /([A-Za-z][A-Za-z0-9+.-]*):\\/\\//;\n    const userRegex = /(?:([A-Za-z0-9\\-._~%!$&'()*+,;=:]*)@)?/;\n    const hostRegex = /((?:\\[::\\d?\\])|(?:[^\\s\\/:]*))/;\n    const portRegex = /(?::([\\d]+))?/;\n    const pathRegex = /(\\/[^#?]*)?/;\n    const queryRegex = /(?:\\?([^#]*))?/;\n    const fragmentRegex = /(?:#(.*))?/;\n\n    ParsedURL.urlRegexInstance = new RegExp(\n        '^(' + schemeRegex.source + userRegex.source + hostRegex.source + portRegex.source + ')' + pathRegex.source +\n        queryRegex.source + fragmentRegex.source + '$');\n    return ParsedURL.urlRegexInstance;\n  }\n\n  static extractPath(url: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.EncodedPathString {\n    const parsedURL = this.fromString(url);\n    return (parsedURL ? parsedURL.path : '') as Platform.DevToolsPath.EncodedPathString;\n  }\n\n  static extractOrigin(url: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.UrlString {\n    const parsedURL = this.fromString(url);\n    return parsedURL ? parsedURL.securityOrigin() : Platform.DevToolsPath.EmptyUrlString;\n  }\n\n  static extractExtension(url: string): string {\n    url = ParsedURL.urlWithoutHash(url);\n    const indexOfQuestionMark = url.indexOf('?');\n    if (indexOfQuestionMark !== -1) {\n      url = url.substr(0, indexOfQuestionMark);\n    }\n    const lastIndexOfSlash = url.lastIndexOf('/');\n    if (lastIndexOfSlash !== -1) {\n      url = url.substr(lastIndexOfSlash + 1);\n    }\n    const lastIndexOfDot = url.lastIndexOf('.');\n    if (lastIndexOfDot !== -1) {\n      url = url.substr(lastIndexOfDot + 1);\n      const lastIndexOfPercent = url.indexOf('%');\n      if (lastIndexOfPercent !== -1) {\n        return url.substr(0, lastIndexOfPercent);\n      }\n      return url;\n    }\n    return '';\n  }\n\n  static extractName(url: string): string {\n    let index = url.lastIndexOf('/');\n    const pathAndQuery = index !== -1 ? url.substr(index + 1) : url;\n    index = pathAndQuery.indexOf('?');\n    return index < 0 ? pathAndQuery : pathAndQuery.substr(0, index);\n  }\n\n  static completeURL(baseURL: Platform.DevToolsPath.UrlString, href: string): Platform.DevToolsPath.UrlString|null {\n    // Return special URLs as-is.\n    if (href.startsWith('data:') || href.startsWith('blob:') || href.startsWith('javascript:') ||\n        href.startsWith('mailto:')) {\n      return href as Platform.DevToolsPath.UrlString;\n    }\n\n    // Return absolute URLs with normalized path and other components as-is.\n    const trimmedHref = href.trim();\n    const parsedHref = this.fromString(trimmedHref);\n    if (parsedHref?.scheme) {\n      const securityOrigin = parsedHref.securityOrigin();\n      const pathText = normalizePath(parsedHref.path);\n      const queryText = parsedHref.queryParams && `?${parsedHref.queryParams}`;\n      const fragmentText = parsedHref.fragment && `#${parsedHref.fragment}`;\n      return securityOrigin + pathText + queryText + fragmentText as Platform.DevToolsPath.UrlString;\n    }\n\n    const parsedURL = this.fromString(baseURL);\n    if (!parsedURL) {\n      return null;\n    }\n\n    if (parsedURL.isDataURL()) {\n      return href as Platform.DevToolsPath.UrlString;\n    }\n\n    if (href.length > 1 && href.charAt(0) === '/' && href.charAt(1) === '/') {\n      // href starts with \"//\" which is a full URL with the protocol dropped (use the baseURL protocol).\n      return parsedURL.scheme + ':' + href as Platform.DevToolsPath.UrlString;\n    }\n\n    const securityOrigin = parsedURL.securityOrigin();\n    const pathText = parsedURL.path;\n    const queryText = parsedURL.queryParams ? '?' + parsedURL.queryParams : '';\n\n    // Empty href resolves to a URL without fragment.\n    if (!href.length) {\n      return securityOrigin + pathText + queryText as Platform.DevToolsPath.UrlString;\n    }\n\n    if (href.charAt(0) === '#') {\n      return securityOrigin + pathText + queryText + href as Platform.DevToolsPath.UrlString;\n    }\n\n    if (href.charAt(0) === '?') {\n      return securityOrigin + pathText + href as Platform.DevToolsPath.UrlString;\n    }\n\n    const hrefMatches = href.match(/^[^#?]*/);\n    if (!hrefMatches || !href.length) {\n      throw new Error('Invalid href');\n    }\n    let hrefPath: string = hrefMatches[0];\n    const hrefSuffix = href.substring(hrefPath.length);\n    if (hrefPath.charAt(0) !== '/') {\n      hrefPath = parsedURL.folderPathComponents + '/' + hrefPath;\n    }\n    return securityOrigin + normalizePath(hrefPath) + hrefSuffix as Platform.DevToolsPath.UrlString;\n  }\n\n  static splitLineAndColumn(string: string): {\n    url: Platform.DevToolsPath.UrlString,\n    lineNumber: (number|undefined),\n    columnNumber: (number|undefined),\n  } {\n    // Only look for line and column numbers in the path to avoid matching port numbers.\n    const beforePathMatch = string.match(ParsedURL.urlRegex());\n    let beforePath = '';\n    let pathAndAfter: string = string;\n    if (beforePathMatch) {\n      beforePath = beforePathMatch[1];\n      pathAndAfter = string.substring(beforePathMatch[1].length);\n    }\n\n    const lineColumnRegEx = /(?::(\\d+))?(?::(\\d+))?$/;\n    const lineColumnMatch = lineColumnRegEx.exec(pathAndAfter);\n    let lineNumber;\n    let columnNumber;\n    console.assert(Boolean(lineColumnMatch));\n    if (!lineColumnMatch) {\n      return {url: string as Platform.DevToolsPath.UrlString, lineNumber: 0, columnNumber: 0};\n    }\n\n    if (typeof (lineColumnMatch[1]) === 'string') {\n      lineNumber = parseInt(lineColumnMatch[1], 10);\n      // Immediately convert line and column to 0-based numbers.\n      lineNumber = isNaN(lineNumber) ? undefined : lineNumber - 1;\n    }\n    if (typeof (lineColumnMatch[2]) === 'string') {\n      columnNumber = parseInt(lineColumnMatch[2], 10);\n      columnNumber = isNaN(columnNumber) ? undefined : columnNumber - 1;\n    }\n\n    let url: Platform.DevToolsPath.UrlString =\n        beforePath + pathAndAfter.substring(0, pathAndAfter.length - lineColumnMatch[0].length) as\n        Platform.DevToolsPath.UrlString;\n    if (lineColumnMatch[1] === undefined && lineColumnMatch[2] === undefined) {\n      const wasmCodeOffsetRegex = /wasm-function\\[\\d+\\]:0x([a-z0-9]+)$/g;\n      const wasmCodeOffsetMatch = wasmCodeOffsetRegex.exec(pathAndAfter);\n      if (wasmCodeOffsetMatch && typeof (wasmCodeOffsetMatch[1]) === 'string') {\n        url = ParsedURL.removeWasmFunctionInfoFromURL(url);\n        columnNumber = parseInt(wasmCodeOffsetMatch[1], 16);\n        columnNumber = isNaN(columnNumber) ? undefined : columnNumber;\n      }\n    }\n\n    return {url, lineNumber, columnNumber};\n  }\n\n  static removeWasmFunctionInfoFromURL(url: string): Platform.DevToolsPath.UrlString {\n    const wasmFunctionRegEx = /:wasm-function\\[\\d+\\]/;\n    const wasmFunctionIndex = url.search(wasmFunctionRegEx);\n    if (wasmFunctionIndex === -1) {\n      return url as Platform.DevToolsPath.UrlString;\n    }\n    return ParsedURL.substring(url as Platform.DevToolsPath.UrlString, 0, wasmFunctionIndex);\n  }\n\n  private static beginsWithWindowsDriveLetter(url: string): boolean {\n    return /^[A-Za-z]:/.test(url);\n  }\n\n  private static beginsWithScheme(url: string): boolean {\n    return /^[A-Za-z][A-Za-z0-9+.-]*:/.test(url);\n  }\n\n  static isRelativeURL(url: string): boolean {\n    return !this.beginsWithScheme(url) || this.beginsWithWindowsDriveLetter(url);\n  }\n\n  get displayName(): string {\n    if (this.#displayName) {\n      return this.#displayName;\n    }\n\n    if (this.isDataURL()) {\n      return this.dataURLDisplayName();\n    }\n    if (this.isBlobURL()) {\n      return this.url;\n    }\n    if (this.isAboutBlank()) {\n      return this.url;\n    }\n\n    this.#displayName = this.lastPathComponent;\n    if (!this.#displayName) {\n      this.#displayName = (this.host || '') + '/';\n    }\n    if (this.#displayName === '/') {\n      this.#displayName = this.url;\n    }\n    return this.#displayName;\n  }\n\n  dataURLDisplayName(): string {\n    if (this.#dataURLDisplayName) {\n      return this.#dataURLDisplayName;\n    }\n    if (!this.isDataURL()) {\n      return '';\n    }\n    this.#dataURLDisplayName = Platform.StringUtilities.trimEndWithMaxLength(this.url, 20);\n    return this.#dataURLDisplayName;\n  }\n\n  isAboutBlank(): boolean {\n    return this.url === 'about:blank';\n  }\n\n  isDataURL(): boolean {\n    return this.scheme === 'data';\n  }\n\n  extractDataUrlMimeType(): {type: string|undefined, subtype: string|undefined} {\n    const regexp = /^data:((?<type>\\w+)\\/(?<subtype>\\w+))?(;base64)?,/;\n    const match = this.url.match(regexp);\n    return {\n      type: match?.groups?.type,\n      subtype: match?.groups?.subtype,\n    };\n  }\n\n  isBlobURL(): boolean {\n    return this.url.startsWith('blob:');\n  }\n\n  lastPathComponentWithFragment(): string {\n    return this.lastPathComponent + (this.fragment ? '#' + this.fragment : '');\n  }\n\n  domain(): string {\n    if (this.isDataURL()) {\n      return 'data:';\n    }\n    return this.host + (this.port ? ':' + this.port : '');\n  }\n\n  securityOrigin(): Platform.DevToolsPath.UrlString {\n    if (this.isDataURL()) {\n      return 'data:' as Platform.DevToolsPath.UrlString;\n    }\n    const scheme = this.isBlobURL() ? this.blobInnerScheme : this.scheme;\n    return scheme + '://' + this.domain() as Platform.DevToolsPath.UrlString;\n  }\n\n  urlWithoutScheme(): string {\n    if (this.scheme && this.url.startsWith(this.scheme + '://')) {\n      return this.url.substring(this.scheme.length + 3);\n    }\n    return this.url;\n  }\n\n  static urlRegexInstance: RegExp|null = null;\n}\n"]}