{"version":3,"file":"ResolverBase.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/ResolverBase.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAQ7B;;;;;;GAMG;AACH,MAAM,OAAgB,YAAY;IAChC,cAAc,GAAG,IAAI,GAAG,EAAsB,CAAC;IAM/C;;OAEG;IACH,KAAK,CAAC,OAAO,CAAC,EAAM;QAClB,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC9B,IAAI,CAAC,GAAG,EAAE,CAAC;YACT,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC;QAC3C,CAAC;QACD,OAAO,GAAG,CAAC;IACb,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,EAAM,EAAE,QAAwB;QACrC,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC9B,IAAI,CAAC,GAAG,EAAE,CAAC;YACT,MAAM,eAAe,GAAG,GAAS,EAAE,GAAE,CAAC,CAAC;YACvC,KAAK,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;gBACjE,IAAI,GAAG,EAAE,CAAC;oBACR,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAChB,CAAC;YACH,CAAC,CAAC,CAAC;YACH,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,GAAG,CAAC;IACb,CAAC;IAED;;OAEG;IACH,KAAK;QACH,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,KAAK,MAAM,CAAC,EAAE,EAAE,EAAC,MAAM,EAAC,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,EAAE,CAAC;YAC3D,MAAM,CAAC,IAAI,KAAK,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC,CAAC;QACzD,CAAC;QACD,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;IAC9B,CAAC;IAEO,kBAAkB,CAAC,EAAM;QAC/B,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAChD,IAAI,WAAW,EAAE,CAAC;YAChB,OAAO,WAAW,CAAC,OAAO,CAAC;QAC7B,CAAC;QACD,MAAM,EAAC,OAAO,EAAE,MAAM,EAAE,OAAO,EAAC,GAAG,OAAO,CAAC,aAAa,EAAK,CAAC;QAC9D,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,EAAE,EAAC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAC,CAAC,CAAC;QACxD,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,OAAO,OAAO,CAAC;IACjB,CAAC;IAES,SAAS,CAAC,EAAM,EAAE,CAAI;QAC9B,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAChD,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAC/B,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC;YACnC,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC;QACD,WAAW,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC;CACF","sourcesContent":["// Copyright 2021 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\ninterface PromiseInfo<T> {\n  promise: Promise<T>;\n  resolve: (obj: T) => void;\n  reject: (error: Error) => void;\n}\n\n/**\n * A class that facilitates resolving a id to an object of type T. If the id does not yet resolve, a promise\n * is created that gets resolved once `onResolve` is called with the corresponding id.\n *\n * This class enables clients to control the duration of the wait and the lifetime of the associated\n * promises by using the `clear` method on this class.\n */\nexport abstract class ResolverBase<Id, T> {\n  #unresolvedIds = new Map<Id, PromiseInfo<T>>();\n\n  protected abstract getForId(id: Id): T|null;\n  protected abstract startListening(): void;\n  protected abstract stopListening(): void;\n\n  /**\n   * Returns a promise that resolves once the `id` can be resolved to an object.\n   */\n  async waitFor(id: Id): Promise<T> {\n    const obj = this.getForId(id);\n    if (!obj) {\n      return await this.getOrCreatePromise(id);\n    }\n    return obj;\n  }\n\n  /**\n   * Resolve the `id`. Returns the object immediately if it can be resolved,\n   * and otherwise waits for the object to appear and calls `callback` once\n   * it is resolved.\n   */\n  tryGet(id: Id, callback: (t: T) => void): T|null {\n    const obj = this.getForId(id);\n    if (!obj) {\n      const swallowTheError = (): void => {};\n      void this.getOrCreatePromise(id).catch(swallowTheError).then(obj => {\n        if (obj) {\n          callback(obj);\n        }\n      });\n      return null;\n    }\n    return obj;\n  }\n\n  /**\n   * Aborts all waiting and rejects all unresolved promises.\n   */\n  clear(): void {\n    this.stopListening();\n    for (const [id, {reject}] of this.#unresolvedIds.entries()) {\n      reject(new Error(`Object with ${id} never resolved.`));\n    }\n    this.#unresolvedIds.clear();\n  }\n\n  private getOrCreatePromise(id: Id): Promise<T> {\n    const promiseInfo = this.#unresolvedIds.get(id);\n    if (promiseInfo) {\n      return promiseInfo.promise;\n    }\n    const {resolve, reject, promise} = Promise.withResolvers<T>();\n    this.#unresolvedIds.set(id, {promise, resolve, reject});\n    this.startListening();\n    return promise;\n  }\n\n  protected onResolve(id: Id, t: T): void {\n    const promiseInfo = this.#unresolvedIds.get(id);\n    this.#unresolvedIds.delete(id);\n    if (this.#unresolvedIds.size === 0) {\n      this.stopListening();\n    }\n    promiseInfo?.resolve(t);\n  }\n}\n"]}