{
  "version": 3,
  "sources": ["../../../../../../front_end/core/common/ResolverBase.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\ninterface PromiseInfo<T> {\n  promise: Promise<T>;\n  resolve: (obj: T) => void;\n  reject: (error: Error) => void;\n}\n\n/**\n * A class that facilitates resolving a id to an object of type T. If the id does not yet resolve, a promise\n * is created that gets resolved once `onResolve` is called with the corresponding id.\n *\n * This class enables clients to control the duration of the wait and the lifetime of the associated\n * promises by using the `clear` method on this class.\n */\nexport abstract class ResolverBase<Id, T> {\n  #unresolvedIds = new Map<Id, PromiseInfo<T>>();\n\n  protected abstract getForId(id: Id): T|null;\n  protected abstract startListening(): void;\n  protected abstract stopListening(): void;\n\n  /**\n   * Returns a promise that resolves once the `id` can be resolved to an object.\n   */\n  async waitFor(id: Id): Promise<T> {\n    const obj = this.getForId(id);\n    if (!obj) {\n      return await this.getOrCreatePromise(id);\n    }\n    return obj;\n  }\n\n  /**\n   * Resolve the `id`. Returns the object immediately if it can be resolved,\n   * and otherwise waits for the object to appear and calls `callback` once\n   * it is resolved.\n   */\n  tryGet(id: Id, callback: (t: T) => void): T|null {\n    const obj = this.getForId(id);\n    if (!obj) {\n      const swallowTheError = (): void => {};\n      void this.getOrCreatePromise(id).catch(swallowTheError).then(obj => {\n        if (obj) {\n          callback(obj);\n        }\n      });\n      return null;\n    }\n    return obj;\n  }\n\n  /**\n   * Aborts all waiting and rejects all unresolved promises.\n   */\n  clear(): void {\n    this.stopListening();\n    for (const [id, {reject}] of this.#unresolvedIds.entries()) {\n      reject(new Error(`Object with ${id} never resolved.`));\n    }\n    this.#unresolvedIds.clear();\n  }\n\n  private getOrCreatePromise(id: Id): Promise<T> {\n    const promiseInfo = this.#unresolvedIds.get(id);\n    if (promiseInfo) {\n      return promiseInfo.promise;\n    }\n    const {resolve, reject, promise} = Promise.withResolvers<T>();\n    this.#unresolvedIds.set(id, {promise, resolve, reject});\n    this.startListening();\n    return promise;\n  }\n\n  protected onResolve(id: Id, t: T): void {\n    const promiseInfo = this.#unresolvedIds.get(id);\n    this.#unresolvedIds.delete(id);\n    if (this.#unresolvedIds.size === 0) {\n      this.stopListening();\n    }\n    promiseInfo?.resolve(t);\n  }\n}\n"],
  "mappings": ";AAiBO,aAAe,aAAoB;AAAA,EACxC,iBAAiB,oBAAI,IAAwB;AAAA;AAAA;AAAA;AAAA,EAS7C,MAAM,QAAQ,IAAoB;AAChC,UAAM,MAAM,KAAK,SAAS,EAAE;AAC5B,QAAI,CAAC,KAAK;AACR,aAAO,MAAM,KAAK,mBAAmB,EAAE;AAAA,IACzC;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,IAAQ,UAAkC;AAC/C,UAAM,MAAM,KAAK,SAAS,EAAE;AAC5B,QAAI,CAAC,KAAK;AACR,YAAM,kBAAkB,MAAY;AAAA,MAAC;AACrC,WAAK,KAAK,mBAAmB,EAAE,EAAE,MAAM,eAAe,EAAE,KAAK,CAAAA,SAAO;AAClE,YAAIA,MAAK;AACP,mBAASA,IAAG;AAAA,QACd;AAAA,MACF,CAAC;AACD,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,QAAc;AACZ,SAAK,cAAc;AACnB,eAAW,CAAC,IAAI,EAAC,OAAM,CAAC,KAAK,KAAK,eAAe,QAAQ,GAAG;AAC1D,aAAO,IAAI,MAAM,eAAe,EAAE,kBAAkB,CAAC;AAAA,IACvD;AACA,SAAK,eAAe,MAAM;AAAA,EAC5B;AAAA,EAEQ,mBAAmB,IAAoB;AAC7C,UAAM,cAAc,KAAK,eAAe,IAAI,EAAE;AAC9C,QAAI,aAAa;AACf,aAAO,YAAY;AAAA,IACrB;AACA,UAAM,EAAC,SAAS,QAAQ,QAAO,IAAI,QAAQ,cAAiB;AAC5D,SAAK,eAAe,IAAI,IAAI,EAAC,SAAS,SAAS,OAAM,CAAC;AACtD,SAAK,eAAe;AACpB,WAAO;AAAA,EACT;AAAA,EAEU,UAAU,IAAQ,GAAY;AACtC,UAAM,cAAc,KAAK,eAAe,IAAI,EAAE;AAC9C,SAAK,eAAe,OAAO,EAAE;AAC7B,QAAI,KAAK,eAAe,SAAS,GAAG;AAClC,WAAK,cAAc;AAAA,IACrB;AACA,iBAAa,QAAQ,CAAC;AAAA,EACxB;AACF;",
  "names": ["obj"]
}
