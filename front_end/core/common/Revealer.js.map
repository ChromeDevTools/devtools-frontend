{"version":3,"file":"Revealer.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/Revealer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../i18n/i18n.js';\nimport type * as Platform from '../platform/platform.js';\n\nconst UIStrings = {\n  /**\n   * @description The UI destination when right clicking an item that can be revealed\n   */\n  elementsPanel: 'Elements panel',\n  /**\n   * @description The UI destination when right clicking an item that can be revealed\n   */\n  stylesSidebar: 'styles sidebar',\n  /**\n   * @description The UI destination when right clicking an item that can be revealed\n   */\n  changesDrawer: 'Changes drawer',\n  /**\n   * @description The UI destination when right clicking an item that can be revealed\n   */\n  issuesView: 'Issues view',\n  /**\n   * @description The UI destination when right clicking an item that can be revealed\n   */\n  networkPanel: 'Network panel',\n  /**\n   * @description The UI destination when right clicking an item that can be revealed\n   */\n  applicationPanel: 'Application panel',\n  /**\n   * @description The UI destination when right clicking an item that can be revealed\n   */\n  securityPanel: 'Security panel',\n  /**\n   * @description The UI destination when right clicking an item that can be revealed\n   */\n  sourcesPanel: 'Sources panel',\n  /**\n   * @description The UI destination when right clicking an item that can be revealed\n   */\n  timelinePanel: 'Performance panel',\n  /**\n   * @description The UI destination when right clicking an item that can be revealed\n   */\n  memoryInspectorPanel: 'Memory inspector panel',\n  /**\n   * @description The UI destination when revealing loaded resources through the Developer Resources Panel\n   */\n  developerResourcesPanel: 'Developer Resources panel',\n  /**\n   * @description The UI destination when revealing loaded resources through the Animations panel\n   */\n  animationsPanel: 'Animations panel',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('core/common/Revealer.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\n/**\n * Interface for global revealers, which are entities responsible for\n * dealing with revealing certain types of objects. For example, the\n * Sources panel will register a revealer for `UISourceCode` objects,\n * which will ensure that its visible in an editor tab.\n */\nexport interface Revealer<T> {\n  reveal(revealable: T, omitFocus?: boolean): Promise<void>;\n}\n\nlet revealerRegistry: RevealerRegistry|undefined;\n\n/**\n * Registration for revealers, which deals with keeping a list of all possible\n * revealers, lazily instantiating them as necessary and invoking their `reveal`\n * methods depending on the _context types_ they were registered for.\n *\n * @see Revealer\n */\nexport class RevealerRegistry {\n  private readonly registeredRevealers: Array<RevealerRegistration<unknown>> = [];\n\n  /**\n   * Yields the singleton instance, creating it on-demand when necessary.\n   *\n   * @returns the singleton instance.\n   */\n  static instance(): RevealerRegistry {\n    if (revealerRegistry === undefined) {\n      revealerRegistry = new RevealerRegistry();\n    }\n    return revealerRegistry;\n  }\n\n  /**\n   * Clears the singleton instance (if any).\n   */\n  static removeInstance(): void {\n    revealerRegistry = undefined;\n  }\n\n  /**\n   * Register a new `Revealer` as described by the `registration`.\n   *\n   * @param registration the description.\n   */\n  register(registration: RevealerRegistration<unknown>): void {\n    this.registeredRevealers.push(registration);\n  }\n\n  /**\n   * Reveals the `revealable`.\n   *\n   * @param revealable the object to reveal.\n   * @param omitFocus whether to omit focusing on the presentation of `revealable` afterwards.\n   */\n  async reveal(revealable: unknown, omitFocus: boolean): Promise<void> {\n    const revealers = await Promise.all(\n        this.getApplicableRegisteredRevealers(revealable).map(registration => registration.loadRevealer()));\n    if (revealers.length < 1) {\n      throw new Error(`No revealers found for ${revealable}`);\n    }\n    if (revealers.length > 1) {\n      throw new Error(`Conflicting reveals found for ${revealable}`);\n    }\n    return await revealers[0].reveal(revealable, omitFocus);\n  }\n\n  getApplicableRegisteredRevealers(revealable: unknown): Array<RevealerRegistration<unknown>> {\n    return this.registeredRevealers.filter(registration => {\n      for (const contextType of registration.contextTypes()) {\n        if (revealable instanceof contextType) {\n          return true;\n        }\n      }\n      return false;\n    });\n  }\n}\n\nexport function revealDestination(revealable: unknown): string|null {\n  const revealers = RevealerRegistry.instance().getApplicableRegisteredRevealers(revealable);\n  for (const {destination} of revealers) {\n    if (destination) {\n      return destination();\n    }\n  }\n  return null;\n}\n\n/**\n * Register a new `Revealer` as described by the `registration` on the singleton\n * {@link RevealerRegistry} instance.\n *\n * @param registration the description.\n */\nexport function registerRevealer<T>(registration: RevealerRegistration<T>): void {\n  RevealerRegistry.instance().register(registration);\n}\n\n/**\n * Reveals the `revealable` via the singleton {@link RevealerRegistry} instance.\n *\n * @param revealable the object to reveal.\n * @param omitFocus whether to omit focusing on the presentation of `revealable` afterwards.\n */\nexport async function reveal(revealable: unknown, omitFocus = false): Promise<void> {\n  await RevealerRegistry.instance().reveal(revealable, omitFocus);\n}\n\nexport interface RevealerRegistration<T> {\n  contextTypes: () => Array<abstract new(...any: any[]) => T>;\n  loadRevealer: () => Promise<Revealer<T>>;\n  destination?: RevealerDestination;\n}\n\nexport const RevealerDestination = {\n  DEVELOPER_RESOURCES_PANEL: i18nLazyString(UIStrings.developerResourcesPanel),\n  ELEMENTS_PANEL: i18nLazyString(UIStrings.elementsPanel),\n  STYLES_SIDEBAR: i18nLazyString(UIStrings.stylesSidebar),\n  CHANGES_DRAWER: i18nLazyString(UIStrings.changesDrawer),\n  ISSUES_VIEW: i18nLazyString(UIStrings.issuesView),\n  NETWORK_PANEL: i18nLazyString(UIStrings.networkPanel),\n  TIMELINE_PANEL: i18nLazyString(UIStrings.timelinePanel),\n  APPLICATION_PANEL: i18nLazyString(UIStrings.applicationPanel),\n  SOURCES_PANEL: i18nLazyString(UIStrings.sourcesPanel),\n  SECURITY_PANEL: i18nLazyString(UIStrings.securityPanel),\n  MEMORY_INSPECTOR_PANEL: i18nLazyString(UIStrings.memoryInspectorPanel),\n  ANIMATIONS_PANEL: i18nLazyString(UIStrings.animationsPanel),\n};\n\nexport type RevealerDestination = () => Platform.UIString.LocalizedString;\n"]}