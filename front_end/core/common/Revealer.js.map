{
  "version": 3,
  "sources": ["../../../../../../front_end/core/common/Revealer.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../i18n/i18n.js';\nimport type * as Platform from '../platform/platform.js';\n\nconst UIStrings = {\n  /**\n   * @description The UI destination when right clicking an item that can be revealed\n   */\n  elementsPanel: 'Elements panel',\n  /**\n   * @description The UI destination when right clicking an item that can be revealed\n   */\n  stylesSidebar: 'styles sidebar',\n  /**\n   * @description The UI destination when right clicking an item that can be revealed\n   */\n  changesDrawer: 'Changes drawer',\n  /**\n   * @description The UI destination when right clicking an item that can be revealed\n   */\n  issuesView: 'Issues view',\n  /**\n   * @description The UI destination when right clicking an item that can be revealed\n   */\n  networkPanel: 'Network panel',\n  /**\n   * @description The UI destination when right clicking an item that can be revealed\n   */\n  applicationPanel: 'Application panel',\n  /**\n   * @description The UI destination when right clicking an item that can be revealed\n   */\n  securityPanel: 'Security panel',\n  /**\n   * @description The UI destination when right clicking an item that can be revealed\n   */\n  sourcesPanel: 'Sources panel',\n  /**\n   * @description The UI destination when right clicking an item that can be revealed\n   */\n  timelinePanel: 'Performance panel',\n  /**\n   * @description The UI destination when right clicking an item that can be revealed\n   */\n  memoryInspectorPanel: 'Memory inspector panel',\n  /**\n   * @description The UI destination when revealing loaded resources through the Developer Resources Panel\n   */\n  developerResourcesPanel: 'Developer Resources panel',\n  /**\n   * @description The UI destination when revealing loaded resources through the Animations panel\n   */\n  animationsPanel: 'Animations panel',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('core/common/Revealer.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\n/**\n * Interface for global revealers, which are entities responsible for\n * dealing with revealing certain types of objects. For example, the\n * Sources panel will register a revealer for `UISourceCode` objects,\n * which will ensure that its visible in an editor tab.\n */\nexport interface Revealer<T> {\n  reveal(revealable: T, omitFocus?: boolean): Promise<void>;\n}\n\nlet revealerRegistry: RevealerRegistry|undefined;\n\n/**\n * Registration for revealers, which deals with keeping a list of all possible\n * revealers, lazily instantiating them as necessary and invoking their `reveal`\n * methods depending on the _context types_ they were registered for.\n *\n * @see Revealer\n */\nexport class RevealerRegistry {\n  private readonly registeredRevealers: Array<RevealerRegistration<unknown>> = [];\n\n  /**\n   * Yields the singleton instance, creating it on-demand when necessary.\n   *\n   * @returns the singleton instance.\n   */\n  static instance(): RevealerRegistry {\n    if (revealerRegistry === undefined) {\n      revealerRegistry = new RevealerRegistry();\n    }\n    return revealerRegistry;\n  }\n\n  /**\n   * Clears the singleton instance (if any).\n   */\n  static removeInstance(): void {\n    revealerRegistry = undefined;\n  }\n\n  /**\n   * Register a new `Revealer` as described by the `registration`.\n   *\n   * @param registration the description.\n   */\n  register(registration: RevealerRegistration<unknown>): void {\n    this.registeredRevealers.push(registration);\n  }\n\n  /**\n   * Reveals the `revealable`.\n   *\n   * @param revealable the object to reveal.\n   * @param omitFocus whether to omit focusing on the presentation of `revealable` afterwards.\n   */\n  async reveal(revealable: unknown, omitFocus: boolean): Promise<void> {\n    const revealers = await Promise.all(\n        this.getApplicableRegisteredRevealers(revealable).map(registration => registration.loadRevealer()));\n    if (revealers.length < 1) {\n      throw new Error(`No revealers found for ${revealable}`);\n    }\n    if (revealers.length > 1) {\n      throw new Error(`Conflicting reveals found for ${revealable}`);\n    }\n    return await revealers[0].reveal(revealable, omitFocus);\n  }\n\n  getApplicableRegisteredRevealers(revealable: unknown): Array<RevealerRegistration<unknown>> {\n    return this.registeredRevealers.filter(registration => {\n      for (const contextType of registration.contextTypes()) {\n        if (revealable instanceof contextType) {\n          return true;\n        }\n      }\n      return false;\n    });\n  }\n}\n\nexport function revealDestination(revealable: unknown): string|null {\n  const revealers = RevealerRegistry.instance().getApplicableRegisteredRevealers(revealable);\n  for (const {destination} of revealers) {\n    if (destination) {\n      return destination();\n    }\n  }\n  return null;\n}\n\n/**\n * Register a new `Revealer` as described by the `registration` on the singleton\n * {@link RevealerRegistry} instance.\n *\n * @param registration the description.\n */\nexport function registerRevealer<T>(registration: RevealerRegistration<T>): void {\n  RevealerRegistry.instance().register(registration);\n}\n\n/**\n * Reveals the `revealable` via the singleton {@link RevealerRegistry} instance.\n *\n * @param revealable the object to reveal.\n * @param omitFocus whether to omit focusing on the presentation of `revealable` afterwards.\n */\nexport async function reveal(revealable: unknown, omitFocus = false): Promise<void> {\n  await RevealerRegistry.instance().reveal(revealable, omitFocus);\n}\n\nexport interface RevealerRegistration<T> {\n  contextTypes: () => Array<abstract new(...any: any[]) => T>;\n  loadRevealer: () => Promise<Revealer<T>>;\n  destination?: RevealerDestination;\n}\n\nexport const RevealerDestination = {\n  DEVELOPER_RESOURCES_PANEL: i18nLazyString(UIStrings.developerResourcesPanel),\n  ELEMENTS_PANEL: i18nLazyString(UIStrings.elementsPanel),\n  STYLES_SIDEBAR: i18nLazyString(UIStrings.stylesSidebar),\n  CHANGES_DRAWER: i18nLazyString(UIStrings.changesDrawer),\n  ISSUES_VIEW: i18nLazyString(UIStrings.issuesView),\n  NETWORK_PANEL: i18nLazyString(UIStrings.networkPanel),\n  TIMELINE_PANEL: i18nLazyString(UIStrings.timelinePanel),\n  APPLICATION_PANEL: i18nLazyString(UIStrings.applicationPanel),\n  SOURCES_PANEL: i18nLazyString(UIStrings.sourcesPanel),\n  SECURITY_PANEL: i18nLazyString(UIStrings.securityPanel),\n  MEMORY_INSPECTOR_PANEL: i18nLazyString(UIStrings.memoryInspectorPanel),\n  ANIMATIONS_PANEL: i18nLazyString(UIStrings.animationsPanel),\n};\n\nexport type RevealerDestination = () => Platform.UIString.LocalizedString;\n"],
  "mappings": "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",
  "names": []
}
