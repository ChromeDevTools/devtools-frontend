{"version":3,"file":"SegmentedRange.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/SegmentedRange.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,QAAQ,MAAM,yBAAyB,CAAC;AAEpD,MAAM,OAAO,OAAO;IAClB,KAAK,CAAS;IACd,GAAG,CAAS;IACZ,IAAI,CAAI;IAER,YAAY,KAAa,EAAE,GAAW,EAAE,IAAO;QAC7C,IAAI,KAAK,GAAG,GAAG,EAAE,CAAC;YAChB,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACrC,CAAC;QACD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED,UAAU,CAAC,IAAgB;QACzB,OAAO,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC;IACxD,CAAC;CACF;AAED,MAAM,OAAO,cAAc;IACzB,SAAS,GAAsB,EAAE,CAAC;IACzB,cAAc,CAAuE;IAE9F,YAAY,aAA0E;QACpF,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACtC,CAAC;IAED,MAAM,CAAC,UAAsB;QAC3B,qDAAqD;QACrD,IAAI,UAAU,GAAG,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;QAC7G,IAAI,QAAQ,GAAG,UAAU,CAAC;QAC1B,IAAI,MAAM,GAA2B,IAAI,CAAC;QAC1C,IAAI,UAAU,GAAG,CAAC,EAAE,CAAC;YACnB,sCAAsC;YACtC,MAAM,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;YACxD,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC;YACrD,IAAI,MAAM,EAAE,CAAC;gBACX,EAAE,UAAU,CAAC;gBACb,UAAU,GAAG,MAAM,CAAC;YACtB,CAAC;iBAAM,IAAI,IAAI,CAAC,SAAS,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,UAAU,CAAC,KAAK,EAAE,CAAC;gBAClE,sEAAsE;gBACtE,gEAAgE;gBAChE,IAAI,UAAU,CAAC,GAAG,GAAG,gBAAgB,CAAC,GAAG,EAAE,CAAC;oBAC1C,IAAI,CAAC,SAAS,CAAC,MAAM,CACjB,UAAU,EAAE,CAAC,EAAE,IAAI,OAAO,CAAI,UAAU,CAAC,GAAG,EAAE,gBAAgB,CAAC,GAAG,EAAE,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;gBAClG,CAAC;gBACD,gBAAgB,CAAC,GAAG,GAAG,UAAU,CAAC,KAAK,CAAC;YAC1C,CAAC;QACH,CAAC;QACD,oEAAoE;QACpE,OAAO,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,UAAU,CAAC,GAAG,EAAE,CAAC;YAC1F,EAAE,QAAQ,CAAC;QACb,CAAC;QACD,4DAA4D;QAC5D,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;YACrC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC7D,IAAI,MAAM,EAAE,CAAC;gBACX,QAAQ,EAAE,CAAC;gBACX,UAAU,GAAG,MAAM,CAAC;YACtB,CAAC;iBAAM,IAAI,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC;gBAC3D,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,KAAK,GAAG,UAAU,CAAC,GAAG,CAAC;YAClD,CAAC;QACH,CAAC;QACD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,EAAE,QAAQ,GAAG,UAAU,EAAE,UAAU,CAAC,CAAC;IACvE,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAEO,QAAQ,CAAC,KAAiB,EAAE,MAAkB;QACpD,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACzE,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;QAC3B,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;QAC7C,OAAO,MAAM,CAAC;IAChB,CAAC;CACF","sourcesContent":["// Copyright 2016 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../platform/platform.js';\n\nexport class Segment<T> {\n  begin: number;\n  end: number;\n  data: T;\n\n  constructor(begin: number, end: number, data: T) {\n    if (begin > end) {\n      throw new Error('Invalid segment');\n    }\n    this.begin = begin;\n    this.end = end;\n    this.data = data;\n  }\n\n  intersects(that: Segment<T>): boolean {\n    return this.begin < that.end && that.begin < this.end;\n  }\n}\n\nexport class SegmentedRange<T> {\n  #segments: Array<Segment<T>> = [];\n  readonly #mergeCallback: ((arg0: Segment<T>, arg1: Segment<T>) => Segment<T>| null)|undefined;\n\n  constructor(mergeCallback?: ((arg0: Segment<T>, arg1: Segment<T>) => Segment<T>| null)) {\n    this.#mergeCallback = mergeCallback;\n  }\n\n  append(newSegment: Segment<T>): void {\n    // 1. Find the proper insertion point for new segment\n    let startIndex = Platform.ArrayUtilities.lowerBound(this.#segments, newSegment, (a, b) => a.begin - b.begin);\n    let endIndex = startIndex;\n    let merged: (Segment<T>|null)|null = null;\n    if (startIndex > 0) {\n      // 2. Try mering the preceding segment\n      const precedingSegment = this.#segments[startIndex - 1];\n      merged = this.tryMerge(precedingSegment, newSegment);\n      if (merged) {\n        --startIndex;\n        newSegment = merged;\n      } else if (this.#segments[startIndex - 1].end >= newSegment.begin) {\n        // 2a. If merge failed and segments overlap, adjust preceding segment.\n        // If an old segment entirely contains new one, split it in two.\n        if (newSegment.end < precedingSegment.end) {\n          this.#segments.splice(\n              startIndex, 0, new Segment<T>(newSegment.end, precedingSegment.end, precedingSegment.data));\n        }\n        precedingSegment.end = newSegment.begin;\n      }\n    }\n    // 3. Consume all segments that are entirely covered by the new one.\n    while (endIndex < this.#segments.length && this.#segments[endIndex].end <= newSegment.end) {\n      ++endIndex;\n    }\n    // 4. Merge or adjust the succeeding segment if it overlaps.\n    if (endIndex < this.#segments.length) {\n      merged = this.tryMerge(newSegment, this.#segments[endIndex]);\n      if (merged) {\n        endIndex++;\n        newSegment = merged;\n      } else if (newSegment.intersects(this.#segments[endIndex])) {\n        this.#segments[endIndex].begin = newSegment.end;\n      }\n    }\n    this.#segments.splice(startIndex, endIndex - startIndex, newSegment);\n  }\n\n  segments(): Array<Segment<T>> {\n    return this.#segments;\n  }\n\n  private tryMerge(first: Segment<T>, second: Segment<T>): Segment<T>|null {\n    const merged = this.#mergeCallback && this.#mergeCallback(first, second);\n    if (!merged) {\n      return null;\n    }\n    merged.begin = first.begin;\n    merged.end = Math.max(first.end, second.end);\n    return merged;\n  }\n}\n"]}