{"version":3,"file":"Settings.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/Settings.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2009 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../platform/platform.js';\nimport * as Root from '../root/root.js';\n\nimport {Console} from './Console.js';\nimport type {EventDescriptor, EventTargetEvent, GenericEvents} from './EventTarget.js';\nimport {ObjectWrapper} from './Object.js';\nimport {\n  getLocalizedSettingsCategory,\n  getRegisteredSettings as getRegisteredSettingsInternal,\n  type LearnMore,\n  maybeRemoveSettingExtension,\n  type RegExpSettingItem,\n  registerSettingExtension,\n  registerSettingsForTest,\n  resetSettings,\n  SettingCategory,\n  type SettingExtensionOption,\n  type SettingRegistration,\n  SettingType,\n} from './SettingRegistration.js';\n\nlet settingsInstance: Settings|undefined;\n\nexport class Settings {\n  readonly #sessionStorage = new SettingsStorage({});\n  settingNameSet = new Set<string>();\n  orderValuesBySettingCategory = new Map<SettingCategory, Set<number>>();\n  #eventSupport = new ObjectWrapper<GenericEvents>();\n  #registry = new Map<string, Setting<unknown>>();\n  readonly moduleSettings = new Map<string, Setting<unknown>>();\n  #logSettingAccess?: (name: string, value: number|string|boolean) => Promise<void>;\n\n  private constructor(\n      readonly syncedStorage: SettingsStorage,\n      readonly globalStorage: SettingsStorage,\n      readonly localStorage: SettingsStorage,\n      logSettingAccess?: (name: string, value: number|string|boolean) => Promise<void>,\n  ) {\n    this.#logSettingAccess = logSettingAccess;\n\n    for (const registration of this.getRegisteredSettings()) {\n      const {settingName, defaultValue, storageType} = registration;\n      const isRegex = registration.settingType === SettingType.REGEX;\n\n      const evaluatedDefaultValue =\n          typeof defaultValue === 'function' ? defaultValue(Root.Runtime.hostConfig) : defaultValue;\n      const setting = isRegex && typeof evaluatedDefaultValue === 'string' ?\n          this.createRegExpSetting(settingName, evaluatedDefaultValue, undefined, storageType) :\n          this.createSetting(settingName, evaluatedDefaultValue, storageType);\n\n      setting.setTitleFunction(registration.title);\n      if (registration.userActionCondition) {\n        setting.setRequiresUserAction(Boolean(Root.Runtime.Runtime.queryParam(registration.userActionCondition)));\n      }\n      setting.setRegistration(registration);\n\n      this.registerModuleSetting(setting);\n    }\n  }\n\n  getRegisteredSettings(): SettingRegistration[] {\n    return getRegisteredSettingsInternal();\n  }\n\n  static hasInstance(): boolean {\n    return typeof settingsInstance !== 'undefined';\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    syncedStorage: SettingsStorage|null,\n    globalStorage: SettingsStorage|null,\n    localStorage: SettingsStorage|null,\n    logSettingAccess?: (name: string, value: number|string|boolean) => Promise<void>,\n  } = {forceNew: null, syncedStorage: null, globalStorage: null, localStorage: null}): Settings {\n    const {forceNew, syncedStorage, globalStorage, localStorage, logSettingAccess} = opts;\n    if (!settingsInstance || forceNew) {\n      if (!syncedStorage || !globalStorage || !localStorage) {\n        throw new Error(`Unable to create settings: global and local storage must be provided: ${new Error().stack}`);\n      }\n\n      settingsInstance = new Settings(syncedStorage, globalStorage, localStorage, logSettingAccess);\n    }\n\n    return settingsInstance;\n  }\n\n  static removeInstance(): void {\n    settingsInstance = undefined;\n  }\n\n  private registerModuleSetting(setting: Setting<unknown>): void {\n    const settingName = setting.name;\n    const category = setting.category();\n    const order = setting.order();\n    if (this.settingNameSet.has(settingName)) {\n      throw new Error(`Duplicate Setting name '${settingName}'`);\n    }\n    if (category && order) {\n      const orderValues = this.orderValuesBySettingCategory.get(category) || new Set();\n      if (orderValues.has(order)) {\n        throw new Error(`Duplicate order value '${order}' for settings category '${category}'`);\n      }\n      orderValues.add(order);\n      this.orderValuesBySettingCategory.set(category, orderValues);\n    }\n    this.settingNameSet.add(settingName);\n    this.moduleSettings.set(setting.name, setting);\n  }\n\n  static normalizeSettingName(name: string): string {\n    if ([\n          VersionController.GLOBAL_VERSION_SETTING_NAME,\n          VersionController.SYNCED_VERSION_SETTING_NAME,\n          VersionController.LOCAL_VERSION_SETTING_NAME,\n          'currentDockState',\n          'isUnderTest',\n        ].includes(name)) {\n      return name;\n    }\n    return Platform.StringUtilities.toKebabCase(name);\n  }\n\n  /**\n   * Prefer a module setting if this setting is one that you might not want to\n   * surface to the user to control themselves. Examples of these are settings\n   * to store UI state such as how a user choses to position a split widget or\n   * which panel they last opened.\n   * If you are creating a setting that you expect the user to control, and\n   * sync, prefer {@link Settings.createSetting}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  moduleSetting<T = any>(settingName: string): Setting<T> {\n    const setting = this.moduleSettings.get(settingName) as Setting<T>;\n    if (!setting) {\n      throw new Error('No setting registered: ' + settingName);\n    }\n    return setting;\n  }\n\n  settingForTest(settingName: string): Setting<unknown> {\n    const setting = this.#registry.get(settingName);\n    if (!setting) {\n      throw new Error('No setting registered: ' + settingName);\n    }\n    return setting;\n  }\n\n  /**\n   * Get setting via key, and create a new setting if the requested setting does not exist.\n   * @param key kebab-case string ID\n   * @param defaultValue\n   * @param storageType If not specified, SettingStorageType.GLOBAL is used.\n   */\n  createSetting<T>(key: string, defaultValue: T, storageType?: SettingStorageType): Setting<T> {\n    const storage = this.storageFromType(storageType);\n    let setting = this.#registry.get(key) as Setting<T>;\n    if (!setting) {\n      setting = new Setting(key, defaultValue, this.#eventSupport, storage, this.#logSettingAccess);\n      this.#registry.set(key, setting);\n    }\n    return setting;\n  }\n\n  createLocalSetting<T>(key: string, defaultValue: T): Setting<T> {\n    return this.createSetting(key, defaultValue, SettingStorageType.LOCAL);\n  }\n\n  createRegExpSetting(key: string, defaultValue: string, regexFlags?: string, storageType?: SettingStorageType):\n      RegExpSetting {\n    if (!this.#registry.get(key)) {\n      this.#registry.set(\n          key,\n          new RegExpSetting(\n              key, defaultValue, this.#eventSupport, this.storageFromType(storageType), regexFlags,\n              this.#logSettingAccess));\n    }\n    return this.#registry.get(key) as RegExpSetting;\n  }\n\n  clearAll(): void {\n    this.globalStorage.removeAll();\n    this.syncedStorage.removeAll();\n    this.localStorage.removeAll();\n    new VersionController().resetToCurrent();\n  }\n\n  private storageFromType(storageType?: SettingStorageType): SettingsStorage {\n    switch (storageType) {\n      case SettingStorageType.LOCAL:\n        return this.localStorage;\n      case SettingStorageType.SESSION:\n        return this.#sessionStorage;\n      case SettingStorageType.GLOBAL:\n        return this.globalStorage;\n      case SettingStorageType.SYNCED:\n        return this.syncedStorage;\n    }\n    return this.globalStorage;\n  }\n\n  getRegistry(): Map<string, Setting<unknown>> {\n    return this.#registry;\n  }\n}\n\nexport interface SettingsBackingStore {\n  register(setting: string): void;\n  get(setting: string): Promise<string>;\n  set(setting: string, value: string): void;\n  remove(setting: string): void;\n  clear(): void;\n}\n\nexport const NOOP_STORAGE: SettingsBackingStore = {\n  register: () => {},\n  set: () => {},\n  get: () => Promise.resolve(''),\n  remove: () => {},\n  clear: () => {},\n};\n\nexport class SettingsStorage {\n  constructor(\n      private object: Record<string, string>, private readonly backingStore: SettingsBackingStore = NOOP_STORAGE,\n      private readonly storagePrefix = '') {\n  }\n\n  register(name: string): void {\n    name = this.storagePrefix + name;\n    this.backingStore.register(name);\n  }\n\n  set(name: string, value: string): void {\n    name = this.storagePrefix + name;\n    this.object[name] = value;\n    this.backingStore.set(name, value);\n  }\n\n  has(name: string): boolean {\n    name = this.storagePrefix + name;\n    return name in this.object;\n  }\n\n  get(name: string): string {\n    name = this.storagePrefix + name;\n    return this.object[name];\n  }\n\n  async forceGet(originalName: string): Promise<string> {\n    const name = this.storagePrefix + originalName;\n    const value = await this.backingStore.get(name);\n    if (value && value !== this.object[name]) {\n      this.set(originalName, value);\n    } else if (!value) {\n      this.remove(originalName);\n    }\n    return value;\n  }\n\n  remove(name: string): void {\n    name = this.storagePrefix + name;\n    delete this.object[name];\n    this.backingStore.remove(name);\n  }\n\n  removeAll(): void {\n    this.object = {};\n    this.backingStore.clear();\n  }\n\n  keys(): string[] {\n    return Object.keys(this.object);\n  }\n\n  dumpSizes(): void {\n    Console.instance().log('Ten largest settings: ');\n    // @ts-expect-error __proto__ optimization\n    const sizes: Record<string, number> = {__proto__: null};\n    for (const key in this.object) {\n      sizes[key] = this.object[key].length;\n    }\n    const keys = Object.keys(sizes);\n\n    function comparator(key1: string, key2: string): number {\n      return sizes[key2] - sizes[key1];\n    }\n\n    keys.sort(comparator);\n\n    for (let i = 0; i < 10 && i < keys.length; ++i) {\n      Console.instance().log('Setting: \\'' + keys[i] + '\\', size: ' + sizes[keys[i]]);\n    }\n  }\n}\n\nfunction removeSetting(setting: {name: string, storage: SettingsStorage}): void {\n  const name = setting.name;\n  const settings = Settings.instance();\n\n  settings.getRegistry().delete(name);\n  settings.moduleSettings.delete(name);\n\n  setting.storage.remove(name);\n}\n\nexport class Deprecation {\n  readonly disabled: boolean;\n  readonly warning: Platform.UIString.LocalizedString;\n  readonly experiment?: Root.Runtime.Experiment;\n\n  constructor({deprecationNotice}: SettingRegistration) {\n    if (!deprecationNotice) {\n      throw new Error('Cannot create deprecation info for a non-deprecated setting');\n    }\n    this.disabled = deprecationNotice.disabled;\n    this.warning = deprecationNotice.warning();\n    this.experiment = deprecationNotice.experiment ?\n        Root.Runtime.experiments.allConfigurableExperiments().find(e => e.name === deprecationNotice.experiment) :\n        undefined;\n  }\n}\n\nexport class Setting<V> {\n  #titleFunction?: () => Platform.UIString.LocalizedString;\n  #title!: Platform.UIString.LocalizedString;\n  #registration: SettingRegistration|null = null;\n  #requiresUserAction?: boolean;\n  #value?: V;\n  // TODO(crbug.com/1172300) Type cannot be inferred without changes to consumers. See above.\n  #serializer: Serializer<unknown, V> = JSON;\n  #hadUserAction?: boolean;\n  #disabled?: boolean;\n  #deprecation: Deprecation|null = null;\n  #loggedInitialAccess = false;\n  #logSettingAccess?: (name: string, value: number|string|boolean) => Promise<void>;\n\n  constructor(\n      readonly name: string, readonly defaultValue: V, private readonly eventSupport: ObjectWrapper<GenericEvents>,\n      readonly storage: SettingsStorage,\n      logSettingAccess?: (name: string, value: number|string|boolean) => Promise<void>) {\n    storage.register(this.name);\n    this.#logSettingAccess = logSettingAccess;\n  }\n\n  setSerializer(serializer: Serializer<unknown, V>): void {\n    this.#serializer = serializer;\n  }\n\n  addChangeListener(listener: (arg0: EventTargetEvent<V>) => void, thisObject?: Object): EventDescriptor {\n    return this.eventSupport.addEventListener(this.name, listener, thisObject);\n  }\n\n  removeChangeListener(listener: (arg0: EventTargetEvent<V>) => void, thisObject?: Object): void {\n    this.eventSupport.removeEventListener(this.name, listener, thisObject);\n  }\n\n  title(): Platform.UIString.LocalizedString {\n    if (this.#title) {\n      return this.#title;\n    }\n    if (this.#titleFunction) {\n      return this.#titleFunction();\n    }\n    return '' as Platform.UIString.LocalizedString;\n  }\n\n  setTitleFunction(titleFunction: (() => Platform.UIString.LocalizedString)|undefined): void {\n    if (titleFunction) {\n      this.#titleFunction = titleFunction;\n    }\n  }\n\n  setTitle(title: Platform.UIString.LocalizedString): void {\n    this.#title = title;\n  }\n\n  setRequiresUserAction(requiresUserAction: boolean): void {\n    this.#requiresUserAction = requiresUserAction;\n  }\n\n  disabled(): boolean {\n    if (this.#registration?.disabledCondition) {\n      const {disabled} = this.#registration.disabledCondition(Root.Runtime.hostConfig);\n      // If registration does not disable it, pass through to #disabled\n      // attribute check.\n      if (disabled) {\n        return true;\n      }\n    }\n    return this.#disabled || false;\n  }\n\n  disabledReasons(): Platform.UIString.LocalizedString[] {\n    if (this.#registration?.disabledCondition) {\n      const result = this.#registration.disabledCondition(Root.Runtime.hostConfig);\n      if (result.disabled) {\n        return result.reasons;\n      }\n    }\n    return [];\n  }\n\n  setDisabled(disabled: boolean): void {\n    this.#disabled = disabled;\n    this.eventSupport.dispatchEventToListeners(this.name);\n  }\n\n  #maybeLogAccess(value: V): void {\n    try {\n      const valueToLog = typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean' ?\n          value :\n          this.#serializer?.stringify(value);\n      if (valueToLog !== undefined && this.#logSettingAccess) {\n        void this.#logSettingAccess(this.name, valueToLog);\n      }\n    } catch {\n    }\n  }\n\n  #maybeLogInitialAccess(value: V): void {\n    if (!this.#loggedInitialAccess) {\n      this.#maybeLogAccess(value);\n      this.#loggedInitialAccess = true;\n    }\n  }\n\n  get(): V {\n    if (this.#requiresUserAction && !this.#hadUserAction) {\n      this.#maybeLogInitialAccess(this.defaultValue);\n      return this.defaultValue;\n    }\n\n    if (typeof this.#value !== 'undefined') {\n      this.#maybeLogInitialAccess(this.#value);\n      return this.#value;\n    }\n\n    this.#value = this.defaultValue;\n    if (this.storage.has(this.name)) {\n      try {\n        this.#value = this.#serializer.parse(this.storage.get(this.name));\n      } catch {\n        this.storage.remove(this.name);\n      }\n    }\n    this.#maybeLogInitialAccess(this.#value);\n    return this.#value;\n  }\n\n  // Prefer this getter for settings which are \"disableable\". The plain getter returns `this.#value`,\n  // even if the setting is disabled, which means the callsite has to explicitly call the `disabled()`\n  // getter and add its own logic for the disabled state.\n  getIfNotDisabled(): V|undefined {\n    if (this.disabled()) {\n      return;\n    }\n    return this.get();\n  }\n\n  async forceGet(): Promise<V> {\n    const name = this.name;\n    const oldValue = this.storage.get(name);\n    const value = await this.storage.forceGet(name);\n    this.#value = this.defaultValue;\n    if (value) {\n      try {\n        this.#value = this.#serializer.parse(value);\n      } catch {\n        this.storage.remove(this.name);\n      }\n    }\n\n    if (oldValue !== value) {\n      this.eventSupport.dispatchEventToListeners(this.name, this.#value);\n    }\n\n    this.#maybeLogInitialAccess(this.#value);\n    return this.#value;\n  }\n\n  set(value: V): void {\n    this.#maybeLogAccess(value);\n    this.#hadUserAction = true;\n    this.#value = value;\n    try {\n      const settingString = this.#serializer.stringify(value);\n      try {\n        this.storage.set(this.name, settingString);\n      } catch (e) {\n        this.printSettingsSavingError(e.message, settingString);\n      }\n    } catch (e) {\n      Console.instance().error('Cannot stringify setting with name: ' + this.name + ', error: ' + e.message);\n    }\n    this.eventSupport.dispatchEventToListeners(this.name, value);\n  }\n\n  setRegistration(registration: SettingRegistration): void {\n    this.#registration = registration;\n    const {deprecationNotice} = registration;\n    if (deprecationNotice?.disabled) {\n      const experiment = deprecationNotice.experiment ?\n          Root.Runtime.experiments.allConfigurableExperiments().find(e => e.name === deprecationNotice.experiment) :\n          undefined;\n      if ((!experiment || experiment.isEnabled())) {\n        this.set(this.defaultValue);\n        this.setDisabled(true);\n      }\n    }\n  }\n\n  type(): SettingType|null {\n    if (this.#registration) {\n      return this.#registration.settingType;\n    }\n    return null;\n  }\n\n  options(): SimpleSettingOption[] {\n    if (this.#registration && this.#registration.options) {\n      return this.#registration.options.map(opt => {\n        const {value, title, text, raw} = opt;\n        return {\n          value,\n          title: title(),\n          text: typeof text === 'function' ? text() : text,\n          raw,\n        };\n      });\n    }\n    return [];\n  }\n\n  reloadRequired(): boolean|null {\n    if (this.#registration) {\n      return this.#registration.reloadRequired || null;\n    }\n    return null;\n  }\n\n  category(): SettingCategory|null {\n    if (this.#registration) {\n      return this.#registration.category || null;\n    }\n    return null;\n  }\n\n  tags(): string|null {\n    if (this.#registration && this.#registration.tags) {\n      // Get localized keys and separate by null character to prevent fuzzy matching from matching across them.\n      return this.#registration.tags.map(tag => tag()).join('\\0');\n    }\n    return null;\n  }\n\n  order(): number|null {\n    if (this.#registration) {\n      return this.#registration.order || null;\n    }\n    return null;\n  }\n\n  /**\n   * See {@link LearnMore} for more info\n   */\n  learnMore(): LearnMore|null {\n    return this.#registration?.learnMore ?? null;\n  }\n\n  get deprecation(): Deprecation|null {\n    if (!this.#registration || !this.#registration.deprecationNotice) {\n      return null;\n    }\n    if (!this.#deprecation) {\n      this.#deprecation = new Deprecation(this.#registration);\n    }\n    return this.#deprecation;\n  }\n\n  private printSettingsSavingError(message: string, value: string): void {\n    const errorMessage =\n        'Error saving setting with name: ' + this.name + ', value length: ' + value.length + '. Error: ' + message;\n    console.error(errorMessage);\n    Console.instance().error(errorMessage);\n    this.storage.dumpSizes();\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport class RegExpSetting extends Setting<any> {\n  #regexFlags: string|undefined;\n  #regex?: RegExp|null;\n\n  constructor(\n      name: string, defaultValue: string, eventSupport: ObjectWrapper<GenericEvents>, storage: SettingsStorage,\n      regexFlags?: string, logSettingAccess?: (name: string, value: number|string|boolean) => Promise<void>) {\n    super(name, defaultValue ? [{pattern: defaultValue}] : [], eventSupport, storage, logSettingAccess);\n    this.#regexFlags = regexFlags;\n  }\n\n  override get(): string {\n    const result = [];\n    const items = this.getAsArray();\n    for (let i = 0; i < items.length; ++i) {\n      const item = items[i];\n      if (item.pattern && !item.disabled) {\n        result.push(item.pattern);\n      }\n    }\n    return result.join('|');\n  }\n\n  getAsArray(): RegExpSettingItem[] {\n    return super.get();\n  }\n\n  override set(value: string): void {\n    this.setAsArray([{pattern: value, disabled: false}]);\n  }\n\n  setAsArray(value: RegExpSettingItem[]): void {\n    this.#regex = undefined;\n    super.set(value);\n  }\n\n  asRegExp(): RegExp|null {\n    if (typeof this.#regex !== 'undefined') {\n      return this.#regex;\n    }\n    this.#regex = null;\n    try {\n      const pattern = this.get();\n      if (pattern) {\n        this.#regex = new RegExp(pattern, this.#regexFlags || '');\n      }\n    } catch {\n    }\n    return this.#regex;\n  }\n}\n\n// The VersionController does a lot of mapping and restructuring which often need\n// typecasting to any, allow it in there\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport class VersionController {\n  static readonly GLOBAL_VERSION_SETTING_NAME = 'inspectorVersion';\n  static readonly SYNCED_VERSION_SETTING_NAME = 'syncedInspectorVersion';\n  static readonly LOCAL_VERSION_SETTING_NAME = 'localInspectorVersion';\n\n  static readonly CURRENT_VERSION = 40;\n\n  readonly #globalVersionSetting: Setting<number>;\n  readonly #syncedVersionSetting: Setting<number>;\n  readonly #localVersionSetting: Setting<number>;\n\n  constructor() {\n    // If no version setting is found, we initialize with the current version and don't do anything.\n    this.#globalVersionSetting = Settings.instance().createSetting(\n        VersionController.GLOBAL_VERSION_SETTING_NAME, VersionController.CURRENT_VERSION, SettingStorageType.GLOBAL);\n    this.#syncedVersionSetting = Settings.instance().createSetting(\n        VersionController.SYNCED_VERSION_SETTING_NAME, VersionController.CURRENT_VERSION, SettingStorageType.SYNCED);\n    this.#localVersionSetting = Settings.instance().createSetting(\n        VersionController.LOCAL_VERSION_SETTING_NAME, VersionController.CURRENT_VERSION, SettingStorageType.LOCAL);\n  }\n\n  /**\n   * Force re-sets all version number settings to the current version without\n   * running any migrations.\n   */\n  resetToCurrent(): void {\n    this.#globalVersionSetting.set(VersionController.CURRENT_VERSION);\n    this.#syncedVersionSetting.set(VersionController.CURRENT_VERSION);\n    this.#localVersionSetting.set(VersionController.CURRENT_VERSION);\n  }\n\n  /**\n   * Runs the appropriate migrations and updates the version settings accordingly.\n   *\n   * To determine what migrations to run we take the minimum of all version number settings.\n   *\n   * IMPORTANT: All migrations must be idempotent since they might be applied multiple times.\n   */\n  updateVersion(): void {\n    const currentVersion = VersionController.CURRENT_VERSION;\n    const minimumVersion =\n        Math.min(this.#globalVersionSetting.get(), this.#syncedVersionSetting.get(), this.#localVersionSetting.get());\n    const methodsToRun = this.methodsToRunToUpdateVersion(minimumVersion, currentVersion);\n    console.assert(\n        // @ts-expect-error\n        this[`updateVersionFrom${currentVersion}To${currentVersion + 1}`] === undefined,\n        'Unexpected migration method found. Increment CURRENT_VERSION or remove the method.');\n    for (const method of methodsToRun) {\n      // @ts-expect-error Special version method matching\n      this[method].call(this);\n    }\n    this.resetToCurrent();\n  }\n\n  private methodsToRunToUpdateVersion(oldVersion: number, currentVersion: number): string[] {\n    const result = [];\n    for (let i = oldVersion; i < currentVersion; ++i) {\n      result.push('updateVersionFrom' + i + 'To' + (i + 1));\n    }\n    return result;\n  }\n\n  updateVersionFrom0To1(): void {\n    this.clearBreakpointsWhenTooMany(Settings.instance().createLocalSetting('breakpoints', []), 500000);\n  }\n\n  updateVersionFrom1To2(): void {\n    Settings.instance().createSetting('previouslyViewedFiles', []).set([]);\n  }\n\n  updateVersionFrom2To3(): void {\n    Settings.instance().createSetting('fileSystemMapping', {}).set({});\n    removeSetting(Settings.instance().createSetting('fileMappingEntries', []));\n  }\n\n  updateVersionFrom3To4(): void {\n    const advancedMode = Settings.instance().createSetting('showHeaSnapshotObjectsHiddenProperties', false);\n    moduleSetting('showAdvancedHeapSnapshotProperties').set(advancedMode.get());\n    removeSetting(advancedMode);\n  }\n\n  updateVersionFrom4To5(): void {\n    const settingNames: Record<string, string> = {\n      FileSystemViewSidebarWidth: 'fileSystemViewSplitViewState',\n      elementsSidebarWidth: 'elementsPanelSplitViewState',\n      StylesPaneSplitRatio: 'stylesPaneSplitViewState',\n      heapSnapshotRetainersViewSize: 'heapSnapshotSplitViewState',\n      'InspectorView.splitView': 'InspectorView.splitViewState',\n      'InspectorView.screencastSplitView': 'InspectorView.screencastSplitViewState',\n      'Inspector.drawerSplitView': 'Inspector.drawerSplitViewState',\n      layerDetailsSplitView: 'layerDetailsSplitViewState',\n      networkSidebarWidth: 'networkPanelSplitViewState',\n      sourcesSidebarWidth: 'sourcesPanelSplitViewState',\n      scriptsPanelNavigatorSidebarWidth: 'sourcesPanelNavigatorSplitViewState',\n      sourcesPanelSplitSidebarRatio: 'sourcesPanelDebuggerSidebarSplitViewState',\n      'timeline-details': 'timelinePanelDetailsSplitViewState',\n      'timeline-split': 'timelinePanelRecorsSplitViewState',\n      'timeline-view': 'timelinePanelTimelineStackSplitViewState',\n      auditsSidebarWidth: 'auditsPanelSplitViewState',\n      layersSidebarWidth: 'layersPanelSplitViewState',\n      profilesSidebarWidth: 'profilesPanelSplitViewState',\n      resourcesSidebarWidth: 'resourcesPanelSplitViewState',\n    };\n    const empty = {};\n    for (const oldName in settingNames) {\n      const newName = settingNames[oldName];\n      const oldNameH = oldName + 'H';\n\n      let newValue: object|null = null;\n      const oldSetting = Settings.instance().createSetting(oldName, empty);\n      if (oldSetting.get() !== empty) {\n        newValue = newValue || {};\n        // @ts-expect-error\n        newValue.vertical = {};\n        // @ts-expect-error\n        newValue.vertical.size = oldSetting.get();\n        removeSetting(oldSetting);\n      }\n      const oldSettingH = Settings.instance().createSetting(oldNameH, empty);\n      if (oldSettingH.get() !== empty) {\n        newValue = newValue || {};\n        // @ts-expect-error\n        newValue.horizontal = {};\n        // @ts-expect-error\n        newValue.horizontal.size = oldSettingH.get();\n        removeSetting(oldSettingH);\n      }\n      if (newValue) {\n        Settings.instance().createSetting(newName, {}).set(newValue);\n      }\n    }\n  }\n\n  updateVersionFrom5To6(): void {\n    const settingNames: Record<string, string> = {\n      debuggerSidebarHidden: 'sourcesPanelSplitViewState',\n      navigatorHidden: 'sourcesPanelNavigatorSplitViewState',\n      'WebInspector.Drawer.showOnLoad': 'Inspector.drawerSplitViewState',\n    };\n\n    for (const oldName in settingNames) {\n      const oldSetting = Settings.instance().createSetting(oldName, null);\n      if (oldSetting.get() === null) {\n        removeSetting(oldSetting);\n        continue;\n      }\n\n      const newName = settingNames[oldName];\n      const invert = oldName === 'WebInspector.Drawer.showOnLoad';\n      const hidden = oldSetting.get() !== invert;\n      removeSetting(oldSetting);\n      const showMode = hidden ? 'OnlyMain' : 'Both';\n\n      const newSetting = Settings.instance().createSetting(newName, {});\n      const newValue = newSetting.get() || {};\n\n      // @ts-expect-error\n      newValue.vertical = newValue.vertical || {};\n\n      // @ts-expect-error\n      newValue.vertical.showMode = showMode;\n\n      // @ts-expect-error\n      newValue.horizontal = newValue.horizontal || {};\n\n      // @ts-expect-error\n      newValue.horizontal.showMode = showMode;\n      newSetting.set(newValue);\n    }\n  }\n\n  updateVersionFrom6To7(): void {\n    const settingNames = {\n      sourcesPanelNavigatorSplitViewState: 'sourcesPanelNavigatorSplitViewState',\n      elementsPanelSplitViewState: 'elementsPanelSplitViewState',\n      stylesPaneSplitViewState: 'stylesPaneSplitViewState',\n      sourcesPanelDebuggerSidebarSplitViewState: 'sourcesPanelDebuggerSidebarSplitViewState',\n    };\n\n    const empty = {};\n    for (const name in settingNames) {\n      const setting =\n          Settings.instance().createSetting<{vertical?: {size?: number}, horizontal?: {size?: number}}>(name, empty);\n      const value = setting.get();\n      if (value === empty) {\n        continue;\n      }\n      // Zero out saved percentage sizes, and they will be restored to defaults.\n      if (value.vertical?.size && value.vertical.size < 1) {\n        value.vertical.size = 0;\n      }\n      if (value.horizontal?.size && value.horizontal.size < 1) {\n        value.horizontal.size = 0;\n      }\n      setting.set(value);\n    }\n  }\n\n  updateVersionFrom7To8(): void {\n  }\n\n  updateVersionFrom8To9(): void {\n    const settingNames = ['skipStackFramesPattern', 'workspaceFolderExcludePattern'];\n\n    for (let i = 0; i < settingNames.length; ++i) {\n      const setting = Settings.instance().createSetting<string|unknown[]>(settingNames[i], '');\n      let value = setting.get();\n      if (!value) {\n        return;\n      }\n      if (typeof value === 'string') {\n        value = [value];\n      }\n      for (let j = 0; j < value.length; ++j) {\n        if (typeof value[j] === 'string') {\n          value[j] = {pattern: value[j]};\n        }\n      }\n      setting.set(value);\n    }\n  }\n\n  updateVersionFrom9To10(): void {\n    // This one is localStorage specific, which is fine.\n    if (!window.localStorage) {\n      return;\n    }\n    for (const key in window.localStorage) {\n      if (key.startsWith('revision-history')) {\n        window.localStorage.removeItem(key);\n      }\n    }\n  }\n\n  updateVersionFrom10To11(): void {\n    const oldSettingName = 'customDevicePresets';\n    const newSettingName = 'customEmulatedDeviceList';\n    const oldSetting = Settings.instance().createSetting<unknown>(oldSettingName, undefined);\n    const list = oldSetting.get();\n    if (!Array.isArray(list)) {\n      return;\n    }\n    const newList = [];\n    for (let i = 0; i < list.length; ++i) {\n      const value = list[i];\n\n      const device: Record<string, any> = {};\n      device['title'] = value['title'];\n      device['type'] = 'unknown';\n      device['user-agent'] = value['userAgent'];\n      device['capabilities'] = [];\n      if (value['touch']) {\n        device['capabilities'].push('touch');\n      }\n      if (value['mobile']) {\n        device['capabilities'].push('mobile');\n      }\n      device['screen'] = {};\n      device['screen']['vertical'] = {width: value['width'], height: value['height']};\n      device['screen']['horizontal'] = {width: value['height'], height: value['width']};\n      device['screen']['device-pixel-ratio'] = value['deviceScaleFactor'];\n      device['modes'] = [];\n      device['show-by-default'] = true;\n      device['show'] = 'Default';\n      newList.push(device);\n    }\n    if (newList.length) {\n      Settings.instance().createSetting<unknown[]>(newSettingName, []).set(newList);\n    }\n    removeSetting(oldSetting);\n  }\n\n  updateVersionFrom11To12(): void {\n    this.migrateSettingsFromLocalStorage();\n  }\n\n  updateVersionFrom12To13(): void {\n    this.migrateSettingsFromLocalStorage();\n    removeSetting(Settings.instance().createSetting('timelineOverviewMode', ''));\n  }\n\n  updateVersionFrom13To14(): void {\n    const defaultValue = {throughput: -1, latency: 0};\n    Settings.instance().createSetting('networkConditions', defaultValue).set(defaultValue);\n  }\n\n  updateVersionFrom14To15(): void {\n    const setting = Settings.instance().createLocalSetting<any>('workspaceExcludedFolders', {});\n    const oldValue = setting.get();\n    const newValue: Record<string, string[]> = {};\n    for (const fileSystemPath in oldValue) {\n      newValue[fileSystemPath] = [];\n      for (const entry of oldValue[fileSystemPath]) {\n        newValue[fileSystemPath].push(entry.path);\n      }\n    }\n    setting.set(newValue);\n  }\n\n  updateVersionFrom15To16(): void {\n    const setting = Settings.instance().createSetting<any>('InspectorView.panelOrder', {});\n    const tabOrders = setting.get();\n    for (const key of Object.keys(tabOrders)) {\n      tabOrders[key] = (tabOrders[key] + 1) * 10;\n    }\n    setting.set(tabOrders);\n  }\n\n  updateVersionFrom16To17(): void {\n    const setting = Settings.instance().createSetting<any>('networkConditionsCustomProfiles', []);\n    const oldValue = setting.get();\n    const newValue = [];\n    if (Array.isArray(oldValue)) {\n      for (const preset of oldValue) {\n        if (typeof preset.title === 'string' && typeof preset.value === 'object' &&\n            typeof preset.value.throughput === 'number' && typeof preset.value.latency === 'number') {\n          newValue.push({\n            title: preset.title,\n            value: {download: preset.value.throughput, upload: preset.value.throughput, latency: preset.value.latency},\n          });\n        }\n      }\n    }\n    setting.set(newValue);\n  }\n\n  updateVersionFrom17To18(): void {\n    const setting = Settings.instance().createLocalSetting<any>('workspaceExcludedFolders', {});\n    const oldValue = setting.get();\n    const newValue: Record<string, string> = {};\n    for (const oldKey in oldValue) {\n      let newKey = oldKey.replace(/\\\\/g, '/');\n      if (!newKey.startsWith('file://')) {\n        if (newKey.startsWith('/')) {\n          newKey = 'file://' + newKey;\n        } else {\n          newKey = 'file:///' + newKey;\n        }\n      }\n      newValue[newKey] = oldValue[oldKey];\n    }\n    setting.set(newValue);\n  }\n\n  updateVersionFrom18To19(): void {\n    const defaultColumns = {status: true, type: true, initiator: true, size: true, time: true};\n    const visibleColumnSettings = Settings.instance().createSetting<any>('networkLogColumnsVisibility', defaultColumns);\n    const visibleColumns = visibleColumnSettings.get();\n    visibleColumns.name = true;\n    visibleColumns.timeline = true;\n\n    const configs: Record<string, {\n      visible: number,\n    }> = {};\n    for (const columnId in visibleColumns) {\n      if (!visibleColumns.hasOwnProperty(columnId)) {\n        continue;\n      }\n      configs[columnId.toLowerCase()] = {visible: visibleColumns[columnId]};\n    }\n    const newSetting = Settings.instance().createSetting('networkLogColumns', {});\n    newSetting.set(configs);\n    removeSetting(visibleColumnSettings);\n  }\n\n  updateVersionFrom19To20(): void {\n    const oldSetting = Settings.instance().createSetting('InspectorView.panelOrder', {});\n    const newSetting = Settings.instance().createSetting('panel-tabOrder', {});\n    newSetting.set(oldSetting.get());\n    removeSetting(oldSetting);\n  }\n\n  updateVersionFrom20To21(): void {\n    const networkColumns = Settings.instance().createSetting('networkLogColumns', {});\n    const columns = (networkColumns.get() as Record<string, string>);\n    delete columns['timeline'];\n    delete columns['waterfall'];\n    networkColumns.set(columns);\n  }\n\n  updateVersionFrom21To22(): void {\n    const breakpointsSetting = Settings.instance().createLocalSetting<any>('breakpoints', []);\n    const breakpoints = breakpointsSetting.get();\n    for (const breakpoint of breakpoints) {\n      breakpoint['url'] = breakpoint['sourceFileId'];\n      delete breakpoint['sourceFileId'];\n    }\n    breakpointsSetting.set(breakpoints);\n  }\n\n  updateVersionFrom22To23(): void {\n    // This update is no-op.\n  }\n\n  updateVersionFrom23To24(): void {\n    const oldSetting = Settings.instance().createSetting('searchInContentScripts', false);\n    const newSetting = Settings.instance().createSetting('searchInAnonymousAndContentScripts', false);\n    newSetting.set(oldSetting.get());\n    removeSetting(oldSetting);\n  }\n\n  updateVersionFrom24To25(): void {\n    const defaultColumns = {status: true, type: true, initiator: true, size: true, time: true};\n\n    const networkLogColumnsSetting = Settings.instance().createSetting<any>('networkLogColumns', defaultColumns);\n    const columns = networkLogColumnsSetting.get();\n    delete columns.product;\n    networkLogColumnsSetting.set(columns);\n  }\n\n  updateVersionFrom25To26(): void {\n    const oldSetting = Settings.instance().createSetting('messageURLFilters', {});\n    const urls = Object.keys(oldSetting.get());\n    const textFilter = urls.map(url => `-url:${url}`).join(' ');\n    if (textFilter) {\n      const textFilterSetting = Settings.instance().createSetting<any>('console.textFilter', '');\n      const suffix = textFilterSetting.get() ? ` ${textFilterSetting.get()}` : '';\n      textFilterSetting.set(`${textFilter}${suffix}`);\n    }\n    removeSetting(oldSetting);\n  }\n\n  updateVersionFrom26To27(): void {\n    function renameKeyInObjectSetting(settingName: string, from: string, to: string): void {\n      const setting = Settings.instance().createSetting<any>(settingName, {});\n      const value = setting.get();\n      if (from in value) {\n        value[to] = value[from];\n        delete value[from];\n        setting.set(value);\n      }\n    }\n\n    function renameInStringSetting(settingName: string, from: string, to: string): void {\n      const setting = Settings.instance().createSetting(settingName, '');\n      const value = setting.get();\n      if (value === from) {\n        setting.set(to);\n      }\n    }\n\n    renameKeyInObjectSetting('panel-tabOrder', 'audits2', 'audits');\n    renameKeyInObjectSetting('panel-closeableTabs', 'audits2', 'audits');\n    renameInStringSetting('panel-selectedTab', 'audits2', 'audits');\n  }\n\n  updateVersionFrom27To28(): void {\n    const setting = Settings.instance().createSetting('uiTheme', 'systemPreferred');\n    if (setting.get() === 'default') {\n      setting.set('systemPreferred');\n    }\n  }\n\n  updateVersionFrom28To29(): void {\n    function renameKeyInObjectSetting(settingName: string, from: string, to: string): void {\n      const setting = Settings.instance().createSetting<any>(settingName, {});\n      const value = setting.get();\n      if (from in value) {\n        value[to] = value[from];\n        delete value[from];\n        setting.set(value);\n      }\n    }\n\n    function renameInStringSetting(settingName: string, from: string, to: string): void {\n      const setting = Settings.instance().createSetting(settingName, '');\n      const value = setting.get();\n      if (value === from) {\n        setting.set(to);\n      }\n    }\n\n    renameKeyInObjectSetting('panel-tabOrder', 'audits', 'lighthouse');\n    renameKeyInObjectSetting('panel-closeableTabs', 'audits', 'lighthouse');\n    renameInStringSetting('panel-selectedTab', 'audits', 'lighthouse');\n  }\n\n  updateVersionFrom29To30(): void {\n    // Create new location agnostic setting\n    const closeableTabSetting = Settings.instance().createSetting('closeableTabs', {});\n\n    // Read current settings\n    const panelCloseableTabSetting = Settings.instance().createSetting('panel-closeableTabs', {});\n    const drawerCloseableTabSetting = Settings.instance().createSetting('drawer-view-closeableTabs', {});\n    const openTabsInPanel = panelCloseableTabSetting.get();\n    const openTabsInDrawer = panelCloseableTabSetting.get();\n\n    // Set #value of new setting\n    const newValue = Object.assign(openTabsInDrawer, openTabsInPanel);\n    closeableTabSetting.set(newValue);\n\n    // Remove old settings\n    removeSetting(panelCloseableTabSetting);\n    removeSetting(drawerCloseableTabSetting);\n  }\n\n  updateVersionFrom30To31(): void {\n    // Remove recorder_recordings setting that was used for storing recordings\n    // by an old recorder experiment.\n    const recordingsSetting = Settings.instance().createSetting('recorder_recordings', []);\n    removeSetting(recordingsSetting);\n  }\n\n  updateVersionFrom31To32(): void {\n    // Introduce the new 'resourceTypeName' property on stored breakpoints. Prior to\n    // this change we synchronized the breakpoint only by URL, but since we don't\n    // know on which resource type the given breakpoint was set, we just assume\n    // 'script' here to keep things simple.\n\n    const breakpointsSetting = Settings.instance().createLocalSetting<any>('breakpoints', []);\n    const breakpoints = breakpointsSetting.get();\n    for (const breakpoint of breakpoints) {\n      breakpoint['resourceTypeName'] = 'script';\n    }\n    breakpointsSetting.set(breakpoints);\n  }\n\n  updateVersionFrom32To33(): void {\n    const previouslyViewedFilesSetting = Settings.instance().createLocalSetting<any>('previouslyViewedFiles', []);\n    let previouslyViewedFiles = previouslyViewedFilesSetting.get();\n\n    // Discard old 'previouslyViewedFiles' items that don't have a 'url' property.\n\n    previouslyViewedFiles = previouslyViewedFiles.filter((previouslyViewedFile: any) => 'url' in previouslyViewedFile);\n\n    // Introduce the new 'resourceTypeName' property on previously viewed files.\n    // Prior to this change we only keyed them based on the URL, but since we\n    // don't know which resource type the given file had, we just assume 'script'\n    // here to keep things simple.\n    for (const previouslyViewedFile of previouslyViewedFiles) {\n      previouslyViewedFile['resourceTypeName'] = 'script';\n    }\n\n    previouslyViewedFilesSetting.set(previouslyViewedFiles);\n  }\n\n  updateVersionFrom33To34(): void {\n    // Introduces the 'isLogpoint' property on stored breakpoints. This information was\n    // previously encoded in the 'condition' itself. This migration leaves the condition\n    // alone but ensures that 'isLogpoint' is accurate for already stored breakpoints.\n    // This enables us to use the 'isLogpoint' property in code.\n    // A separate migration will remove the special encoding from the condition itself\n    // once all refactorings are done.\n\n    // The prefix/suffix are hardcoded here, since these constants will be removed in\n    // the future.\n    const logpointPrefix = '/** DEVTOOLS_LOGPOINT */ console.log(';\n    const logpointSuffix = ')';\n\n    const breakpointsSetting = Settings.instance().createLocalSetting<any>('breakpoints', []);\n    const breakpoints = breakpointsSetting.get();\n    for (const breakpoint of breakpoints) {\n      const isLogpoint =\n          breakpoint.condition.startsWith(logpointPrefix) && breakpoint.condition.endsWith(logpointSuffix);\n      breakpoint['isLogpoint'] = isLogpoint;\n    }\n    breakpointsSetting.set(breakpoints);\n  }\n\n  updateVersionFrom34To35(): void {\n    // Uses the 'isLogpoint' property on stored breakpoints to remove the prefix/suffix\n    // from logpoints. This way, we store the entered log point condition as the user\n    // entered it.\n\n    // The prefix/suffix are hardcoded here, since these constants will be removed in\n    // the future.\n    const logpointPrefix = '/** DEVTOOLS_LOGPOINT */ console.log(';\n    const logpointSuffix = ')';\n\n    const breakpointsSetting = Settings.instance().createLocalSetting<any>('breakpoints', []);\n    const breakpoints = breakpointsSetting.get();\n    for (const breakpoint of breakpoints) {\n      const {condition, isLogpoint} = breakpoint;\n      if (isLogpoint) {\n        breakpoint.condition = condition.slice(logpointPrefix.length, condition.length - logpointSuffix.length);\n      }\n    }\n    breakpointsSetting.set(breakpoints);\n  }\n\n  updateVersionFrom35To36(): void {\n    // We have changed the default from 'false' to 'true' and this updates the existing setting just for once.\n    Settings.instance().createSetting('showThirdPartyIssues', true).set(true);\n  }\n\n  updateVersionFrom36To37(): void {\n    const updateStorage = (storage: SettingsStorage): void => {\n      for (const key of storage.keys()) {\n        const normalizedKey = Settings.normalizeSettingName(key);\n        if (normalizedKey !== key) {\n          const value = storage.get(key);\n          removeSetting({name: key, storage});\n          storage.set(normalizedKey, value);\n        }\n      }\n    };\n    updateStorage(Settings.instance().globalStorage);\n    updateStorage(Settings.instance().syncedStorage);\n    updateStorage(Settings.instance().localStorage);\n\n    for (const key of Settings.instance().globalStorage.keys()) {\n      if ((key.startsWith('data-grid-') && key.endsWith('-column-weights')) || key.endsWith('-tab-order') ||\n          key === 'views-location-override' || key === 'closeable-tabs') {\n        const setting = Settings.instance().createSetting(key, {});\n        setting.set(Platform.StringUtilities.toKebabCaseKeys(setting.get()));\n      }\n      if (key.endsWith('-selected-tab')) {\n        const setting = Settings.instance().createSetting(key, '');\n        setting.set(Platform.StringUtilities.toKebabCase(setting.get()));\n      }\n    }\n  }\n\n  updateVersionFrom37To38(): void {\n    const getConsoleInsightsEnabledSetting = (): Setting<boolean>|undefined => {\n      try {\n        return moduleSetting('console-insights-enabled') as Setting<boolean>;\n      } catch {\n        return;\n      }\n    };\n\n    const consoleInsightsEnabled = getConsoleInsightsEnabledSetting();\n    const onboardingFinished = Settings.instance().createLocalSetting('console-insights-onboarding-finished', false);\n\n    if (consoleInsightsEnabled && consoleInsightsEnabled.get() === true && onboardingFinished.get() === false) {\n      consoleInsightsEnabled.set(false);\n    }\n    if (consoleInsightsEnabled && consoleInsightsEnabled.get() === false) {\n      onboardingFinished.set(false);\n    }\n  }\n\n  updateVersionFrom38To39(): void {\n    const PREFERRED_NETWORK_COND = 'preferred-network-condition';\n    // crrev.com/c/5582013 renamed \"Slow 3G\" to \"3G\" and \"Fast 3G\" => \"Slow 4G\".\n    // Any users with the old values need to have them moved to avoid breaking DevTools.\n    // Note: we load the raw value via the globalStorage here because\n    // `createSetting` creates if it is not present, and we do not want that;\n    // we only want to update existing, old values.\n    const setting = Settings.instance().globalStorage.get(PREFERRED_NETWORK_COND);\n    if (!setting) {\n      return;\n    }\n    try {\n      const networkSetting = JSON.parse(setting) as unknown as {\n        // Can't use SDK type here as it creates a common<>sdk circular\n        // dep. This type is not exhaustive but contains the fields we\n        // need.\n        title: string,\n        i18nTitleKey?: string,\n      };\n      if (networkSetting.title === 'Slow 3G') {\n        networkSetting.title = '3G';\n        networkSetting.i18nTitleKey = '3G';\n        Settings.instance().globalStorage.set(PREFERRED_NETWORK_COND, JSON.stringify(networkSetting));\n      } else if (networkSetting.title === 'Fast 3G') {\n        networkSetting.title = 'Slow 4G';\n        networkSetting.i18nTitleKey = 'Slow 4G';\n        Settings.instance().globalStorage.set(PREFERRED_NETWORK_COND, JSON.stringify(networkSetting));\n      }\n    } catch {\n      // If parsing the setting threw, it's in some invalid state, so remove it.\n      Settings.instance().globalStorage.remove(PREFERRED_NETWORK_COND);\n    }\n  }\n\n  /**\n   * There are two related migrations here for handling network throttling persistence:\n   * 1. Go through all user custom throttling conditions and add a `key` property.\n   * 2. If the user has a 'preferred-network-condition' setting, take the value\n   *    of that and set the right key for the new 'active-network-condition-key'\n   *    setting. Then, remove the now-obsolete 'preferred-network-condition'\n   *    setting.\n   */\n  updateVersionFrom39To40(): void {\n    const hasCustomNetworkConditionsSetting = (): boolean => {\n      try {\n        // this will error if it does not exist\n        moduleSetting('custom-network-conditions');\n        return true;\n      } catch {\n        return false;\n      }\n    };\n    if (hasCustomNetworkConditionsSetting()) {\n      /**\n       * We added keys to custom network throttling conditions in M140, so we\n       * need to go through any existing profiles the user has and add the key to\n       * them.\n       * We can't use the SDK.NetworkManager.Condition here as it would be a\n       * circular dependency. All that matters is that these conditions are\n       * objects, and we need to set the right key on each one. The actual keys &\n       * values in the object are not important.\n       */\n      const conditionsSetting = moduleSetting('custom-network-conditions') as Setting<Array<{key?: string}>>;\n      const customConditions = conditionsSetting.get();\n      if (customConditions?.length > 0) {\n        customConditions.forEach((condition, i) => {\n          // This could be run multiple times, make sure that we don't override any\n          // existing keys.\n          if (condition.key) {\n            return;\n          }\n          // The format of this key is important: see\n          // SDK.NetworkManager.UserDefinedThrottlingConditionKey\n          condition.key = `USER_CUSTOM_SETTING_${i + 1}`;\n        });\n        conditionsSetting.set(customConditions);\n      }\n    }\n\n    // Additionally, we need to make sure we persist the right throttling for\n    // users who have a preferred-network-condition set.\n    const PREFERRED_NETWORK_COND_SETTING = 'preferred-network-condition';\n    // We shipped a change to how we persist network throttling conditions and\n    // added a `key` property rather than rely on any user visible string which\n    // is more likely to change. This migration step tries to update the\n    // setting for users, or removes it if we fail, so they start fresh next\n    // time they load DevTools.\n    const setting = Settings.instance().globalStorage.get(PREFERRED_NETWORK_COND_SETTING);\n    if (!setting) {\n      return;\n    }\n    // The keys here are the UI Strings as of July 2025 (shipped in M139).\n    // This migration shipped in M140. The values are the values of the\n    // `PredefinedThrottlingConditionKey` in SDK.NetworkManager.\n    const UI_STRING_TO_NEW_KEY = {\n      'Fast 4G': 'SPEED_FAST_4G',\n      'Slow 4G': 'SPEED_SLOW_4G',\n      '3G': 'SPEED_3G',\n      'No throttling': 'NO_THROTTLING',\n      Offline: 'OFFLINE'\n    };\n    try {\n      const networkSetting = JSON.parse(setting) as unknown as {\n        // Can't use SDK type here as it creates a common<>sdk circular\n        // dep. We only rely on the i18nTitleKey.\n        i18nTitleKey?: string,\n      };\n      if (networkSetting.i18nTitleKey && UI_STRING_TO_NEW_KEY.hasOwnProperty(networkSetting.i18nTitleKey)) {\n        const key = UI_STRING_TO_NEW_KEY[networkSetting.i18nTitleKey as keyof typeof UI_STRING_TO_NEW_KEY];\n\n        // The second argument is the default value, so it's important that we\n        // set this to the default, and then update it to the new key.\n        const newSetting = Settings.instance().createSetting('active-network-condition-key', 'NO_THROTTLING');\n        newSetting.set(key);\n      }\n    } finally {\n      // This setting is now not used, so we can remove it.\n      Settings.instance().globalStorage.remove(PREFERRED_NETWORK_COND_SETTING);\n    }\n  }\n\n  /*\n   * Any new migration should be added before this comment.\n   *\n   * IMPORTANT: Migrations must be idempotent, since they may be applied\n   * multiple times! E.g. when renaming a setting one has to check that the\n   * a setting with the new name does not yet exist.\n   * ----------------------------------------------------------------------- */\n\n  private migrateSettingsFromLocalStorage(): void {\n    // This step migrates all the settings except for the ones below into the browser profile.\n    const localSettings = new Set<string>([\n      'advancedSearchConfig',\n      'breakpoints',\n      'consoleHistory',\n      'domBreakpoints',\n      'eventListenerBreakpoints',\n      'fileSystemMapping',\n      'lastSelectedSourcesSidebarPaneTab',\n      'previouslyViewedFiles',\n      'savedURLs',\n      'watchExpressions',\n      'workspaceExcludedFolders',\n      'xhrBreakpoints',\n    ]);\n    if (!window.localStorage) {\n      return;\n    }\n\n    for (const key in window.localStorage) {\n      if (localSettings.has(key)) {\n        continue;\n      }\n      const value = window.localStorage[key];\n      window.localStorage.removeItem(key);\n      Settings.instance().globalStorage.set(key, value);\n    }\n  }\n\n  private clearBreakpointsWhenTooMany(breakpointsSetting: Setting<unknown[]>, maxBreakpointsCount: number): void {\n    // If there are too many breakpoints in a storage, it is likely due to a recent bug that caused\n    // periodical breakpoints duplication leading to inspector slowness.\n    if (breakpointsSetting.get().length > maxBreakpointsCount) {\n      breakpointsSetting.set([]);\n    }\n  }\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\nexport const enum SettingStorageType {\n  /** Persists with the active Chrome profile but also syncs the settings across devices via Chrome Sync. */\n  SYNCED = 'Synced',\n  /**\n   * Persists with the active Chrome profile, but not synchronized to other devices.\n   * The default SettingStorageType of createSetting().\n   */\n  GLOBAL = 'Global',\n  /** Uses Window.localStorage. Not recommended, legacy. */\n  LOCAL = 'Local',\n  /**\n   * Session storage dies when DevTools window closes. Useful for atypical conditions that should be reverted when the\n   * user is done with their task. (eg Emulation modes, Debug overlays). These are also not carried into/out of incognito\n   */\n  SESSION = 'Session',\n}\n\nexport function moduleSetting(settingName: string): Setting<unknown> {\n  return Settings.instance().moduleSetting(settingName);\n}\n\nexport function settingForTest(settingName: string): Setting<unknown> {\n  return Settings.instance().settingForTest(settingName);\n}\n\nexport {\n  getLocalizedSettingsCategory,\n  maybeRemoveSettingExtension,\n  RegExpSettingItem,\n  registerSettingExtension,\n  registerSettingsForTest,\n  resetSettings,\n  SettingCategory,\n  SettingExtensionOption,\n  SettingRegistration,\n  SettingType,\n};\n\nexport interface Serializer<I, O> {\n  stringify: (value: I) => string;\n  parse: (value: string) => O;\n}\n\nexport interface SimpleSettingOption {\n  value: string|boolean;\n  title: string;\n  text?: string;\n  raw?: boolean;\n}\n"]}