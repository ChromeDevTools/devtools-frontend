{
  "version": 3,
  "sources": ["../../../../../../front_end/core/common/Settings.ts"],
  "sourcesContent": ["// Copyright 2009 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../platform/platform.js';\nimport * as Root from '../root/root.js';\n\nimport {Console} from './Console.js';\nimport type {EventDescriptor, EventTargetEvent, GenericEvents} from './EventTarget.js';\nimport {ObjectWrapper} from './Object.js';\nimport {\n  getLocalizedSettingsCategory,\n  getRegisteredSettings as getRegisteredSettingsInternal,\n  type LearnMore,\n  maybeRemoveSettingExtension,\n  type RegExpSettingItem,\n  registerSettingExtension,\n  registerSettingsForTest,\n  resetSettings,\n  SettingCategory,\n  type SettingExtensionOption,\n  type SettingRegistration,\n  SettingType,\n} from './SettingRegistration.js';\n\nlet settingsInstance: Settings|undefined;\n\nexport class Settings {\n  readonly #sessionStorage = new SettingsStorage({});\n  settingNameSet = new Set<string>();\n  orderValuesBySettingCategory = new Map<SettingCategory, Set<number>>();\n  #eventSupport = new ObjectWrapper<GenericEvents>();\n  #registry = new Map<string, Setting<unknown>>();\n  readonly moduleSettings = new Map<string, Setting<unknown>>();\n  #logSettingAccess?: (name: string, value: number|string|boolean) => Promise<void>;\n\n  private constructor(\n      readonly syncedStorage: SettingsStorage,\n      readonly globalStorage: SettingsStorage,\n      readonly localStorage: SettingsStorage,\n      logSettingAccess?: (name: string, value: number|string|boolean) => Promise<void>,\n  ) {\n    this.#logSettingAccess = logSettingAccess;\n\n    for (const registration of this.getRegisteredSettings()) {\n      const {settingName, defaultValue, storageType} = registration;\n      const isRegex = registration.settingType === SettingType.REGEX;\n\n      const evaluatedDefaultValue =\n          typeof defaultValue === 'function' ? defaultValue(Root.Runtime.hostConfig) : defaultValue;\n      const setting = isRegex && typeof evaluatedDefaultValue === 'string' ?\n          this.createRegExpSetting(settingName, evaluatedDefaultValue, undefined, storageType) :\n          this.createSetting(settingName, evaluatedDefaultValue, storageType);\n\n      setting.setTitleFunction(registration.title);\n      if (registration.userActionCondition) {\n        setting.setRequiresUserAction(Boolean(Root.Runtime.Runtime.queryParam(registration.userActionCondition)));\n      }\n      setting.setRegistration(registration);\n\n      this.registerModuleSetting(setting);\n    }\n  }\n\n  getRegisteredSettings(): SettingRegistration[] {\n    return getRegisteredSettingsInternal();\n  }\n\n  static hasInstance(): boolean {\n    return typeof settingsInstance !== 'undefined';\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    syncedStorage: SettingsStorage|null,\n    globalStorage: SettingsStorage|null,\n    localStorage: SettingsStorage|null,\n    logSettingAccess?: (name: string, value: number|string|boolean) => Promise<void>,\n  } = {forceNew: null, syncedStorage: null, globalStorage: null, localStorage: null}): Settings {\n    const {forceNew, syncedStorage, globalStorage, localStorage, logSettingAccess} = opts;\n    if (!settingsInstance || forceNew) {\n      if (!syncedStorage || !globalStorage || !localStorage) {\n        throw new Error(`Unable to create settings: global and local storage must be provided: ${new Error().stack}`);\n      }\n\n      settingsInstance = new Settings(syncedStorage, globalStorage, localStorage, logSettingAccess);\n    }\n\n    return settingsInstance;\n  }\n\n  static removeInstance(): void {\n    settingsInstance = undefined;\n  }\n\n  private registerModuleSetting(setting: Setting<unknown>): void {\n    const settingName = setting.name;\n    const category = setting.category();\n    const order = setting.order();\n    if (this.settingNameSet.has(settingName)) {\n      throw new Error(`Duplicate Setting name '${settingName}'`);\n    }\n    if (category && order) {\n      const orderValues = this.orderValuesBySettingCategory.get(category) || new Set();\n      if (orderValues.has(order)) {\n        throw new Error(`Duplicate order value '${order}' for settings category '${category}'`);\n      }\n      orderValues.add(order);\n      this.orderValuesBySettingCategory.set(category, orderValues);\n    }\n    this.settingNameSet.add(settingName);\n    this.moduleSettings.set(setting.name, setting);\n  }\n\n  static normalizeSettingName(name: string): string {\n    if ([\n          VersionController.GLOBAL_VERSION_SETTING_NAME,\n          VersionController.SYNCED_VERSION_SETTING_NAME,\n          VersionController.LOCAL_VERSION_SETTING_NAME,\n          'currentDockState',\n          'isUnderTest',\n        ].includes(name)) {\n      return name;\n    }\n    return Platform.StringUtilities.toKebabCase(name);\n  }\n\n  /**\n   * Prefer a module setting if this setting is one that you might not want to\n   * surface to the user to control themselves. Examples of these are settings\n   * to store UI state such as how a user choses to position a split widget or\n   * which panel they last opened.\n   * If you are creating a setting that you expect the user to control, and\n   * sync, prefer {@link Settings.createSetting}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  moduleSetting<T = any>(settingName: string): Setting<T> {\n    const setting = this.moduleSettings.get(settingName) as Setting<T>;\n    if (!setting) {\n      throw new Error('No setting registered: ' + settingName);\n    }\n    return setting;\n  }\n\n  settingForTest(settingName: string): Setting<unknown> {\n    const setting = this.#registry.get(settingName);\n    if (!setting) {\n      throw new Error('No setting registered: ' + settingName);\n    }\n    return setting;\n  }\n\n  /**\n   * Get setting via key, and create a new setting if the requested setting does not exist.\n   * @param key kebab-case string ID\n   * @param defaultValue\n   * @param storageType If not specified, SettingStorageType.GLOBAL is used.\n   */\n  createSetting<T>(key: string, defaultValue: T, storageType?: SettingStorageType): Setting<T> {\n    const storage = this.storageFromType(storageType);\n    let setting = this.#registry.get(key) as Setting<T>;\n    if (!setting) {\n      setting = new Setting(key, defaultValue, this.#eventSupport, storage, this.#logSettingAccess);\n      this.#registry.set(key, setting);\n    }\n    return setting;\n  }\n\n  createLocalSetting<T>(key: string, defaultValue: T): Setting<T> {\n    return this.createSetting(key, defaultValue, SettingStorageType.LOCAL);\n  }\n\n  createRegExpSetting(key: string, defaultValue: string, regexFlags?: string, storageType?: SettingStorageType):\n      RegExpSetting {\n    if (!this.#registry.get(key)) {\n      this.#registry.set(\n          key,\n          new RegExpSetting(\n              key, defaultValue, this.#eventSupport, this.storageFromType(storageType), regexFlags,\n              this.#logSettingAccess));\n    }\n    return this.#registry.get(key) as RegExpSetting;\n  }\n\n  clearAll(): void {\n    this.globalStorage.removeAll();\n    this.syncedStorage.removeAll();\n    this.localStorage.removeAll();\n    new VersionController().resetToCurrent();\n  }\n\n  private storageFromType(storageType?: SettingStorageType): SettingsStorage {\n    switch (storageType) {\n      case SettingStorageType.LOCAL:\n        return this.localStorage;\n      case SettingStorageType.SESSION:\n        return this.#sessionStorage;\n      case SettingStorageType.GLOBAL:\n        return this.globalStorage;\n      case SettingStorageType.SYNCED:\n        return this.syncedStorage;\n    }\n    return this.globalStorage;\n  }\n\n  getRegistry(): Map<string, Setting<unknown>> {\n    return this.#registry;\n  }\n}\n\nexport interface SettingsBackingStore {\n  register(setting: string): void;\n  get(setting: string): Promise<string>;\n  set(setting: string, value: string): void;\n  remove(setting: string): void;\n  clear(): void;\n}\n\nexport const NOOP_STORAGE: SettingsBackingStore = {\n  register: () => {},\n  set: () => {},\n  get: () => Promise.resolve(''),\n  remove: () => {},\n  clear: () => {},\n};\n\nexport class SettingsStorage {\n  constructor(\n      private object: Record<string, string>, private readonly backingStore: SettingsBackingStore = NOOP_STORAGE,\n      private readonly storagePrefix = '') {\n  }\n\n  register(name: string): void {\n    name = this.storagePrefix + name;\n    this.backingStore.register(name);\n  }\n\n  set(name: string, value: string): void {\n    name = this.storagePrefix + name;\n    this.object[name] = value;\n    this.backingStore.set(name, value);\n  }\n\n  has(name: string): boolean {\n    name = this.storagePrefix + name;\n    return name in this.object;\n  }\n\n  get(name: string): string {\n    name = this.storagePrefix + name;\n    return this.object[name];\n  }\n\n  async forceGet(originalName: string): Promise<string> {\n    const name = this.storagePrefix + originalName;\n    const value = await this.backingStore.get(name);\n    if (value && value !== this.object[name]) {\n      this.set(originalName, value);\n    } else if (!value) {\n      this.remove(originalName);\n    }\n    return value;\n  }\n\n  remove(name: string): void {\n    name = this.storagePrefix + name;\n    delete this.object[name];\n    this.backingStore.remove(name);\n  }\n\n  removeAll(): void {\n    this.object = {};\n    this.backingStore.clear();\n  }\n\n  keys(): string[] {\n    return Object.keys(this.object);\n  }\n\n  dumpSizes(): void {\n    Console.instance().log('Ten largest settings: ');\n    // @ts-expect-error __proto__ optimization\n    const sizes: Record<string, number> = {__proto__: null};\n    for (const key in this.object) {\n      sizes[key] = this.object[key].length;\n    }\n    const keys = Object.keys(sizes);\n\n    function comparator(key1: string, key2: string): number {\n      return sizes[key2] - sizes[key1];\n    }\n\n    keys.sort(comparator);\n\n    for (let i = 0; i < 10 && i < keys.length; ++i) {\n      Console.instance().log('Setting: \\'' + keys[i] + '\\', size: ' + sizes[keys[i]]);\n    }\n  }\n}\n\nfunction removeSetting(setting: {name: string, storage: SettingsStorage}): void {\n  const name = setting.name;\n  const settings = Settings.instance();\n\n  settings.getRegistry().delete(name);\n  settings.moduleSettings.delete(name);\n\n  setting.storage.remove(name);\n}\n\nexport class Deprecation {\n  readonly disabled: boolean;\n  readonly warning: Platform.UIString.LocalizedString;\n  readonly experiment?: Root.Runtime.Experiment;\n\n  constructor({deprecationNotice}: SettingRegistration) {\n    if (!deprecationNotice) {\n      throw new Error('Cannot create deprecation info for a non-deprecated setting');\n    }\n    this.disabled = deprecationNotice.disabled;\n    this.warning = deprecationNotice.warning();\n    this.experiment = deprecationNotice.experiment ?\n        Root.Runtime.experiments.allConfigurableExperiments().find(e => e.name === deprecationNotice.experiment) :\n        undefined;\n  }\n}\n\nexport class Setting<V> {\n  #titleFunction?: () => Platform.UIString.LocalizedString;\n  #title!: Platform.UIString.LocalizedString;\n  #registration: SettingRegistration|null = null;\n  #requiresUserAction?: boolean;\n  #value?: V;\n  // TODO(crbug.com/1172300) Type cannot be inferred without changes to consumers. See above.\n  #serializer: Serializer<unknown, V> = JSON;\n  #hadUserAction?: boolean;\n  #disabled?: boolean;\n  #deprecation: Deprecation|null = null;\n  #loggedInitialAccess = false;\n  #logSettingAccess?: (name: string, value: number|string|boolean) => Promise<void>;\n\n  constructor(\n      readonly name: string, readonly defaultValue: V, private readonly eventSupport: ObjectWrapper<GenericEvents>,\n      readonly storage: SettingsStorage,\n      logSettingAccess?: (name: string, value: number|string|boolean) => Promise<void>) {\n    storage.register(this.name);\n    this.#logSettingAccess = logSettingAccess;\n  }\n\n  setSerializer(serializer: Serializer<unknown, V>): void {\n    this.#serializer = serializer;\n  }\n\n  addChangeListener(listener: (arg0: EventTargetEvent<V>) => void, thisObject?: Object): EventDescriptor {\n    return this.eventSupport.addEventListener(this.name, listener, thisObject);\n  }\n\n  removeChangeListener(listener: (arg0: EventTargetEvent<V>) => void, thisObject?: Object): void {\n    this.eventSupport.removeEventListener(this.name, listener, thisObject);\n  }\n\n  title(): Platform.UIString.LocalizedString {\n    if (this.#title) {\n      return this.#title;\n    }\n    if (this.#titleFunction) {\n      return this.#titleFunction();\n    }\n    return '' as Platform.UIString.LocalizedString;\n  }\n\n  setTitleFunction(titleFunction: (() => Platform.UIString.LocalizedString)|undefined): void {\n    if (titleFunction) {\n      this.#titleFunction = titleFunction;\n    }\n  }\n\n  setTitle(title: Platform.UIString.LocalizedString): void {\n    this.#title = title;\n  }\n\n  setRequiresUserAction(requiresUserAction: boolean): void {\n    this.#requiresUserAction = requiresUserAction;\n  }\n\n  disabled(): boolean {\n    if (this.#registration?.disabledCondition) {\n      const {disabled} = this.#registration.disabledCondition(Root.Runtime.hostConfig);\n      // If registration does not disable it, pass through to #disabled\n      // attribute check.\n      if (disabled) {\n        return true;\n      }\n    }\n    return this.#disabled || false;\n  }\n\n  disabledReasons(): Platform.UIString.LocalizedString[] {\n    if (this.#registration?.disabledCondition) {\n      const result = this.#registration.disabledCondition(Root.Runtime.hostConfig);\n      if (result.disabled) {\n        return result.reasons;\n      }\n    }\n    return [];\n  }\n\n  setDisabled(disabled: boolean): void {\n    this.#disabled = disabled;\n    this.eventSupport.dispatchEventToListeners(this.name);\n  }\n\n  #maybeLogAccess(value: V): void {\n    try {\n      const valueToLog = typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean' ?\n          value :\n          this.#serializer?.stringify(value);\n      if (valueToLog !== undefined && this.#logSettingAccess) {\n        void this.#logSettingAccess(this.name, valueToLog);\n      }\n    } catch {\n    }\n  }\n\n  #maybeLogInitialAccess(value: V): void {\n    if (!this.#loggedInitialAccess) {\n      this.#maybeLogAccess(value);\n      this.#loggedInitialAccess = true;\n    }\n  }\n\n  get(): V {\n    if (this.#requiresUserAction && !this.#hadUserAction) {\n      this.#maybeLogInitialAccess(this.defaultValue);\n      return this.defaultValue;\n    }\n\n    if (typeof this.#value !== 'undefined') {\n      this.#maybeLogInitialAccess(this.#value);\n      return this.#value;\n    }\n\n    this.#value = this.defaultValue;\n    if (this.storage.has(this.name)) {\n      try {\n        this.#value = this.#serializer.parse(this.storage.get(this.name));\n      } catch {\n        this.storage.remove(this.name);\n      }\n    }\n    this.#maybeLogInitialAccess(this.#value);\n    return this.#value;\n  }\n\n  // Prefer this getter for settings which are \"disableable\". The plain getter returns `this.#value`,\n  // even if the setting is disabled, which means the callsite has to explicitly call the `disabled()`\n  // getter and add its own logic for the disabled state.\n  getIfNotDisabled(): V|undefined {\n    if (this.disabled()) {\n      return;\n    }\n    return this.get();\n  }\n\n  async forceGet(): Promise<V> {\n    const name = this.name;\n    const oldValue = this.storage.get(name);\n    const value = await this.storage.forceGet(name);\n    this.#value = this.defaultValue;\n    if (value) {\n      try {\n        this.#value = this.#serializer.parse(value);\n      } catch {\n        this.storage.remove(this.name);\n      }\n    }\n\n    if (oldValue !== value) {\n      this.eventSupport.dispatchEventToListeners(this.name, this.#value);\n    }\n\n    this.#maybeLogInitialAccess(this.#value);\n    return this.#value;\n  }\n\n  set(value: V): void {\n    this.#maybeLogAccess(value);\n    this.#hadUserAction = true;\n    this.#value = value;\n    try {\n      const settingString = this.#serializer.stringify(value);\n      try {\n        this.storage.set(this.name, settingString);\n      } catch (e) {\n        this.printSettingsSavingError(e.message, settingString);\n      }\n    } catch (e) {\n      Console.instance().error('Cannot stringify setting with name: ' + this.name + ', error: ' + e.message);\n    }\n    this.eventSupport.dispatchEventToListeners(this.name, value);\n  }\n\n  setRegistration(registration: SettingRegistration): void {\n    this.#registration = registration;\n    const {deprecationNotice} = registration;\n    if (deprecationNotice?.disabled) {\n      const experiment = deprecationNotice.experiment ?\n          Root.Runtime.experiments.allConfigurableExperiments().find(e => e.name === deprecationNotice.experiment) :\n          undefined;\n      if ((!experiment || experiment.isEnabled())) {\n        this.set(this.defaultValue);\n        this.setDisabled(true);\n      }\n    }\n  }\n\n  type(): SettingType|null {\n    if (this.#registration) {\n      return this.#registration.settingType;\n    }\n    return null;\n  }\n\n  options(): SimpleSettingOption[] {\n    if (this.#registration && this.#registration.options) {\n      return this.#registration.options.map(opt => {\n        const {value, title, text, raw} = opt;\n        return {\n          value,\n          title: title(),\n          text: typeof text === 'function' ? text() : text,\n          raw,\n        };\n      });\n    }\n    return [];\n  }\n\n  reloadRequired(): boolean|null {\n    if (this.#registration) {\n      return this.#registration.reloadRequired || null;\n    }\n    return null;\n  }\n\n  category(): SettingCategory|null {\n    if (this.#registration) {\n      return this.#registration.category || null;\n    }\n    return null;\n  }\n\n  tags(): string|null {\n    if (this.#registration && this.#registration.tags) {\n      // Get localized keys and separate by null character to prevent fuzzy matching from matching across them.\n      return this.#registration.tags.map(tag => tag()).join('\\0');\n    }\n    return null;\n  }\n\n  order(): number|null {\n    if (this.#registration) {\n      return this.#registration.order || null;\n    }\n    return null;\n  }\n\n  learnMore(): LearnMore|null {\n    return this.#registration?.learnMore ?? null;\n  }\n\n  get deprecation(): Deprecation|null {\n    if (!this.#registration || !this.#registration.deprecationNotice) {\n      return null;\n    }\n    if (!this.#deprecation) {\n      this.#deprecation = new Deprecation(this.#registration);\n    }\n    return this.#deprecation;\n  }\n\n  private printSettingsSavingError(message: string, value: string): void {\n    const errorMessage =\n        'Error saving setting with name: ' + this.name + ', value length: ' + value.length + '. Error: ' + message;\n    console.error(errorMessage);\n    Console.instance().error(errorMessage);\n    this.storage.dumpSizes();\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport class RegExpSetting extends Setting<any> {\n  #regexFlags: string|undefined;\n  #regex?: RegExp|null;\n\n  constructor(\n      name: string, defaultValue: string, eventSupport: ObjectWrapper<GenericEvents>, storage: SettingsStorage,\n      regexFlags?: string, logSettingAccess?: (name: string, value: number|string|boolean) => Promise<void>) {\n    super(name, defaultValue ? [{pattern: defaultValue}] : [], eventSupport, storage, logSettingAccess);\n    this.#regexFlags = regexFlags;\n  }\n\n  override get(): string {\n    const result = [];\n    const items = this.getAsArray();\n    for (let i = 0; i < items.length; ++i) {\n      const item = items[i];\n      if (item.pattern && !item.disabled) {\n        result.push(item.pattern);\n      }\n    }\n    return result.join('|');\n  }\n\n  getAsArray(): RegExpSettingItem[] {\n    return super.get();\n  }\n\n  override set(value: string): void {\n    this.setAsArray([{pattern: value, disabled: false}]);\n  }\n\n  setAsArray(value: RegExpSettingItem[]): void {\n    this.#regex = undefined;\n    super.set(value);\n  }\n\n  asRegExp(): RegExp|null {\n    if (typeof this.#regex !== 'undefined') {\n      return this.#regex;\n    }\n    this.#regex = null;\n    try {\n      const pattern = this.get();\n      if (pattern) {\n        this.#regex = new RegExp(pattern, this.#regexFlags || '');\n      }\n    } catch {\n    }\n    return this.#regex;\n  }\n}\n\n// The VersionController does a lot of mapping and restructuring which often need\n// typecasting to any, allow it in there\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport class VersionController {\n  static readonly GLOBAL_VERSION_SETTING_NAME = 'inspectorVersion';\n  static readonly SYNCED_VERSION_SETTING_NAME = 'syncedInspectorVersion';\n  static readonly LOCAL_VERSION_SETTING_NAME = 'localInspectorVersion';\n\n  static readonly CURRENT_VERSION = 40;\n\n  readonly #globalVersionSetting: Setting<number>;\n  readonly #syncedVersionSetting: Setting<number>;\n  readonly #localVersionSetting: Setting<number>;\n\n  constructor() {\n    // If no version setting is found, we initialize with the current version and don't do anything.\n    this.#globalVersionSetting = Settings.instance().createSetting(\n        VersionController.GLOBAL_VERSION_SETTING_NAME, VersionController.CURRENT_VERSION, SettingStorageType.GLOBAL);\n    this.#syncedVersionSetting = Settings.instance().createSetting(\n        VersionController.SYNCED_VERSION_SETTING_NAME, VersionController.CURRENT_VERSION, SettingStorageType.SYNCED);\n    this.#localVersionSetting = Settings.instance().createSetting(\n        VersionController.LOCAL_VERSION_SETTING_NAME, VersionController.CURRENT_VERSION, SettingStorageType.LOCAL);\n  }\n\n  /**\n   * Force re-sets all version number settings to the current version without\n   * running any migrations.\n   */\n  resetToCurrent(): void {\n    this.#globalVersionSetting.set(VersionController.CURRENT_VERSION);\n    this.#syncedVersionSetting.set(VersionController.CURRENT_VERSION);\n    this.#localVersionSetting.set(VersionController.CURRENT_VERSION);\n  }\n\n  /**\n   * Runs the appropriate migrations and updates the version settings accordingly.\n   *\n   * To determine what migrations to run we take the minimum of all version number settings.\n   *\n   * IMPORTANT: All migrations must be idempotent since they might be applied multiple times.\n   */\n  updateVersion(): void {\n    const currentVersion = VersionController.CURRENT_VERSION;\n    const minimumVersion =\n        Math.min(this.#globalVersionSetting.get(), this.#syncedVersionSetting.get(), this.#localVersionSetting.get());\n    const methodsToRun = this.methodsToRunToUpdateVersion(minimumVersion, currentVersion);\n    console.assert(\n        // @ts-expect-error\n        this[`updateVersionFrom${currentVersion}To${currentVersion + 1}`] === undefined,\n        'Unexpected migration method found. Increment CURRENT_VERSION or remove the method.');\n    for (const method of methodsToRun) {\n      // @ts-expect-error Special version method matching\n      this[method].call(this);\n    }\n    this.resetToCurrent();\n  }\n\n  private methodsToRunToUpdateVersion(oldVersion: number, currentVersion: number): string[] {\n    const result = [];\n    for (let i = oldVersion; i < currentVersion; ++i) {\n      result.push('updateVersionFrom' + i + 'To' + (i + 1));\n    }\n    return result;\n  }\n\n  updateVersionFrom0To1(): void {\n    this.clearBreakpointsWhenTooMany(Settings.instance().createLocalSetting('breakpoints', []), 500000);\n  }\n\n  updateVersionFrom1To2(): void {\n    Settings.instance().createSetting('previouslyViewedFiles', []).set([]);\n  }\n\n  updateVersionFrom2To3(): void {\n    Settings.instance().createSetting('fileSystemMapping', {}).set({});\n    removeSetting(Settings.instance().createSetting('fileMappingEntries', []));\n  }\n\n  updateVersionFrom3To4(): void {\n    const advancedMode = Settings.instance().createSetting('showHeaSnapshotObjectsHiddenProperties', false);\n    moduleSetting('showAdvancedHeapSnapshotProperties').set(advancedMode.get());\n    removeSetting(advancedMode);\n  }\n\n  updateVersionFrom4To5(): void {\n    const settingNames: Record<string, string> = {\n      FileSystemViewSidebarWidth: 'fileSystemViewSplitViewState',\n      elementsSidebarWidth: 'elementsPanelSplitViewState',\n      StylesPaneSplitRatio: 'stylesPaneSplitViewState',\n      heapSnapshotRetainersViewSize: 'heapSnapshotSplitViewState',\n      'InspectorView.splitView': 'InspectorView.splitViewState',\n      'InspectorView.screencastSplitView': 'InspectorView.screencastSplitViewState',\n      'Inspector.drawerSplitView': 'Inspector.drawerSplitViewState',\n      layerDetailsSplitView: 'layerDetailsSplitViewState',\n      networkSidebarWidth: 'networkPanelSplitViewState',\n      sourcesSidebarWidth: 'sourcesPanelSplitViewState',\n      scriptsPanelNavigatorSidebarWidth: 'sourcesPanelNavigatorSplitViewState',\n      sourcesPanelSplitSidebarRatio: 'sourcesPanelDebuggerSidebarSplitViewState',\n      'timeline-details': 'timelinePanelDetailsSplitViewState',\n      'timeline-split': 'timelinePanelRecorsSplitViewState',\n      'timeline-view': 'timelinePanelTimelineStackSplitViewState',\n      auditsSidebarWidth: 'auditsPanelSplitViewState',\n      layersSidebarWidth: 'layersPanelSplitViewState',\n      profilesSidebarWidth: 'profilesPanelSplitViewState',\n      resourcesSidebarWidth: 'resourcesPanelSplitViewState',\n    };\n    const empty = {};\n    for (const oldName in settingNames) {\n      const newName = settingNames[oldName];\n      const oldNameH = oldName + 'H';\n\n      let newValue: object|null = null;\n      const oldSetting = Settings.instance().createSetting(oldName, empty);\n      if (oldSetting.get() !== empty) {\n        newValue = newValue || {};\n        // @ts-expect-error\n        newValue.vertical = {};\n        // @ts-expect-error\n        newValue.vertical.size = oldSetting.get();\n        removeSetting(oldSetting);\n      }\n      const oldSettingH = Settings.instance().createSetting(oldNameH, empty);\n      if (oldSettingH.get() !== empty) {\n        newValue = newValue || {};\n        // @ts-expect-error\n        newValue.horizontal = {};\n        // @ts-expect-error\n        newValue.horizontal.size = oldSettingH.get();\n        removeSetting(oldSettingH);\n      }\n      if (newValue) {\n        Settings.instance().createSetting(newName, {}).set(newValue);\n      }\n    }\n  }\n\n  updateVersionFrom5To6(): void {\n    const settingNames: Record<string, string> = {\n      debuggerSidebarHidden: 'sourcesPanelSplitViewState',\n      navigatorHidden: 'sourcesPanelNavigatorSplitViewState',\n      'WebInspector.Drawer.showOnLoad': 'Inspector.drawerSplitViewState',\n    };\n\n    for (const oldName in settingNames) {\n      const oldSetting = Settings.instance().createSetting(oldName, null);\n      if (oldSetting.get() === null) {\n        removeSetting(oldSetting);\n        continue;\n      }\n\n      const newName = settingNames[oldName];\n      const invert = oldName === 'WebInspector.Drawer.showOnLoad';\n      const hidden = oldSetting.get() !== invert;\n      removeSetting(oldSetting);\n      const showMode = hidden ? 'OnlyMain' : 'Both';\n\n      const newSetting = Settings.instance().createSetting(newName, {});\n      const newValue = newSetting.get() || {};\n\n      // @ts-expect-error\n      newValue.vertical = newValue.vertical || {};\n\n      // @ts-expect-error\n      newValue.vertical.showMode = showMode;\n\n      // @ts-expect-error\n      newValue.horizontal = newValue.horizontal || {};\n\n      // @ts-expect-error\n      newValue.horizontal.showMode = showMode;\n      newSetting.set(newValue);\n    }\n  }\n\n  updateVersionFrom6To7(): void {\n    const settingNames = {\n      sourcesPanelNavigatorSplitViewState: 'sourcesPanelNavigatorSplitViewState',\n      elementsPanelSplitViewState: 'elementsPanelSplitViewState',\n      stylesPaneSplitViewState: 'stylesPaneSplitViewState',\n      sourcesPanelDebuggerSidebarSplitViewState: 'sourcesPanelDebuggerSidebarSplitViewState',\n    };\n\n    const empty = {};\n    for (const name in settingNames) {\n      const setting =\n          Settings.instance().createSetting<{vertical?: {size?: number}, horizontal?: {size?: number}}>(name, empty);\n      const value = setting.get();\n      if (value === empty) {\n        continue;\n      }\n      // Zero out saved percentage sizes, and they will be restored to defaults.\n      if (value.vertical?.size && value.vertical.size < 1) {\n        value.vertical.size = 0;\n      }\n      if (value.horizontal?.size && value.horizontal.size < 1) {\n        value.horizontal.size = 0;\n      }\n      setting.set(value);\n    }\n  }\n\n  updateVersionFrom7To8(): void {\n  }\n\n  updateVersionFrom8To9(): void {\n    const settingNames = ['skipStackFramesPattern', 'workspaceFolderExcludePattern'];\n\n    for (let i = 0; i < settingNames.length; ++i) {\n      const setting = Settings.instance().createSetting<string|unknown[]>(settingNames[i], '');\n      let value = setting.get();\n      if (!value) {\n        return;\n      }\n      if (typeof value === 'string') {\n        value = [value];\n      }\n      for (let j = 0; j < value.length; ++j) {\n        if (typeof value[j] === 'string') {\n          value[j] = {pattern: value[j]};\n        }\n      }\n      setting.set(value);\n    }\n  }\n\n  updateVersionFrom9To10(): void {\n    // This one is localStorage specific, which is fine.\n    if (!window.localStorage) {\n      return;\n    }\n    for (const key in window.localStorage) {\n      if (key.startsWith('revision-history')) {\n        window.localStorage.removeItem(key);\n      }\n    }\n  }\n\n  updateVersionFrom10To11(): void {\n    const oldSettingName = 'customDevicePresets';\n    const newSettingName = 'customEmulatedDeviceList';\n    const oldSetting = Settings.instance().createSetting<unknown>(oldSettingName, undefined);\n    const list = oldSetting.get();\n    if (!Array.isArray(list)) {\n      return;\n    }\n    const newList = [];\n    for (let i = 0; i < list.length; ++i) {\n      const value = list[i];\n\n      const device: Record<string, any> = {};\n      device['title'] = value['title'];\n      device['type'] = 'unknown';\n      device['user-agent'] = value['userAgent'];\n      device['capabilities'] = [];\n      if (value['touch']) {\n        device['capabilities'].push('touch');\n      }\n      if (value['mobile']) {\n        device['capabilities'].push('mobile');\n      }\n      device['screen'] = {};\n      device['screen']['vertical'] = {width: value['width'], height: value['height']};\n      device['screen']['horizontal'] = {width: value['height'], height: value['width']};\n      device['screen']['device-pixel-ratio'] = value['deviceScaleFactor'];\n      device['modes'] = [];\n      device['show-by-default'] = true;\n      device['show'] = 'Default';\n      newList.push(device);\n    }\n    if (newList.length) {\n      Settings.instance().createSetting<unknown[]>(newSettingName, []).set(newList);\n    }\n    removeSetting(oldSetting);\n  }\n\n  updateVersionFrom11To12(): void {\n    this.migrateSettingsFromLocalStorage();\n  }\n\n  updateVersionFrom12To13(): void {\n    this.migrateSettingsFromLocalStorage();\n    removeSetting(Settings.instance().createSetting('timelineOverviewMode', ''));\n  }\n\n  updateVersionFrom13To14(): void {\n    const defaultValue = {throughput: -1, latency: 0};\n    Settings.instance().createSetting('networkConditions', defaultValue).set(defaultValue);\n  }\n\n  updateVersionFrom14To15(): void {\n    const setting = Settings.instance().createLocalSetting<any>('workspaceExcludedFolders', {});\n    const oldValue = setting.get();\n    const newValue: Record<string, string[]> = {};\n    for (const fileSystemPath in oldValue) {\n      newValue[fileSystemPath] = [];\n      for (const entry of oldValue[fileSystemPath]) {\n        newValue[fileSystemPath].push(entry.path);\n      }\n    }\n    setting.set(newValue);\n  }\n\n  updateVersionFrom15To16(): void {\n    const setting = Settings.instance().createSetting<any>('InspectorView.panelOrder', {});\n    const tabOrders = setting.get();\n    for (const key of Object.keys(tabOrders)) {\n      tabOrders[key] = (tabOrders[key] + 1) * 10;\n    }\n    setting.set(tabOrders);\n  }\n\n  updateVersionFrom16To17(): void {\n    const setting = Settings.instance().createSetting<any>('networkConditionsCustomProfiles', []);\n    const oldValue = setting.get();\n    const newValue = [];\n    if (Array.isArray(oldValue)) {\n      for (const preset of oldValue) {\n        if (typeof preset.title === 'string' && typeof preset.value === 'object' &&\n            typeof preset.value.throughput === 'number' && typeof preset.value.latency === 'number') {\n          newValue.push({\n            title: preset.title,\n            value: {download: preset.value.throughput, upload: preset.value.throughput, latency: preset.value.latency},\n          });\n        }\n      }\n    }\n    setting.set(newValue);\n  }\n\n  updateVersionFrom17To18(): void {\n    const setting = Settings.instance().createLocalSetting<any>('workspaceExcludedFolders', {});\n    const oldValue = setting.get();\n    const newValue: Record<string, string> = {};\n    for (const oldKey in oldValue) {\n      let newKey = oldKey.replace(/\\\\/g, '/');\n      if (!newKey.startsWith('file://')) {\n        if (newKey.startsWith('/')) {\n          newKey = 'file://' + newKey;\n        } else {\n          newKey = 'file:///' + newKey;\n        }\n      }\n      newValue[newKey] = oldValue[oldKey];\n    }\n    setting.set(newValue);\n  }\n\n  updateVersionFrom18To19(): void {\n    const defaultColumns = {status: true, type: true, initiator: true, size: true, time: true};\n    const visibleColumnSettings = Settings.instance().createSetting<any>('networkLogColumnsVisibility', defaultColumns);\n    const visibleColumns = visibleColumnSettings.get();\n    visibleColumns.name = true;\n    visibleColumns.timeline = true;\n\n    const configs: Record<string, {\n      visible: number,\n    }> = {};\n    for (const columnId in visibleColumns) {\n      if (!visibleColumns.hasOwnProperty(columnId)) {\n        continue;\n      }\n      configs[columnId.toLowerCase()] = {visible: visibleColumns[columnId]};\n    }\n    const newSetting = Settings.instance().createSetting('networkLogColumns', {});\n    newSetting.set(configs);\n    removeSetting(visibleColumnSettings);\n  }\n\n  updateVersionFrom19To20(): void {\n    const oldSetting = Settings.instance().createSetting('InspectorView.panelOrder', {});\n    const newSetting = Settings.instance().createSetting('panel-tabOrder', {});\n    newSetting.set(oldSetting.get());\n    removeSetting(oldSetting);\n  }\n\n  updateVersionFrom20To21(): void {\n    const networkColumns = Settings.instance().createSetting('networkLogColumns', {});\n    const columns = (networkColumns.get() as Record<string, string>);\n    delete columns['timeline'];\n    delete columns['waterfall'];\n    networkColumns.set(columns);\n  }\n\n  updateVersionFrom21To22(): void {\n    const breakpointsSetting = Settings.instance().createLocalSetting<any>('breakpoints', []);\n    const breakpoints = breakpointsSetting.get();\n    for (const breakpoint of breakpoints) {\n      breakpoint['url'] = breakpoint['sourceFileId'];\n      delete breakpoint['sourceFileId'];\n    }\n    breakpointsSetting.set(breakpoints);\n  }\n\n  updateVersionFrom22To23(): void {\n    // This update is no-op.\n  }\n\n  updateVersionFrom23To24(): void {\n    const oldSetting = Settings.instance().createSetting('searchInContentScripts', false);\n    const newSetting = Settings.instance().createSetting('searchInAnonymousAndContentScripts', false);\n    newSetting.set(oldSetting.get());\n    removeSetting(oldSetting);\n  }\n\n  updateVersionFrom24To25(): void {\n    const defaultColumns = {status: true, type: true, initiator: true, size: true, time: true};\n\n    const networkLogColumnsSetting = Settings.instance().createSetting<any>('networkLogColumns', defaultColumns);\n    const columns = networkLogColumnsSetting.get();\n    delete columns.product;\n    networkLogColumnsSetting.set(columns);\n  }\n\n  updateVersionFrom25To26(): void {\n    const oldSetting = Settings.instance().createSetting('messageURLFilters', {});\n    const urls = Object.keys(oldSetting.get());\n    const textFilter = urls.map(url => `-url:${url}`).join(' ');\n    if (textFilter) {\n      const textFilterSetting = Settings.instance().createSetting<any>('console.textFilter', '');\n      const suffix = textFilterSetting.get() ? ` ${textFilterSetting.get()}` : '';\n      textFilterSetting.set(`${textFilter}${suffix}`);\n    }\n    removeSetting(oldSetting);\n  }\n\n  updateVersionFrom26To27(): void {\n    function renameKeyInObjectSetting(settingName: string, from: string, to: string): void {\n      const setting = Settings.instance().createSetting<any>(settingName, {});\n      const value = setting.get();\n      if (from in value) {\n        value[to] = value[from];\n        delete value[from];\n        setting.set(value);\n      }\n    }\n\n    function renameInStringSetting(settingName: string, from: string, to: string): void {\n      const setting = Settings.instance().createSetting(settingName, '');\n      const value = setting.get();\n      if (value === from) {\n        setting.set(to);\n      }\n    }\n\n    renameKeyInObjectSetting('panel-tabOrder', 'audits2', 'audits');\n    renameKeyInObjectSetting('panel-closeableTabs', 'audits2', 'audits');\n    renameInStringSetting('panel-selectedTab', 'audits2', 'audits');\n  }\n\n  updateVersionFrom27To28(): void {\n    const setting = Settings.instance().createSetting('uiTheme', 'systemPreferred');\n    if (setting.get() === 'default') {\n      setting.set('systemPreferred');\n    }\n  }\n\n  updateVersionFrom28To29(): void {\n    function renameKeyInObjectSetting(settingName: string, from: string, to: string): void {\n      const setting = Settings.instance().createSetting<any>(settingName, {});\n      const value = setting.get();\n      if (from in value) {\n        value[to] = value[from];\n        delete value[from];\n        setting.set(value);\n      }\n    }\n\n    function renameInStringSetting(settingName: string, from: string, to: string): void {\n      const setting = Settings.instance().createSetting(settingName, '');\n      const value = setting.get();\n      if (value === from) {\n        setting.set(to);\n      }\n    }\n\n    renameKeyInObjectSetting('panel-tabOrder', 'audits', 'lighthouse');\n    renameKeyInObjectSetting('panel-closeableTabs', 'audits', 'lighthouse');\n    renameInStringSetting('panel-selectedTab', 'audits', 'lighthouse');\n  }\n\n  updateVersionFrom29To30(): void {\n    // Create new location agnostic setting\n    const closeableTabSetting = Settings.instance().createSetting('closeableTabs', {});\n\n    // Read current settings\n    const panelCloseableTabSetting = Settings.instance().createSetting('panel-closeableTabs', {});\n    const drawerCloseableTabSetting = Settings.instance().createSetting('drawer-view-closeableTabs', {});\n    const openTabsInPanel = panelCloseableTabSetting.get();\n    const openTabsInDrawer = panelCloseableTabSetting.get();\n\n    // Set #value of new setting\n    const newValue = Object.assign(openTabsInDrawer, openTabsInPanel);\n    closeableTabSetting.set(newValue);\n\n    // Remove old settings\n    removeSetting(panelCloseableTabSetting);\n    removeSetting(drawerCloseableTabSetting);\n  }\n\n  updateVersionFrom30To31(): void {\n    // Remove recorder_recordings setting that was used for storing recordings\n    // by an old recorder experiment.\n    const recordingsSetting = Settings.instance().createSetting('recorder_recordings', []);\n    removeSetting(recordingsSetting);\n  }\n\n  updateVersionFrom31To32(): void {\n    // Introduce the new 'resourceTypeName' property on stored breakpoints. Prior to\n    // this change we synchronized the breakpoint only by URL, but since we don't\n    // know on which resource type the given breakpoint was set, we just assume\n    // 'script' here to keep things simple.\n\n    const breakpointsSetting = Settings.instance().createLocalSetting<any>('breakpoints', []);\n    const breakpoints = breakpointsSetting.get();\n    for (const breakpoint of breakpoints) {\n      breakpoint['resourceTypeName'] = 'script';\n    }\n    breakpointsSetting.set(breakpoints);\n  }\n\n  updateVersionFrom32To33(): void {\n    const previouslyViewedFilesSetting = Settings.instance().createLocalSetting<any>('previouslyViewedFiles', []);\n    let previouslyViewedFiles = previouslyViewedFilesSetting.get();\n\n    // Discard old 'previouslyViewedFiles' items that don't have a 'url' property.\n\n    previouslyViewedFiles = previouslyViewedFiles.filter((previouslyViewedFile: any) => 'url' in previouslyViewedFile);\n\n    // Introduce the new 'resourceTypeName' property on previously viewed files.\n    // Prior to this change we only keyed them based on the URL, but since we\n    // don't know which resource type the given file had, we just assume 'script'\n    // here to keep things simple.\n    for (const previouslyViewedFile of previouslyViewedFiles) {\n      previouslyViewedFile['resourceTypeName'] = 'script';\n    }\n\n    previouslyViewedFilesSetting.set(previouslyViewedFiles);\n  }\n\n  updateVersionFrom33To34(): void {\n    // Introduces the 'isLogpoint' property on stored breakpoints. This information was\n    // previously encoded in the 'condition' itself. This migration leaves the condition\n    // alone but ensures that 'isLogpoint' is accurate for already stored breakpoints.\n    // This enables us to use the 'isLogpoint' property in code.\n    // A separate migration will remove the special encoding from the condition itself\n    // once all refactorings are done.\n\n    // The prefix/suffix are hardcoded here, since these constants will be removed in\n    // the future.\n    const logpointPrefix = '/** DEVTOOLS_LOGPOINT */ console.log(';\n    const logpointSuffix = ')';\n\n    const breakpointsSetting = Settings.instance().createLocalSetting<any>('breakpoints', []);\n    const breakpoints = breakpointsSetting.get();\n    for (const breakpoint of breakpoints) {\n      const isLogpoint =\n          breakpoint.condition.startsWith(logpointPrefix) && breakpoint.condition.endsWith(logpointSuffix);\n      breakpoint['isLogpoint'] = isLogpoint;\n    }\n    breakpointsSetting.set(breakpoints);\n  }\n\n  updateVersionFrom34To35(): void {\n    // Uses the 'isLogpoint' property on stored breakpoints to remove the prefix/suffix\n    // from logpoints. This way, we store the entered log point condition as the user\n    // entered it.\n\n    // The prefix/suffix are hardcoded here, since these constants will be removed in\n    // the future.\n    const logpointPrefix = '/** DEVTOOLS_LOGPOINT */ console.log(';\n    const logpointSuffix = ')';\n\n    const breakpointsSetting = Settings.instance().createLocalSetting<any>('breakpoints', []);\n    const breakpoints = breakpointsSetting.get();\n    for (const breakpoint of breakpoints) {\n      const {condition, isLogpoint} = breakpoint;\n      if (isLogpoint) {\n        breakpoint.condition = condition.slice(logpointPrefix.length, condition.length - logpointSuffix.length);\n      }\n    }\n    breakpointsSetting.set(breakpoints);\n  }\n\n  updateVersionFrom35To36(): void {\n    // We have changed the default from 'false' to 'true' and this updates the existing setting just for once.\n    Settings.instance().createSetting('showThirdPartyIssues', true).set(true);\n  }\n\n  updateVersionFrom36To37(): void {\n    const updateStorage = (storage: SettingsStorage): void => {\n      for (const key of storage.keys()) {\n        const normalizedKey = Settings.normalizeSettingName(key);\n        if (normalizedKey !== key) {\n          const value = storage.get(key);\n          removeSetting({name: key, storage});\n          storage.set(normalizedKey, value);\n        }\n      }\n    };\n    updateStorage(Settings.instance().globalStorage);\n    updateStorage(Settings.instance().syncedStorage);\n    updateStorage(Settings.instance().localStorage);\n\n    for (const key of Settings.instance().globalStorage.keys()) {\n      if ((key.startsWith('data-grid-') && key.endsWith('-column-weights')) || key.endsWith('-tab-order') ||\n          key === 'views-location-override' || key === 'closeable-tabs') {\n        const setting = Settings.instance().createSetting(key, {});\n        setting.set(Platform.StringUtilities.toKebabCaseKeys(setting.get()));\n      }\n      if (key.endsWith('-selected-tab')) {\n        const setting = Settings.instance().createSetting(key, '');\n        setting.set(Platform.StringUtilities.toKebabCase(setting.get()));\n      }\n    }\n  }\n\n  updateVersionFrom37To38(): void {\n    const getConsoleInsightsEnabledSetting = (): Setting<boolean>|undefined => {\n      try {\n        return moduleSetting('console-insights-enabled') as Setting<boolean>;\n      } catch {\n        return;\n      }\n    };\n\n    const consoleInsightsEnabled = getConsoleInsightsEnabledSetting();\n    const onboardingFinished = Settings.instance().createLocalSetting('console-insights-onboarding-finished', false);\n\n    if (consoleInsightsEnabled && consoleInsightsEnabled.get() === true && onboardingFinished.get() === false) {\n      consoleInsightsEnabled.set(false);\n    }\n    if (consoleInsightsEnabled && consoleInsightsEnabled.get() === false) {\n      onboardingFinished.set(false);\n    }\n  }\n\n  updateVersionFrom38To39(): void {\n    const PREFERRED_NETWORK_COND = 'preferred-network-condition';\n    // crrev.com/c/5582013 renamed \"Slow 3G\" to \"3G\" and \"Fast 3G\" => \"Slow 4G\".\n    // Any users with the old values need to have them moved to avoid breaking DevTools.\n    // Note: we load the raw value via the globalStorage here because\n    // `createSetting` creates if it is not present, and we do not want that;\n    // we only want to update existing, old values.\n    const setting = Settings.instance().globalStorage.get(PREFERRED_NETWORK_COND);\n    if (!setting) {\n      return;\n    }\n    try {\n      const networkSetting = JSON.parse(setting) as unknown as {\n        // Can't use SDK type here as it creates a common<>sdk circular\n        // dep. This type is not exhaustive but contains the fields we\n        // need.\n        title: string,\n        i18nTitleKey?: string,\n      };\n      if (networkSetting.title === 'Slow 3G') {\n        networkSetting.title = '3G';\n        networkSetting.i18nTitleKey = '3G';\n        Settings.instance().globalStorage.set(PREFERRED_NETWORK_COND, JSON.stringify(networkSetting));\n      } else if (networkSetting.title === 'Fast 3G') {\n        networkSetting.title = 'Slow 4G';\n        networkSetting.i18nTitleKey = 'Slow 4G';\n        Settings.instance().globalStorage.set(PREFERRED_NETWORK_COND, JSON.stringify(networkSetting));\n      }\n    } catch {\n      // If parsing the setting threw, it's in some invalid state, so remove it.\n      Settings.instance().globalStorage.remove(PREFERRED_NETWORK_COND);\n    }\n  }\n\n  /**\n   * There are two related migrations here for handling network throttling persistence:\n   * 1. Go through all user custom throttling conditions and add a `key` property.\n   * 2. If the user has a 'preferred-network-condition' setting, take the value\n   *    of that and set the right key for the new 'active-network-condition-key'\n   *    setting. Then, remove the now-obsolete 'preferred-network-condition'\n   *    setting.\n   */\n  updateVersionFrom39To40(): void {\n    const hasCustomNetworkConditionsSetting = (): boolean => {\n      try {\n        // this will error if it does not exist\n        moduleSetting('custom-network-conditions');\n        return true;\n      } catch {\n        return false;\n      }\n    };\n    if (hasCustomNetworkConditionsSetting()) {\n      /**\n       * We added keys to custom network throttling conditions in M140, so we\n       * need to go through any existing profiles the user has and add the key to\n       * them.\n       * We can't use the SDK.NetworkManager.Condition here as it would be a\n       * circular dependency. All that matters is that these conditions are\n       * objects, and we need to set the right key on each one. The actual keys &\n       * values in the object are not important.\n       */\n      const conditionsSetting = moduleSetting('custom-network-conditions') as Setting<Array<{key?: string}>>;\n      const customConditions = conditionsSetting.get();\n      if (customConditions?.length > 0) {\n        customConditions.forEach((condition, i) => {\n          // This could be run multiple times, make sure that we don't override any\n          // existing keys.\n          if (condition.key) {\n            return;\n          }\n          // The format of this key is important: see\n          // SDK.NetworkManager.UserDefinedThrottlingConditionKey\n          condition.key = `USER_CUSTOM_SETTING_${i + 1}`;\n        });\n        conditionsSetting.set(customConditions);\n      }\n    }\n\n    // Additionally, we need to make sure we persist the right throttling for\n    // users who have a preferred-network-condition set.\n    const PREFERRED_NETWORK_COND_SETTING = 'preferred-network-condition';\n    // We shipped a change to how we persist network throttling conditions and\n    // added a `key` property rather than rely on any user visible string which\n    // is more likely to change. This migration step tries to update the\n    // setting for users, or removes it if we fail, so they start fresh next\n    // time they load DevTools.\n    const setting = Settings.instance().globalStorage.get(PREFERRED_NETWORK_COND_SETTING);\n    if (!setting) {\n      return;\n    }\n    // The keys here are the UI Strings as of July 2025 (shipped in M139).\n    // This migration shipped in M140. The values are the values of the\n    // `PredefinedThrottlingConditionKey` in SDK.NetworkManager.\n    const UI_STRING_TO_NEW_KEY = {\n      'Fast 4G': 'SPEED_FAST_4G',\n      'Slow 4G': 'SPEED_SLOW_4G',\n      '3G': 'SPEED_3G',\n      'No throttling': 'NO_THROTTLING',\n      Offline: 'OFFLINE'\n    };\n    try {\n      const networkSetting = JSON.parse(setting) as unknown as {\n        // Can't use SDK type here as it creates a common<>sdk circular\n        // dep. We only rely on the i18nTitleKey.\n        i18nTitleKey?: string,\n      };\n      if (networkSetting.i18nTitleKey && UI_STRING_TO_NEW_KEY.hasOwnProperty(networkSetting.i18nTitleKey)) {\n        const key = UI_STRING_TO_NEW_KEY[networkSetting.i18nTitleKey as keyof typeof UI_STRING_TO_NEW_KEY];\n\n        // The second argument is the default value, so it's important that we\n        // set this to the default, and then update it to the new key.\n        const newSetting = Settings.instance().createSetting('active-network-condition-key', 'NO_THROTTLING');\n        newSetting.set(key);\n      }\n    } finally {\n      // This setting is now not used, so we can remove it.\n      Settings.instance().globalStorage.remove(PREFERRED_NETWORK_COND_SETTING);\n    }\n  }\n\n  /*\n   * Any new migration should be added before this comment.\n   *\n   * IMPORTANT: Migrations must be idempotent, since they may be applied\n   * multiple times! E.g. when renaming a setting one has to check that the\n   * a setting with the new name does not yet exist.\n   * ----------------------------------------------------------------------- */\n\n  private migrateSettingsFromLocalStorage(): void {\n    // This step migrates all the settings except for the ones below into the browser profile.\n    const localSettings = new Set<string>([\n      'advancedSearchConfig',\n      'breakpoints',\n      'consoleHistory',\n      'domBreakpoints',\n      'eventListenerBreakpoints',\n      'fileSystemMapping',\n      'lastSelectedSourcesSidebarPaneTab',\n      'previouslyViewedFiles',\n      'savedURLs',\n      'watchExpressions',\n      'workspaceExcludedFolders',\n      'xhrBreakpoints',\n    ]);\n    if (!window.localStorage) {\n      return;\n    }\n\n    for (const key in window.localStorage) {\n      if (localSettings.has(key)) {\n        continue;\n      }\n      const value = window.localStorage[key];\n      window.localStorage.removeItem(key);\n      Settings.instance().globalStorage.set(key, value);\n    }\n  }\n\n  private clearBreakpointsWhenTooMany(breakpointsSetting: Setting<unknown[]>, maxBreakpointsCount: number): void {\n    // If there are too many breakpoints in a storage, it is likely due to a recent bug that caused\n    // periodical breakpoints duplication leading to inspector slowness.\n    if (breakpointsSetting.get().length > maxBreakpointsCount) {\n      breakpointsSetting.set([]);\n    }\n  }\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\nexport const enum SettingStorageType {\n  /** Persists with the active Chrome profile but also syncs the settings across devices via Chrome Sync. */\n  SYNCED = 'Synced',\n  /**\n   * Persists with the active Chrome profile, but not synchronized to other devices.\n   * The default SettingStorageType of createSetting().\n   */\n  GLOBAL = 'Global',\n  /** Uses Window.localStorage. Not recommended, legacy. */\n  LOCAL = 'Local',\n  /**\n   * Session storage dies when DevTools window closes. Useful for atypical conditions that should be reverted when the\n   * user is done with their task. (eg Emulation modes, Debug overlays). These are also not carried into/out of incognito\n   */\n  SESSION = 'Session',\n}\n\nexport function moduleSetting(settingName: string): Setting<unknown> {\n  return Settings.instance().moduleSetting(settingName);\n}\n\nexport function settingForTest(settingName: string): Setting<unknown> {\n  return Settings.instance().settingForTest(settingName);\n}\n\nexport {\n  getLocalizedSettingsCategory,\n  maybeRemoveSettingExtension,\n  RegExpSettingItem,\n  registerSettingExtension,\n  registerSettingsForTest,\n  resetSettings,\n  SettingCategory,\n  SettingExtensionOption,\n  SettingRegistration,\n  SettingType,\n};\n\nexport interface Serializer<I, O> {\n  stringify: (value: I) => string;\n  parse: (value: string) => O;\n}\n\nexport interface SimpleSettingOption {\n  value: string|boolean;\n  title: string;\n  text?: string;\n  raw?: boolean;\n}\n"],
  "mappings": "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",
  "names": ["SettingStorageType"]
}
