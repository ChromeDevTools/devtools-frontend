{"version":3,"file":"TextDictionary.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/TextDictionary.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,IAAI,EAAC,MAAM,WAAW,CAAC;AAE/B,MAAM,OAAO,cAAc;IAChB,KAAK,GAAG,IAAI,GAAG,EAAkB,CAAC;IAClC,KAAK,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;IAEtC,OAAO,CAAC,IAAY;QAClB,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,EAAE,KAAK,CAAC;QACR,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC5B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACvB,CAAC;IAED,UAAU,CAAC,IAAY;QACrB,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,OAAO;QACT,CAAC;QACD,IAAI,KAAK,KAAK,CAAC,EAAE,CAAC;YAChB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACxB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACxB,OAAO;QACT,CAAC;QACD,EAAE,KAAK,CAAC;QACR,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC9B,CAAC;IAED,eAAe,CAAC,MAAc;QAC5B,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IAED,OAAO,CAAC,IAAY;QAClB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED,SAAS,CAAC,IAAY;QACpB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAED,KAAK;QACH,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACnB,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACrB,CAAC;CACF","sourcesContent":["// Copyright 2013 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {Trie} from './Trie.js';\n\nexport class TextDictionary {\n  readonly words = new Map<string, number>();\n  readonly index = Trie.newStringTrie();\n\n  addWord(word: string): void {\n    let count = this.words.get(word) || 0;\n    ++count;\n    this.words.set(word, count);\n    this.index.add(word);\n  }\n\n  removeWord(word: string): void {\n    let count = this.words.get(word) || 0;\n    if (!count) {\n      return;\n    }\n    if (count === 1) {\n      this.words.delete(word);\n      this.index.remove(word);\n      return;\n    }\n    --count;\n    this.words.set(word, count);\n  }\n\n  wordsWithPrefix(prefix: string): string[] {\n    return this.index.words(prefix);\n  }\n\n  hasWord(word: string): boolean {\n    return this.words.has(word);\n  }\n\n  wordCount(word: string): number {\n    return this.words.get(word) || 0;\n  }\n\n  reset(): void {\n    this.words.clear();\n    this.index.clear();\n  }\n}\n"]}