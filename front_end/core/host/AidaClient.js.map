{
  "version": 3,
  "sources": ["../../../../../../front_end/core/host/AidaClient.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as Root from '../root/root.js';\n\nimport * as DispatchHttpRequestClient from './DispatchHttpRequestClient.js';\nimport {InspectorFrontendHostInstance} from './InspectorFrontendHost.js';\nimport type {AidaClientResult, AidaCodeCompleteResult, SyncInformation} from './InspectorFrontendHostAPI.js';\nimport {bindOutputStream} from './ResourceLoader.js';\n\nexport enum Role {\n  /** Provide this role when giving a function call response  */\n  ROLE_UNSPECIFIED = 0,\n  /** Tags the content came from the user */\n  USER = 1,\n  /** Tags the content came from the LLM */\n  MODEL = 2,\n}\n\nexport const enum Rating {\n  // Resets the vote to null in the logs\n  SENTIMENT_UNSPECIFIED = 'SENTIMENT_UNSPECIFIED',\n  POSITIVE = 'POSITIVE',\n  NEGATIVE = 'NEGATIVE',\n}\n\n/**\n * A `Content` represents a single turn message.\n */\nexport interface Content {\n  parts: Part[];\n  /** The producer of the content. */\n  role: Role;\n}\n\nexport type Part = {\n  text: string,\n}|{\n  functionCall: {\n    name: string,\n    args: Record<string, unknown>,\n  },\n}|{\n  functionResponse: {\n    name: string,\n    response: Record<string, unknown>,\n  },\n}|{\n  /** Inline media bytes. */\n  inlineData: MediaBlob,\n};\n\nexport const enum ParametersTypes {\n  STRING = 1,\n  NUMBER = 2,\n  INTEGER = 3,\n  BOOLEAN = 4,\n  ARRAY = 5,\n  OBJECT = 6,\n}\n\ninterface BaseFunctionParam {\n  description: string;\n  nullable?: boolean;\n}\n\nexport interface FunctionPrimitiveParams extends BaseFunctionParam {\n  type: ParametersTypes.BOOLEAN|ParametersTypes.INTEGER|ParametersTypes.STRING|ParametersTypes.BOOLEAN;\n}\n\ninterface FunctionArrayParam extends BaseFunctionParam {\n  type: ParametersTypes.ARRAY;\n  items: FunctionPrimitiveParams;\n}\n\nexport interface FunctionObjectParam<T extends string|number|symbol = string> extends BaseFunctionParam {\n  type: ParametersTypes.OBJECT;\n  // TODO: this can be also be ObjectParams\n  properties: Record<T, FunctionPrimitiveParams|FunctionArrayParam>;\n}\n\n/**\n * More about function declaration can be read at\n * https://ai.google.dev/gemini-api/docs/function-calling\n */\nexport interface FunctionDeclaration<T extends string|number|symbol = string> {\n  name: string;\n  /**\n   * A description for the LLM to understand what the specific function will do once called.\n   */\n  description: string;\n  parameters: FunctionObjectParam<T>;\n}\n\n/** Raw media bytes. **/\nexport interface MediaBlob {\n  // The IANA standard MIME type of the source data.\n  // Currently supported types are: image/png, image/jpeg.\n  // Format: base64-encoded\n  // For reference: google3/google/x/pitchfork/aida/v1/content.proto\n  mimeType: string;\n  data: string;\n}\n\nexport enum FunctionalityType {\n  // Unspecified functionality type.\n  FUNCTIONALITY_TYPE_UNSPECIFIED = 0,\n  // The generic AI chatbot functionality.\n  CHAT = 1,\n  // The explain error functionality.\n  EXPLAIN_ERROR = 2,\n  AGENTIC_CHAT = 5,\n}\n\n/** See: cs/aida.proto (google3). **/\nexport enum ClientFeature {\n  // Unspecified client feature.\n  CLIENT_FEATURE_UNSPECIFIED = 0,\n  // Chrome console insights feature.\n  CHROME_CONSOLE_INSIGHTS = 1,\n  // Chrome AI Assistance Styling Agent.\n  CHROME_STYLING_AGENT = 2,\n  // Chrome AI Assistance Network Agent.\n  CHROME_NETWORK_AGENT = 7,\n  // Chrome AI Annotations Performance Agent\n  CHROME_PERFORMANCE_ANNOTATIONS_AGENT = 20,\n  // Chrome AI Assistance File Agent.\n  CHROME_FILE_AGENT = 9,\n  // Chrome AI Patch Agent.\n  CHROME_PATCH_AGENT = 12,\n  // Chrome AI Assistance Performance Agent.\n  CHROME_PERFORMANCE_FULL_AGENT = 24,\n\n  // Removed features (for reference).\n  // Chrome AI Assistance Performance Insights Agent.\n  // CHROME_PERFORMANCE_INSIGHTS_AGENT = 13,\n  // Chrome AI Assistance Performance Agent (call trees).\n  // CHROME_PERFORMANCE_AGENT = 8,\n}\n\nexport enum UserTier {\n  // Unspecified user tier.\n  USER_TIER_UNSPECIFIED = 0,\n  // Users who are internal testers.\n  TESTERS = 1,\n  // Users who are early adopters.\n  BETA = 2,\n  // Users in the general public.\n  PUBLIC = 3,\n}\n\n/** Googlers: see the Aida `retrieval` proto; this type is based on that. **/\nexport interface RequestFactMetadata {\n  /**\n   * A description of where the fact comes from.\n   */\n  source: string;\n  /**\n   * Optional: a score to give this fact. Used because\n   * if there are more facts than space in the context window,\n   * higher scoring facts will be prioritized.\n   */\n  score?: number;\n}\nexport interface RequestFact {\n  /**\n   * Content of the fact.\n   */\n  text: string;\n  metadata: RequestFactMetadata;\n}\n\nexport type RpcGlobalId = string|number;\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport interface RequestMetadata {\n  string_session_id?: string;\n  user_tier?: UserTier;\n  disable_user_content_logging: boolean;\n  client_version: string;\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport interface ConversationOptions {\n  temperature?: number;\n  model_id?: string;\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport interface DoConversationRequest {\n  client: string;\n  current_message: Content;\n  preamble?: string;\n  historical_contexts?: Content[];\n  function_declarations?: FunctionDeclaration[];\n  facts?: RequestFact[];\n  options?: ConversationOptions;\n  metadata: RequestMetadata;\n  functionality_type?: FunctionalityType;\n  client_feature?: ClientFeature;\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport interface CompleteCodeOptions {\n  temperature?: number;\n  model_id?: string;\n  inference_language?: AidaInferenceLanguage;\n  stop_sequences?: string[];\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport interface GenerateCodeOptions {\n  temperature?: number;\n  model_id?: string;\n  inference_language?: AidaInferenceLanguage;\n  expect_code_output?: boolean;\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport interface ContextFile {\n  path: string;\n  full_content: string;\n  selected_content?: string;\n  programming_language: AidaInferenceLanguage;\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\nexport enum EditType {\n  // Unknown edit type\n  EDIT_TYPE_UNSPECIFIED = 0,\n  // User typed code/text into file\n  ADD = 1,\n  // User deleted code/text from file\n  DELETE = 2,\n  // User pasted into file (this includes smart paste)\n  PASTE = 3,\n  // User performs an undo action\n  UNDO = 4,\n  // User performs a redo action\n  REDO = 5,\n  // User accepted a completion from AIDA\n  ACCEPT_COMPLETION = 6,\n}\n\nexport enum Reason {\n  // Unknown reason.\n  UNKNOWN = 0,\n\n  // The file is currently open.\n  CURRENTLY_OPEN = 1,\n\n  // The file is opened recently.\n  RECENTLY_OPENED = 2,\n\n  // The file is edited recently.\n  RECENTLY_EDITED = 3,\n\n  // The file is located within the same directory.\n  COLOCATED = 4,\n\n  // Included based on relation to code around the cursor (e.g: could be\n  // provided by local IDE analysis)\n  RELATED_FILE = 5,\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport interface AdditionalFile {\n  path: string;\n  content: string;\n  included_reason: Reason;\n}\n\nexport interface CompletionRequest {\n  client: string;\n  prefix: string;\n  suffix?: string;\n  options?: CompleteCodeOptions;\n  metadata: RequestMetadata;\n  last_user_action?: EditType;\n  additional_files?: AdditionalFile[];\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\nexport enum UseCase {\n  // Unspecified usecase.\n  USE_CASE_UNSPECIFIED = 0,\n\n  // Code generation use case is expected to generate code from scratch\n  CODE_GENERATION = 1,\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport interface GenerateCodeRequest {\n  client: string;\n  preamble: string;\n  current_message: Content;\n  options?: GenerateCodeOptions;\n  context_files?: ContextFile[];\n  use_case: UseCase;\n  metadata: RequestMetadata;\n  client_feature?: ClientFeature;\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\n/* eslint-disable @typescript-eslint/naming-convention  */\nexport interface DoConversationClientEvent {\n  user_feedback: {\n    sentiment?: Rating,\n    user_input?: {\n      comment?: string,\n    },\n  };\n}\n\nexport interface UserImpression {\n  sample: {\n    sample_id?: number,\n  };\n  latency: {\n    duration: {\n      seconds: number,\n      nanos: number,\n    },\n  };\n}\n\nexport interface UserAcceptance {\n  sample: {\n    sample_id?: number,\n  };\n}\n\nexport interface AidaRegisterClientEvent {\n  corresponding_aida_rpc_global_id: RpcGlobalId;\n  disable_user_content_logging: boolean;\n  do_conversation_client_event?: DoConversationClientEvent;\n  complete_code_client_event?: {user_acceptance: UserAcceptance}|{user_impression: UserImpression};\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\nexport enum RecitationAction {\n  ACTION_UNSPECIFIED = 'ACTION_UNSPECIFIED',\n  CITE = 'CITE',\n  BLOCK = 'BLOCK',\n  NO_ACTION = 'NO_ACTION',\n  EXEMPT_FOUND_IN_PROMPT = 'EXEMPT_FOUND_IN_PROMPT',\n}\n\nexport enum CitationSourceType {\n  CITATION_SOURCE_TYPE_UNSPECIFIED = 'CITATION_SOURCE_TYPE_UNSPECIFIED',\n  TRAINING_DATA = 'TRAINING_DATA',\n  WORLD_FACTS = 'WORLD_FACTS',\n  LOCAL_FACTS = 'LOCAL_FACTS',\n  INDIRECT = 'INDIRECT',\n}\n\nexport interface Citation {\n  startIndex?: number;\n  endIndex?: number;\n  uri?: string;\n  sourceType?: CitationSourceType;\n  repository?: string;\n}\n\nexport interface AttributionMetadata {\n  attributionAction: RecitationAction;\n  citations: Citation[];\n}\n\nexport interface AidaFunctionCallResponse {\n  name: string;\n  args: Record<string, unknown>;\n}\n\nexport interface FactualityFact {\n  sourceUri?: string;\n}\n\nexport interface FactualityMetadata {\n  facts: FactualityFact[];\n}\n\nexport interface ResponseMetadata {\n  rpcGlobalId?: RpcGlobalId;\n  attributionMetadata?: AttributionMetadata;\n  factualityMetadata?: FactualityMetadata;\n}\n\nexport interface DoConversationResponse {\n  explanation: string;\n  metadata: ResponseMetadata;\n  functionCalls?: [AidaFunctionCallResponse, ...AidaFunctionCallResponse[]];\n  completed: boolean;\n}\n\nexport interface CompletionResponse {\n  generatedSamples: GenerationSample[];\n  metadata: ResponseMetadata;\n}\n\nexport interface GenerateCodeResponse {\n  samples: GenerationSample[];\n  metadata: ResponseMetadata;\n}\n\nexport interface GenerationSample {\n  generationString: string;\n  score: number;\n  sampleId?: number;\n  attributionMetadata?: AttributionMetadata;\n}\n\nexport const enum AidaAccessPreconditions {\n  AVAILABLE = 'available',\n  NO_ACCOUNT_EMAIL = 'no-account-email',\n  NO_INTERNET = 'no-internet',\n  // This is the state (mostly enterprise) users are in, when they are automatically logged out from\n  // Chrome after a certain time period. For making AIDA requests, they need to log in again.\n  SYNC_IS_PAUSED = 'sync-is-paused',\n}\n\nexport const enum AidaInferenceLanguage {\n  CPP = 'CPP',\n  PYTHON = 'PYTHON',\n  KOTLIN = 'KOTLIN',\n  JAVA = 'JAVA',\n  JAVASCRIPT = 'JAVASCRIPT',\n  GO = 'GO',\n  TYPESCRIPT = 'TYPESCRIPT',\n  HTML = 'HTML',\n  BASH = 'BASH',\n  CSS = 'CSS',\n  DART = 'DART',\n  JSON = 'JSON',\n  MARKDOWN = 'MARKDOWN',\n  VUE = 'VUE',\n  XML = 'XML',\n}\n\nconst AidaLanguageToMarkdown: Record<AidaInferenceLanguage, string> = {\n  CPP: 'cpp',\n  PYTHON: 'py',\n  KOTLIN: 'kt',\n  JAVA: 'java',\n  JAVASCRIPT: 'js',\n  GO: 'go',\n  TYPESCRIPT: 'ts',\n  HTML: 'html',\n  BASH: 'sh',\n  CSS: 'css',\n  DART: 'dart',\n  JSON: 'json',\n  MARKDOWN: 'md',\n  VUE: 'vue',\n  XML: 'xml',\n};\n\nexport const CLIENT_NAME = 'CHROME_DEVTOOLS';\nexport const SERVICE_NAME = 'aidaService';\n\nconst CODE_CHUNK_SEPARATOR = (lang = ''): string => ('\\n`````' + lang + '\\n');\n\nexport class AidaAbortError extends Error {}\nexport class AidaBlockError extends Error {}\n\nexport class AidaClient {\n  static buildConsoleInsightsRequest(input: string): DoConversationRequest {\n    const disallowLogging = Root.Runtime.hostConfig.aidaAvailability?.disallowLogging ?? true;\n    const chromeVersion = Root.Runtime.getChromeVersion();\n    if (!chromeVersion) {\n      throw new Error('Cannot determine Chrome version');\n    }\n    const request: DoConversationRequest = {\n      current_message: {parts: [{text: input}], role: Role.USER},\n      client: CLIENT_NAME,\n      functionality_type: FunctionalityType.EXPLAIN_ERROR,\n      client_feature: ClientFeature.CHROME_CONSOLE_INSIGHTS,\n      metadata: {\n        disable_user_content_logging: disallowLogging,\n        client_version: chromeVersion,\n      },\n    };\n\n    let temperature = -1;\n    let modelId;\n    if (Root.Runtime.hostConfig.devToolsConsoleInsights?.enabled) {\n      temperature = Root.Runtime.hostConfig.devToolsConsoleInsights.temperature ?? -1;\n      modelId = Root.Runtime.hostConfig.devToolsConsoleInsights.modelId;\n    }\n    if (temperature >= 0) {\n      request.options ??= {};\n      request.options.temperature = temperature;\n    }\n    if (modelId) {\n      request.options ??= {};\n      request.options.model_id = modelId;\n    }\n    return request;\n  }\n\n  static async checkAccessPreconditions(): Promise<AidaAccessPreconditions> {\n    if (!navigator.onLine) {\n      return AidaAccessPreconditions.NO_INTERNET;\n    }\n\n    const syncInfo = await new Promise<SyncInformation>(\n        resolve => InspectorFrontendHostInstance.getSyncInformation(syncInfo => resolve(syncInfo)));\n    if (!syncInfo.accountEmail) {\n      return AidaAccessPreconditions.NO_ACCOUNT_EMAIL;\n    }\n\n    if (syncInfo.isSyncPaused) {\n      return AidaAccessPreconditions.SYNC_IS_PAUSED;\n    }\n\n    return AidaAccessPreconditions.AVAILABLE;\n  }\n\n  async *\n      doConversation(request: DoConversationRequest, options?: {signal?: AbortSignal}):\n          AsyncGenerator<DoConversationResponse, void, void> {\n    if (!InspectorFrontendHostInstance.doAidaConversation) {\n      throw new Error('doAidaConversation is not available');\n    }\n    const stream = (() => {\n      let {promise, resolve, reject} = Promise.withResolvers<string|null>();\n      options?.signal?.addEventListener('abort', () => {\n        reject(new AidaAbortError());\n      }, {once: true});\n      return {\n        write: async(data: string): Promise<void> => {\n          resolve(data);\n          ({promise, resolve, reject} = Promise.withResolvers<string|null>());\n        },\n        close: async(): Promise<void> => {\n          resolve(null);\n        },\n        read: (): Promise<string|null> => {\n          return promise;\n        },\n        fail: (e: Error) => reject(e),\n      };\n    })();\n    const streamId = bindOutputStream(stream);\n    InspectorFrontendHostInstance.doAidaConversation(JSON.stringify(request), streamId, result => {\n      if (result.statusCode === 403) {\n        stream.fail(new Error('Server responded: permission denied'));\n      } else if (result.error) {\n        stream.fail(new Error(`Cannot send request: ${result.error} ${result.detail || ''}`));\n      } else if (result.netErrorName === 'net::ERR_TIMED_OUT') {\n        stream.fail(new Error('doAidaConversation timed out'));\n      } else if (result.statusCode !== 200) {\n        stream.fail(new Error(`Request failed: ${JSON.stringify(result)}`));\n      } else {\n        void stream.close();\n      }\n    });\n    let chunk;\n    const text = [];\n    let inCodeChunk = false;\n    const functionCalls: AidaFunctionCallResponse[] = [];\n    let metadata: ResponseMetadata = {rpcGlobalId: 0};\n    while ((chunk = await stream.read())) {\n      let textUpdated = false;\n      // The AIDA response is a JSON array of objects, split at the object\n      // boundary. Therefore each chunk may start with `[` or `,` and possibly\n      // followed by `]`. Each chunk may include one or more objects, so we\n      // make sure that each chunk becomes a well-formed JSON array when we\n      // parse it by adding `[` and `]` and removing `,` where appropriate.\n      if (!chunk.length) {\n        continue;\n      }\n      if (chunk.startsWith(',')) {\n        chunk = chunk.slice(1);\n      }\n      if (!chunk.startsWith('[')) {\n        chunk = '[' + chunk;\n      }\n      if (!chunk.endsWith(']')) {\n        chunk = chunk + ']';\n      }\n      let results;\n      try {\n        results = JSON.parse(chunk);\n      } catch (error) {\n        throw new Error('Cannot parse chunk: ' + chunk, {cause: error});\n      }\n\n      for (const result of results) {\n        if ('metadata' in result) {\n          metadata = result.metadata;\n          if (metadata?.attributionMetadata?.attributionAction === RecitationAction.BLOCK) {\n            throw new AidaBlockError();\n          }\n        }\n        if ('textChunk' in result) {\n          if (inCodeChunk) {\n            text.push(CODE_CHUNK_SEPARATOR());\n            inCodeChunk = false;\n          }\n\n          text.push(result.textChunk.text);\n          textUpdated = true;\n        } else if ('codeChunk' in result) {\n          if (!inCodeChunk) {\n            const language = AidaLanguageToMarkdown[result.codeChunk.inferenceLanguage as AidaInferenceLanguage] ?? '';\n            text.push(CODE_CHUNK_SEPARATOR(language));\n            inCodeChunk = true;\n          }\n\n          text.push(result.codeChunk.code);\n          textUpdated = true;\n        } else if ('functionCallChunk' in result) {\n          functionCalls.push({\n            name: result.functionCallChunk.functionCall.name,\n            args: result.functionCallChunk.functionCall.args,\n          });\n        } else if ('error' in result) {\n          throw new Error(`Server responded: ${JSON.stringify(result)}`);\n        } else {\n          throw new Error('Unknown chunk result');\n        }\n      }\n      if (textUpdated) {\n        yield {\n          explanation: text.join('') + (inCodeChunk ? CODE_CHUNK_SEPARATOR() : ''),\n          metadata,\n          completed: false,\n        };\n      }\n    }\n    yield {\n      explanation: text.join('') + (inCodeChunk ? CODE_CHUNK_SEPARATOR() : ''),\n      metadata,\n      functionCalls: functionCalls.length ? functionCalls as [AidaFunctionCallResponse, ...AidaFunctionCallResponse[]] :\n                                            undefined,\n      completed: true,\n    };\n  }\n\n  registerClientEvent(clientEvent: AidaRegisterClientEvent): Promise<AidaClientResult> {\n    const {promise, resolve} = Promise.withResolvers<AidaClientResult>();\n    InspectorFrontendHostInstance.registerAidaClientEvent(\n        JSON.stringify({\n          client: CLIENT_NAME,\n          event_time: new Date().toISOString(),\n          ...clientEvent,\n        }),\n        resolve,\n    );\n\n    return promise;\n  }\n\n  async completeCode(request: CompletionRequest): Promise<CompletionResponse|null> {\n    if (!InspectorFrontendHostInstance.aidaCodeComplete) {\n      throw new Error('aidaCodeComplete is not available');\n    }\n    const {promise, resolve} = Promise.withResolvers<AidaCodeCompleteResult>();\n    InspectorFrontendHostInstance.aidaCodeComplete(JSON.stringify(request), resolve);\n    const completeCodeResult = await promise;\n\n    if (completeCodeResult.error) {\n      throw new Error(`Cannot send request: ${completeCodeResult.error} ${completeCodeResult.detail || ''}`);\n    }\n    const response = completeCodeResult.response;\n    if (!response?.length) {\n      throw new Error('Empty response');\n    }\n    let parsedResponse;\n    try {\n      parsedResponse = JSON.parse(response);\n    } catch (error) {\n      throw new Error('Cannot parse response: ' + response, {cause: error});\n    }\n\n    const generatedSamples: GenerationSample[] = [];\n    let metadata: ResponseMetadata = {rpcGlobalId: 0};\n    if ('metadata' in parsedResponse) {\n      metadata = parsedResponse.metadata;\n    }\n\n    if ('generatedSamples' in parsedResponse) {\n      for (const generatedSample of parsedResponse.generatedSamples) {\n        const sample: GenerationSample = {\n          generationString: generatedSample.generationString,\n          score: generatedSample.score,\n          sampleId: generatedSample.sampleId,\n        };\n        if ('metadata' in generatedSample && 'attributionMetadata' in generatedSample.metadata) {\n          sample.attributionMetadata = generatedSample.metadata.attributionMetadata;\n        }\n        generatedSamples.push(sample);\n      }\n    } else {\n      return null;\n    }\n\n    return {generatedSamples, metadata};\n  }\n\n  async generateCode(request: GenerateCodeRequest): Promise<GenerateCodeResponse|null> {\n    const response = await DispatchHttpRequestClient.makeHttpRequest<GenerateCodeResponse>({\n      service: SERVICE_NAME,\n      path: '/v1/aida:generateCode',\n      method: 'POST',\n      body: JSON.stringify(request),\n    });\n\n    return response;\n  }\n}\n\nexport function convertToUserTierEnum(userTier: string|undefined): UserTier {\n  if (userTier) {\n    switch (userTier) {\n      case 'TESTERS':\n        return UserTier.TESTERS;\n      case 'BETA':\n        return UserTier.BETA;\n      case 'PUBLIC':\n        return UserTier.PUBLIC;\n    }\n  }\n  return UserTier.BETA;\n}\n\nlet hostConfigTrackerInstance: HostConfigTracker|undefined;\n\nexport class HostConfigTracker extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  #pollTimer?: number;\n  #aidaAvailability?: AidaAccessPreconditions;\n\n  private constructor() {\n    super();\n  }\n\n  static instance(): HostConfigTracker {\n    if (!hostConfigTrackerInstance) {\n      hostConfigTrackerInstance = new HostConfigTracker();\n    }\n    return hostConfigTrackerInstance;\n  }\n\n  override addEventListener(eventType: Events, listener: Common.EventTarget.EventListener<EventTypes, Events>):\n      Common.EventTarget.EventDescriptor<EventTypes> {\n    const isFirst = !this.hasEventListeners(eventType);\n    const eventDescriptor = super.addEventListener(eventType, listener);\n    if (isFirst) {\n      window.clearTimeout(this.#pollTimer);\n      void this.pollAidaAvailability();\n    }\n    return eventDescriptor;\n  }\n\n  override removeEventListener(eventType: Events, listener: Common.EventTarget.EventListener<EventTypes, Events>):\n      void {\n    super.removeEventListener(eventType, listener);\n    if (!this.hasEventListeners(eventType)) {\n      window.clearTimeout(this.#pollTimer);\n    }\n  }\n\n  async pollAidaAvailability(): Promise<void> {\n    this.#pollTimer = window.setTimeout(() => this.pollAidaAvailability(), 2000);\n    const currentAidaAvailability = await AidaClient.checkAccessPreconditions();\n    if (currentAidaAvailability !== this.#aidaAvailability) {\n      this.#aidaAvailability = currentAidaAvailability;\n      const config =\n          await new Promise<Root.Runtime.HostConfig>(resolve => InspectorFrontendHostInstance.getHostConfig(resolve));\n      Object.assign(Root.Runtime.hostConfig, config);\n      // TODO(crbug.com/442545623): Send `currentAidaAvailability` to the listeners as part of the event so that\n      // `await AidaClient.checkAccessPreconditions()` does not need to be called again in the event handlers.\n      this.dispatchEventToListeners(Events.AIDA_AVAILABILITY_CHANGED);\n    }\n  }\n}\n\nexport const enum Events {\n  AIDA_AVAILABILITY_CHANGED = 'aidaAvailabilityChanged',\n}\n\nexport interface EventTypes {\n  [Events.AIDA_AVAILABILITY_CHANGED]: void;\n}\n"],
  "mappings": "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",
  "names": ["Role", "Rating", "ParametersTypes", "FunctionalityType", "ClientFeature", "UserTier", "EditType", "Reason", "UseCase", "RecitationAction", "CitationSourceType", "AidaAccessPreconditions", "AidaInferenceLanguage", "syncInfo", "Events"]
}
