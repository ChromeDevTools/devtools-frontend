{
  "version": 3,
  "sources": ["../../../../../../front_end/core/host/DispatchHttpRequestClient.ts"],
  "sourcesContent": ["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {InspectorFrontendHostInstance} from './InspectorFrontendHost.js';\nimport type {DispatchHttpRequestRequest, DispatchHttpRequestResult} from './InspectorFrontendHostAPI.js';\n\nexport enum ErrorType {\n  HTTP_RESPONSE_UNAVAILABLE = 'HTTP_RESPONSE_UNAVAILABLE',\n  NOT_FOUND = 'NOT_FOUND',\n}\n\nexport class DispatchHttpRequestError extends Error {\n  constructor(readonly type: ErrorType, options?: ErrorOptions) {\n    super(undefined, options);\n  }\n}\n\nexport async function makeHttpRequest<R>(request: DispatchHttpRequestRequest): Promise<R> {\n  const response = await new Promise<DispatchHttpRequestResult>(resolve => {\n    InspectorFrontendHostInstance.dispatchHttpRequest(request, resolve);\n  });\n\n  debugLog({request, response});\n  if (response.statusCode === 404) {\n    throw new DispatchHttpRequestError(ErrorType.NOT_FOUND);\n  }\n\n  if ('response' in response && response.statusCode === 200) {\n    try {\n      return JSON.parse(response.response) as R;\n    } catch (err) {\n      throw new DispatchHttpRequestError(ErrorType.HTTP_RESPONSE_UNAVAILABLE, {cause: err});\n    }\n  }\n\n  throw new DispatchHttpRequestError(ErrorType.HTTP_RESPONSE_UNAVAILABLE);\n}\n\nfunction isDebugMode(): boolean {\n  return Boolean(localStorage.getItem('debugDispatchHttpRequestEnabled'));\n}\n\nfunction debugLog(...log: unknown[]): void {\n  if (!isDebugMode()) {\n    return;\n  }\n\n  // eslint-disable-next-line no-console\n  console.log('debugLog', ...log);\n}\n\nfunction setDebugDispatchHttpRequestEnabled(enabled: boolean): void {\n  if (enabled) {\n    localStorage.setItem('debugDispatchHttpRequestEnabled', 'true');\n  } else {\n    localStorage.removeItem('debugDispatchHttpRequestEnabled');\n  }\n}\n\n// @ts-expect-error\nglobalThis.setDebugDispatchHttpRequestEnabled = setDebugDispatchHttpRequestEnabled;\n"],
  "mappings": ";AAIA,SAAQ,qCAAoC;AAGrC,WAAK,YAAL,kBAAKA,eAAL;AACL,EAAAA,WAAA,+BAA4B;AAC5B,EAAAA,WAAA,eAAY;AAFF,SAAAA;AAAA,GAAA;AAKL,aAAM,iCAAiC,MAAM;AAAA,EAClD,YAAqB,MAAiB,SAAwB;AAC5D,UAAM,QAAW,OAAO;AADL;AAAA,EAErB;AACF;AAEA,sBAAsB,gBAAmB,SAAiD;AACxF,QAAM,WAAW,MAAM,IAAI,QAAmC,aAAW;AACvE,kCAA8B,oBAAoB,SAAS,OAAO;AAAA,EACpE,CAAC;AAED,WAAS,EAAC,SAAS,SAAQ,CAAC;AAC5B,MAAI,SAAS,eAAe,KAAK;AAC/B,UAAM,IAAI,yBAAyB,2BAAmB;AAAA,EACxD;AAEA,MAAI,cAAc,YAAY,SAAS,eAAe,KAAK;AACzD,QAAI;AACF,aAAO,KAAK,MAAM,SAAS,QAAQ;AAAA,IACrC,SAAS,KAAK;AACZ,YAAM,IAAI,yBAAyB,6DAAqC,EAAC,OAAO,IAAG,CAAC;AAAA,IACtF;AAAA,EACF;AAEA,QAAM,IAAI,yBAAyB,2DAAmC;AACxE;AAEA,SAAS,cAAuB;AAC9B,SAAO,QAAQ,aAAa,QAAQ,iCAAiC,CAAC;AACxE;AAEA,SAAS,YAAY,KAAsB;AACzC,MAAI,CAAC,YAAY,GAAG;AAClB;AAAA,EACF;AAGA,UAAQ,IAAI,YAAY,GAAG,GAAG;AAChC;AAEA,SAAS,mCAAmC,SAAwB;AAClE,MAAI,SAAS;AACX,iBAAa,QAAQ,mCAAmC,MAAM;AAAA,EAChE,OAAO;AACL,iBAAa,WAAW,iCAAiC;AAAA,EAC3D;AACF;AAGA,WAAW,qCAAqC;",
  "names": ["ErrorType"]
}
