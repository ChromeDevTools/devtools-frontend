{"version":3,"file":"DispatchHttpRequestClient.js","sourceRoot":"","sources":["../../../../../../front_end/core/host/DispatchHttpRequestClient.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,6BAA6B,EAAC,MAAM,4BAA4B,CAAC;AAGzE,MAAM,CAAN,IAAY,SAGX;AAHD,WAAY,SAAS;IACnB,oEAAuD,CAAA;IACvD,oCAAuB,CAAA;AACzB,CAAC,EAHW,SAAS,KAAT,SAAS,QAGpB;AAED,MAAM,OAAO,wBAAyB,SAAQ,KAAK;IAC5B;IAArB,YAAqB,IAAe,EAAE,OAAsB;QAC1D,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QADP,SAAI,GAAJ,IAAI,CAAW;IAEpC,CAAC;CACF;AAED,MAAM,CAAC,KAAK,UAAU,eAAe,CAAI,OAAmC;IAC1E,MAAM,QAAQ,GAAG,MAAM,IAAI,OAAO,CAA4B,OAAO,CAAC,EAAE;QACtE,6BAA6B,CAAC,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACtE,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,EAAC,OAAO,EAAE,QAAQ,EAAC,CAAC,CAAC;IAC9B,IAAI,QAAQ,CAAC,UAAU,KAAK,GAAG,EAAE,CAAC;QAChC,MAAM,IAAI,wBAAwB,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;IAC1D,CAAC;IAED,IAAI,UAAU,IAAI,QAAQ,IAAI,QAAQ,CAAC,UAAU,KAAK,GAAG,EAAE,CAAC;QAC1D,IAAI,CAAC;YACH,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAM,CAAC;QAC5C,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,MAAM,IAAI,wBAAwB,CAAC,SAAS,CAAC,yBAAyB,EAAE,EAAC,KAAK,EAAE,GAAG,EAAC,CAAC,CAAC;QACxF,CAAC;IACH,CAAC;IAED,MAAM,IAAI,wBAAwB,CAAC,SAAS,CAAC,yBAAyB,CAAC,CAAC;AAC1E,CAAC;AAED,SAAS,WAAW;IAClB,OAAO,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC,CAAC;AAC1E,CAAC;AAED,SAAS,QAAQ,CAAC,GAAG,GAAc;IACjC,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC;QACnB,OAAO;IACT,CAAC;IAED,sCAAsC;IACtC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,GAAG,CAAC,CAAC;AAClC,CAAC;AAED,SAAS,kCAAkC,CAAC,OAAgB;IAC1D,IAAI,OAAO,EAAE,CAAC;QACZ,YAAY,CAAC,OAAO,CAAC,iCAAiC,EAAE,MAAM,CAAC,CAAC;IAClE,CAAC;SAAM,CAAC;QACN,YAAY,CAAC,UAAU,CAAC,iCAAiC,CAAC,CAAC;IAC7D,CAAC;AACH,CAAC;AAED,mBAAmB;AACnB,UAAU,CAAC,kCAAkC,GAAG,kCAAkC,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {InspectorFrontendHostInstance} from './InspectorFrontendHost.js';\nimport type {DispatchHttpRequestRequest, DispatchHttpRequestResult} from './InspectorFrontendHostAPI.js';\n\nexport enum ErrorType {\n  HTTP_RESPONSE_UNAVAILABLE = 'HTTP_RESPONSE_UNAVAILABLE',\n  NOT_FOUND = 'NOT_FOUND',\n}\n\nexport class DispatchHttpRequestError extends Error {\n  constructor(readonly type: ErrorType, options?: ErrorOptions) {\n    super(undefined, options);\n  }\n}\n\nexport async function makeHttpRequest<R>(request: DispatchHttpRequestRequest): Promise<R> {\n  const response = await new Promise<DispatchHttpRequestResult>(resolve => {\n    InspectorFrontendHostInstance.dispatchHttpRequest(request, resolve);\n  });\n\n  debugLog({request, response});\n  if (response.statusCode === 404) {\n    throw new DispatchHttpRequestError(ErrorType.NOT_FOUND);\n  }\n\n  if ('response' in response && response.statusCode === 200) {\n    try {\n      return JSON.parse(response.response) as R;\n    } catch (err) {\n      throw new DispatchHttpRequestError(ErrorType.HTTP_RESPONSE_UNAVAILABLE, {cause: err});\n    }\n  }\n\n  throw new DispatchHttpRequestError(ErrorType.HTTP_RESPONSE_UNAVAILABLE);\n}\n\nfunction isDebugMode(): boolean {\n  return Boolean(localStorage.getItem('debugDispatchHttpRequestEnabled'));\n}\n\nfunction debugLog(...log: unknown[]): void {\n  if (!isDebugMode()) {\n    return;\n  }\n\n  // eslint-disable-next-line no-console\n  console.log('debugLog', ...log);\n}\n\nfunction setDebugDispatchHttpRequestEnabled(enabled: boolean): void {\n  if (enabled) {\n    localStorage.setItem('debugDispatchHttpRequestEnabled', 'true');\n  } else {\n    localStorage.removeItem('debugDispatchHttpRequestEnabled');\n  }\n}\n\n// @ts-expect-error\nglobalThis.setDebugDispatchHttpRequestEnabled = setDebugDispatchHttpRequestEnabled;\n"]}