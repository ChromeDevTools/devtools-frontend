{"version":3,"file":"InspectorFrontendHostAPI.js","sourceRoot":"","sources":["../../../../../../front_end/core/host/InspectorFrontendHostAPI.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAM7B;;GAEG;AACH,MAAM,CAAN,IAAY,MA+BX;AA/BD,WAAY,MAAM;IAChB,oFAAoF;IACpF,yCAA+B,CAAA;IAC/B,6CAAmC,CAAA;IACnC,iDAAuC,CAAA;IACvC,mDAAyC,CAAA;IACzC,6DAAmD,CAAA;IACnD,mDAAyC,CAAA;IACzC,yEAA+D,CAAA;IAC/D,mFAAyE,CAAA;IACzE,2CAAiC,CAAA;IACjC,6CAAmC,CAAA;IACnC,uDAA6C,CAAA;IAC7C,6DAAmD,CAAA;IACnD,yDAA+C,CAAA;IAC/C,iDAAuC,CAAA;IACvC,iDAAuC,CAAA;IACvC,6CAAmC,CAAA;IACnC,mFAAyE,CAAA;IACzE,qEAA2D,CAAA;IAC3D,2CAAiC,CAAA;IACjC,uCAA6B,CAAA;IAC7B,iDAAuC,CAAA;IACvC,qDAA2C,CAAA;IAC3C,+CAAqC,CAAA;IACrC,+BAAqB,CAAA;IACrB,6CAAmC,CAAA;IACnC,iDAAuC,CAAA;IACvC,2CAAiC,CAAA;IACjC,iCAAuB,CAAA;IACvB,wDAAwD;AAC1D,CAAC,EA/BW,MAAM,KAAN,MAAM,QA+BjB;AAED,MAAM,CAAC,MAAM,gBAAgB,GAAG;IAC9B,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC,MAAM,CAAC,iBAAiB,EAAE,EAAE,CAAC;IAC9B,CAAC,MAAM,CAAC,kBAAkB,EAAE,EAAE,CAAC;IAC/B,CAAC,MAAM,CAAC,uBAAuB,EAAE,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC,MAAM,CAAC,kBAAkB,EAAE,CAAC,OAAO,CAAC,CAAC;IACtC,CAAC,MAAM,CAAC,6BAA6B,EAAE,CAAC,QAAQ,CAAC,CAAC;IAClD,CAAC,MAAM,CAAC,kCAAkC,EAAE,CAAC,QAAQ,CAAC,CAAC;IACvD,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC,eAAe,CAAC,CAAC;IAC3C,CAAC,MAAM,CAAC,oBAAoB,EAAE,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;IAC9D,CAAC,MAAM,CAAC,uBAAuB,EAAE,EAAE,CAAC;IACpC,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAC,OAAO,CAAC,CAAC;IACzC,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,aAAa,CAAC,CAAC;IAC3C,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,gBAAgB,CAAC,CAAC;IAC9C,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;IACxD,CAAC,MAAM,CAAC,kCAAkC,EAAE,CAAC,SAAS,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;IAC5E,CAAC,MAAM,CAAC,2BAA2B,EAAE,AAAD,EAAG,CAAC,WAAW,EAAE,gBAAgB,EAAE,WAAW,CAAC,CAAC;IACpF,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,WAAW,EAAE,gBAAgB,EAAE,QAAQ,CAAC,CAAC;IAClE,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAAC;IACtD,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC,MAAM,CAAC,mBAAmB,EAAE,CAAC,MAAM,CAAC,CAAC;IACtC,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,KAAK,EAAE,YAAY,EAAE,cAAc,CAAC,CAAC;IAChE,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;IAC5C,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC,WAAW,EAAE,gBAAgB,EAAE,OAAO,CAAC,CAAC;IAClE,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,aAAa,CAAC,CAAC;IACxC,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,WAAW,CAAC,CAAC;CACzB,CAAC","sourcesContent":["// Copyright 2015 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as Common from '../common/common.js';\nimport type * as Root from '../root/root.js';\n\n/**\n * This values should match the one getting called from Chromium\n */\nexport enum Events {\n  /* eslint-disable @typescript-eslint/naming-convention -- Accessed from web_tests */\n  AppendedToURL = 'appendedToURL',\n  CanceledSaveURL = 'canceledSaveURL',\n  ColorThemeChanged = 'colorThemeChanged',\n  ContextMenuCleared = 'contextMenuCleared',\n  ContextMenuItemSelected = 'contextMenuItemSelected',\n  DeviceCountUpdated = 'deviceCountUpdated',\n  DevicesDiscoveryConfigChanged = 'devicesDiscoveryConfigChanged',\n  DevicesPortForwardingStatusChanged = 'devicesPortForwardingStatusChanged',\n  DevicesUpdated = 'devicesUpdated',\n  DispatchMessage = 'dispatchMessage',\n  DispatchMessageChunk = 'dispatchMessageChunk',\n  EnterInspectElementMode = 'enterInspectElementMode',\n  EyeDropperPickedColor = 'eyeDropperPickedColor',\n  FileSystemsLoaded = 'fileSystemsLoaded',\n  FileSystemRemoved = 'fileSystemRemoved',\n  FileSystemAdded = 'fileSystemAdded',\n  FileSystemFilesChangedAddedRemoved = 'fileSystemFilesChangedAddedRemoved',\n  IndexingTotalWorkCalculated = 'indexingTotalWorkCalculated',\n  IndexingWorked = 'indexingWorked',\n  IndexingDone = 'indexingDone',\n  KeyEventUnhandled = 'keyEventUnhandled',\n  ReloadInspectedPage = 'reloadInspectedPage',\n  RevealSourceLine = 'revealSourceLine',\n  SavedURL = 'savedURL',\n  SearchCompleted = 'searchCompleted',\n  SetInspectedTabId = 'setInspectedTabId',\n  SetUseSoftMenu = 'setUseSoftMenu',\n  ShowPanel = 'showPanel',\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport const EventDescriptors = [\n  [Events.AppendedToURL, ['url']],\n  [Events.CanceledSaveURL, ['url']],\n  [Events.ColorThemeChanged, []],\n  [Events.ContextMenuCleared, []],\n  [Events.ContextMenuItemSelected, ['id']],\n  [Events.DeviceCountUpdated, ['count']],\n  [Events.DevicesDiscoveryConfigChanged, ['config']],\n  [Events.DevicesPortForwardingStatusChanged, ['status']],\n  [Events.DevicesUpdated, ['devices']],\n  [Events.DispatchMessage, ['messageObject']],\n  [Events.DispatchMessageChunk, ['messageChunk', 'messageSize']],\n  [Events.EnterInspectElementMode, []],\n  [Events.EyeDropperPickedColor, ['color']],\n  [Events.FileSystemsLoaded, ['fileSystems']],\n  [Events.FileSystemRemoved, ['fileSystemPath']],\n  [Events.FileSystemAdded, ['errorMessage', 'fileSystem']],\n  [Events.FileSystemFilesChangedAddedRemoved, ['changed', 'added', 'removed']],\n  [Events.IndexingTotalWorkCalculated, , ['requestId', 'fileSystemPath', 'totalWork']],\n  [Events.IndexingWorked, ['requestId', 'fileSystemPath', 'worked']],\n  [Events.IndexingDone, ['requestId', 'fileSystemPath']],\n  [Events.KeyEventUnhandled, ['event']],\n  [Events.ReloadInspectedPage, ['hard']],\n  [Events.RevealSourceLine, ['url', 'lineNumber', 'columnNumber']],\n  [Events.SavedURL, ['url', 'fileSystemPath']],\n  [Events.SearchCompleted, ['requestId', 'fileSystemPath', 'files']],\n  [Events.SetInspectedTabId, ['tabId']],\n  [Events.SetUseSoftMenu, ['useSoftMenu']],\n  [Events.ShowPanel, ['panelName']],\n] as const;\n\nexport interface DispatchMessageChunkEvent {\n  messageChunk: string;\n  messageSize: number;\n}\n\nexport interface EyeDropperPickedColorEvent {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nexport interface DevToolsFileSystem {\n  type: ''|'automatic'|'snippets'|'overrides';\n  fileSystemName: string;\n  rootURL: string;\n  fileSystemPath: Platform.DevToolsPath.RawPathString;\n}\n\nexport interface FileSystemAddedEvent {\n  errorMessage?: string;\n  fileSystem: DevToolsFileSystem|null;\n}\n\nexport interface FilesChangedEvent {\n  changed: Platform.DevToolsPath.RawPathString[];\n  added: Platform.DevToolsPath.RawPathString[];\n  removed: Platform.DevToolsPath.RawPathString[];\n}\n\nexport interface IndexingEvent {\n  requestId: number;\n  fileSystemPath: string;\n}\n\nexport interface IndexingTotalWorkCalculatedEvent extends IndexingEvent {\n  totalWork: number;\n}\n\nexport interface IndexingWorkedEvent extends IndexingEvent {\n  worked: number;\n}\n\nexport interface KeyEventUnhandledEvent {\n  type: string;\n  key: string;\n  keyCode: number;\n  modifiers: number;\n}\n\nexport interface RevealSourceLineEvent {\n  url: Platform.DevToolsPath.UrlString;\n  lineNumber: number;\n  columnNumber: number;\n}\n\nexport interface SavedURLEvent {\n  url: Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.UrlString;\n  fileSystemPath: Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.UrlString;\n}\n\nexport interface SearchCompletedEvent {\n  requestId: number;\n  files: Platform.DevToolsPath.RawPathString[];\n}\n\nexport interface DoAidaConversationResult {\n  statusCode?: number;\n  headers?: Record<string, string>;\n  netError?: number;\n  netErrorName?: string;\n  error?: string;\n  detail?: string;\n}\n\nexport interface AidaClientResult {\n  response?: string;\n  error?: string;\n  detail?: string;\n}\n\nexport interface AidaCodeCompleteResult {\n  response?: string;\n  error?: string;\n  detail?: string;\n}\n\nexport interface VisualElementImpression {\n  id: number;\n  type: number;\n  parent?: number;\n  context?: number;\n  width?: number;\n  height?: number;\n}\n\nexport interface ImpressionEvent {\n  impressions: VisualElementImpression[];\n}\n\nexport interface ResizeEvent {\n  veid: number;\n  width?: number;\n  height?: number;\n}\n\nexport interface ClickEvent {\n  veid: number;\n  mouseButton?: number;\n  context?: number;\n  doubleClick: boolean;\n}\n\nexport interface HoverEvent {\n  veid: number;\n  time?: number;\n  context?: number;\n}\n\nexport interface DragEvent {\n  veid: number;\n  context?: number;\n}\n\nexport interface ChangeEvent {\n  veid: number;\n  context?: number;\n}\n\nexport interface KeyDownEvent {\n  veid?: number;\n  context?: number;\n}\n\nexport interface SettingAccessEvent {\n  name: number;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  numeric_value?: number;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  string_value?: number;\n}\n\nexport interface FunctionCallEvent {\n  name: number;\n  context?: number;\n}\n\n/**\n * While `EventDescriptors` are used to dynamically dispatch host binding events,\n * the `EventTypes` \"type map\" is used for type-checking said events by TypeScript.\n * `EventTypes` is not used at runtime.\n * Please note that the \"dispatch\" side can't be type-checked as the dispatch is\n * done dynamically.\n **/\nexport interface EventTypes {\n  [Events.AppendedToURL]: Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.UrlString;\n  [Events.CanceledSaveURL]: Platform.DevToolsPath.UrlString;\n  [Events.ColorThemeChanged]: void;\n  [Events.ContextMenuCleared]: void;\n  [Events.ContextMenuItemSelected]: number;\n  [Events.DeviceCountUpdated]: number;\n  [Events.DevicesDiscoveryConfigChanged]: Adb.Config;\n  [Events.DevicesPortForwardingStatusChanged]: void;\n  [Events.DevicesUpdated]: void;\n  [Events.DispatchMessage]: string;\n  [Events.DispatchMessageChunk]: DispatchMessageChunkEvent;\n  [Events.EnterInspectElementMode]: void;\n  [Events.EyeDropperPickedColor]: EyeDropperPickedColorEvent;\n  [Events.FileSystemsLoaded]: DevToolsFileSystem[];\n  [Events.FileSystemRemoved]: Platform.DevToolsPath.RawPathString;\n  [Events.FileSystemAdded]: FileSystemAddedEvent;\n  [Events.FileSystemFilesChangedAddedRemoved]: FilesChangedEvent;\n  [Events.IndexingTotalWorkCalculated]: IndexingTotalWorkCalculatedEvent;\n  [Events.IndexingWorked]: IndexingWorkedEvent;\n  [Events.IndexingDone]: IndexingEvent;\n  [Events.KeyEventUnhandled]: KeyEventUnhandledEvent;\n  [Events.ReloadInspectedPage]: boolean;\n  [Events.RevealSourceLine]: RevealSourceLineEvent;\n  [Events.SavedURL]: SavedURLEvent;\n  [Events.SearchCompleted]: SearchCompletedEvent;\n  [Events.SetInspectedTabId]: string;\n  [Events.SetUseSoftMenu]: boolean;\n  [Events.ShowPanel]: string;\n}\n\nexport type DispatchHttpRequestRequest = {\n  service: string,\n  path: string,\n  method: 'GET',\n  queryParams?: Record<string, string|string[]>,\n  body?: never,\n}|{\n  service: string,\n  path: string,\n  method: 'POST',\n  queryParams?: Record<string, string|string[]>,\n  // A JSON string containing the request body.\n  body?: string,\n};\n\ninterface DispatchHttpRequestSuccessResult {\n  response: string;\n  statusCode: number;\n}\n\ninterface DispatchHttpRequestErrorResult {\n  error: string;\n  detail?: string;\n  netError?: number;\n  netErrorName?: string;\n  statusCode?: number;\n}\n\nexport type DispatchHttpRequestResult = DispatchHttpRequestSuccessResult|DispatchHttpRequestErrorResult;\n\nexport interface InspectorFrontendHostAPI {\n  events: Common.EventTarget.EventTarget<EventTypes>;\n\n  connectAutomaticFileSystem(\n      fileSystemPath: Platform.DevToolsPath.RawPathString,\n      fileSystemUUID: string,\n      addIfMissing: boolean,\n      callback: (result: {success: boolean}) => void,\n      ): void;\n\n  disconnectAutomaticFileSystem(fileSystemPath: Platform.DevToolsPath.RawPathString): void;\n\n  addFileSystem(type?: string): void;\n\n  loadCompleted(): void;\n\n  indexPath(requestId: number, fileSystemPath: Platform.DevToolsPath.RawPathString, excludedFolders: string): void;\n\n  /**\n   * Requests inspected page to be placed atop of the inspector frontend with specified bounds.\n   */\n  setInspectedPageBounds(bounds: {\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n  }): void;\n\n  showCertificateViewer(certChain: string[]): void;\n\n  setWhitelistedShortcuts(shortcuts: string): void;\n\n  setEyeDropperActive(active: boolean): void;\n\n  inspectElementCompleted(): void;\n\n  openInNewTab(url: Platform.DevToolsPath.UrlString): void;\n\n  openSearchResultsInNewTab(query: string): void;\n\n  showItemInFolder(fileSystemPath: Platform.DevToolsPath.RawPathString): void;\n\n  removeFileSystem(fileSystemPath: Platform.DevToolsPath.RawPathString): void;\n\n  requestFileSystems(): void;\n\n  save(url: Platform.DevToolsPath.UrlString, content: string, forceSaveAs: boolean, isBase64: boolean): void;\n\n  append(url: Platform.DevToolsPath.UrlString, content: string): void;\n\n  close(url: Platform.DevToolsPath.UrlString): void;\n\n  searchInPath(requestId: number, fileSystemPath: Platform.DevToolsPath.RawPathString, query: string): void;\n\n  stopIndexing(requestId: number): void;\n\n  bringToFront(): void;\n\n  closeWindow(): void;\n\n  /**\n   * If you need to alert to the user after copying use {@link UIUtils.copyTextToClipboard}.\n   */\n  copyText(text: string|null|undefined): void;\n\n  inspectedURLChanged(url: Platform.DevToolsPath.UrlString): void;\n\n  isolatedFileSystem(fileSystemId: string, registeredName: string): FileSystem|null;\n\n  loadNetworkResource(\n      url: string, headers: string, streamId: number, callback: (arg0: LoadNetworkResourceResult) => void): void;\n\n  registerPreference(name: string, options: {synced?: boolean}): void;\n\n  getPreferences(callback: (arg0: Record<string, string>) => void): void;\n\n  getPreference(name: string, callback: (arg0: string) => void): void;\n\n  setPreference(name: string, value: string): void;\n\n  removePreference(name: string): void;\n\n  clearPreferences(): void;\n\n  getSyncInformation(callback: (arg0: SyncInformation) => void): void;\n\n  getHostConfig(callback: (arg0: Root.Runtime.HostConfig) => void): void;\n\n  upgradeDraggedFileSystemPermissions(fileSystem: FileSystem): void;\n\n  platform(): string;\n\n  recordCountHistogram(histogramName: string, sample: number, min: number, exclusiveMax: number, bucketSize: number):\n      void;\n\n  recordEnumeratedHistogram(actionName: EnumeratedHistogram, actionCode: number, bucketSize: number): void;\n\n  recordPerformanceHistogram(histogramName: string, duration: number): void;\n\n  recordUserMetricsAction(umaName: string): void;\n\n  recordNewBadgeUsage(featureName: string): void;\n\n  sendMessageToBackend(message: string): void;\n\n  setDevicesDiscoveryConfig(config: Adb.Config): void;\n\n  setDevicesUpdatesEnabled(enabled: boolean): void;\n\n  openRemotePage(browserId: string, url: string): void;\n\n  openNodeFrontend(): void;\n\n  setInjectedScriptForOrigin(origin: string, script: string): void;\n\n  setIsDocked(isDocked: boolean, callback: () => void): void;\n\n  showSurvey(trigger: string, callback: (arg0: ShowSurveyResult) => void): void;\n\n  canShowSurvey(trigger: string, callback: (arg0: CanShowSurveyResult) => void): void;\n\n  zoomFactor(): number;\n\n  zoomIn(): void;\n\n  zoomOut(): void;\n\n  resetZoom(): void;\n\n  showContextMenuAtPoint(x: number, y: number, items: ContextMenuDescriptor[], document: Document): void;\n\n  reattach(callback: () => void): void;\n\n  readyForTest(): void;\n\n  connectionReady(): void;\n\n  setOpenNewWindowForPopups(value: boolean): void;\n\n  isHostedMode(): boolean;\n\n  setAddExtensionCallback(callback: (arg0: ExtensionDescriptor) => void): void;\n\n  initialTargetId(): Promise<string|null>;\n\n  doAidaConversation: (request: string, streamId: number, cb: (result: DoAidaConversationResult) => void) => void;\n  registerAidaClientEvent: (request: string, cb: (result: AidaClientResult) => void) => void;\n  aidaCodeComplete: (request: string, cb: (result: AidaCodeCompleteResult) => void) => void;\n  dispatchHttpRequest: (request: DispatchHttpRequestRequest, cb: (result: DispatchHttpRequestResult) => void) => void;\n\n  recordImpression(event: ImpressionEvent): void;\n  recordClick(event: ClickEvent): void;\n  recordHover(event: HoverEvent): void;\n  recordDrag(event: DragEvent): void;\n  recordChange(event: ChangeEvent): void;\n  recordKeyDown(event: KeyDownEvent): void;\n  recordSettingAccess(event: SettingAccessEvent): void;\n  recordFunctionCall(event: FunctionCallEvent): void;\n}\n\nexport interface AcceleratorDescriptor {\n  keyCode: number;\n  modifiers: number;\n}\n\nexport interface ContextMenuDescriptor {\n  type: 'checkbox'|'item'|'separator'|'subMenu';\n  id?: number;\n  label?: string;\n  accelerator?: AcceleratorDescriptor;\n  isExperimentalFeature?: boolean;\n  enabled?: boolean;\n  checked?: boolean;\n  isDevToolsPerformanceMenuItem?: boolean;\n  subItems?: ContextMenuDescriptor[];\n  shortcut?: string;\n  jslogContext?: string;\n  /** Setting the featureName requests showing a new badge tied to that feature . */\n  featureName?: string;\n}\nexport interface LoadNetworkResourceResult {\n  statusCode: number;\n  headers?: Record<string, string>;\n  netError?: number;\n  netErrorName?: string;\n  urlValid?: boolean;\n  messageOverride?: string;\n}\nexport interface ExtensionDescriptor {\n  startPage: string;\n  name: string;\n  exposeExperimentalAPIs: boolean;\n  hostsPolicy?: ExtensionHostsPolicy;\n  allowFileAccess?: boolean;\n}\nexport interface ExtensionHostsPolicy {\n  runtimeAllowedHosts: string[];\n  runtimeBlockedHosts: string[];\n}\nexport interface ShowSurveyResult {\n  surveyShown: boolean;\n}\nexport interface CanShowSurveyResult {\n  canShowSurvey: boolean;\n}\nexport interface SyncInformation {\n  /** Whether Chrome Sync is enabled and active */\n  isSyncActive: boolean;\n  /** Whether syncing of Chrome Settings is enabled via Chrome Sync is enabled */\n  arePreferencesSynced?: boolean;\n  /** The email of the account used for syncing */\n  accountEmail?: string;\n  /** The image of the account used for syncing. Its a base64 encoded PNG */\n  accountImage?: string;\n  /** The full name of the account used for syncing */\n  accountFullName?: string;\n  /** Whether Chrome Sync is paused, equivalent to the user being logged out automatically */\n  isSyncPaused?: boolean;\n}\n\n/**\n * Enum for recordPerformanceHistogram\n * Warning: There is another definition of this enum in the DevTools code\n * base, keep them in sync:\n * front_end/devtools_compatibility.js\n */\nexport const enum EnumeratedHistogram {\n  /* eslint-disable @typescript-eslint/naming-convention -- Shadows a legacy enum */\n  // LINT.IfChange(EnumeratedHistogram)\n  ActionTaken = 'DevTools.ActionTaken',\n  PanelShown = 'DevTools.PanelShown',\n  KeyboardShortcutFired = 'DevTools.KeyboardShortcutFired',\n  IssueCreated = 'DevTools.IssueCreated',\n  IssuesPanelIssueExpanded = 'DevTools.IssuesPanelIssueExpanded',\n  IssuesPanelOpenedFrom = 'DevTools.IssuesPanelOpenedFrom',\n  IssuesPanelResourceOpened = 'DevTools.IssuesPanelResourceOpened',\n  KeybindSetSettingChanged = 'DevTools.KeybindSetSettingChanged',\n  ExperimentEnabledAtLaunch = 'DevTools.ExperimentEnabledAtLaunch',\n  ExperimentDisabledAtLaunch = 'DevTools.ExperimentDisabledAtLaunch',\n  ExperimentEnabled = 'DevTools.ExperimentEnabled',\n  ExperimentDisabled = 'DevTools.ExperimentDisabled',\n  DeveloperResourceLoaded = 'DevTools.DeveloperResourceLoaded',\n  DeveloperResourceScheme = 'DevTools.DeveloperResourceScheme',\n  Language = 'DevTools.Language',\n  SyncSetting = 'DevTools.SyncSetting',\n  RecordingAssertion = 'DevTools.RecordingAssertion',\n  RecordingCodeToggled = 'DevTools.RecordingCodeToggled',\n  RecordingCopiedToClipboard = 'DevTools.RecordingCopiedToClipboard',\n  RecordingEdited = 'DevTools.RecordingEdited',\n  RecordingExported = 'DevTools.RecordingExported',\n  RecordingReplayFinished = 'DevTools.RecordingReplayFinished',\n  RecordingReplaySpeed = 'DevTools.RecordingReplaySpeed',\n  RecordingReplayStarted = 'DevTools.RecordingReplayStarted',\n  RecordingToggled = 'DevTools.RecordingToggled',\n  SourcesPanelFileDebugged = 'DevTools.SourcesPanelFileDebugged',\n  SourcesPanelFileOpened = 'DevTools.SourcesPanelFileOpened',\n  NetworkPanelResponsePreviewOpened = 'DevTools.NetworkPanelResponsePreviewOpened',\n  TimelineNavigationSettingState = 'DevTools.TimelineNavigationSettingState',\n  LighthouseModeRun = 'DevTools.LighthouseModeRun',\n  LighthouseCategoryUsed = 'DevTools.LighthouseCategoryUsed',\n  SwatchActivated = 'DevTools.SwatchActivated',\n  AnimationPlaybackRateChanged = 'DevTools.AnimationPlaybackRateChanged',\n  BuiltInAiAvailability = 'DevTools.BuiltInAiAvailability',\n  // LINT.ThenChange(/front_end/devtools_compatibility.js:EnumeratedHistogram)\n}\n"]}