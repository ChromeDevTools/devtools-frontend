{
  "version": 3,
  "sources": ["../../../../../../front_end/core/host/ResourceLoader.ts"],
  "sourcesContent": ["// Copyright 2015 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\n\nimport {InspectorFrontendHostInstance} from './InspectorFrontendHost.js';\nimport type {LoadNetworkResourceResult} from './InspectorFrontendHostAPI.js';\n\nconst UIStrings = {\n  /**\n   * @description Name of an error category used in error messages\n   */\n  systemError: 'System error',\n  /**\n   * @description Name of an error category used in error messages\n   */\n  connectionError: 'Connection error',\n  /**\n   * @description Name of an error category used in error messages\n   */\n  certificateError: 'Certificate error',\n  /**\n   * @description Name of an error category used in error messages\n   */\n  httpError: 'HTTP error',\n  /**\n   * @description Name of an error category used in error messages\n   */\n  cacheError: 'Cache error',\n  /**\n   * @description Name of an error category used in error messages\n   */\n  signedExchangeError: 'Signed Exchange error',\n  /**\n   * @description Name of an error category used in error messages\n   */\n  ftpError: 'FTP error',\n  /**\n   * @description Name of an error category used in error messages\n   */\n  certificateManagerError: 'Certificate manager error',\n  /**\n   * @description Name of an error category used in error messages\n   */\n  dnsResolverError: 'DNS resolver error',\n  /**\n   * @description Name of an error category used in error messages\n   */\n  unknownError: 'Unknown error',\n  /**\n   * @description Phrase used in error messages that carry a network error name\n   * @example {404} PH1\n   * @example {net::ERR_INSUFFICIENT_RESOURCES} PH2\n   */\n  httpErrorStatusCodeSS: 'HTTP error: status code {PH1}, {PH2}',\n  /**\n   * @description Name of an error category used in error messages\n   */\n  invalidUrl: 'Invalid URL',\n  /**\n   * @description Name of an error category used in error messages\n   */\n  decodingDataUrlFailed: 'Decoding Data URL failed',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('core/host/ResourceLoader.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport const ResourceLoader = {};\n\nlet _lastStreamId = 0;\n\nconst _boundStreams: Record<number, Common.StringOutputStream.OutputStream> = {};\n\nexport const bindOutputStream = function(stream: Common.StringOutputStream.OutputStream): number {\n  _boundStreams[++_lastStreamId] = stream;\n  return _lastStreamId;\n};\n\nexport const discardOutputStream = function(id: number): void {\n  void _boundStreams[id].close();\n  delete _boundStreams[id];\n};\n\nexport const streamWrite = function(id: number, chunk: string): void {\n  void _boundStreams[id].write(chunk);\n};\nexport interface LoadErrorDescription {\n  statusCode: number;\n  netError?: number;\n  netErrorName?: string;\n  urlValid?: boolean;\n  message?: string;\n}\n\nexport const load = function(\n    url: string, headers: Record<string, string>|null,\n    callback: (\n        arg0: boolean,\n        arg1: Record<string, string>,\n        arg2: string,\n        arg3: LoadErrorDescription,\n        ) => void,\n    allowRemoteFilePaths: boolean): void {\n  const stream = new Common.StringOutputStream.StringOutputStream();\n  loadAsStream(url, headers, stream, mycallback, allowRemoteFilePaths);\n\n  function mycallback(\n      success: boolean,\n      headers: Record<string, string>,\n      errorDescription: LoadErrorDescription,\n      ): void {\n    callback(success, headers, stream.data(), errorDescription);\n  }\n};\n\nfunction getNetErrorCategory(netError: number): string {\n  if (netError > -100) {\n    return i18nString(UIStrings.systemError);\n  }\n  if (netError > -200) {\n    return i18nString(UIStrings.connectionError);\n  }\n  if (netError > -300) {\n    return i18nString(UIStrings.certificateError);\n  }\n  if (netError > -400) {\n    return i18nString(UIStrings.httpError);\n  }\n  if (netError > -500) {\n    return i18nString(UIStrings.cacheError);\n  }\n  if (netError > -600) {\n    return i18nString(UIStrings.signedExchangeError);\n  }\n  if (netError > -700) {\n    return i18nString(UIStrings.ftpError);\n  }\n  if (netError > -800) {\n    return i18nString(UIStrings.certificateManagerError);\n  }\n  if (netError > -900) {\n    return i18nString(UIStrings.dnsResolverError);\n  }\n  return i18nString(UIStrings.unknownError);\n}\n\nfunction isHTTPError(netError: number): boolean {\n  return netError <= -300 && netError > -400;\n}\n\nexport function netErrorToMessage(\n    netError: number|undefined, httpStatusCode: number|undefined, netErrorName: string|undefined): string|null {\n  if (netError === undefined || netErrorName === undefined) {\n    return null;\n  }\n  if (netError !== 0) {\n    if (isHTTPError(netError)) {\n      return i18nString(UIStrings.httpErrorStatusCodeSS, {PH1: String(httpStatusCode), PH2: netErrorName});\n    }\n    const errorCategory = getNetErrorCategory(netError);\n    // We don't localize here, as `errorCategory` is already localized,\n    // and `netErrorName` is an error code like 'net::ERR_CERT_AUTHORITY_INVALID'.\n    return `${errorCategory}: ${netErrorName}`;\n  }\n  return null;\n}\n\nfunction createErrorMessageFromResponse(response: LoadNetworkResourceResult): {\n  success: boolean,\n  description: LoadErrorDescription,\n} {\n  const {statusCode, netError, netErrorName, urlValid, messageOverride} = response;\n  let message = '';\n  const success = statusCode >= 200 && statusCode < 300;\n  if (typeof messageOverride === 'string') {\n    message = messageOverride;\n  } else if (!success) {\n    if (typeof netError === 'undefined') {\n      if (urlValid === false) {\n        message = i18nString(UIStrings.invalidUrl);\n      } else {\n        message = i18nString(UIStrings.unknownError);\n      }\n    } else {\n      const maybeMessage = netErrorToMessage(netError, statusCode, netErrorName);\n      if (maybeMessage) {\n        message = maybeMessage;\n      }\n    }\n  }\n  console.assert(success === (message.length === 0));\n  return {success, description: {statusCode, netError, netErrorName, urlValid, message}};\n}\n\nconst loadXHR = (url: string): Promise<string> => {\n  return new Promise((successCallback, failureCallback) => {\n    function onReadyStateChanged(): void {\n      if (xhr.readyState !== XMLHttpRequest.DONE) {\n        return;\n      }\n      if (xhr.status !== 200) {\n        xhr.onreadystatechange = null;\n        failureCallback(new Error(String(xhr.status)));\n        return;\n      }\n      xhr.onreadystatechange = null;\n      successCallback(xhr.responseText);\n    }\n\n    const xhr = new XMLHttpRequest();\n    xhr.withCredentials = false;\n    xhr.open('GET', url, true);\n    xhr.onreadystatechange = onReadyStateChanged;\n    xhr.send(null);\n  });\n};\n\nfunction canBeRemoteFilePath(url: string): boolean {\n  try {\n    const urlObject = new URL(url);\n    return urlObject.protocol === 'file:' && urlObject.host !== '';\n  } catch {\n    return false;\n  }\n}\n\nexport const loadAsStream = function(\n    url: string,\n    headers: Record<string, string>|null,\n    stream: Common.StringOutputStream.OutputStream,\n    callback?: ((arg0: boolean, arg1: Record<string, string>, arg2: LoadErrorDescription) => void),\n    allowRemoteFilePaths?: boolean,\n    ): void {\n  const streamId = bindOutputStream(stream);\n  const parsedURL = new Common.ParsedURL.ParsedURL(url);\n  if (parsedURL.isDataURL()) {\n    loadXHR(url).then(dataURLDecodeSuccessful).catch(dataURLDecodeFailed);\n    return;\n  }\n\n  if (!allowRemoteFilePaths && canBeRemoteFilePath(url)) {\n    // Remote file paths can cause security problems, see crbug.com/1342722.\n    if (callback) {\n      callback(/* success */ false, /* headers */ {}, {\n        statusCode: 400,  // BAD_REQUEST\n        netError: -20,    // BLOCKED_BY_CLIENT\n        netErrorName: 'net::BLOCKED_BY_CLIENT',\n        message: 'Loading from a remote file path is prohibited for security reasons.',\n      });\n    }\n    return;\n  }\n\n  const rawHeaders = [];\n  if (headers) {\n    for (const key in headers) {\n      rawHeaders.push(key + ': ' + headers[key]);\n    }\n  }\n  InspectorFrontendHostInstance.loadNetworkResource(url, rawHeaders.join('\\r\\n'), streamId, finishedCallback);\n\n  function finishedCallback(response: LoadNetworkResourceResult): void {\n    if (callback) {\n      const {success, description} = createErrorMessageFromResponse(response);\n      callback(success, response.headers || {}, description);\n    }\n    discardOutputStream(streamId);\n  }\n\n  function dataURLDecodeSuccessful(text: string): void {\n    streamWrite(streamId, text);\n    finishedCallback(({statusCode: 200}));\n  }\n\n  function dataURLDecodeFailed(_xhrStatus: Error): void {\n    const messageOverride: string = i18nString(UIStrings.decodingDataUrlFailed);\n    finishedCallback(({statusCode: 404, messageOverride}));\n  }\n};\n"],
  "mappings": "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",
  "names": ["headers"]
}
