{"version":3,"file":"ByteUtilities.js","sourceRoot":"","sources":["../../../../../../front_end/core/i18n/ByteUtilities.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,eAAe,EAAC,MAAM,sBAAsB,CAAC;AAErD,MAAM,WAAW,GAAG,eAAe,CAAC;IAClC,KAAK,EAAE,MAAM;IACb,IAAI,EAAE,MAAM;IACZ,WAAW,EAAE,QAAQ;IACrB,qBAAqB,EAAE,CAAC;IACxB,qBAAqB,EAAE,CAAC;CACzB,CAAC,CAAC;AAEH,MAAM,sBAAsB,GAAG,eAAe,CAAC;IAC7C,KAAK,EAAE,MAAM;IACb,IAAI,EAAE,UAAU;IAChB,WAAW,EAAE,QAAQ;IACrB,qBAAqB,EAAE,CAAC;IACxB,qBAAqB,EAAE,CAAC;CACzB,CAAC,CAAC;AAEH,MAAM,sBAAsB,GAAG,eAAe,CAAC;IAC7C,KAAK,EAAE,MAAM;IACb,IAAI,EAAE,UAAU;IAChB,WAAW,EAAE,QAAQ;IACrB,qBAAqB,EAAE,CAAC;IACxB,qBAAqB,EAAE,CAAC;CACzB,CAAC,CAAC;AAEH,MAAM,sBAAsB,GAAG,eAAe,CAAC;IAC7C,KAAK,EAAE,MAAM;IACb,IAAI,EAAE,UAAU;IAChB,WAAW,EAAE,QAAQ;IACrB,qBAAqB,EAAE,CAAC;IACxB,qBAAqB,EAAE,CAAC;CACzB,CAAC,CAAC;AAEH,MAAM,sBAAsB,GAAG,eAAe,CAAC;IAC7C,KAAK,EAAE,MAAM;IACb,IAAI,EAAE,UAAU;IAChB,WAAW,EAAE,QAAQ;IACrB,qBAAqB,EAAE,CAAC;IACxB,qBAAqB,EAAE,CAAC;CACzB,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,KAAa,EAAU,EAAE;IACrD,IAAI,KAAK,GAAG,IAAI,EAAE,CAAC;QACjB,OAAO,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAED,MAAM,SAAS,GAAG,KAAK,GAAG,IAAI,CAAC;IAC/B,IAAI,SAAS,GAAG,GAAG,EAAE,CAAC;QACpB,OAAO,sBAAsB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAClD,CAAC;IACD,IAAI,SAAS,GAAG,IAAI,EAAE,CAAC;QACrB,OAAO,sBAAsB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAClD,CAAC;IAED,MAAM,SAAS,GAAG,SAAS,GAAG,IAAI,CAAC;IACnC,IAAI,SAAS,GAAG,GAAG,EAAE,CAAC;QACpB,OAAO,sBAAsB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAClD,CAAC;IACD,OAAO,sBAAsB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AAClD,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,KAAa,EAAU,EAAE;IACvD,MAAM,SAAS,GAAG,KAAK,GAAG,IAAI,CAAC;IAC/B,IAAI,SAAS,GAAG,GAAG,EAAE,CAAC;QACpB,OAAO,sBAAsB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAClD,CAAC;IACD,OAAO,sBAAsB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AAClD,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {defineFormatter} from './NumberFormatter.js';\n\nconst narrowBytes = defineFormatter({\n  style: 'unit',\n  unit: 'byte',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});\n\nconst narrowKilobytesDecimal = defineFormatter({\n  style: 'unit',\n  unit: 'kilobyte',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 1,\n  maximumFractionDigits: 1,\n});\n\nconst narrowKilobytesInteger = defineFormatter({\n  style: 'unit',\n  unit: 'kilobyte',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});\n\nconst narrowMegabytesDecimal = defineFormatter({\n  style: 'unit',\n  unit: 'megabyte',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 1,\n  maximumFractionDigits: 1,\n});\n\nconst narrowMegabytesInteger = defineFormatter({\n  style: 'unit',\n  unit: 'megabyte',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});\n\n/**\n * Returns string for bytes with legible units.\n * If necessary, can convert bytes to Kb or MB.\n */\nexport const bytesToString = (bytes: number): string => {\n  if (bytes < 1000) {\n    return narrowBytes.format(bytes);\n  }\n\n  const kilobytes = bytes / 1000;\n  if (kilobytes < 100) {\n    return narrowKilobytesDecimal.format(kilobytes);\n  }\n  if (kilobytes < 1000) {\n    return narrowKilobytesInteger.format(kilobytes);\n  }\n\n  const megabytes = kilobytes / 1000;\n  if (megabytes < 100) {\n    return narrowMegabytesDecimal.format(megabytes);\n  }\n  return narrowMegabytesInteger.format(megabytes);\n};\n\n/**\n * Returns a string for bytes converted to Kb.\n * This is currently used on tables/rows to maintain consistency\n * and avoid varying units.\n */\nexport const formatBytesToKb = (bytes: number): string => {\n  const kilobytes = bytes / 1000;\n  if (kilobytes < 100) {\n    return narrowKilobytesDecimal.format(kilobytes);\n  }\n  return narrowKilobytesInteger.format(kilobytes);\n};\n"]}