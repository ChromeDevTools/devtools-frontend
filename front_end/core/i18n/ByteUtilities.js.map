{
  "version": 3,
  "sources": ["../../../../../../front_end/core/i18n/ByteUtilities.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {defineFormatter} from './NumberFormatter.js';\n\nconst narrowBytes = defineFormatter({\n  style: 'unit',\n  unit: 'byte',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});\n\nconst narrowKilobytesDecimal = defineFormatter({\n  style: 'unit',\n  unit: 'kilobyte',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 1,\n  maximumFractionDigits: 1,\n});\n\nconst narrowKilobytesInteger = defineFormatter({\n  style: 'unit',\n  unit: 'kilobyte',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});\n\nconst narrowMegabytesDecimal = defineFormatter({\n  style: 'unit',\n  unit: 'megabyte',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 1,\n  maximumFractionDigits: 1,\n});\n\nconst narrowMegabytesInteger = defineFormatter({\n  style: 'unit',\n  unit: 'megabyte',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});\n\n/**\n * Returns string for bytes with legible units.\n * If necessary, can convert bytes to Kb or MB.\n */\nexport const bytesToString = (bytes: number): string => {\n  if (bytes < 1000) {\n    return narrowBytes.format(bytes);\n  }\n\n  const kilobytes = bytes / 1000;\n  if (kilobytes < 100) {\n    return narrowKilobytesDecimal.format(kilobytes);\n  }\n  if (kilobytes < 1000) {\n    return narrowKilobytesInteger.format(kilobytes);\n  }\n\n  const megabytes = kilobytes / 1000;\n  if (megabytes < 100) {\n    return narrowMegabytesDecimal.format(megabytes);\n  }\n  return narrowMegabytesInteger.format(megabytes);\n};\n\n/**\n * Returns a string for bytes converted to Kb.\n * This is currently used on tables/rows to maintain consistency\n * and avoid varying units.\n */\nexport const formatBytesToKb = (bytes: number): string => {\n  const kilobytes = bytes / 1000;\n  if (kilobytes < 100) {\n    return narrowKilobytesDecimal.format(kilobytes);\n  }\n  return narrowKilobytesInteger.format(kilobytes);\n};\n"],
  "mappings": ";AAIA,SAAQ,uBAAsB;AAE9B,MAAM,cAAc,gBAAgB;AAAA,EAClC,OAAO;AAAA,EACP,MAAM;AAAA,EACN,aAAa;AAAA,EACb,uBAAuB;AAAA,EACvB,uBAAuB;AACzB,CAAC;AAED,MAAM,yBAAyB,gBAAgB;AAAA,EAC7C,OAAO;AAAA,EACP,MAAM;AAAA,EACN,aAAa;AAAA,EACb,uBAAuB;AAAA,EACvB,uBAAuB;AACzB,CAAC;AAED,MAAM,yBAAyB,gBAAgB;AAAA,EAC7C,OAAO;AAAA,EACP,MAAM;AAAA,EACN,aAAa;AAAA,EACb,uBAAuB;AAAA,EACvB,uBAAuB;AACzB,CAAC;AAED,MAAM,yBAAyB,gBAAgB;AAAA,EAC7C,OAAO;AAAA,EACP,MAAM;AAAA,EACN,aAAa;AAAA,EACb,uBAAuB;AAAA,EACvB,uBAAuB;AACzB,CAAC;AAED,MAAM,yBAAyB,gBAAgB;AAAA,EAC7C,OAAO;AAAA,EACP,MAAM;AAAA,EACN,aAAa;AAAA,EACb,uBAAuB;AAAA,EACvB,uBAAuB;AACzB,CAAC;AAMM,aAAM,gBAAgB,CAAC,UAA0B;AACtD,MAAI,QAAQ,KAAM;AAChB,WAAO,YAAY,OAAO,KAAK;AAAA,EACjC;AAEA,QAAM,YAAY,QAAQ;AAC1B,MAAI,YAAY,KAAK;AACnB,WAAO,uBAAuB,OAAO,SAAS;AAAA,EAChD;AACA,MAAI,YAAY,KAAM;AACpB,WAAO,uBAAuB,OAAO,SAAS;AAAA,EAChD;AAEA,QAAM,YAAY,YAAY;AAC9B,MAAI,YAAY,KAAK;AACnB,WAAO,uBAAuB,OAAO,SAAS;AAAA,EAChD;AACA,SAAO,uBAAuB,OAAO,SAAS;AAChD;AAOO,aAAM,kBAAkB,CAAC,UAA0B;AACxD,QAAM,YAAY,QAAQ;AAC1B,MAAI,YAAY,KAAK;AACnB,WAAO,uBAAuB,OAAO,SAAS;AAAA,EAChD;AACA,SAAO,uBAAuB,OAAO,SAAS;AAChD;",
  "names": []
}
