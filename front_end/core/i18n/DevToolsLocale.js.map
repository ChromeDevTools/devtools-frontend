{
  "version": 3,
  "sources": ["../../../../../../front_end/core/i18n/DevToolsLocale.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nlet devToolsLocaleInstance: DevToolsLocale|null = null;\n\nexport interface DevToolsLocaleData {\n  settingLanguage: string;\n  navigatorLanguage: string;\n  lookupClosestDevToolsLocale: (locale: string) => string;\n}\n\nexport type DevToolsLocaleCreationOptions = {\n  create: true,\n  data: DevToolsLocaleData,\n}|{\n  create: false,\n};\n\n/**\n * Simple class that determines the DevTools locale based on:\n *   1) navigator.language, which matches the Chrome UI\n *   2) the value of the \"language\" Setting the user choses\n *   3) available locales in DevTools.\n *\n * The DevTools locale is only determined once during startup and\n * guaranteed to never change. Use this class when using\n * `Intl` APIs.\n */\nexport class DevToolsLocale {\n  readonly locale: string;\n  readonly lookupClosestDevToolsLocale: (locale: string) => string;\n\n  private constructor(data: DevToolsLocaleData) {\n    this.lookupClosestDevToolsLocale = data.lookupClosestDevToolsLocale;\n\n    // TODO(crbug.com/1163928): Use constant once setting actually exists.\n    if (data.settingLanguage === 'browserLanguage') {\n      this.locale = data.navigatorLanguage || 'en-US';\n    } else {\n      this.locale = data.settingLanguage;\n    }\n\n    this.locale = this.lookupClosestDevToolsLocale(this.locale);\n  }\n\n  static instance(opts: DevToolsLocaleCreationOptions = {create: false}): DevToolsLocale {\n    if (!devToolsLocaleInstance && !opts.create) {\n      throw new Error('No LanguageSelector instance exists yet.');\n    }\n\n    if (opts.create) {\n      devToolsLocaleInstance = new DevToolsLocale(opts.data);\n    }\n    return devToolsLocaleInstance as DevToolsLocale;\n  }\n\n  static removeInstance(): void {\n    devToolsLocaleInstance = null;\n  }\n\n  forceFallbackLocale(): void {\n    // Locale is 'readonly', this is the only case where we want to forcibly\n    // overwrite the locale.\n    (this.locale as unknown) = 'en-US';\n  }\n\n  /**\n   * Returns true iff DevTools supports the language of the passed locale.\n   * Note that it doesn't have to be a one-to-one match, e.g. if DevTools supports\n   * 'de', then passing 'de-AT' will return true.\n   */\n  languageIsSupportedByDevTools(localeString: string): boolean {\n    return localeLanguagesMatch(localeString, this.lookupClosestDevToolsLocale(localeString));\n  }\n}\n\n/**\n * Returns true iff the two locales have matching languages. This means the\n * passing 'de-AT' and 'de-DE' will return true, while 'de-DE' and 'en' will\n * return false.\n */\nexport function localeLanguagesMatch(localeString1: string, localeString2: string): boolean {\n  const locale1 = new Intl.Locale(localeString1);\n  const locale2 = new Intl.Locale(localeString2);\n  return locale1.language === locale2.language;\n}\n"],
  "mappings": ";AAIA,IAAI,yBAA8C;AAyB3C,aAAM,eAAe;AAAA,EACjB;AAAA,EACA;AAAA,EAED,YAAY,MAA0B;AAC5C,SAAK,8BAA8B,KAAK;AAGxC,QAAI,KAAK,oBAAoB,mBAAmB;AAC9C,WAAK,SAAS,KAAK,qBAAqB;AAAA,IAC1C,OAAO;AACL,WAAK,SAAS,KAAK;AAAA,IACrB;AAEA,SAAK,SAAS,KAAK,4BAA4B,KAAK,MAAM;AAAA,EAC5D;AAAA,EAEA,OAAO,SAAS,OAAsC,EAAC,QAAQ,MAAK,GAAmB;AACrF,QAAI,CAAC,0BAA0B,CAAC,KAAK,QAAQ;AAC3C,YAAM,IAAI,MAAM,0CAA0C;AAAA,IAC5D;AAEA,QAAI,KAAK,QAAQ;AACf,+BAAyB,IAAI,eAAe,KAAK,IAAI;AAAA,IACvD;AACA,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,iBAAuB;AAC5B,6BAAyB;AAAA,EAC3B;AAAA,EAEA,sBAA4B;AAG1B,IAAC,KAAK,SAAqB;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,8BAA8B,cAA+B;AAC3D,WAAO,qBAAqB,cAAc,KAAK,4BAA4B,YAAY,CAAC;AAAA,EAC1F;AACF;AAOO,gBAAS,qBAAqB,eAAuB,eAAgC;AAC1F,QAAM,UAAU,IAAI,KAAK,OAAO,aAAa;AAC7C,QAAM,UAAU,IAAI,KAAK,OAAO,aAAa;AAC7C,SAAO,QAAQ,aAAa,QAAQ;AACtC;",
  "names": []
}
