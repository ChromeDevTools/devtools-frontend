{"version":3,"file":"DevToolsLocale.js","sourceRoot":"","sources":["../../../../../../front_end/core/i18n/DevToolsLocale.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,IAAI,sBAAsB,GAAwB,IAAI,CAAC;AAevD;;;;;;;;;GASG;AACH,MAAM,OAAO,cAAc;IAChB,MAAM,CAAS;IACf,2BAA2B,CAA6B;IAEjE,YAAoB,IAAwB;QAC1C,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,2BAA2B,CAAC;QAEpE,sEAAsE;QACtE,IAAI,IAAI,CAAC,eAAe,KAAK,iBAAiB,EAAE,CAAC;YAC/C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,iBAAiB,IAAI,OAAO,CAAC;QAClD,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC;QACrC,CAAC;QAED,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC9D,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,OAAsC,EAAC,MAAM,EAAE,KAAK,EAAC;QACnE,IAAI,CAAC,sBAAsB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YAC5C,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;QAC9D,CAAC;QAED,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,sBAAsB,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzD,CAAC;QACD,OAAO,sBAAwC,CAAC;IAClD,CAAC;IAED,MAAM,CAAC,cAAc;QACnB,sBAAsB,GAAG,IAAI,CAAC;IAChC,CAAC;IAED,mBAAmB;QACjB,wEAAwE;QACxE,wBAAwB;QACvB,IAAI,CAAC,MAAkB,GAAG,OAAO,CAAC;IACrC,CAAC;IAED;;;;OAIG;IACH,6BAA6B,CAAC,YAAoB;QAChD,OAAO,oBAAoB,CAAC,YAAY,EAAE,IAAI,CAAC,2BAA2B,CAAC,YAAY,CAAC,CAAC,CAAC;IAC5F,CAAC;CACF;AAED;;;;GAIG;AACH,MAAM,UAAU,oBAAoB,CAAC,aAAqB,EAAE,aAAqB;IAC/E,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;IAC/C,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;IAC/C,OAAO,OAAO,CAAC,QAAQ,KAAK,OAAO,CAAC,QAAQ,CAAC;AAC/C,CAAC","sourcesContent":["// Copyright 2021 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nlet devToolsLocaleInstance: DevToolsLocale|null = null;\n\nexport interface DevToolsLocaleData {\n  settingLanguage: string;\n  navigatorLanguage: string;\n  lookupClosestDevToolsLocale: (locale: string) => string;\n}\n\nexport type DevToolsLocaleCreationOptions = {\n  create: true,\n  data: DevToolsLocaleData,\n}|{\n  create: false,\n};\n\n/**\n * Simple class that determines the DevTools locale based on:\n *   1) navigator.language, which matches the Chrome UI\n *   2) the value of the \"language\" Setting the user choses\n *   3) available locales in DevTools.\n *\n * The DevTools locale is only determined once during startup and\n * guaranteed to never change. Use this class when using\n * `Intl` APIs.\n */\nexport class DevToolsLocale {\n  readonly locale: string;\n  readonly lookupClosestDevToolsLocale: (locale: string) => string;\n\n  private constructor(data: DevToolsLocaleData) {\n    this.lookupClosestDevToolsLocale = data.lookupClosestDevToolsLocale;\n\n    // TODO(crbug.com/1163928): Use constant once setting actually exists.\n    if (data.settingLanguage === 'browserLanguage') {\n      this.locale = data.navigatorLanguage || 'en-US';\n    } else {\n      this.locale = data.settingLanguage;\n    }\n\n    this.locale = this.lookupClosestDevToolsLocale(this.locale);\n  }\n\n  static instance(opts: DevToolsLocaleCreationOptions = {create: false}): DevToolsLocale {\n    if (!devToolsLocaleInstance && !opts.create) {\n      throw new Error('No LanguageSelector instance exists yet.');\n    }\n\n    if (opts.create) {\n      devToolsLocaleInstance = new DevToolsLocale(opts.data);\n    }\n    return devToolsLocaleInstance as DevToolsLocale;\n  }\n\n  static removeInstance(): void {\n    devToolsLocaleInstance = null;\n  }\n\n  forceFallbackLocale(): void {\n    // Locale is 'readonly', this is the only case where we want to forcibly\n    // overwrite the locale.\n    (this.locale as unknown) = 'en-US';\n  }\n\n  /**\n   * Returns true iff DevTools supports the language of the passed locale.\n   * Note that it doesn't have to be a one-to-one match, e.g. if DevTools supports\n   * 'de', then passing 'de-AT' will return true.\n   */\n  languageIsSupportedByDevTools(localeString: string): boolean {\n    return localeLanguagesMatch(localeString, this.lookupClosestDevToolsLocale(localeString));\n  }\n}\n\n/**\n * Returns true iff the two locales have matching languages. This means the\n * passing 'de-AT' and 'de-DE' will return true, while 'de-DE' and 'en' will\n * return false.\n */\nexport function localeLanguagesMatch(localeString1: string, localeString2: string): boolean {\n  const locale1 = new Intl.Locale(localeString1);\n  const locale2 = new Intl.Locale(localeString2);\n  return locale1.language === locale2.language;\n}\n"]}