{
  "version": 3,
  "sources": ["../../../../../../front_end/core/i18n/ByteUtilities.ts", "../../../../../../front_end/core/i18n/NumberFormatter.ts", "../../../../../../front_end/core/i18n/DevToolsLocale.ts", "../../../../../../front_end/core/i18n/i18nImpl.ts", "locales.js", "../../../../../../front_end/core/i18n/time-utilities.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {defineFormatter} from './NumberFormatter.js';\n\nconst narrowBytes = defineFormatter({\n  style: 'unit',\n  unit: 'byte',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});\n\nconst narrowKilobytesDecimal = defineFormatter({\n  style: 'unit',\n  unit: 'kilobyte',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 1,\n  maximumFractionDigits: 1,\n});\n\nconst narrowKilobytesInteger = defineFormatter({\n  style: 'unit',\n  unit: 'kilobyte',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});\n\nconst narrowMegabytesDecimal = defineFormatter({\n  style: 'unit',\n  unit: 'megabyte',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 1,\n  maximumFractionDigits: 1,\n});\n\nconst narrowMegabytesInteger = defineFormatter({\n  style: 'unit',\n  unit: 'megabyte',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});\n\n/**\n * Returns string for bytes with legible units.\n * If necessary, can convert bytes to Kb or MB.\n */\nexport const bytesToString = (bytes: number): string => {\n  if (bytes < 1000) {\n    return narrowBytes.format(bytes);\n  }\n\n  const kilobytes = bytes / 1000;\n  if (kilobytes < 100) {\n    return narrowKilobytesDecimal.format(kilobytes);\n  }\n  if (kilobytes < 1000) {\n    return narrowKilobytesInteger.format(kilobytes);\n  }\n\n  const megabytes = kilobytes / 1000;\n  if (megabytes < 100) {\n    return narrowMegabytesDecimal.format(megabytes);\n  }\n  return narrowMegabytesInteger.format(megabytes);\n};\n\n/**\n * Returns a string for bytes converted to Kb.\n * This is currently used on tables/rows to maintain consistency\n * and avoid varying units.\n */\nexport const formatBytesToKb = (bytes: number): string => {\n  const kilobytes = bytes / 1000;\n  if (kilobytes < 100) {\n    return narrowKilobytesDecimal.format(kilobytes);\n  }\n  return narrowKilobytesInteger.format(kilobytes);\n};\n", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {DevToolsLocale} from './DevToolsLocale.js';\n\nexport interface NumberFormatter {\n  format(value: number, separator?: string): string;\n  formatToParts(value: number): Intl.NumberFormatPart[];\n}\n\n/**\n * Creates an instance of NumberFormatter.\n *\n * Safe to call in top-level of a module, since the creation of Intl.NumberFormat is deferred\n * until first usage.\n */\nexport function defineFormatter(options: Intl.NumberFormatOptions): NumberFormatter {\n  let intlNumberFormat: Intl.NumberFormat;\n\n  return {\n    format(value, separator) {\n      if (!intlNumberFormat) {\n        intlNumberFormat = new Intl.NumberFormat(DevToolsLocale.instance().locale, options);\n      }\n      return formatAndEnsureSpace(intlNumberFormat, value, separator);\n    },\n    formatToParts(value) {\n      if (!intlNumberFormat) {\n        intlNumberFormat = new Intl.NumberFormat(DevToolsLocale.instance().locale, options);\n      }\n      return intlNumberFormat.formatToParts(value);\n    },\n  };\n}\n\n/**\n * When using 'narrow' unitDisplay, many locales exclude the space between the literal and the unit.\n * We don't like that, so when there is no space literal we inject the provided separator manually.\n */\nfunction formatAndEnsureSpace(formatter: Intl.NumberFormat, value: number, separator = '\\xA0'): string {\n  // TODO(crbug.com/443038315): this method is defined in\n  // models/ai_assistance in the UnitFormatters file. We can't currently\n  // re-use it because various models depend on i18n and that creates a\n  // circular build.\n  // We should move the unit formatters to their own model so it can be\n  // used across the codebase.\n\n  const parts = formatter.formatToParts(value);\n\n  let hasSpace = false;\n  for (const part of parts) {\n    if (part.type === 'literal') {\n      if (part.value === ' ') {\n        hasSpace = true;\n        part.value = separator;\n      } else if (part.value === separator) {\n        hasSpace = true;\n      }\n    }\n  }\n\n  if (hasSpace) {\n    return parts.map(part => part.value).join('');\n  }\n\n  const unitIndex = parts.findIndex(part => part.type === 'unit');\n\n  // Unexpected for there to be no unit, but just in case, handle that.\n  if (unitIndex === -1) {\n    return parts.map(part => part.value).join('');\n  }\n\n  // For locales where the unit comes first (sw), the space has to come after the unit.\n  if (unitIndex === 0) {\n    return parts[0].value + separator + parts.slice(1).map(part => part.value).join('');\n  }\n\n  // Otherwise, it comes before.\n  return parts.slice(0, unitIndex).map(part => part.value).join('') + separator +\n      parts.slice(unitIndex).map(part => part.value).join('');\n}\n", "// Copyright 2021 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nlet devToolsLocaleInstance: DevToolsLocale|null = null;\n\nexport interface DevToolsLocaleData {\n  settingLanguage: string;\n  navigatorLanguage: string;\n  lookupClosestDevToolsLocale: (locale: string) => string;\n}\n\nexport type DevToolsLocaleCreationOptions = {\n  create: true,\n  data: DevToolsLocaleData,\n}|{\n  create: false,\n};\n\n/**\n * Simple class that determines the DevTools locale based on:\n *   1) navigator.language, which matches the Chrome UI\n *   2) the value of the \"language\" Setting the user choses\n *   3) available locales in DevTools.\n *\n * The DevTools locale is only determined once during startup and\n * guaranteed to never change. Use this class when using\n * `Intl` APIs.\n */\nexport class DevToolsLocale {\n  readonly locale: string;\n  readonly lookupClosestDevToolsLocale: (locale: string) => string;\n\n  private constructor(data: DevToolsLocaleData) {\n    this.lookupClosestDevToolsLocale = data.lookupClosestDevToolsLocale;\n\n    // TODO(crbug.com/1163928): Use constant once setting actually exists.\n    if (data.settingLanguage === 'browserLanguage') {\n      this.locale = data.navigatorLanguage || 'en-US';\n    } else {\n      this.locale = data.settingLanguage;\n    }\n\n    this.locale = this.lookupClosestDevToolsLocale(this.locale);\n  }\n\n  static instance(opts: DevToolsLocaleCreationOptions = {create: false}): DevToolsLocale {\n    if (!devToolsLocaleInstance && !opts.create) {\n      throw new Error('No LanguageSelector instance exists yet.');\n    }\n\n    if (opts.create) {\n      devToolsLocaleInstance = new DevToolsLocale(opts.data);\n    }\n    return devToolsLocaleInstance as DevToolsLocale;\n  }\n\n  static removeInstance(): void {\n    devToolsLocaleInstance = null;\n  }\n\n  forceFallbackLocale(): void {\n    // Locale is 'readonly', this is the only case where we want to forcibly\n    // overwrite the locale.\n    (this.locale as unknown) = 'en-US';\n  }\n\n  /**\n   * Returns true iff DevTools supports the language of the passed locale.\n   * Note that it doesn't have to be a one-to-one match, e.g. if DevTools supports\n   * 'de', then passing 'de-AT' will return true.\n   */\n  languageIsSupportedByDevTools(localeString: string): boolean {\n    return localeLanguagesMatch(localeString, this.lookupClosestDevToolsLocale(localeString));\n  }\n}\n\n/**\n * Returns true iff the two locales have matching languages. This means the\n * passing 'de-AT' and 'de-DE' will return true, while 'de-DE' and 'en' will\n * return false.\n */\nexport function localeLanguagesMatch(localeString1: string, localeString2: string): boolean {\n  const locale1 = new Intl.Locale(localeString1);\n  const locale2 = new Intl.Locale(localeString2);\n  return locale1.language === locale2.language;\n}\n", "// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as I18n from '../../third_party/i18n/i18n.js';\nimport type * as Platform from '../platform/platform.js';\nimport * as Root from '../root/root.js';\n\nimport {DevToolsLocale} from './DevToolsLocale.js';\nimport type * as i18nTypes from './i18nTypes.js';\nimport {\n  BUNDLED_LOCALES as BUNDLED_LOCALES_GENERATED,\n  DEFAULT_LOCALE,\n  LOCAL_FETCH_PATTERN,\n  LOCALES,\n  REMOTE_FETCH_PATTERN,\n} from './locales.js';\n\nconst i18nInstance = new I18n.I18n.I18n(LOCALES, DEFAULT_LOCALE);\n\n// All the locales that are part of the DevTools bundle and should not be fetched\n// remotely.\nconst BUNDLED_LOCALES = new Set<string>([...BUNDLED_LOCALES_GENERATED]);\n\n/**\n * Look up the best available locale for the requested language through these fall backs:\n * - exact match\n * - progressively shorter prefixes (`de-CH-1996` -> `de-CH` -> `de`)\n * - the default locale ('en-US') if no match is found\n *\n * If `locale` isn't provided, the default is used.\n */\nexport function lookupClosestSupportedDevToolsLocale(locale: string): string {\n  return i18nInstance.lookupClosestSupportedLocale(locale);\n}\n\n/**\n * Returns a list of all supported DevTools locales, including pseudo locales.\n */\nexport function getAllSupportedDevToolsLocales(): string[] {\n  return [...i18nInstance.supportedLocales];\n}\n\n/**\n * Returns the Url from which a locale can be fetched. This depends on the\n * specific locale, as some are bundled with DevTools while others\n * have to be fetched remotely.\n */\nfunction getLocaleFetchUrl(locale: Intl.UnicodeBCP47LocaleIdentifier, location: string): string {\n  const remoteBase = Root.Runtime.getRemoteBase(location);\n  if (remoteBase?.version && !BUNDLED_LOCALES.has(locale)) {\n    return REMOTE_FETCH_PATTERN.replace('@HOST@', 'devtools://devtools')\n        .replace('@VERSION@', remoteBase.version)\n        .replace('@LOCALE@', locale);\n  }\n  const path = LOCAL_FETCH_PATTERN.replace('@LOCALE@', locale);\n  return new URL(path, import.meta.url).toString();\n}\n\n/**\n * Fetches the locale data of the specified locale.\n * Callers have to ensure that `locale` is an officially supported locale.\n * Depending whether a locale is present in `bundledLocales`, the data will be\n * fetched locally or remotely.\n */\nexport async function fetchAndRegisterLocaleData(\n    locale: Intl.UnicodeBCP47LocaleIdentifier, location = self.location.toString()): Promise<void> {\n  const localeDataTextPromise = fetch(getLocaleFetchUrl(locale, location)).then(result => result.json());\n  const timeoutPromise =\n      new Promise<never>((_, reject) => window.setTimeout(() => reject(new Error('timed out fetching locale')), 5000));\n  const localeData = await Promise.race([timeoutPromise, localeDataTextPromise]);\n  i18nInstance.registerLocaleData(locale, localeData);\n}\n\nexport function hasLocaleDataForTest(locale: Intl.UnicodeBCP47LocaleIdentifier): boolean {\n  return i18nInstance.hasLocaleDataForTest(locale);\n}\n\nexport function resetLocaleDataForTest(): void {\n  i18nInstance.resetLocaleDataForTest();\n}\n\nexport function registerLocaleDataForTest(\n    locale: Intl.UnicodeBCP47LocaleIdentifier, messages: I18n.I18n.LocalizedMessages): void {\n  i18nInstance.registerLocaleData(locale, messages);\n}\n\n/**\n * Returns an anonymous function that wraps a call to retrieve a localized string.\n * This is introduced so that localized strings can be declared in environments where\n * the i18n system has not been configured and so, cannot be directly invoked. Instead,\n * strings are lazily localized when they are used. This is used for instance in the\n * meta files used to register module extensions.\n */\nexport function getLazilyComputedLocalizedString(\n    registeredStrings: I18n.LocalizedStringSet.RegisteredFileStrings, id: string, values: i18nTypes.Values = {}): () =>\n    Platform.UIString.LocalizedString {\n  return (): Platform.UIString.LocalizedString => getLocalizedString(registeredStrings, id, values);\n}\n\n/**\n * Retrieve the localized string.\n */\nexport function getLocalizedString(\n    registeredStrings: I18n.LocalizedStringSet.RegisteredFileStrings, id: string,\n    values: i18nTypes.Values = {}): Platform.UIString.LocalizedString {\n  return registeredStrings.getLocalizedStringSetFor(DevToolsLocale.instance().locale).getLocalizedString(id, values) as\n      Platform.UIString.LocalizedString;\n}\n\n/**\n * Register a file's UIStrings with i18n, return function to generate the string ids.\n */\nexport function registerUIStrings(\n    path: string, stringStructure: Record<string, string>): I18n.LocalizedStringSet.RegisteredFileStrings {\n  return i18nInstance.registerFileStrings(path, stringStructure);\n}\n\nexport function serializeUIString(string: string, values: Record<string, Object> = {}): string {\n  const serializedMessage = {string, values};\n  return JSON.stringify(serializedMessage);\n}\n\nexport function deserializeUIString(serializedMessage: string): i18nTypes.SerializedMessage {\n  if (!serializedMessage) {\n    return {string: '', values: {}} as i18nTypes.SerializedMessage;\n  }\n\n  return JSON.parse(serializedMessage) as i18nTypes.SerializedMessage;\n}\n\n/**\n * Use this function in places where a `LocalizedString` is expected but the\n * term/phrase you want to use does not require translation.\n */\nexport function lockedString(str: string): Platform.UIString.LocalizedString {\n  return str as Platform.UIString.LocalizedString;\n}\n\n/**\n * Same as `lockedString` but for places where `i18nLazyString` would be used otherwise.\n */\nexport function lockedLazyString(str: string): () => Platform.UIString.LocalizedString {\n  return (): Platform.UIString.LocalizedString => str as Platform.UIString.LocalizedString;\n}\n\n/**\n * Returns a string of the form:\n *   \"German (Austria) - Deutsch (Österreich)\"\n * where the former locale representation is written in the currently enabled DevTools\n * locale and the latter locale representation is written in the locale of `localeString`.\n *\n * Should the two locales match (i.e. have the same language) then the latter locale\n * representation is written in English.\n */\nexport function getLocalizedLanguageRegion(\n    localeString: Intl.UnicodeBCP47LocaleIdentifier,\n    devtoolsLocale: DevToolsLocale): Platform.UIString.LocalizedString {\n  const locale = new Intl.Locale(localeString);\n  const {language, baseName} = locale;\n  const devtoolsLoc = new Intl.Locale(devtoolsLocale.locale);\n  const targetLanguage = language === devtoolsLoc.language ? 'en' : baseName;\n  const languageInCurrentLocale = new Intl.DisplayNames([devtoolsLocale.locale], {type: 'language'}).of(language);\n  const languageInTargetLocale = new Intl.DisplayNames([targetLanguage], {type: 'language'}).of(language);\n\n  let wrappedRegionInCurrentLocale = '';\n  let wrappedRegionInTargetLocale = '';\n\n  if (locale.region) {\n    const regionInCurrentLocale =\n        new Intl.DisplayNames([devtoolsLocale.locale], {type: 'region', style: 'short'}).of(locale.region);\n    const regionInTargetLocale =\n        new Intl.DisplayNames([targetLanguage], {type: 'region', style: 'short'}).of(locale.region);\n    wrappedRegionInCurrentLocale = ` (${regionInCurrentLocale})`;\n    wrappedRegionInTargetLocale = ` (${regionInTargetLocale})`;\n  }\n\n  return `${languageInCurrentLocale}${wrappedRegionInCurrentLocale} - ${languageInTargetLocale}${\n             wrappedRegionInTargetLocale}` as Platform.UIString.LocalizedString;\n}\n", "\nexport const LOCALES = [\n  'af',\n  'am',\n  'ar',\n  'as',\n  'az',\n  'be',\n  'bg',\n  'bn',\n  'bs',\n  'ca',\n  'cs',\n  'cy',\n  'da',\n  'de',\n  'el',\n  'en-GB',\n  'es-419',\n  'es',\n  'et',\n  'eu',\n  'fa',\n  'fi',\n  'fil',\n  'fr-CA',\n  'fr',\n  'gl',\n  'gu',\n  'he',\n  'hi',\n  'hr',\n  'hu',\n  'hy',\n  'id',\n  'is',\n  'it',\n  'ja',\n  'ka',\n  'kk',\n  'km',\n  'kn',\n  'ko',\n  'ky',\n  'lo',\n  'lt',\n  'lv',\n  'mk',\n  'ml',\n  'mn',\n  'mr',\n  'ms',\n  'my',\n  'ne',\n  'nl',\n  'no',\n  'or',\n  'pa',\n  'pl',\n  'pt-PT',\n  'pt',\n  'ro',\n  'ru',\n  'si',\n  'sk',\n  'sl',\n  'sq',\n  'sr-Latn',\n  'sr',\n  'sv',\n  'sw',\n  'ta',\n  'te',\n  'th',\n  'tr',\n  'uk',\n  'ur',\n  'uz',\n  'vi',\n  'zh-HK',\n  'zh-TW',\n  'zu',\n  'en-US',\n  'zh',\n];\n\nexport const BUNDLED_LOCALES = [\n  'en-US',\n  'zh',\n];\n\nexport const DEFAULT_LOCALE = 'en-US';\n\nexport const REMOTE_FETCH_PATTERN = '@HOST@/remote/serve_file/@VERSION@/core/i18n/locales/@LOCALE@.json';\n\nexport const LOCAL_FETCH_PATTERN = './locales/@LOCALE@.json';\n", "// Copyright 2021 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * @file Uses Intl.NumberFormat.\n * @see go/cpq:i18n-units-design\n */\n\nimport * as Platform from '../platform/platform.js';\n\nimport {defineFormatter, type NumberFormatter} from './NumberFormatter.js';\n\nconst narrowMillisecondsInteger = defineFormatter({\n  style: 'unit',\n  unit: 'millisecond',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});\n\nconst longMilliseconds = defineFormatter({\n  style: 'unit',\n  unit: 'millisecond',\n  unitDisplay: 'long',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});\n\nconst narrowMicrosecondsInteger = defineFormatter({\n  style: 'unit',\n  unit: 'microsecond',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});\n\nconst narrowMillisecondsDecimal = defineFormatter({\n  style: 'unit',\n  unit: 'millisecond',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nconst narrowSecondsDecimal = defineFormatter({\n  style: 'unit',\n  unit: 'second',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nconst shortMinutesDecimal = defineFormatter({\n  style: 'unit',\n  unit: 'minute',\n  unitDisplay: 'short',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 1,\n});\n\nconst shortHoursDecimal = defineFormatter({\n  style: 'unit',\n  unit: 'hour',\n  unitDisplay: 'short',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 1,\n});\n\nconst longDaysDecimal = defineFormatter({\n  style: 'unit',\n  unit: 'day',\n  unitDisplay: 'long',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 1,\n});\n\nexport function formatMicroSecondsTime(time: Platform.Timing.MicroSeconds): string {\n  return millisToString(Platform.Timing.microSecondsToMilliSeconds(time), true);\n}\n\nexport function formatMicroSecondsAsSeconds(time: Platform.Timing.MicroSeconds): string {\n  const milliseconds = Platform.Timing.microSecondsToMilliSeconds(time);\n  const seconds = Platform.Timing.milliSecondsToSeconds(milliseconds);\n  return narrowSecondsDecimal.format(seconds);\n}\n\nexport function formatMicroSecondsAsMillisFixed(time: Platform.Timing.MicroSeconds): string {\n  const milliseconds = Platform.Timing.microSecondsToMilliSeconds(time);\n  return narrowMillisecondsInteger.format(milliseconds);\n}\n\nexport function formatMicroSecondsAsMillisFixedExpanded(time: Platform.Timing.MicroSeconds): string {\n  const milliseconds = Platform.Timing.microSecondsToMilliSeconds(time);\n  return longMilliseconds.format(milliseconds);\n}\n\n/**\n * @param higherResolution if true, the output may show as microsends or as milliseconds with a fractional component\n */\nexport function millisToString(ms: number, higherResolution?: boolean): string {\n  if (!isFinite(ms)) {\n    return '-';\n  }\n\n  if (higherResolution && ms < 0.1) {\n    return narrowMicrosecondsInteger.format(ms * 1000);\n  }\n  if (higherResolution && ms < 1000) {\n    return narrowMillisecondsDecimal.format(ms);\n  }\n  if (ms < 1000) {\n    return narrowMillisecondsInteger.format(ms);\n  }\n\n  const seconds = ms / 1000;\n  if (seconds < 60) {\n    return narrowSecondsDecimal.format(seconds);\n  }\n\n  const minutes = seconds / 60;\n  if (minutes < 60) {\n    return shortMinutesDecimal.format(minutes);\n  }\n\n  const hours = minutes / 60;\n  if (hours < 24) {\n    return shortHoursDecimal.format(hours);\n  }\n\n  const days = hours / 24;\n  return longDaysDecimal.format(days);\n}\n\nconst preciseMillisToStringFormattersCache = new Map<number, NumberFormatter>();\n\nexport function preciseMillisToString(ms: number, precision = 0, separator?: string): string {\n  let formatter = preciseMillisToStringFormattersCache.get(precision);\n  if (!formatter) {\n    formatter = defineFormatter({\n      style: 'unit',\n      unit: 'millisecond',\n      unitDisplay: 'narrow',\n      minimumFractionDigits: precision,\n      maximumFractionDigits: precision,\n    });\n    preciseMillisToStringFormattersCache.set(precision, formatter);\n  }\n  return formatter.format(ms, separator);\n}\n\nconst preciseSecondsToStringFormattersCache = new Map<number, NumberFormatter>();\n\nexport function preciseSecondsToString(ms: number, precision = 0): string {\n  let formatter = preciseSecondsToStringFormattersCache.get(precision);\n  if (!formatter) {\n    formatter = defineFormatter({\n      style: 'unit',\n      unit: 'second',\n      unitDisplay: 'narrow',\n      minimumFractionDigits: precision,\n      maximumFractionDigits: precision,\n    });\n    preciseSecondsToStringFormattersCache.set(precision, formatter);\n  }\n  return formatter.format(ms);\n}\n\nexport function secondsToString(seconds: number, higherResolution?: boolean): string {\n  if (!isFinite(seconds)) {\n    return '-';\n  }\n  return millisToString(seconds * 1000, higherResolution);\n}\n"],
  "mappings": "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",
  "names": ["BUNDLED_LOCALES"]
}
