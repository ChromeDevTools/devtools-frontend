{
  "version": 3,
  "sources": ["../../../../../../front_end/core/i18n/i18nImpl.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as I18n from '../../third_party/i18n/i18n.js';\nimport type * as Platform from '../platform/platform.js';\nimport * as Root from '../root/root.js';\n\nimport {DevToolsLocale} from './DevToolsLocale.js';\nimport type * as i18nTypes from './i18nTypes.js';\nimport {\n  BUNDLED_LOCALES as BUNDLED_LOCALES_GENERATED,\n  DEFAULT_LOCALE,\n  LOCAL_FETCH_PATTERN,\n  LOCALES,\n  REMOTE_FETCH_PATTERN,\n} from './locales.js';\n\nconst i18nInstance = new I18n.I18n.I18n(LOCALES, DEFAULT_LOCALE);\n\n// All the locales that are part of the DevTools bundle and should not be fetched\n// remotely.\nconst BUNDLED_LOCALES = new Set<string>([...BUNDLED_LOCALES_GENERATED]);\n\n/**\n * Look up the best available locale for the requested language through these fall backs:\n * - exact match\n * - progressively shorter prefixes (`de-CH-1996` -> `de-CH` -> `de`)\n * - the default locale ('en-US') if no match is found\n *\n * If `locale` isn't provided, the default is used.\n */\nexport function lookupClosestSupportedDevToolsLocale(locale: string): string {\n  return i18nInstance.lookupClosestSupportedLocale(locale);\n}\n\n/**\n * Returns a list of all supported DevTools locales, including pseudo locales.\n */\nexport function getAllSupportedDevToolsLocales(): string[] {\n  return [...i18nInstance.supportedLocales];\n}\n\n/**\n * Returns the Url from which a locale can be fetched. This depends on the\n * specific locale, as some are bundled with DevTools while others\n * have to be fetched remotely.\n */\nfunction getLocaleFetchUrl(locale: Intl.UnicodeBCP47LocaleIdentifier, location: string): string {\n  const remoteBase = Root.Runtime.getRemoteBase(location);\n  if (remoteBase?.version && !BUNDLED_LOCALES.has(locale)) {\n    return REMOTE_FETCH_PATTERN.replace('@HOST@', 'devtools://devtools')\n        .replace('@VERSION@', remoteBase.version)\n        .replace('@LOCALE@', locale);\n  }\n  const path = LOCAL_FETCH_PATTERN.replace('@LOCALE@', locale);\n  return new URL(path, import.meta.url).toString();\n}\n\n/**\n * Fetches the locale data of the specified locale.\n * Callers have to ensure that `locale` is an officially supported locale.\n * Depending whether a locale is present in `bundledLocales`, the data will be\n * fetched locally or remotely.\n */\nexport async function fetchAndRegisterLocaleData(\n    locale: Intl.UnicodeBCP47LocaleIdentifier, location = self.location.toString()): Promise<void> {\n  const localeDataTextPromise = fetch(getLocaleFetchUrl(locale, location)).then(result => result.json());\n  const timeoutPromise =\n      new Promise<never>((_, reject) => window.setTimeout(() => reject(new Error('timed out fetching locale')), 5000));\n  const localeData = await Promise.race([timeoutPromise, localeDataTextPromise]);\n  i18nInstance.registerLocaleData(locale, localeData);\n}\n\nexport function hasLocaleDataForTest(locale: Intl.UnicodeBCP47LocaleIdentifier): boolean {\n  return i18nInstance.hasLocaleDataForTest(locale);\n}\n\nexport function resetLocaleDataForTest(): void {\n  i18nInstance.resetLocaleDataForTest();\n}\n\nexport function registerLocaleDataForTest(\n    locale: Intl.UnicodeBCP47LocaleIdentifier, messages: I18n.I18n.LocalizedMessages): void {\n  i18nInstance.registerLocaleData(locale, messages);\n}\n\n/**\n * Returns an anonymous function that wraps a call to retrieve a localized string.\n * This is introduced so that localized strings can be declared in environments where\n * the i18n system has not been configured and so, cannot be directly invoked. Instead,\n * strings are lazily localized when they are used. This is used for instance in the\n * meta files used to register module extensions.\n */\nexport function getLazilyComputedLocalizedString(\n    registeredStrings: I18n.LocalizedStringSet.RegisteredFileStrings, id: string, values: i18nTypes.Values = {}): () =>\n    Platform.UIString.LocalizedString {\n  return (): Platform.UIString.LocalizedString => getLocalizedString(registeredStrings, id, values);\n}\n\n/**\n * Retrieve the localized string.\n */\nexport function getLocalizedString(\n    registeredStrings: I18n.LocalizedStringSet.RegisteredFileStrings, id: string,\n    values: i18nTypes.Values = {}): Platform.UIString.LocalizedString {\n  return registeredStrings.getLocalizedStringSetFor(DevToolsLocale.instance().locale).getLocalizedString(id, values) as\n      Platform.UIString.LocalizedString;\n}\n\n/**\n * Register a file's UIStrings with i18n, return function to generate the string ids.\n */\nexport function registerUIStrings(\n    path: string, stringStructure: Record<string, string>): I18n.LocalizedStringSet.RegisteredFileStrings {\n  return i18nInstance.registerFileStrings(path, stringStructure);\n}\n\nexport function serializeUIString(string: string, values: Record<string, Object> = {}): string {\n  const serializedMessage = {string, values};\n  return JSON.stringify(serializedMessage);\n}\n\nexport function deserializeUIString(serializedMessage: string): i18nTypes.SerializedMessage {\n  if (!serializedMessage) {\n    return {string: '', values: {}} as i18nTypes.SerializedMessage;\n  }\n\n  return JSON.parse(serializedMessage) as i18nTypes.SerializedMessage;\n}\n\n/**\n * Use this function in places where a `LocalizedString` is expected but the\n * term/phrase you want to use does not require translation.\n */\nexport function lockedString(str: string): Platform.UIString.LocalizedString {\n  return str as Platform.UIString.LocalizedString;\n}\n\n/**\n * Same as `lockedString` but for places where `i18nLazyString` would be used otherwise.\n */\nexport function lockedLazyString(str: string): () => Platform.UIString.LocalizedString {\n  return (): Platform.UIString.LocalizedString => str as Platform.UIString.LocalizedString;\n}\n\n/**\n * Returns a string of the form:\n *   \"German (Austria) - Deutsch (\u00D6sterreich)\"\n * where the former locale representation is written in the currently enabled DevTools\n * locale and the latter locale representation is written in the locale of `localeString`.\n *\n * Should the two locales match (i.e. have the same language) then the latter locale\n * representation is written in English.\n */\nexport function getLocalizedLanguageRegion(\n    localeString: Intl.UnicodeBCP47LocaleIdentifier,\n    devtoolsLocale: DevToolsLocale): Platform.UIString.LocalizedString {\n  const locale = new Intl.Locale(localeString);\n  const {language, baseName} = locale;\n  const devtoolsLoc = new Intl.Locale(devtoolsLocale.locale);\n  const targetLanguage = language === devtoolsLoc.language ? 'en' : baseName;\n  const languageInCurrentLocale = new Intl.DisplayNames([devtoolsLocale.locale], {type: 'language'}).of(language);\n  const languageInTargetLocale = new Intl.DisplayNames([targetLanguage], {type: 'language'}).of(language);\n\n  let wrappedRegionInCurrentLocale = '';\n  let wrappedRegionInTargetLocale = '';\n\n  if (locale.region) {\n    const regionInCurrentLocale =\n        new Intl.DisplayNames([devtoolsLocale.locale], {type: 'region', style: 'short'}).of(locale.region);\n    const regionInTargetLocale =\n        new Intl.DisplayNames([targetLanguage], {type: 'region', style: 'short'}).of(locale.region);\n    wrappedRegionInCurrentLocale = ` (${regionInCurrentLocale})`;\n    wrappedRegionInTargetLocale = ` (${regionInTargetLocale})`;\n  }\n\n  return `${languageInCurrentLocale}${wrappedRegionInCurrentLocale} - ${languageInTargetLocale}${\n             wrappedRegionInTargetLocale}` as Platform.UIString.LocalizedString;\n}\n"],
  "mappings": "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",
  "names": []
}
