{
  "version": 3,
  "sources": ["../../../../../../front_end/core/i18n/time-utilities.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * @file Uses Intl.NumberFormat.\n * @see go/cpq:i18n-units-design\n */\n\nimport * as Platform from '../platform/platform.js';\n\nimport {defineFormatter, type NumberFormatter} from './NumberFormatter.js';\n\nconst narrowMillisecondsInteger = defineFormatter({\n  style: 'unit',\n  unit: 'millisecond',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});\n\nconst longMilliseconds = defineFormatter({\n  style: 'unit',\n  unit: 'millisecond',\n  unitDisplay: 'long',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});\n\nconst narrowMicrosecondsInteger = defineFormatter({\n  style: 'unit',\n  unit: 'microsecond',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});\n\nconst narrowMillisecondsDecimal = defineFormatter({\n  style: 'unit',\n  unit: 'millisecond',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nconst narrowSecondsDecimal = defineFormatter({\n  style: 'unit',\n  unit: 'second',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nconst shortMinutesDecimal = defineFormatter({\n  style: 'unit',\n  unit: 'minute',\n  unitDisplay: 'short',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 1,\n});\n\nconst shortHoursDecimal = defineFormatter({\n  style: 'unit',\n  unit: 'hour',\n  unitDisplay: 'short',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 1,\n});\n\nconst longDaysDecimal = defineFormatter({\n  style: 'unit',\n  unit: 'day',\n  unitDisplay: 'long',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 1,\n});\n\nexport function formatMicroSecondsTime(time: Platform.Timing.MicroSeconds): string {\n  return millisToString(Platform.Timing.microSecondsToMilliSeconds(time), true);\n}\n\nexport function formatMicroSecondsAsSeconds(time: Platform.Timing.MicroSeconds): string {\n  const milliseconds = Platform.Timing.microSecondsToMilliSeconds(time);\n  const seconds = Platform.Timing.milliSecondsToSeconds(milliseconds);\n  return narrowSecondsDecimal.format(seconds);\n}\n\nexport function formatMicroSecondsAsMillisFixed(time: Platform.Timing.MicroSeconds): string {\n  const milliseconds = Platform.Timing.microSecondsToMilliSeconds(time);\n  return narrowMillisecondsInteger.format(milliseconds);\n}\n\nexport function formatMicroSecondsAsMillisFixedExpanded(time: Platform.Timing.MicroSeconds): string {\n  const milliseconds = Platform.Timing.microSecondsToMilliSeconds(time);\n  return longMilliseconds.format(milliseconds);\n}\n\n/**\n * @param higherResolution if true, the output may show as microsends or as milliseconds with a fractional component\n */\nexport function millisToString(ms: number, higherResolution?: boolean): string {\n  if (!isFinite(ms)) {\n    return '-';\n  }\n\n  if (higherResolution && ms < 0.1) {\n    return narrowMicrosecondsInteger.format(ms * 1000);\n  }\n  if (higherResolution && ms < 1000) {\n    return narrowMillisecondsDecimal.format(ms);\n  }\n  if (ms < 1000) {\n    return narrowMillisecondsInteger.format(ms);\n  }\n\n  const seconds = ms / 1000;\n  if (seconds < 60) {\n    return narrowSecondsDecimal.format(seconds);\n  }\n\n  const minutes = seconds / 60;\n  if (minutes < 60) {\n    return shortMinutesDecimal.format(minutes);\n  }\n\n  const hours = minutes / 60;\n  if (hours < 24) {\n    return shortHoursDecimal.format(hours);\n  }\n\n  const days = hours / 24;\n  return longDaysDecimal.format(days);\n}\n\nconst preciseMillisToStringFormattersCache = new Map<number, NumberFormatter>();\n\nexport function preciseMillisToString(ms: number, precision = 0, separator?: string): string {\n  let formatter = preciseMillisToStringFormattersCache.get(precision);\n  if (!formatter) {\n    formatter = defineFormatter({\n      style: 'unit',\n      unit: 'millisecond',\n      unitDisplay: 'narrow',\n      minimumFractionDigits: precision,\n      maximumFractionDigits: precision,\n    });\n    preciseMillisToStringFormattersCache.set(precision, formatter);\n  }\n  return formatter.format(ms, separator);\n}\n\nconst preciseSecondsToStringFormattersCache = new Map<number, NumberFormatter>();\n\nexport function preciseSecondsToString(ms: number, precision = 0): string {\n  let formatter = preciseSecondsToStringFormattersCache.get(precision);\n  if (!formatter) {\n    formatter = defineFormatter({\n      style: 'unit',\n      unit: 'second',\n      unitDisplay: 'narrow',\n      minimumFractionDigits: precision,\n      maximumFractionDigits: precision,\n    });\n    preciseSecondsToStringFormattersCache.set(precision, formatter);\n  }\n  return formatter.format(ms);\n}\n\nexport function secondsToString(seconds: number, higherResolution?: boolean): string {\n  if (!isFinite(seconds)) {\n    return '-';\n  }\n  return millisToString(seconds * 1000, higherResolution);\n}\n"],
  "mappings": "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",
  "names": []
}
