{
  "version": 3,
  "sources": ["../../../../../../front_end/core/platform/MapUtilities.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport const inverse = function<K, V>(map: Map<K, V>): Multimap<V, K> {\n  const result = new Multimap<V, K>();\n  for (const [key, value] of map.entries()) {\n    result.set(value, key);\n  }\n  return result;\n};\n\nexport class Multimap<K, V> {\n  private map = new Map<K, Set<V>>();\n\n  set(key: K, value: V): void {\n    let set = this.map.get(key);\n    if (!set) {\n      set = new Set();\n      this.map.set(key, set);\n    }\n    set.add(value);\n  }\n\n  get(key: K): Set<V> {\n    return this.map.get(key) || new Set();\n  }\n\n  has(key: K): boolean {\n    return this.map.has(key);\n  }\n\n  hasValue(key: K, value: V): boolean {\n    const set = this.map.get(key);\n    if (!set) {\n      return false;\n    }\n    return set.has(value);\n  }\n\n  get size(): number {\n    return this.map.size;\n  }\n\n  delete(key: K, value: V): boolean {\n    const values = this.get(key);\n    if (!values) {\n      return false;\n    }\n    const result = values.delete(value);\n    if (!values.size) {\n      this.map.delete(key);\n    }\n    return result;\n  }\n\n  deleteAll(key: K): void {\n    this.map.delete(key);\n  }\n\n  keysArray(): K[] {\n    return [...this.map.keys()];\n  }\n\n  keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  valuesArray(): V[] {\n    const result = [];\n    for (const set of this.map.values()) {\n      result.push(...set.values());\n    }\n    return result;\n  }\n\n  clear(): void {\n    this.map.clear();\n  }\n}\n\n/**\n * Gets value for key, assigning a default if value is falsy.\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport function getWithDefault<K extends {}, V>(\n    map: WeakMap<K, V>|Map<K, V>, key: K, defaultValueFactory: (key?: K) => V): V {\n  let value = map.get(key);\n  if (value === undefined || value === null) {\n    value = defaultValueFactory(key);\n    map.set(key, value);\n  }\n\n  return value;\n}\n"],
  "mappings": ";AAIO,aAAM,UAAU,SAAe,KAAgC;AACpE,QAAM,SAAS,IAAI,SAAe;AAClC,aAAW,CAAC,KAAK,KAAK,KAAK,IAAI,QAAQ,GAAG;AACxC,WAAO,IAAI,OAAO,GAAG;AAAA,EACvB;AACA,SAAO;AACT;AAEO,aAAM,SAAe;AAAA,EAClB,MAAM,oBAAI,IAAe;AAAA,EAEjC,IAAI,KAAQ,OAAgB;AAC1B,QAAI,MAAM,KAAK,IAAI,IAAI,GAAG;AAC1B,QAAI,CAAC,KAAK;AACR,YAAM,oBAAI,IAAI;AACd,WAAK,IAAI,IAAI,KAAK,GAAG;AAAA,IACvB;AACA,QAAI,IAAI,KAAK;AAAA,EACf;AAAA,EAEA,IAAI,KAAgB;AAClB,WAAO,KAAK,IAAI,IAAI,GAAG,KAAK,oBAAI,IAAI;AAAA,EACtC;AAAA,EAEA,IAAI,KAAiB;AACnB,WAAO,KAAK,IAAI,IAAI,GAAG;AAAA,EACzB;AAAA,EAEA,SAAS,KAAQ,OAAmB;AAClC,UAAM,MAAM,KAAK,IAAI,IAAI,GAAG;AAC5B,QAAI,CAAC,KAAK;AACR,aAAO;AAAA,IACT;AACA,WAAO,IAAI,IAAI,KAAK;AAAA,EACtB;AAAA,EAEA,IAAI,OAAe;AACjB,WAAO,KAAK,IAAI;AAAA,EAClB;AAAA,EAEA,OAAO,KAAQ,OAAmB;AAChC,UAAM,SAAS,KAAK,IAAI,GAAG;AAC3B,QAAI,CAAC,QAAQ;AACX,aAAO;AAAA,IACT;AACA,UAAM,SAAS,OAAO,OAAO,KAAK;AAClC,QAAI,CAAC,OAAO,MAAM;AAChB,WAAK,IAAI,OAAO,GAAG;AAAA,IACrB;AACA,WAAO;AAAA,EACT;AAAA,EAEA,UAAU,KAAc;AACtB,SAAK,IAAI,OAAO,GAAG;AAAA,EACrB;AAAA,EAEA,YAAiB;AACf,WAAO,CAAC,GAAG,KAAK,IAAI,KAAK,CAAC;AAAA,EAC5B;AAAA,EAEA,OAA4B;AAC1B,WAAO,KAAK,IAAI,KAAK;AAAA,EACvB;AAAA,EAEA,cAAmB;AACjB,UAAM,SAAS,CAAC;AAChB,eAAW,OAAO,KAAK,IAAI,OAAO,GAAG;AACnC,aAAO,KAAK,GAAG,IAAI,OAAO,CAAC;AAAA,IAC7B;AACA,WAAO;AAAA,EACT;AAAA,EAEA,QAAc;AACZ,SAAK,IAAI,MAAM;AAAA,EACjB;AACF;AAMO,gBAAS,eACZ,KAA8B,KAAQ,qBAAwC;AAChF,MAAI,QAAQ,IAAI,IAAI,GAAG;AACvB,MAAI,UAAU,UAAa,UAAU,MAAM;AACzC,YAAQ,oBAAoB,GAAG;AAC/B,QAAI,IAAI,KAAK,KAAK;AAAA,EACpB;AAEA,SAAO;AACT;",
  "names": []
}
