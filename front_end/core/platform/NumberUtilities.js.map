{
  "version": 3,
  "sources": ["../../../../../../front_end/core/platform/NumberUtilities.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport const clamp = (num: number, min: number, max: number): number => {\n  let clampedNumber = num;\n  if (num < min) {\n    clampedNumber = min;\n  } else if (num > max) {\n    clampedNumber = max;\n  }\n  return clampedNumber;\n};\n\nexport const mod = (m: number, n: number): number => {\n  return ((m % n) + n) % n;\n};\n\nexport const toFixedIfFloating = (value: string): string => {\n  if (!value || Number.isNaN(Number(value))) {\n    return value;\n  }\n  const number = Number(value);\n  return number % 1 ? number.toFixed(3) : String(number);\n};\n\n/**\n * Rounds a number (including float) down.\n */\nexport const floor = (value: number, precision = 0): number => {\n  // Allows for rounding to the nearest whole number.\n  // Ex: 1 / 10 -> round down to nearest 10th place\n  // Ex: 1 / 5 -> round down to nearest 5\n  // Ex: 1 / 50 -> round down to nearest 50\n  if (precision > 0 && precision < 1) {\n    precision = 1 / precision;\n    return Math.floor(value / precision) * precision;\n  }\n\n  const mult = Math.pow(10, precision);\n  return Math.floor(value * mult) / mult;\n};\n\n/**\n * Computes the great common divisor for two numbers.\n * If the numbers are floats, they will be rounded to an integer.\n */\nexport const greatestCommonDivisor = (a: number, b: number): number => {\n  a = Math.round(a);\n  b = Math.round(b);\n  while (b !== 0) {\n    const t = b;\n    b = a % b;\n    a = t;\n  }\n  return a;\n};\n\nconst commonRatios = new Map([\n  ['8\u22365', '16\u223610'],\n]);\n\nexport const aspectRatio = (width: number, height: number): string => {\n  const divisor = greatestCommonDivisor(width, height);\n  if (divisor !== 0) {\n    width /= divisor;\n    height /= divisor;\n  }\n  const result = `${width}\u2236${height}`;\n  return commonRatios.get(result) || result;\n};\n\nexport const withThousandsSeparator = function(num: number): string {\n  let str = String(num);\n  const re = /(\\d+)(\\d{3})/;\n  while (str.match(re)) {\n    str = str.replace(re, '$1\\xA0$2');\n  }  // \\xa0 is a non-breaking space\n  return str;\n};\n"],
  "mappings": ";AAIO,aAAM,QAAQ,CAAC,KAAa,KAAa,QAAwB;AACtE,MAAI,gBAAgB;AACpB,MAAI,MAAM,KAAK;AACb,oBAAgB;AAAA,EAClB,WAAW,MAAM,KAAK;AACpB,oBAAgB;AAAA,EAClB;AACA,SAAO;AACT;AAEO,aAAM,MAAM,CAAC,GAAW,MAAsB;AACnD,UAAS,IAAI,IAAK,KAAK;AACzB;AAEO,aAAM,oBAAoB,CAAC,UAA0B;AAC1D,MAAI,CAAC,SAAS,OAAO,MAAM,OAAO,KAAK,CAAC,GAAG;AACzC,WAAO;AAAA,EACT;AACA,QAAM,SAAS,OAAO,KAAK;AAC3B,SAAO,SAAS,IAAI,OAAO,QAAQ,CAAC,IAAI,OAAO,MAAM;AACvD;AAKO,aAAM,QAAQ,CAAC,OAAe,YAAY,MAAc;AAK7D,MAAI,YAAY,KAAK,YAAY,GAAG;AAClC,gBAAY,IAAI;AAChB,WAAO,KAAK,MAAM,QAAQ,SAAS,IAAI;AAAA,EACzC;AAEA,QAAM,OAAO,KAAK,IAAI,IAAI,SAAS;AACnC,SAAO,KAAK,MAAM,QAAQ,IAAI,IAAI;AACpC;AAMO,aAAM,wBAAwB,CAAC,GAAW,MAAsB;AACrE,MAAI,KAAK,MAAM,CAAC;AAChB,MAAI,KAAK,MAAM,CAAC;AAChB,SAAO,MAAM,GAAG;AACd,UAAM,IAAI;AACV,QAAI,IAAI;AACR,QAAI;AAAA,EACN;AACA,SAAO;AACT;AAEA,MAAM,eAAe,oBAAI,IAAI;AAAA,EAC3B,CAAC,YAAO,YAAO;AACjB,CAAC;AAEM,aAAM,cAAc,CAAC,OAAe,WAA2B;AACpE,QAAM,UAAU,sBAAsB,OAAO,MAAM;AACnD,MAAI,YAAY,GAAG;AACjB,aAAS;AACT,cAAU;AAAA,EACZ;AACA,QAAM,SAAS,GAAG,KAAK,SAAI,MAAM;AACjC,SAAO,aAAa,IAAI,MAAM,KAAK;AACrC;AAEO,aAAM,yBAAyB,SAAS,KAAqB;AAClE,MAAI,MAAM,OAAO,GAAG;AACpB,QAAM,KAAK;AACX,SAAO,IAAI,MAAM,EAAE,GAAG;AACpB,UAAM,IAAI,QAAQ,IAAI,UAAU;AAAA,EAClC;AACA,SAAO;AACT;",
  "names": []
}
