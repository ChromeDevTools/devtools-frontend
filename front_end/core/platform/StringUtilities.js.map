{
  "version": 3,
  "sources": ["../../../../../../front_end/core/platform/StringUtilities.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {Brand} from './Brand.js';\n\nexport const escapeCharacters = (inputString: string, charsToEscape: string): string => {\n  let foundChar = false;\n  for (let i = 0; i < charsToEscape.length; ++i) {\n    if (inputString.indexOf(charsToEscape.charAt(i)) !== -1) {\n      foundChar = true;\n      break;\n    }\n  }\n\n  if (!foundChar) {\n    return String(inputString);\n  }\n\n  let result = '';\n  for (let i = 0; i < inputString.length; ++i) {\n    if (charsToEscape.indexOf(inputString.charAt(i)) !== -1) {\n      result += '\\\\';\n    }\n    result += inputString.charAt(i);\n  }\n\n  return result;\n};\n\nconst toHexadecimal = (charCode: number, padToLength: number): string => {\n  return charCode.toString(16).toUpperCase().padStart(padToLength, '0');\n};\n\n// Remember to update the third group in the regexps patternsToEscape and\n// patternsToEscapePlusSingleQuote when adding new entries in this map.\nconst escapedReplacements = new Map([\n  ['\\b', '\\\\b'],\n  ['\\f', '\\\\f'],\n  ['\\n', '\\\\n'],\n  ['\\r', '\\\\r'],\n  ['\\t', '\\\\t'],\n  ['\\v', '\\\\v'],\n  ['\\'', '\\\\\\''],\n  ['\\\\', '\\\\\\\\'],\n  ['<!--', '\\\\x3C!--'],\n  ['<script', '\\\\x3Cscript'],\n  ['</script', '\\\\x3C/script'],\n]);\n\nexport const formatAsJSLiteral = (content: string): string => {\n  const patternsToEscape = /(\\\\|<(?:!--|\\/?script))|(\\p{Control})|(\\p{Surrogate})/gu;\n  const patternsToEscapePlusSingleQuote = /(\\\\|'|<(?:!--|\\/?script))|(\\p{Control})|(\\p{Surrogate})/gu;\n  const escapePattern = (match: string, pattern: string, controlChar: string, loneSurrogate: string): string => {\n    if (controlChar) {\n      if (escapedReplacements.has(controlChar)) {\n        // @ts-expect-error https://github.com/microsoft/TypeScript/issues/13086\n        return escapedReplacements.get(controlChar);\n      }\n      const twoDigitHex = toHexadecimal(controlChar.charCodeAt(0), 2);\n      return '\\\\x' + twoDigitHex;\n    }\n    if (loneSurrogate) {\n      const fourDigitHex = toHexadecimal(loneSurrogate.charCodeAt(0), 4);\n      return '\\\\u' + fourDigitHex;\n    }\n    if (pattern) {\n      return escapedReplacements.get(pattern) || '';\n    }\n    return match;\n  };\n\n  let escapedContent = '';\n  let quote = '';\n  if (!content.includes('\\'')) {\n    quote = '\\'';\n    escapedContent = content.replaceAll(patternsToEscape, escapePattern);\n  } else if (!content.includes('\"')) {\n    quote = '\"';\n    escapedContent = content.replaceAll(patternsToEscape, escapePattern);\n  } else if (!content.includes('`') && !content.includes('${')) {\n    quote = '`';\n    escapedContent = content.replaceAll(patternsToEscape, escapePattern);\n  } else {\n    quote = '\\'';\n    escapedContent = content.replaceAll(patternsToEscapePlusSingleQuote, escapePattern);\n  }\n  return `${quote}${escapedContent}${quote}`;\n};\n\n/**\n * This implements a subset of the sprintf() function described in the Single UNIX\n * Specification. It supports the %s, %f, %d, and %% formatting specifiers, and\n * understands the %m$d notation to select the m-th parameter for this substitution,\n * as well as the optional precision for %s, %f, and %d.\n *\n * @param fmt format string.\n * @param args parameters to the format string.\n * @returns the formatted output string.\n */\nexport const sprintf = (fmt: string, ...args: unknown[]): string => {\n  let argIndex = 0;\n  const RE = /%(?:(\\d+)\\$)?(?:\\.(\\d*))?([%dfs])/g;\n  return fmt.replaceAll(RE, (_: string, index?: string, precision?: string, specifier?: string) => {\n    if (specifier === '%') {\n      return '%';\n    }\n    if (index !== undefined) {\n      argIndex = parseInt(index, 10) - 1;\n      if (argIndex < 0) {\n        throw new RangeError(`Invalid parameter index ${argIndex + 1}`);\n      }\n    }\n    if (argIndex >= args.length) {\n      throw new RangeError(`Expected at least ${argIndex + 1} format parameters, but only ${args.length} where given.`);\n    }\n    if (specifier === 's') {\n      const argValue = String(args[argIndex++]);\n      if (precision !== undefined) {\n        return argValue.substring(0, Number(precision));\n      }\n      return argValue;\n    }\n    let argValue = Number(args[argIndex++]);\n    if (isNaN(argValue)) {\n      argValue = 0;\n    }\n    if (specifier === 'd') {\n      return String(Math.floor(argValue)).padStart(Number(precision), '0');\n    }\n    if (precision !== undefined) {\n      return argValue.toFixed(Number(precision));\n    }\n    return String(argValue);\n  });\n};\n\nexport const toBase64 = (inputString: string): string => {\n  /* note to the reader: we can't use btoa here because we need to\n   * support Unicode correctly. See the test cases for this function and\n   * also\n   * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem\n   */\n\n  function encodeBits(b: number): number {\n    return b < 26 ? b + 65 : b < 52 ? b + 71 : b < 62 ? b - 4 : b === 62 ? 43 : b === 63 ? 47 : 65;\n  }\n  const encoder = new TextEncoder();\n  const data = encoder.encode(inputString.toString());\n  const n = data.length;\n  let encoded = '';\n  if (n === 0) {\n    return encoded;\n  }\n  let shift;\n  let v = 0;\n  for (let i = 0; i < n; i++) {\n    shift = i % 3;\n    v |= data[i] << (16 >>> shift & 24);\n    if (shift === 2) {\n      encoded += String.fromCharCode(\n          encodeBits(v >>> 18 & 63), encodeBits(v >>> 12 & 63), encodeBits(v >>> 6 & 63), encodeBits(v & 63));\n      v = 0;\n    }\n  }\n  if (shift === 0) {\n    encoded += String.fromCharCode(encodeBits(v >>> 18 & 63), encodeBits(v >>> 12 & 63), 61, 61);\n  } else if (shift === 1) {\n    encoded += String.fromCharCode(encodeBits(v >>> 18 & 63), encodeBits(v >>> 12 & 63), encodeBits(v >>> 6 & 63), 61);\n  }\n  return encoded;\n};\n\nexport const findIndexesOfSubString = (inputString: string, searchString: string): number[] => {\n  const matches = [];\n  let i = inputString.indexOf(searchString);\n  while (i !== -1) {\n    matches.push(i);\n    i = inputString.indexOf(searchString, i + searchString.length);\n  }\n  return matches;\n};\n\nexport const findLineEndingIndexes = (inputString: string): number[] => {\n  const endings = findIndexesOfSubString(inputString, '\\n');\n  endings.push(inputString.length);\n  return endings;\n};\n\nexport const isWhitespace = (inputString: string): boolean => {\n  return /^\\s*$/.test(inputString);\n};\n\nexport const trimURL = (url: string, baseURLDomain?: string): string => {\n  let result = url.replace(/^(https|http|file):\\/\\//i, '');\n  if (baseURLDomain) {\n    if (result.toLowerCase().startsWith(baseURLDomain.toLowerCase())) {\n      result = result.substr(baseURLDomain.length);\n    }\n  }\n  return result;\n};\n\nexport const collapseWhitespace = (inputString: string): string => {\n  return inputString.replace(/[\\s\\xA0]+/g, ' ');\n};\n\nexport const reverse = (inputString: string): string => {\n  return inputString.split('').reverse().join('');\n};\n\nexport const replaceControlCharacters = (inputString: string): string => {\n  // Replace C0 and C1 control character sets with replacement character.\n  // Do not replace '\\t', \\n' and '\\r'.\n  return inputString.replace(/[\\0-\\x08\\x0B\\f\\x0E-\\x1F\\x80-\\x9F]/g, '\\uFFFD');\n};\n\nexport const countWtf8Bytes = (inputString: string): number => {\n  let count = 0;\n  for (let i = 0; i < inputString.length; i++) {\n    const c = inputString.charCodeAt(i);\n    if (c <= 0x7F) {\n      count++;\n    } else if (c <= 0x07FF) {\n      count += 2;\n    } else if (c < 0xD800 || 0xDFFF < c) {\n      count += 3;\n    } else {\n      if (c <= 0xDBFF && i + 1 < inputString.length) {\n        // The current character is a leading surrogate, and there is a\n        // next character.\n        const next = inputString.charCodeAt(i + 1);\n        if (0xDC00 <= next && next <= 0xDFFF) {\n          // The next character is a trailing surrogate, meaning this\n          // is a surrogate pair.\n          count += 4;\n          i++;\n          continue;\n        }\n      }\n      count += 3;\n    }\n  }\n  return count;\n};\n\nexport const stripLineBreaks = (inputStr: string): string => {\n  return inputStr.replace(/(\\r)?\\n/g, '');\n};\n\nconst EXTENDED_KEBAB_CASE_REGEXP = /^([a-z0-9]+(?:-[a-z0-9]+)*\\.)*[a-z0-9]+(?:-[a-z0-9]+)*$/;\n\n/**\n * Tests if the `inputStr` is following the extended Kebab Case naming convention,\n * where words are separated with either a dash (`-`) or a dot (`.`), and all\n * characters must be lower-case alphanumeric.\n *\n * For example, it will yield `true` for `'my.amazing-string.literal'`, but `false`\n * for `'Another.AmazingLiteral'` or '`another_amazing_literal'`.\n *\n * @param inputStr the input string to test.\n * @returns `true` if the `inputStr` follows the extended Kebab Case convention.\n */\nexport const isExtendedKebabCase = (inputStr: string): boolean => {\n  return EXTENDED_KEBAB_CASE_REGEXP.test(inputStr);\n};\n\nexport const toTitleCase = (inputStr: string): string => {\n  return inputStr.substring(0, 1).toUpperCase() + inputStr.substring(1);\n};\n\nexport const removeURLFragment = (inputStr: string): string => {\n  const url = new URL(inputStr);\n  url.hash = '';\n  return url.toString();\n};\n\nconst SPECIAL_REGEX_CHARACTERS = '^[]{}()\\\\.^$*+?|-,';\n\nexport const regexSpecialCharacters = function(): string {\n  return SPECIAL_REGEX_CHARACTERS;\n};\n\nexport const filterRegex = function(query: string): RegExp {\n  let regexString = '^(?:.*\\\\0)?';  // Start from beginning or after a \\0\n  for (let i = 0; i < query.length; ++i) {\n    let c = query.charAt(i);\n    if (SPECIAL_REGEX_CHARACTERS.indexOf(c) !== -1) {\n      c = '\\\\' + c;\n    }\n    regexString += '[^\\\\0' + c + ']*' + c;\n  }\n  return new RegExp(regexString, 'i');\n};\n\nexport const createSearchRegex = function(\n    query: string, caseSensitive: boolean, isRegex: boolean, matchWholeWord = false): RegExp {\n  const regexFlags = caseSensitive ? 'g' : 'gi';\n  let regexObject;\n\n  if (isRegex) {\n    try {\n      regexObject = new RegExp(query, regexFlags);\n    } catch {\n      // Silent catch.\n    }\n  }\n\n  if (!regexObject) {\n    regexObject = createPlainTextSearchRegex(query, regexFlags);\n  }\n\n  if (matchWholeWord && regexObject) {\n    regexObject = new RegExp(`\\\\b${regexObject.source}\\\\b`, regexFlags);\n  }\n\n  return regexObject;\n};\n\nexport const caseInsensetiveComparator = function(a: string, b: string): number {\n  a = a.toUpperCase();\n  b = b.toUpperCase();\n  if (a === b) {\n    return 0;\n  }\n  return a > b ? 1 : -1;\n};\n\nexport const hashCode = function(string?: string): number {\n  if (!string) {\n    return 0;\n  }\n  // Hash algorithm for substrings is described in \"\u00DCber die Komplexit\u00E4t der Multiplikation in\n  // eingeschr\u00E4nkten Branchingprogrammmodellen\" by Woelfe.\n  // http://opendatastructures.org/versions/edition-0.1d/ods-java/node33.html#SECTION00832000000000000000\n  const p = ((1 << 30) * 4 - 5);  // prime: 2^32 - 5\n  const z = 0x5033d967;           // 32 bits from random.org\n  const z2 = 0x59d2f15d;          // random odd 32 bit number\n  let s = 0;\n  let zi = 1;\n  for (let i = 0; i < string.length; i++) {\n    const xi = string.charCodeAt(i) * z2;\n    s = (s + zi * xi) % p;\n    zi = (zi * z) % p;\n  }\n  s = (s + zi * (p - 1)) % p;\n  return Math.abs(s | 0);\n};\n\nexport const compare = (a: string, b: string): number => {\n  if (a > b) {\n    return 1;\n  }\n  if (a < b) {\n    return -1;\n  }\n  return 0;\n};\n\nexport const trimMiddle = (str: string, maxLength: number): string => {\n  if (str.length <= maxLength) {\n    return String(str);\n  }\n  let leftHalf = maxLength >> 1;\n  let rightHalf = maxLength - leftHalf - 1;\n  if ((str.codePointAt(str.length - rightHalf - 1) as number) >= 0x10000) {\n    --rightHalf;\n    ++leftHalf;\n  }\n  if (leftHalf > 0 && (str.codePointAt(leftHalf - 1) as number) >= 0x10000) {\n    --leftHalf;\n  }\n  return str.substr(0, leftHalf) + '\u2026' + str.substr(str.length - rightHalf, rightHalf);\n};\n\nexport const trimEndWithMaxLength = (str: string, maxLength: number): string => {\n  if (str.length <= maxLength) {\n    return String(str);\n  }\n  return str.substr(0, maxLength - 1) + '\u2026';\n};\n\nexport const escapeForRegExp = (str: string): string => {\n  return escapeCharacters(str, SPECIAL_REGEX_CHARACTERS);\n};\n\nexport const naturalOrderComparator = (a: string, b: string): number => {\n  const chunk = /^\\d+|^\\D+/;\n  let chunkA, chunkB, numA, numB;\n  while (true) {\n    if (a) {\n      if (!b) {\n        return 1;\n      }\n    } else {\n      if (b) {\n        return -1;\n      }\n      return 0;\n    }\n    chunkA = (a.match(chunk) as string[])[0];\n    chunkB = (b.match(chunk) as string[])[0];\n    numA = !Number.isNaN(Number(chunkA));\n    numB = !Number.isNaN(Number(chunkB));\n    if (numA && !numB) {\n      return -1;\n    }\n    if (numB && !numA) {\n      return 1;\n    }\n    if (numA && numB) {\n      const diff = Number(chunkA) - Number(chunkB);\n      if (diff) {\n        return diff;\n      }\n      if (chunkA.length !== chunkB.length) {\n        if (!Number(chunkA) && !Number(chunkB)) {  // chunks are strings of all 0s (special case)\n          return chunkA.length - chunkB.length;\n        }\n        return chunkB.length - chunkA.length;\n      }\n    } else if (chunkA !== chunkB) {\n      return (chunkA < chunkB) ? -1 : 1;\n    }\n    a = a.substring(chunkA.length);\n    b = b.substring(chunkB.length);\n  }\n};\n\nexport const base64ToSize = function(content: string|null): number {\n  if (!content) {\n    return 0;\n  }\n  let size = content.length * 3 / 4;\n  if (content[content.length - 1] === '=') {\n    size--;\n  }\n  if (content.length > 1 && content[content.length - 2] === '=') {\n    size--;\n  }\n  return size;\n};\n\nexport const SINGLE_QUOTE = '\\'';\nexport const DOUBLE_QUOTE = '\"';\nconst BACKSLASH = '\\\\';\n\nexport const findUnclosedCssQuote = function(str: string): string {\n  let unmatchedQuote = '';\n  for (let i = 0; i < str.length; ++i) {\n    const char = str[i];\n    if (char === BACKSLASH) {\n      i++;\n      continue;\n    }\n    if (char === SINGLE_QUOTE || char === DOUBLE_QUOTE) {\n      if (unmatchedQuote === char) {\n        unmatchedQuote = '';\n      } else if (unmatchedQuote === '') {\n        unmatchedQuote = char;\n      }\n    }\n  }\n  return unmatchedQuote;\n};\n\nexport const countUnmatchedLeftParentheses = (str: string): number => {\n  const stringLiteralRegex = /'(?:\\\\.|[^'\\\\])*'|\"(?:\\\\.|[^\"\\\\])*\"/g;\n  // Remove all matched string literals from the original string.\n  const strWithoutStrings = str.replace(stringLiteralRegex, '');\n\n  let unmatchedCount = 0;\n  for (const c of strWithoutStrings) {\n    if (c === '(') {\n      unmatchedCount++;\n    } else if (c === ')' && unmatchedCount > 0) {\n      unmatchedCount--;\n    }\n  }\n  return unmatchedCount;\n};\n\nexport const createPlainTextSearchRegex = function(query: string, flags?: string): RegExp {\n  // This should be kept the same as the one in StringUtil.cpp.\n  let regex = '';\n  for (let i = 0; i < query.length; ++i) {\n    const c = query.charAt(i);\n    if (regexSpecialCharacters().indexOf(c) !== -1) {\n      regex += '\\\\';\n    }\n    regex += c;\n  }\n  return new RegExp(regex, flags || '');\n};\n\nexport type LowerCaseString = Brand<string, 'lowerCaseStringTag'>;\n\nexport const toLowerCaseString = function(input: string): LowerCaseString {\n  return input.toLowerCase() as LowerCaseString;\n};\n\n/**\n * 1: two or more consecutive uppercase letters. This is useful for identifying acronyms\n * 2: lookahead assertion that matches a word boundary\n * 3: numeronym: single letter followed by number and another letter\n * 4: word starting with an optional uppercase letter\n * 5: single digit followed by word to handle '3D' or '2px' (this might be controverial)\n * 6: single uppercase letter or number\n * 7: a dot character. We extract it into a separate word and remove dashes around it later.\n * This is makes more sense conceptually and allows accounting for all possible word variants.\n * Making dot a part of a word prevent us from handling acronyms or numeronyms after the word\n * correctly without making the RegExp prohibitively complicated.\n * https://regex101.com/r/FhMVKc/1\n *            <---1---><------------2-----------> <---------3--------> <-----4----> <------5-----> <-----6----> <7>\n */\nconst WORD = /[A-Z]{2,}(?=[A-Z0-9][a-z0-9]+|\\b|_)|[A-Za-z][0-9]+[a-z]?|[A-Z]?[a-z]+|[0-9][A-Za-z]+|[A-Z]|[0-9]+|[.]/g;\n\nexport const toKebabCase = function(input: string): Lowercase<string> {\n  return (input.match?.(WORD)?.map(w => w.toLowerCase()).join('-').replaceAll('-.-', '.') || input) as\n      Lowercase<string>;\n};\n\nexport function toKebabCaseKeys<T>(settingValue: Record<string, T>): Record<string, T> {\n  return Object.fromEntries(Object.entries(settingValue).map(([key, value]) => [toKebabCase(key), value]));\n}\n\n/**\n * Converts a given string to snake_case.\n * This function handles camelCase, PascalCase, and acronyms, including transitions between letters and numbers.\n * It uses Unicode-aware regular expressions (`\\p{L}`, `\\p{N}`, `\\p{Lu}`, `\\p{Ll}` with the `u` flag)\n * to correctly process letters and numbers from various languages.\n *\n * @param text The input string to convert to snake_case.\n * @returns The snake_case version of the input string.\n */\nexport function toSnakeCase(text: string): string {\n  if (!text) {\n    return '';\n  }\n  // First, handle case-based transformations to insert underscores correctly.\n  // 1. Add underscore between a letter and a number.\n  //    e.g., \"version2\" -> \"version_2\"\n  // 2. Add underscore between an uppercase letter sequence and a following uppercase+lowercase sequence.\n  //    e.g., \"APIFlags\" -> \"API_Flags\"\n  // 3. Add underscore between a lowercase/number and an uppercase letter.\n  //    e.g., \"lastName\" -> \"last_Name\", \"version_2Update\" -> \"version_2_Update\"\n  // 4. Replace sequences of non-alphanumeric with a single underscore\n  // 5. Remove any leading or trailing underscores.\n  const result = text.replace(/(\\p{L})(\\p{N})/gu, '$1_$2')           // 1\n                     .replace(/(\\p{Lu}+)(\\p{Lu}\\p{Ll})/gu, '$1_$2')  // 2\n                     .replace(/(\\p{Ll}|\\p{N})(\\p{Lu})/gu, '$1_$2')   // 3\n                     .toLowerCase()\n                     .replace(/[^\\p{L}\\p{N}]+/gu, '_')  // 4\n                     .replace(/^_|_$/g, '');            // 5\n\n  return result;\n}\n\n/** Replaces the last occurrence of parameter `search` with parameter `replacement` in `input` **/\nexport const replaceLast = function(input: string, search: string, replacement: string): string {\n  const replacementStartIndex = input.lastIndexOf(search);\n  if (replacementStartIndex === -1) {\n    return input;\n  }\n\n  return input.slice(0, replacementStartIndex) + input.slice(replacementStartIndex).replace(search, replacement);\n};\n\nexport const stringifyWithPrecision = function stringifyWithPrecision(s: number, precision = 2): string {\n  if (precision === 0) {\n    return s.toFixed(0);\n  }\n  const string = s.toFixed(precision).replace(/\\.?0*$/, '');\n  return string === '-0' ? '0' : string;\n};\n\n/**\n * Somewhat efficiently concatenates 2 base64 encoded strings.\n */\nexport const concatBase64 = function(lhs: string, rhs: string): string {\n  if (lhs.length === 0 || !lhs.endsWith('=')) {\n    // Empty string or no padding, we can straight-up concatenate.\n    return lhs + rhs;\n  }\n  const lhsLeaveAsIs = lhs.substring(0, lhs.length - 4);\n  const lhsToDecode = lhs.substring(lhs.length - 4);\n  return lhsLeaveAsIs + window.btoa(window.atob(lhsToDecode) + window.atob(rhs));\n};\n"],
  "mappings": "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",
  "names": ["argValue", "stringifyWithPrecision"]
}
