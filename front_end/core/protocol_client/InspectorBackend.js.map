{"version":3,"file":"InspectorBackend.js","sourceRoot":"","sources":["../../../../../../front_end/core/protocol_client/InspectorBackend.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2011 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as InspectorBackendCommands from '../../generated/InspectorBackendCommands.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport type * as Platform from '../platform/platform.js';\n\nimport {ConnectionTransport} from './ConnectionTransport.js';\nimport {NodeURL} from './NodeURL.js';\n\nexport const DevToolsStubErrorCode = -32015;\n// TODO(dgozman): we are not reporting generic errors in tests, but we should\n// instead report them and just have some expected errors in test expectations.\nconst GenericErrorCode = -32000;\nconst ConnectionClosedErrorCode = -32001;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype MessageParams = Record<string, any>;\n\ntype ProtocolDomainName = ProtocolProxyApi.ProtocolDomainName;\n\nexport interface MessageError {\n  code: number;\n  message: string;\n  data?: string|null;\n}\n\nexport interface Message {\n  sessionId?: string;\n  url?: Platform.DevToolsPath.UrlString;\n  id?: number;\n  error?: MessageError|null;\n  result?: Object|null;\n  method?: QualifiedName;\n  params?: MessageParams|null;\n}\n\ninterface EventMessage extends Message {\n  method: QualifiedName;\n  params?: MessageParams|null;\n}\n\n/** A qualified name, e.g. Domain.method */\nexport type QualifiedName = string&{qualifiedEventNameTag: string | undefined};\n/** A qualified name, e.g. method */\nexport type UnqualifiedName = string&{unqualifiedEventNameTag: string | undefined};\n\nexport const splitQualifiedName = (string: QualifiedName): [string, UnqualifiedName] => {\n  const [domain, eventName] = string.split('.');\n  return [domain, eventName as UnqualifiedName];\n};\n\nexport const qualifyName = (domain: string, name: UnqualifiedName): QualifiedName => {\n  return `${domain}.${name}` as QualifiedName;\n};\n\ntype EventParameterNames = Map<QualifiedName, string[]>;\ntype ReadonlyEventParameterNames = ReadonlyMap<QualifiedName, string[]>;\n\ninterface CommandParameter {\n  name: string;\n  type: string;\n  optional: boolean;\n  description: string;\n}\n\ntype Callback = (error: MessageError|null, arg1: Object|null) => void;\ninterface ResponseWithError {\n  error: MessageError|null;\n  result: Object|null;\n}\n\ninterface CallbackWithDebugInfo {\n  resolve: (response: ResponseWithError) => void;\n  method: string;\n}\n\nexport class InspectorBackend {\n  readonly agentPrototypes = new Map<ProtocolDomainName, AgentPrototype>();\n  #eventParameterNamesForDomain = new Map<ProtocolDomainName, EventParameterNames>();\n  readonly typeMap = new Map<QualifiedName, CommandParameter[]>();\n  readonly enumMap = new Map<QualifiedName, Record<string, string>>();\n\n  constructor() {\n    // Create the global here because registering commands will involve putting\n    // items onto the global.\n    // @ts-expect-error Global namespace instantiation\n    globalThis.Protocol ||= {};\n\n    InspectorBackendCommands.registerCommands(this);\n  }\n\n  private getOrCreateEventParameterNamesForDomain(domain: ProtocolDomainName): EventParameterNames {\n    let map = this.#eventParameterNamesForDomain.get(domain);\n    if (!map) {\n      map = new Map();\n      this.#eventParameterNamesForDomain.set(domain, map);\n    }\n    return map;\n  }\n\n  getOrCreateEventParameterNamesForDomainForTesting(domain: ProtocolDomainName): EventParameterNames {\n    return this.getOrCreateEventParameterNamesForDomain(domain);\n  }\n\n  getEventParameterNames(): ReadonlyMap<ProtocolDomainName, ReadonlyEventParameterNames> {\n    return this.#eventParameterNamesForDomain;\n  }\n\n  static reportProtocolError(error: string, messageObject: Object): void {\n    console.error(error + ': ' + JSON.stringify(messageObject));\n  }\n\n  static reportProtocolWarning(error: string, messageObject: Object): void {\n    console.warn(error + ': ' + JSON.stringify(messageObject));\n  }\n\n  private agentPrototype(domain: ProtocolDomainName): AgentPrototype {\n    let prototype = this.agentPrototypes.get(domain);\n    if (!prototype) {\n      prototype = new AgentPrototype(domain);\n      this.agentPrototypes.set(domain, prototype);\n    }\n    return prototype;\n  }\n\n  registerCommand(method: QualifiedName, parameters: CommandParameter[], replyArgs: string[], description: string):\n      void {\n    const [domain, command] = splitQualifiedName(method);\n    this.agentPrototype(domain as ProtocolDomainName).registerCommand(command, parameters, replyArgs, description);\n  }\n\n  registerEnum(type: QualifiedName, values: Record<string, string>): void {\n    const [domain, name] = splitQualifiedName(type);\n    // @ts-expect-error globalThis global namespace pollution\n    if (!globalThis.Protocol[domain]) {\n      // @ts-expect-error globalThis global namespace pollution\n      globalThis.Protocol[domain] = {};\n    }\n\n    // @ts-expect-error globalThis global namespace pollution\n    globalThis.Protocol[domain][name] = values;\n    this.enumMap.set(type, values);\n  }\n\n  registerType(method: QualifiedName, parameters: CommandParameter[]): void {\n    this.typeMap.set(method, parameters);\n  }\n\n  registerEvent(eventName: QualifiedName, params: string[]): void {\n    const domain = eventName.split('.')[0];\n    const eventParameterNames = this.getOrCreateEventParameterNamesForDomain(domain as ProtocolDomainName);\n    eventParameterNames.set(eventName, params);\n  }\n}\n\ntype SendRawMessageCallback = (...args: unknown[]) => void;\n\nexport const test = {\n  /**\n   * This will get called for every protocol message.\n   * ProtocolClient.test.dumpProtocol = console.log\n   */\n  dumpProtocol: null as ((arg0: string) => void) | null,\n\n  /**\n   * Runs a function when no protocol activity is present.\n   * ProtocolClient.test.deprecatedRunAfterPendingDispatches(() => console.log('done'))\n   */\n  deprecatedRunAfterPendingDispatches: null as ((arg0: () => void) => void) | null,\n\n  /**\n   * Sends a raw message over main connection.\n   * ProtocolClient.test.sendRawMessage('Page.enable', {}, console.log)\n   */\n  sendRawMessage: null as ((method: QualifiedName, args: Object|null, arg2: SendRawMessageCallback) => void) | null,\n\n  /**\n   * Set to true to not log any errors.\n   */\n  suppressRequestErrors: false as boolean,\n\n  /**\n   * Set to get notified about any messages sent over protocol.\n   */\n  onMessageSent: null as\n          ((message: {domain: string, method: string, params: Object, id: number, sessionId?: string}) => void) |\n      null,\n\n  /**\n   * Set to get notified about any messages received over protocol.\n   */\n  onMessageReceived: null as ((message: Object) => void) | null,\n};\n\nconst LongPollingMethods = new Set<string>(['CSS.takeComputedStyleUpdates']);\n\nexport class SessionRouter {\n  readonly #connection: ConnectionTransport;\n  #lastMessageId = 1;\n  #pendingResponsesCount = 0;\n  readonly #pendingLongPollingMessageIds = new Set<number>();\n  readonly #sessions = new Map<string, {\n    target: TargetBase,\n    callbacks: Map<number, CallbackWithDebugInfo>,\n    proxyConnection: ConnectionTransport|undefined|null,\n  }>();\n  #pendingScripts: Array<() => void> = [];\n\n  constructor(connection: ConnectionTransport) {\n    this.#connection = connection;\n\n    test.deprecatedRunAfterPendingDispatches = this.deprecatedRunAfterPendingDispatches.bind(this);\n    test.sendRawMessage = this.sendRawMessageForTesting.bind(this);\n\n    this.#connection.setOnMessage(this.onMessage.bind(this));\n\n    this.#connection.setOnDisconnect(reason => {\n      const session = this.#sessions.get('');\n      if (session) {\n        session.target.dispose(reason);\n      }\n    });\n  }\n\n  registerSession(target: TargetBase, sessionId: string, proxyConnection?: ConnectionTransport|null): void {\n    // Only the Audits panel uses proxy connections. If it is ever possible to have multiple active at the\n    // same time, it should be tested thoroughly.\n    if (proxyConnection) {\n      for (const session of this.#sessions.values()) {\n        if (session.proxyConnection) {\n          console.error('Multiple simultaneous proxy connections are currently unsupported');\n          break;\n        }\n      }\n    }\n\n    this.#sessions.set(sessionId, {target, callbacks: new Map(), proxyConnection});\n  }\n\n  unregisterSession(sessionId: string): void {\n    const session = this.#sessions.get(sessionId);\n    if (!session) {\n      return;\n    }\n    for (const {resolve, method} of session.callbacks.values()) {\n      resolve({\n        result: null,\n        error: {\n          message: `Session is unregistering, can\\'t dispatch pending call to ${method}`,\n          code: ConnectionClosedErrorCode,\n          data: null,\n        }\n      });\n    }\n    this.#sessions.delete(sessionId);\n  }\n\n  private nextMessageId(): number {\n    return this.#lastMessageId++;\n  }\n\n  connection(): ConnectionTransport {\n    return this.#connection;\n  }\n\n  sendMessage(sessionId: string, domain: string, method: QualifiedName, params: Object|null):\n      Promise<ResponseWithError> {\n    const messageId = this.nextMessageId();\n    const messageObject: Message = {\n      id: messageId,\n      method,\n    };\n\n    if (params) {\n      messageObject.params = params;\n    }\n    if (sessionId) {\n      messageObject.sessionId = sessionId;\n    }\n\n    if (test.dumpProtocol) {\n      test.dumpProtocol('frontend: ' + JSON.stringify(messageObject));\n    }\n\n    if (test.onMessageSent) {\n      const paramsObject = JSON.parse(JSON.stringify(params || {}));\n      test.onMessageSent({domain, method, params: (paramsObject as Object), id: messageId, sessionId});\n    }\n\n    ++this.#pendingResponsesCount;\n    if (LongPollingMethods.has(method)) {\n      this.#pendingLongPollingMessageIds.add(messageId);\n    }\n\n    const session = this.#sessions.get(sessionId);\n    if (!session) {\n      return Promise.resolve({error: null, result: null});\n    }\n\n    return new Promise(resolve => {\n      session.callbacks.set(messageId, {resolve, method});\n      this.#connection.sendRawMessage(JSON.stringify(messageObject));\n    });\n  }\n\n  private sendRawMessageForTesting(method: QualifiedName, params: Object|null, callback: Callback|null, sessionId = ''):\n      void {\n    const domain = method.split('.')[0];\n    void this.sendMessage(sessionId, domain, method, params).then(({error, result}) => callback?.(error, result));\n  }\n\n  private onMessage(message: string|Object): void {\n    if (test.dumpProtocol) {\n      test.dumpProtocol('backend: ' + ((typeof message === 'string') ? message : JSON.stringify(message)));\n    }\n\n    if (test.onMessageReceived) {\n      const messageObjectCopy = JSON.parse((typeof message === 'string') ? message : JSON.stringify(message));\n      test.onMessageReceived(messageObjectCopy);\n    }\n\n    const messageObject = ((typeof message === 'string') ? JSON.parse(message) : message) as Message;\n\n    // Send all messages to proxy connections.\n    let suppressUnknownMessageErrors = false;\n    for (const session of this.#sessions.values()) {\n      if (!session.proxyConnection) {\n        continue;\n      }\n\n      if (!session.proxyConnection.onMessage) {\n        InspectorBackend.reportProtocolError(\n            'Protocol Error: the session has a proxyConnection with no _onMessage', messageObject);\n        continue;\n      }\n\n      session.proxyConnection.onMessage(messageObject);\n      suppressUnknownMessageErrors = true;\n    }\n\n    const sessionId = messageObject.sessionId || '';\n    const session = this.#sessions.get(sessionId);\n    if (!session) {\n      // In the DevTools MCP case, we may share the transport with puppeteer so we silently\n      // ignore unknown sessions.\n      return;\n    }\n\n    // If this message is directly for the target controlled by the proxy connection, don't handle it.\n    if (session.proxyConnection) {\n      return;\n    }\n\n    if (session.target.getNeedsNodeJSPatching()) {\n      NodeURL.patch(messageObject);\n    }\n\n    if (messageObject.id !== undefined) {  // just a response for some request\n      const callback = session.callbacks.get(messageObject.id);\n      session.callbacks.delete(messageObject.id);\n      if (!callback) {\n        if (messageObject.error?.code === ConnectionClosedErrorCode) {\n          // Ignore the errors that are sent as responses after the session closes.\n          return;\n        }\n        if (!suppressUnknownMessageErrors) {\n          InspectorBackend.reportProtocolError('Protocol Error: the message with wrong id', messageObject);\n        }\n        return;\n      }\n\n      callback.resolve({error: messageObject.error || null, result: messageObject.result || null});\n      --this.#pendingResponsesCount;\n      this.#pendingLongPollingMessageIds.delete(messageObject.id);\n\n      if (this.#pendingScripts.length && !this.hasOutstandingNonLongPollingRequests()) {\n        this.deprecatedRunAfterPendingDispatches();\n      }\n    } else {\n      if (messageObject.method === undefined) {\n        InspectorBackend.reportProtocolError('Protocol Error: the message without method', messageObject);\n        return;\n      }\n      // This cast is justified as we just checked for the presence of messageObject.method.\n      const eventMessage = messageObject as EventMessage;\n      session.target.dispatch(eventMessage);\n    }\n  }\n\n  private hasOutstandingNonLongPollingRequests(): boolean {\n    return this.#pendingResponsesCount - this.#pendingLongPollingMessageIds.size > 0;\n  }\n\n  private deprecatedRunAfterPendingDispatches(script?: (() => void)): void {\n    if (script) {\n      this.#pendingScripts.push(script);\n    }\n\n    // Execute all promises.\n    window.setTimeout(() => {\n      if (!this.hasOutstandingNonLongPollingRequests()) {\n        this.executeAfterPendingDispatches();\n      } else {\n        this.deprecatedRunAfterPendingDispatches();\n      }\n    }, 0);\n  }\n\n  private executeAfterPendingDispatches(): void {\n    if (!this.hasOutstandingNonLongPollingRequests()) {\n      const scripts = this.#pendingScripts;\n      this.#pendingScripts = [];\n      for (let id = 0; id < scripts.length; ++id) {\n        scripts[id]();\n      }\n    }\n  }\n}\n\n/**\n * Make sure that `Domain` in get/set is only ever instantiated with one protocol domain\n * name, because if `Domain` allows multiple domains, the type is unsound.\n */\ninterface AgentsMap extends Map<ProtocolDomainName, ProtocolProxyApi.ProtocolApi[ProtocolDomainName]> {\n  get<Domain extends ProtocolDomainName>(key: Domain): ProtocolProxyApi.ProtocolApi[Domain]|undefined;\n  set<Domain extends ProtocolDomainName>(key: Domain, value: ProtocolProxyApi.ProtocolApi[Domain]): this;\n}\n\n/**\n * Make sure that `Domain` in get/set is only ever instantiated with one protocol domain\n * name, because if `Domain` allows multiple domains, the type is unsound.\n */\ninterface DispatcherMap extends Map<ProtocolDomainName, ProtocolProxyApi.ProtocolDispatchers[ProtocolDomainName]> {\n  get<Domain extends ProtocolDomainName>(key: Domain): DispatcherManager<Domain>|undefined;\n  set<Domain extends ProtocolDomainName>(key: Domain, value: DispatcherManager<Domain>): this;\n}\n\nexport class TargetBase {\n  needsNodeJSPatching: boolean;\n  readonly sessionId: string;\n  #router: SessionRouter|null;\n  #agents: AgentsMap = new Map();\n  #dispatchers: DispatcherMap = new Map();\n\n  constructor(\n      needsNodeJSPatching: boolean, parentTarget: TargetBase|null, sessionId: string,\n      connection: ConnectionTransport|null) {\n    this.needsNodeJSPatching = needsNodeJSPatching;\n    this.sessionId = sessionId;\n\n    if (parentTarget && !sessionId) {\n      throw new Error('Specifying a parent target requires a session ID');\n    }\n\n    let router: SessionRouter;\n    if (parentTarget && parentTarget.#router) {\n      router = parentTarget.#router;\n    } else if (connection) {\n      router = new SessionRouter(connection);\n    } else {\n      router = new SessionRouter(ConnectionTransport.getFactory()());\n    }\n\n    this.#router = router;\n\n    router.registerSession(this, this.sessionId);\n\n    for (const [domain, agentPrototype] of inspectorBackend.agentPrototypes) {\n      const agent = Object.create((agentPrototype));\n      agent.target = this;\n      this.#agents.set(domain, agent);\n    }\n\n    for (const [domain, eventParameterNames] of inspectorBackend.getEventParameterNames().entries()) {\n      this.#dispatchers.set(domain, new DispatcherManager(eventParameterNames));\n    }\n  }\n\n  dispatch(eventMessage: EventMessage): void {\n    const [domainName, method] = splitQualifiedName(eventMessage.method);\n    const dispatcher = this.#dispatchers.get(domainName as ProtocolDomainName);\n    if (!dispatcher) {\n      InspectorBackend.reportProtocolError(\n          `Protocol Error: the message ${eventMessage.method} is for non-existing domain '${domainName}'`,\n          eventMessage);\n      return;\n    }\n    dispatcher.dispatch(method, eventMessage);\n  }\n\n  dispose(_reason: string): void {\n    if (!this.#router) {\n      return;\n    }\n    this.#router.unregisterSession(this.sessionId);\n    this.#router = null;\n  }\n\n  isDisposed(): boolean {\n    return !this.#router;\n  }\n\n  markAsNodeJSForTest(): void {\n    this.needsNodeJSPatching = true;\n  }\n\n  router(): SessionRouter|null {\n    return this.#router;\n  }\n\n  // Agent accessors, keep alphabetically sorted.\n\n  /**\n   * Make sure that `Domain` is only ever instantiated with one protocol domain\n   * name, because if `Domain` allows multiple domains, the type is unsound.\n   */\n  private getAgent<Domain extends ProtocolDomainName>(domain: Domain): ProtocolProxyApi.ProtocolApi[Domain] {\n    const agent = this.#agents.get<Domain>(domain);\n    if (!agent) {\n      throw new Error('Accessing undefined agent');\n    }\n    return agent;\n  }\n\n  accessibilityAgent(): ProtocolProxyApi.AccessibilityApi {\n    return this.getAgent('Accessibility');\n  }\n\n  animationAgent(): ProtocolProxyApi.AnimationApi {\n    return this.getAgent('Animation');\n  }\n\n  auditsAgent(): ProtocolProxyApi.AuditsApi {\n    return this.getAgent('Audits');\n  }\n\n  autofillAgent(): ProtocolProxyApi.AutofillApi {\n    return this.getAgent('Autofill');\n  }\n\n  browserAgent(): ProtocolProxyApi.BrowserApi {\n    return this.getAgent('Browser');\n  }\n\n  backgroundServiceAgent(): ProtocolProxyApi.BackgroundServiceApi {\n    return this.getAgent('BackgroundService');\n  }\n\n  cacheStorageAgent(): ProtocolProxyApi.CacheStorageApi {\n    return this.getAgent('CacheStorage');\n  }\n\n  cssAgent(): ProtocolProxyApi.CSSApi {\n    return this.getAgent('CSS');\n  }\n\n  debuggerAgent(): ProtocolProxyApi.DebuggerApi {\n    return this.getAgent('Debugger');\n  }\n\n  deviceOrientationAgent(): ProtocolProxyApi.DeviceOrientationApi {\n    return this.getAgent('DeviceOrientation');\n  }\n\n  domAgent(): ProtocolProxyApi.DOMApi {\n    return this.getAgent('DOM');\n  }\n\n  domdebuggerAgent(): ProtocolProxyApi.DOMDebuggerApi {\n    return this.getAgent('DOMDebugger');\n  }\n\n  domsnapshotAgent(): ProtocolProxyApi.DOMSnapshotApi {\n    return this.getAgent('DOMSnapshot');\n  }\n\n  domstorageAgent(): ProtocolProxyApi.DOMStorageApi {\n    return this.getAgent('DOMStorage');\n  }\n\n  emulationAgent(): ProtocolProxyApi.EmulationApi {\n    return this.getAgent('Emulation');\n  }\n\n  eventBreakpointsAgent(): ProtocolProxyApi.EventBreakpointsApi {\n    return this.getAgent('EventBreakpoints');\n  }\n\n  extensionsAgent(): ProtocolProxyApi.ExtensionsApi {\n    return this.getAgent('Extensions');\n  }\n\n  fetchAgent(): ProtocolProxyApi.FetchApi {\n    return this.getAgent('Fetch');\n  }\n\n  heapProfilerAgent(): ProtocolProxyApi.HeapProfilerApi {\n    return this.getAgent('HeapProfiler');\n  }\n\n  indexedDBAgent(): ProtocolProxyApi.IndexedDBApi {\n    return this.getAgent('IndexedDB');\n  }\n\n  inputAgent(): ProtocolProxyApi.InputApi {\n    return this.getAgent('Input');\n  }\n\n  ioAgent(): ProtocolProxyApi.IOApi {\n    return this.getAgent('IO');\n  }\n\n  inspectorAgent(): ProtocolProxyApi.InspectorApi {\n    return this.getAgent('Inspector');\n  }\n\n  layerTreeAgent(): ProtocolProxyApi.LayerTreeApi {\n    return this.getAgent('LayerTree');\n  }\n\n  logAgent(): ProtocolProxyApi.LogApi {\n    return this.getAgent('Log');\n  }\n\n  mediaAgent(): ProtocolProxyApi.MediaApi {\n    return this.getAgent('Media');\n  }\n\n  memoryAgent(): ProtocolProxyApi.MemoryApi {\n    return this.getAgent('Memory');\n  }\n\n  networkAgent(): ProtocolProxyApi.NetworkApi {\n    return this.getAgent('Network');\n  }\n\n  overlayAgent(): ProtocolProxyApi.OverlayApi {\n    return this.getAgent('Overlay');\n  }\n\n  pageAgent(): ProtocolProxyApi.PageApi {\n    return this.getAgent('Page');\n  }\n\n  preloadAgent(): ProtocolProxyApi.PreloadApi {\n    return this.getAgent('Preload');\n  }\n\n  profilerAgent(): ProtocolProxyApi.ProfilerApi {\n    return this.getAgent('Profiler');\n  }\n\n  performanceAgent(): ProtocolProxyApi.PerformanceApi {\n    return this.getAgent('Performance');\n  }\n\n  runtimeAgent(): ProtocolProxyApi.RuntimeApi {\n    return this.getAgent('Runtime');\n  }\n\n  securityAgent(): ProtocolProxyApi.SecurityApi {\n    return this.getAgent('Security');\n  }\n\n  serviceWorkerAgent(): ProtocolProxyApi.ServiceWorkerApi {\n    return this.getAgent('ServiceWorker');\n  }\n\n  storageAgent(): ProtocolProxyApi.StorageApi {\n    return this.getAgent('Storage');\n  }\n\n  systemInfo(): ProtocolProxyApi.SystemInfoApi {\n    return this.getAgent('SystemInfo');\n  }\n\n  targetAgent(): ProtocolProxyApi.TargetApi {\n    return this.getAgent('Target');\n  }\n\n  tracingAgent(): ProtocolProxyApi.TracingApi {\n    return this.getAgent('Tracing');\n  }\n\n  webAudioAgent(): ProtocolProxyApi.WebAudioApi {\n    return this.getAgent('WebAudio');\n  }\n\n  webAuthnAgent(): ProtocolProxyApi.WebAuthnApi {\n    return this.getAgent('WebAuthn');\n  }\n\n  // Dispatcher registration and de-registration, keep alphabetically sorted.\n\n  /**\n   * Make sure that `Domain` is only ever instantiated with one protocol domain\n   * name, because if `Domain` allows multiple domains, the type is unsound.\n   */\n  private registerDispatcher<Domain extends ProtocolDomainName>(\n      domain: Domain, dispatcher: ProtocolProxyApi.ProtocolDispatchers[Domain]): void {\n    const manager = this.#dispatchers.get(domain);\n    if (!manager) {\n      return;\n    }\n    manager.addDomainDispatcher(dispatcher);\n  }\n\n  /**\n   * Make sure that `Domain` is only ever instantiated with one protocol domain\n   * name, because if `Domain` allows multiple domains, the type is unsound.\n   */\n  private unregisterDispatcher<Domain extends ProtocolDomainName>(\n      domain: Domain, dispatcher: ProtocolProxyApi.ProtocolDispatchers[Domain]): void {\n    const manager = this.#dispatchers.get(domain);\n    if (!manager) {\n      return;\n    }\n    manager.removeDomainDispatcher(dispatcher);\n  }\n\n  registerAccessibilityDispatcher(dispatcher: ProtocolProxyApi.AccessibilityDispatcher): void {\n    this.registerDispatcher('Accessibility', dispatcher);\n  }\n\n  registerAutofillDispatcher(dispatcher: ProtocolProxyApi.AutofillDispatcher): void {\n    this.registerDispatcher('Autofill', dispatcher);\n  }\n\n  registerAnimationDispatcher(dispatcher: ProtocolProxyApi.AnimationDispatcher): void {\n    this.registerDispatcher('Animation', dispatcher);\n  }\n\n  registerAuditsDispatcher(dispatcher: ProtocolProxyApi.AuditsDispatcher): void {\n    this.registerDispatcher('Audits', dispatcher);\n  }\n\n  registerCSSDispatcher(dispatcher: ProtocolProxyApi.CSSDispatcher): void {\n    this.registerDispatcher('CSS', dispatcher);\n  }\n\n  registerBackgroundServiceDispatcher(dispatcher: ProtocolProxyApi.BackgroundServiceDispatcher): void {\n    this.registerDispatcher('BackgroundService', dispatcher);\n  }\n\n  registerDebuggerDispatcher(dispatcher: ProtocolProxyApi.DebuggerDispatcher): void {\n    this.registerDispatcher('Debugger', dispatcher);\n  }\n\n  unregisterDebuggerDispatcher(dispatcher: ProtocolProxyApi.DebuggerDispatcher): void {\n    this.unregisterDispatcher('Debugger', dispatcher);\n  }\n\n  registerDOMDispatcher(dispatcher: ProtocolProxyApi.DOMDispatcher): void {\n    this.registerDispatcher('DOM', dispatcher);\n  }\n\n  registerDOMStorageDispatcher(dispatcher: ProtocolProxyApi.DOMStorageDispatcher): void {\n    this.registerDispatcher('DOMStorage', dispatcher);\n  }\n\n  registerFetchDispatcher(dispatcher: ProtocolProxyApi.FetchDispatcher): void {\n    this.registerDispatcher('Fetch', dispatcher);\n  }\n\n  registerHeapProfilerDispatcher(dispatcher: ProtocolProxyApi.HeapProfilerDispatcher): void {\n    this.registerDispatcher('HeapProfiler', dispatcher);\n  }\n\n  registerInspectorDispatcher(dispatcher: ProtocolProxyApi.InspectorDispatcher): void {\n    this.registerDispatcher('Inspector', dispatcher);\n  }\n\n  registerLayerTreeDispatcher(dispatcher: ProtocolProxyApi.LayerTreeDispatcher): void {\n    this.registerDispatcher('LayerTree', dispatcher);\n  }\n\n  registerLogDispatcher(dispatcher: ProtocolProxyApi.LogDispatcher): void {\n    this.registerDispatcher('Log', dispatcher);\n  }\n\n  registerMediaDispatcher(dispatcher: ProtocolProxyApi.MediaDispatcher): void {\n    this.registerDispatcher('Media', dispatcher);\n  }\n\n  registerNetworkDispatcher(dispatcher: ProtocolProxyApi.NetworkDispatcher): void {\n    this.registerDispatcher('Network', dispatcher);\n  }\n\n  registerOverlayDispatcher(dispatcher: ProtocolProxyApi.OverlayDispatcher): void {\n    this.registerDispatcher('Overlay', dispatcher);\n  }\n\n  registerPageDispatcher(dispatcher: ProtocolProxyApi.PageDispatcher): void {\n    this.registerDispatcher('Page', dispatcher);\n  }\n\n  registerPreloadDispatcher(dispatcher: ProtocolProxyApi.PreloadDispatcher): void {\n    this.registerDispatcher('Preload', dispatcher);\n  }\n\n  registerProfilerDispatcher(dispatcher: ProtocolProxyApi.ProfilerDispatcher): void {\n    this.registerDispatcher('Profiler', dispatcher);\n  }\n\n  registerRuntimeDispatcher(dispatcher: ProtocolProxyApi.RuntimeDispatcher): void {\n    this.registerDispatcher('Runtime', dispatcher);\n  }\n\n  registerSecurityDispatcher(dispatcher: ProtocolProxyApi.SecurityDispatcher): void {\n    this.registerDispatcher('Security', dispatcher);\n  }\n\n  registerServiceWorkerDispatcher(dispatcher: ProtocolProxyApi.ServiceWorkerDispatcher): void {\n    this.registerDispatcher('ServiceWorker', dispatcher);\n  }\n\n  registerStorageDispatcher(dispatcher: ProtocolProxyApi.StorageDispatcher): void {\n    this.registerDispatcher('Storage', dispatcher);\n  }\n\n  registerTargetDispatcher(dispatcher: ProtocolProxyApi.TargetDispatcher): void {\n    this.registerDispatcher('Target', dispatcher);\n  }\n\n  registerTracingDispatcher(dispatcher: ProtocolProxyApi.TracingDispatcher): void {\n    this.registerDispatcher('Tracing', dispatcher);\n  }\n\n  registerWebAudioDispatcher(dispatcher: ProtocolProxyApi.WebAudioDispatcher): void {\n    this.registerDispatcher('WebAudio', dispatcher);\n  }\n\n  registerWebAuthnDispatcher(dispatcher: ProtocolProxyApi.WebAuthnDispatcher): void {\n    this.registerDispatcher('WebAuthn', dispatcher);\n  }\n\n  getNeedsNodeJSPatching(): boolean {\n    return this.needsNodeJSPatching;\n  }\n}\n\n/**\n * This is a class that serves as the prototype for a domains #agents (every target\n * has it's own set of #agents). The InspectorBackend keeps an instance of this class\n * per domain, and each TargetBase creates its #agents (via Object.create) and installs\n * this instance as prototype.\n *\n * The reasons this is done is so that on the prototypes we can install the implementations\n * of the invoke_enable, etc. methods that the front-end uses.\n */\nclass AgentPrototype {\n  description = '';\n  metadata: Record<string, {parameters: CommandParameter[], description: string, replyArgs: string[]}>;\n  readonly domain: string;\n  target!: TargetBase;\n  constructor(domain: string) {\n    this.domain = domain;\n    this.metadata = {};\n  }\n\n  registerCommand(\n      methodName: UnqualifiedName, parameters: CommandParameter[], replyArgs: string[], description: string): void {\n    const domainAndMethod = qualifyName(this.domain, methodName);\n    this.metadata[domainAndMethod] = {parameters, description, replyArgs};\n\n    function invoke(this: AgentPrototype, request: Object|undefined = {}): Promise<Protocol.ProtocolResponseWithError> {\n      return this.invoke(domainAndMethod, request);\n    }\n\n    // @ts-expect-error Method code generation\n    this['invoke_' + methodName] = invoke;\n  }\n\n  private invoke(method: QualifiedName, request: Object|null): Promise<Protocol.ProtocolResponseWithError> {\n    const router = this.target.router();\n    if (!router) {\n      return Promise.resolve(\n          {result: null, getError: () => `Connection is closed, can\\'t dispatch pending call to ${method}`});\n    }\n\n    return router.sendMessage(this.target.sessionId, this.domain, method, request).then(({error, result}) => {\n      if (error && !test.suppressRequestErrors && error.code !== DevToolsStubErrorCode &&\n          error.code !== GenericErrorCode && error.code !== ConnectionClosedErrorCode) {\n        console.error('Request ' + method + ' failed. ' + JSON.stringify(error));\n      }\n\n      const errorMessage = error?.message;\n      return {...result, getError: () => errorMessage};\n    });\n  }\n}\n\n/**\n * A `DispatcherManager` has a collection of #dispatchers that implement one of the\n * `ProtocolProxyApi.{Foo}Dispatcher` interfaces. Each target uses one of these per\n * domain to manage the registered #dispatchers. The class knows the parameter names\n * of the events via `#eventArgs`, which is a map managed by the inspector back-end\n * so that there is only one map per domain that is shared among all DispatcherManagers.\n */\nclass DispatcherManager<Domain extends ProtocolDomainName> {\n  readonly #eventArgs: ReadonlyEventParameterNames;\n  readonly #dispatchers: Array<ProtocolProxyApi.ProtocolDispatchers[Domain]> = [];\n\n  constructor(eventArgs: ReadonlyEventParameterNames) {\n    this.#eventArgs = eventArgs;\n  }\n\n  addDomainDispatcher(dispatcher: ProtocolProxyApi.ProtocolDispatchers[Domain]): void {\n    this.#dispatchers.push(dispatcher);\n  }\n\n  removeDomainDispatcher(dispatcher: ProtocolProxyApi.ProtocolDispatchers[Domain]): void {\n    const index = this.#dispatchers.indexOf(dispatcher);\n    if (index === -1) {\n      return;\n    }\n    this.#dispatchers.splice(index, 1);\n  }\n\n  dispatch(event: UnqualifiedName, messageObject: EventMessage): void {\n    if (!this.#dispatchers.length) {\n      return;\n    }\n\n    if (!this.#eventArgs.has(messageObject.method)) {\n      InspectorBackend.reportProtocolWarning(\n          `Protocol Warning: Attempted to dispatch an unspecified event '${messageObject.method}'`, messageObject);\n      return;\n    }\n\n    for (let index = 0; index < this.#dispatchers.length; ++index) {\n      const dispatcher = this.#dispatchers[index];\n\n      if (event in dispatcher) {\n        const f = dispatcher[event as string as keyof ProtocolProxyApi.ProtocolDispatchers[Domain]];\n        // @ts-expect-error Can't type check the dispatch.\n        f.call(dispatcher, messageObject.params);\n      }\n    }\n  }\n}\n\nexport const inspectorBackend = new InspectorBackend();\n"]}