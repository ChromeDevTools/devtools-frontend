{"version":3,"file":"NodeURL.js","sourceRoot":"","sources":["../../../../../../front_end/core/protocol_client/NodeURL.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,qBAAqB,CAAC;AAC9C,OAAO,KAAK,IAAI,MAAM,iBAAiB,CAAC;AAGxC,MAAM,OAAO,OAAO;IAClB,MAAM,CAAC,KAAK,CAAC,MAEZ;QACC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAEpB,SAAS,OAAO,CAAC,MAAsB,EAAE,IAAY;YACnD,IAAI,MAAM,CAAC,GAAG,IAAI,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC;gBAC5E,+DAA+D;gBAC/D,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,kBAAkB,CAAC,MAAM,CAAC,GAA0C,CAAC,CAAC;YAChH,CAAC;YACD,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC;gBAC3C,MAAM,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACrB,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACvB,MAAM,SAAS,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC;gBACnC,IAAI,SAAS,KAAK,sBAAsB,IAAI,KAAK,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;oBACxF,OAAO,CACF,KAEC,EACF,SAAS,CAAC,CAAC;gBACjB,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IAED,MAAM,CAAC,cAAc,CAAC,cAAsB,EAAE,SAAkB;QAC9D,IAAI,SAAS,EAAE,CAAC;YACd,MAAM,EAAE,GAAG,uBAAuB,CAAC;YACnC,OAAO,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACjC,CAAC;QACD,OAAO,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;IACnE,CAAC;CACF","sourcesContent":["// Copyright 2018 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as Host from '../host/host.js';\nimport type * as Platform from '../platform/platform.js';\n\nexport class NodeURL {\n  static patch(object: {\n    url?: string,\n  }): void {\n    process(object, '');\n\n    function process(object: {url?: string}, path: string): void {\n      if (object.url && NodeURL.isPlatformPath(object.url, Host.Platform.isWin())) {\n        // object.url can be of both types: RawPathString and UrlString\n        object.url = Common.ParsedURL.ParsedURL.rawPathToUrlString(object.url as Platform.DevToolsPath.RawPathString);\n      }\n      for (const entry of Object.entries(object)) {\n        const key = entry[0];\n        const value = entry[1];\n        const entryPath = path + '.' + key;\n        if (entryPath !== '.result.result.value' && value !== null && typeof value === 'object') {\n          process(\n              (value as {\n                url: string,\n              }),\n              entryPath);\n        }\n      }\n    }\n  }\n\n  static isPlatformPath(fileSystemPath: string, isWindows: boolean): boolean {\n    if (isWindows) {\n      const re = /^([a-z]:[\\/\\\\]|\\\\\\\\)/i;\n      return re.test(fileSystemPath);\n    }\n    return fileSystemPath.length ? fileSystemPath[0] === '/' : false;\n  }\n}\n"]}