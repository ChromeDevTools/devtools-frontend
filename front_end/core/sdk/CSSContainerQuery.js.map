{"version":3,"file":"CSSContainerQuery.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/CSSContainerQuery.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\n\nimport type {CSSModel} from './CSSModel.js';\nimport {CSSQuery} from './CSSQuery.js';\nimport type {DOMNode} from './DOMModel.js';\n\nexport class CSSContainerQuery extends CSSQuery {\n  name?: string;\n  physicalAxes?: Protocol.DOM.PhysicalAxes;\n  logicalAxes?: Protocol.DOM.LogicalAxes;\n  queriesScrollState?: boolean;\n  queriesAnchored?: boolean;\n\n  static parseContainerQueriesPayload(cssModel: CSSModel, payload: Protocol.CSS.CSSContainerQuery[]):\n      CSSContainerQuery[] {\n    return payload.map(cq => new CSSContainerQuery(cssModel, cq));\n  }\n\n  constructor(cssModel: CSSModel, payload: Protocol.CSS.CSSContainerQuery) {\n    super(cssModel);\n    this.reinitialize(payload);\n  }\n\n  reinitialize(payload: Protocol.CSS.CSSContainerQuery): void {\n    this.text = payload.text;\n    this.range = payload.range ? TextUtils.TextRange.TextRange.fromObject(payload.range) : null;\n    this.styleSheetId = payload.styleSheetId;\n    this.name = payload.name;\n    this.physicalAxes = payload.physicalAxes;\n    this.logicalAxes = payload.logicalAxes;\n    this.queriesScrollState = payload.queriesScrollState;\n    this.queriesAnchored = payload.queriesAnchored;\n  }\n\n  active(): boolean {\n    return true;\n  }\n\n  async getContainerForNode(nodeId: Protocol.DOM.NodeId): Promise<CSSContainerQueryContainer|undefined> {\n    const containerNode = await this.cssModel.domModel().getContainerForNode(\n        nodeId, this.name, this.physicalAxes, this.logicalAxes, this.queriesScrollState, this.queriesAnchored);\n    if (!containerNode) {\n      return;\n    }\n    return new CSSContainerQueryContainer(containerNode);\n  }\n}\n\nexport class CSSContainerQueryContainer {\n  readonly containerNode: DOMNode;\n\n  constructor(containerNode: DOMNode) {\n    this.containerNode = containerNode;\n  }\n\n  async getContainerSizeDetails(): Promise<ContainerQueriedSizeDetails|undefined> {\n    const styles = await this.containerNode.domModel().cssModel().getComputedStyle(this.containerNode.id);\n    if (!styles) {\n      return;\n    }\n    const containerType = styles.get('container-type');\n    const writingMode = styles.get('writing-mode');\n    if (!containerType || !writingMode) {\n      return;\n    }\n\n    const queryAxis = getQueryAxisFromContainerType(`${containerType}`);\n    const physicalAxis = getPhysicalAxisFromQueryAxis(queryAxis, writingMode);\n    let width, height;\n    if (physicalAxis === PhysicalAxis.BOTH || physicalAxis === PhysicalAxis.HORIZONTAL) {\n      width = styles.get('width');\n    }\n    if (physicalAxis === PhysicalAxis.BOTH || physicalAxis === PhysicalAxis.VERTICAL) {\n      height = styles.get('height');\n    }\n\n    return {\n      queryAxis,\n      physicalAxis,\n      width,\n      height,\n    };\n  }\n}\n\nexport const getQueryAxisFromContainerType = (propertyValue: string): QueryAxis => {\n  const segments = propertyValue.split(' ');\n  let isInline = false;\n  for (const segment of segments) {\n    if (segment === 'size') {\n      return QueryAxis.BOTH;\n    }\n    isInline = isInline || segment === 'inline-size';\n  }\n  if (isInline) {\n    return QueryAxis.INLINE;\n  }\n  return QueryAxis.NONE;\n};\n\nexport const getPhysicalAxisFromQueryAxis = (queryAxis: QueryAxis, writingMode: string): PhysicalAxis => {\n  const isVerticalWritingMode = writingMode.startsWith('vertical');\n  switch (queryAxis) {\n    case QueryAxis.NONE:\n      return PhysicalAxis.NONE;\n    case QueryAxis.BOTH:\n      return PhysicalAxis.BOTH;\n    case QueryAxis.INLINE:\n      return isVerticalWritingMode ? PhysicalAxis.VERTICAL : PhysicalAxis.HORIZONTAL;\n    case QueryAxis.BLOCK:\n      return isVerticalWritingMode ? PhysicalAxis.HORIZONTAL : PhysicalAxis.VERTICAL;\n  }\n};\n\nexport interface ContainerQueriedSizeDetails {\n  queryAxis: QueryAxis;\n  physicalAxis: PhysicalAxis;\n  width?: string;\n  height?: string;\n}\n\nexport const enum QueryAxis {\n  NONE = '',\n  INLINE = 'inline-size',\n  BLOCK = 'block-size',\n  BOTH = 'size',\n}\n\nexport const enum PhysicalAxis {\n  NONE = '',\n  HORIZONTAL = 'Horizontal',\n  VERTICAL = 'Vertical',\n  BOTH = 'Both',\n}\n"]}