{"version":3,"file":"CSSMedia.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/CSSMedia.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2016 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\n\nimport type {CSSModel} from './CSSModel.js';\nimport {CSSQuery} from './CSSQuery.js';\n\nexport class CSSMediaQuery {\n  readonly #active: boolean;\n  readonly #expressions: CSSMediaQueryExpression[]|null;\n  constructor(payload: Protocol.CSS.MediaQuery) {\n    this.#active = payload.active;\n    this.#expressions = [];\n    for (let j = 0; j < payload.expressions.length; ++j) {\n      this.#expressions.push(CSSMediaQueryExpression.parsePayload(payload.expressions[j]));\n    }\n  }\n\n  static parsePayload(payload: Protocol.CSS.MediaQuery): CSSMediaQuery {\n    return new CSSMediaQuery(payload);\n  }\n\n  active(): boolean {\n    return this.#active;\n  }\n\n  expressions(): CSSMediaQueryExpression[]|null {\n    return this.#expressions;\n  }\n}\n\nexport class CSSMediaQueryExpression {\n  readonly #value: number;\n  readonly #unit: string;\n  readonly #feature: string;\n  readonly #valueRange: TextUtils.TextRange.TextRange|null;\n  readonly #computedLength: number|null;\n  constructor(payload: Protocol.CSS.MediaQueryExpression) {\n    this.#value = payload.value;\n    this.#unit = payload.unit;\n    this.#feature = payload.feature;\n    this.#valueRange = payload.valueRange ? TextUtils.TextRange.TextRange.fromObject(payload.valueRange) : null;\n    this.#computedLength = payload.computedLength || null;\n  }\n\n  static parsePayload(payload: Protocol.CSS.MediaQueryExpression): CSSMediaQueryExpression {\n    return new CSSMediaQueryExpression(payload);\n  }\n\n  value(): number {\n    return this.#value;\n  }\n\n  unit(): string {\n    return this.#unit;\n  }\n\n  feature(): string {\n    return this.#feature;\n  }\n\n  valueRange(): TextUtils.TextRange.TextRange|null {\n    return this.#valueRange;\n  }\n\n  computedLength(): number|null {\n    return this.#computedLength;\n  }\n}\n\nexport class CSSMedia extends CSSQuery {\n  source?: Protocol.CSS.CSSMediaSource;\n  sourceURL?: string;\n  mediaList?: CSSMediaQuery[]|null;\n\n  static parseMediaArrayPayload(cssModel: CSSModel, payload: Protocol.CSS.CSSMedia[]): CSSMedia[] {\n    return payload.map(mq => new CSSMedia(cssModel, mq));\n  }\n\n  constructor(cssModel: CSSModel, payload: Protocol.CSS.CSSMedia) {\n    super(cssModel);\n    this.reinitialize(payload);\n  }\n\n  reinitialize(payload: Protocol.CSS.CSSMedia): void {\n    this.text = payload.text;\n    this.source = payload.source;\n    this.sourceURL = payload.sourceURL || '';\n    this.range = payload.range ? TextUtils.TextRange.TextRange.fromObject(payload.range) : null;\n    this.styleSheetId = payload.styleSheetId;\n    this.mediaList = null;\n    if (payload.mediaList) {\n      this.mediaList = [];\n      for (let i = 0; i < payload.mediaList.length; ++i) {\n        this.mediaList.push(CSSMediaQuery.parsePayload(payload.mediaList[i]));\n      }\n    }\n  }\n\n  active(): boolean {\n    if (!this.mediaList) {\n      return true;\n    }\n    for (let i = 0; i < this.mediaList.length; ++i) {\n      if (this.mediaList[i].active()) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nexport const Source = {\n  LINKED_SHEET: 'linkedSheet',\n  INLINE_SHEET: 'inlineSheet',\n  MEDIA_RULE: 'mediaRule',\n  IMPORT_RULE: 'importRule',\n};\n"]}