{"version":3,"file":"CSSProperty.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/CSSProperty.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,KAAK,SAAS,MAAM,uCAAuC,CAAC;AACnE,OAAO,KAAK,MAAM,MAAM,qBAAqB,CAAC;AAC9C,OAAO,KAAK,UAAU,MAAM,iBAAiB,CAAC;AAC9C,OAAO,KAAK,QAAQ,MAAM,yBAAyB,CAAC;AACpD,OAAO,KAAK,IAAI,MAAM,iBAAiB,CAAC;AAGxC,OAAO,EAAC,WAAW,EAAE,gBAAgB,EAAC,MAAM,kBAAkB,CAAC;AAE/D,OAAO,EAGL,gBAAgB,EAEhB,aAAa,EACd,MAAM,wBAAwB,CAAC;AAChC,OAAO,EAAC,qBAAqB,EAAE,WAAW,EAAC,MAAM,gCAAgC,CAAC;AAWlF,MAAM,OAAO,WAAY,SAAQ,MAAM,CAAC,aAAa,CAAC,aAAyB;IAC7E,UAAU,CAAsB;IAChC,KAAK,CAAS;IACd,IAAI,CAAS;IACb,KAAK,CAAS;IACd,SAAS,CAAU;IACnB,QAAQ,CAAU;IAClB,QAAQ,CAAU;IAClB,QAAQ,CAAU;IAClB,IAAI,CAAwB;IAC5B,KAAK,CAAqC;IAC1C,OAAO,GAAG,IAAI,CAAC;IACf,UAAU,GAAuC,IAAI,CAAC;IACtD,WAAW,GAAuC,IAAI,CAAC;IACvD,cAAc,CAAmC;IACjD,mBAAmB,GAAkB,EAAE,CAAC;IAExC,YACI,UAA+B,EAAE,KAAa,EAAE,IAAY,EAAE,KAAa,EAAE,SAAkB,EAC/F,QAAiB,EAAE,QAAiB,EAAE,QAAiB,EAAE,IAAkB,EAAE,KAAgC,EAC7G,kBAA+C;QACjD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,CAAE,6DAA6D;QACxF,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAE5E,IAAI,kBAAkB,IAAI,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACxD,KAAK,MAAM,QAAQ,IAAI,kBAAkB,EAAE,CAAC;gBAC1C,IAAI,CAAC,mBAAmB,CAAC,IAAI,CACzB,IAAI,WAAW,CAAC,UAAU,EAAE,EAAE,KAAK,EAAE,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;YAChH,CAAC;QACH,CAAC;aAAM,CAAC;YACN,iEAAiE;YACjE,oEAAoE;YACpE,sEAAsE;YACtE,uDAAuD;YACvD,MAAM,aAAa,GAAG,WAAW,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YACvD,KAAK,MAAM,YAAY,IAAI,aAAa,IAAI,EAAE,EAAE,CAAC;gBAC/C,IAAI,CAAC,mBAAmB,CAAC,IAAI,CACzB,IAAI,WAAW,CAAC,UAAU,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;YACnG,CAAC;QACH,CAAC;IACH,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,UAA+B,EAAE,KAAa,EAAE,OAAiC;QACnG,8DAA8D;QAC9D,mBAAmB;QACnB,iBAAiB;QACjB,kBAAkB;QAClB,kBAAkB;QAClB,MAAM,MAAM,GAAG,IAAI,WAAW,CAC1B,UAAU,EAAE,KAAK,EAAE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,SAAS,IAAI,KAAK,EAAE,OAAO,CAAC,QAAQ,IAAI,KAAK,EACrG,CAAC,UAAU,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,IAAI,EACnG,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,kBAAkB,CAAC,CAAC;QAC/C,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,eAAe,CAAC,UAAkB,EAAE,aAA+B,EAAE,cAAwC;QAE3G,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC,CAAC;IAChG,CAAC;IAED,UAAU,CAAC,aAA+B,EAAE,cAAwC;QAClF,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC,CAAC;IAChG,CAAC;IAED,SAAS,CAAC,aAA+B,EAAE,cAAwC;QACjF,MAAM,QAAQ,GAAG,aAAa,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;QAEjF,QAAQ,CAAC,IAAI,CAAC,IAAI,qBAAqB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,CAAC;QAC9D,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,CAAC;YACtD,QAAQ,CAAC,IAAI,CAAC,IAAI,WAAW,EAAE,CAAC,CAAC;QACnC,CAAC;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEO,YAAY;QAClB,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACxC,OAAO;QACT,CAAC;QACD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACzB,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACnE,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,EAAE,CAAC;YACpB,OAAO;QACT,CAAC;QAED,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClD,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxD,IAAI,SAAS,KAAK,CAAC,CAAC,IAAI,UAAU,KAAK,CAAC,CAAC,IAAI,SAAS,GAAG,UAAU,EAAE,CAAC;YACpE,OAAO;QACT,CAAC;QAED,MAAM,eAAe,GAAG,IAAI,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACzF,MAAM,gBAAgB,GAAG,IAAI,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAE5F,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,EAAE,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;QAChG,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,EAAE,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;QAElG,SAAS,MAAM,CAAC,YAA2C,EAAE,UAAkB,EAAE,YAAoB;YAEnG,IAAI,YAAY,CAAC,SAAS,KAAK,CAAC,EAAE,CAAC;gBACjC,YAAY,CAAC,WAAW,IAAI,YAAY,CAAC;gBACzC,YAAY,CAAC,SAAS,IAAI,YAAY,CAAC;YACzC,CAAC;YACD,YAAY,CAAC,SAAS,IAAI,UAAU,CAAC;YACrC,YAAY,CAAC,OAAO,IAAI,UAAU,CAAC;YACnC,OAAO,YAAY,CAAC;QACtB,CAAC;IACH,CAAC;IAED,SAAS;QACP,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,UAAU;QACR,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,MAAM,CAAC,IAAU;QACf,IAAI,IAAI,CAAC,UAAU,CAAC,YAAY,KAAK,IAAI,CAAC,YAAY,EAAE,CAAC;YACvD,OAAO;QACT,CAAC;QACD,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC5E,CAAC;IACH,CAAC;IAED,SAAS,CAAC,MAAe;QACvB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAED,IAAI,YAAY;QACd,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;YAC5B,OAAO,IAAI,CAAC,IAAI,CAAC;QACnB,CAAC;QAED,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,EAAE,CAAC;YACrB,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,OAAO,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC;IACrF,CAAC;IAED,aAAa;QACX,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,YAAoB,EAAE,WAAoB,EAAE,SAAmB;QAC3E,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;YACrB,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;QAChD,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC;YAClC,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACvC,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;YAC1C,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACxC,CAAC;QAED,IAAI,WAAW,EAAE,CAAC;YAChB,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;YAClF,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,cAAc,EAAE,EAAE,CAAC;gBACjD,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,iCAAiC,CAAC,CAAC;YACtG,CAAC;YAED,IAAI,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC/B,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;YACzF,CAAC;QACH,CAAC;QAED,IAAI,SAAS,IAAI,YAAY,KAAK,IAAI,CAAC,YAAY,EAAE,CAAC;YACpD,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,CAAC,iBAAiB,CAAC,CAAC,WAAW,CAAC,CAAC;YACtE,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QACxG,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YACzC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC;QAClF,MAAM,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAChH,MAAM,IAAI,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;QACpE,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC;QACtG,MAAM,SAAS,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,YAAY,EAAE,WAAW,EAAE,cAAc,CAAC,CAAC;QAC3F,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IAC/D,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,SAAiB,EAAE,WAAmB,EAAE,cAAsB;QACrF,MAAM,YAAY,GAAG,WAAW,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,WAAW,CAAC;QAChF,IAAI,WAAW,EAAE,CAAC;YAChB,WAAW,GAAG,IAAI,GAAG,WAAW,CAAC;QACnC,CAAC;QACD,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,cAAc,GAAG,KAAK,CAAC;QAC3B,IAAI,SAAS,GAAG,KAAK,CAAC;QACtB,MAAM,QAAQ,GAAG,SAAS,CAAC,eAAe,CAAC,kBAAkB,EAAE,CAAC;QAEhE,MAAM,QAAQ,CAAC,IAAI,GAAG,SAAS,GAAG,GAAG,EAAE,YAAY,CAAC,CAAC;QACrD,IAAI,cAAc,EAAE,CAAC;YACnB,MAAM,IAAI,YAAY,CAAC;QACzB,CAAC;QACD,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QAC1D,OAAO,MAAM,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,GAAG,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QAE3D,SAAS,YAAY,CAAC,KAAa,EAAE,SAAsB;YACzD,IAAI,CAAC,cAAc,EAAE,CAAC;gBACpB,MAAM,gBAAgB,GAAG,SAAS,EAAE,QAAQ,CAAC,SAAS,CAAC,IAAI,kBAAkB,CAAC,KAAK,CAAC,CAAC;gBACrF,MAAM,eAAe,GACjB,CAAC,SAAS,EAAE,QAAQ,CAAC,KAAK,CAAC,IAAI,SAAS,EAAE,QAAQ,CAAC,QAAQ,CAAC,IAAI,SAAS,EAAE,QAAQ,CAAC,MAAM,CAAC;oBAC1F,SAAS,EAAE,QAAQ,CAAC,UAAU,CAAC;oBAC/B,CAAC,SAAS,EAAE,QAAQ,CAAC,cAAc,CAAC,IAAI,SAAS,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC;gBACvF,IAAI,gBAAgB,EAAE,CAAC;oBACrB,MAAM,GAAG,MAAM,CAAC,OAAO,EAAE,GAAG,WAAW,GAAG,KAAK,CAAC;gBAClD,CAAC;qBAAM,IAAI,eAAe,EAAE,CAAC;oBAC3B,cAAc,GAAG,IAAI,CAAC;oBACtB,YAAY,GAAG,KAAK,CAAC;gBACvB,CAAC;qBAAM,IAAI,KAAK,KAAK,GAAG,IAAI,SAAS,EAAE,CAAC;oBACtC,MAAM,IAAI,KAAK,CAAC;oBAChB,IAAI,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,SAAS,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC;wBACtD,SAAS,GAAG,KAAK,KAAK,GAAG,CAAC;oBAC5B,CAAC;gBACH,CAAC;gBACD,IAAI,KAAK,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;oBAChC,SAAS,GAAG,KAAK,CAAC;gBACpB,CAAC;gBACD,OAAO;YACT,CAAC;YAED,IAAI,KAAK,KAAK,GAAG,IAAI,KAAK,KAAK,GAAG,EAAE,CAAC;gBACnC,0DAA0D;gBAC1D,gEAAgE;gBAChE,uDAAuD;gBACvD,wDAAwD;gBACxD,gEAAgE;gBAChE,MAAM,mBAAmB,GAAG,YAAY,CAAC,IAAI,EAAE,CAAC;gBAChD,MAAM,GAAG,MAAM,CAAC,OAAO,EAAE,GAAG,WAAW,GAAG,mBAAmB,GAAG,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;oBAC1G,KAAK,CAAC;gBACV,SAAS,GAAG,KAAK,CAAC;gBAClB,cAAc,GAAG,KAAK,CAAC;gBACvB,YAAY,GAAG,EAAE,CAAC;gBAClB,OAAO;YACT,CAAC;YACD,IAAI,WAAW,EAAE,CAAC,0BAA0B,CAAC,YAAY,CAAC,EAAE,CAAC;gBAC3D,MAAM,SAAS,GAAG,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC/C,IAAI,SAAS,IAAI,SAAS,CAAC,KAAK,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;oBAChF,YAAY,GAAG,YAAY,CAAC,OAAO,EAAE,GAAG,IAAI,GAAG,YAAY,CAAC;gBAC9D,CAAC;YACH,CAAC;YACD,IAAI,CAAC,YAAY,IAAI,KAAK,KAAK,GAAG,EAAE,CAAC;gBACnC,YAAY,GAAG,YAAY,CAAC;YAC9B,CAAC;YACD,YAAY,IAAI,KAAK,CAAC;QACxB,CAAC;QAED,SAAS,kBAAkB,CAAC,IAAY;YACtC,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAChC,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE,CAAC;gBACjB,OAAO,KAAK,CAAC;YACf,CAAC;YACD,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;YACrD,OAAO,WAAW,EAAE,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;QACvD,CAAC;IACH,CAAC;IAEO,iBAAiB,CAAC,IAAY;QACpC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACrB,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,OAAO,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACxD,CAAC;IAED,QAAQ,CAAC,QAAgB,EAAE,WAAoB,EAAE,SAAkB,EAAE,YAAwC;QAC3G,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,QAAQ,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC;QACvF,KAAK,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACrE,CAAC;IAED,4EAA4E;IAC5E,aAAa,CAAC,KAAa;QACzB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,wBAAwB,sDAA4B,CAAC;IAC5D,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,QAAiB;QACjC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;YACrB,OAAO,KAAK,CAAC;QACf,CAAC;QACD,IAAI,QAAQ,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC/B,OAAO,IAAI,CAAC;QACd,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YACf,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QACtC,gGAAgG;QAChG,yFAAyF;QACzF,gGAAgG;QAChG,4BAA4B;QAC5B,MAAM,wBAAwB,GAAG,CAAC,YAAoB,EAAU,EAAE,CAC9D,YAAY,GAAG,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAC3D,IAAI,IAAY,CAAC;QACjB,IAAI,QAAQ,EAAE,CAAC;YACb,iGAAiG;YACjG,2FAA2F;YAC3F,kGAAkG;YAClG,2FAA2F;YAC3F,IAAI,GAAG,KAAK,GAAG,wBAAwB,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,GAAG,KAAK,CAAC;QAC/E,CAAC;aAAM,CAAC;YACN,IAAI,GAAG,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QAC1F,CAAC;QACD,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAC9C,CAAC;IAED;;OAEG;IACH,oCAAoC,CAAC,aAA8C;QACjF,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACtC,CAAC;IAED;;OAEG;IACH,kCAAkC;QAChC,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAED,qBAAqB;QACnB,OAAO,IAAI,CAAC,mBAAmB,CAAC;IAClC,CAAC;CACF","sourcesContent":["// Copyright 2016 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Common from '../common/common.js';\nimport * as HostModule from '../host/host.js';\nimport * as Platform from '../platform/platform.js';\nimport * as Root from '../root/root.js';\n\nimport type {CSSMatchedStyles} from './CSSMatchedStyles.js';\nimport {cssMetadata, GridAreaRowRegex} from './CSSMetadata.js';\nimport type {Edit} from './CSSModel.js';\nimport {\n  type BottomUpTreeMatching,\n  type Match,\n  matchDeclaration,\n  type Matcher,\n  stripComments\n} from './CSSPropertyParser.js';\nimport {CSSWideKeywordMatcher, FontMatcher} from './CSSPropertyParserMatchers.js';\nimport type {CSSStyleDeclaration} from './CSSStyleDeclaration.js';\n\nexport const enum Events {\n  LOCAL_VALUE_UPDATED = 'localValueUpdated',\n}\n\nexport interface EventTypes {\n  [Events.LOCAL_VALUE_UPDATED]: void;\n}\n\nexport class CSSProperty extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  ownerStyle: CSSStyleDeclaration;\n  index: number;\n  name: string;\n  value: string;\n  important: boolean;\n  disabled: boolean;\n  parsedOk: boolean;\n  implicit: boolean;\n  text: string|null|undefined;\n  range: TextUtils.TextRange.TextRange|null;\n  #active = true;\n  #nameRange: TextUtils.TextRange.TextRange|null = null;\n  #valueRange: TextUtils.TextRange.TextRange|null = null;\n  #invalidString?: Common.UIString.LocalizedString;\n  #longhandProperties: CSSProperty[] = [];\n\n  constructor(\n      ownerStyle: CSSStyleDeclaration, index: number, name: string, value: string, important: boolean,\n      disabled: boolean, parsedOk: boolean, implicit: boolean, text?: string|null, range?: Protocol.CSS.SourceRange,\n      longhandProperties?: Protocol.CSS.CSSProperty[]) {\n    super();\n    this.ownerStyle = ownerStyle;\n    this.index = index;\n    this.name = name;\n    this.value = value;\n    this.important = important;\n    this.disabled = disabled;\n    this.parsedOk = parsedOk;\n    this.implicit = implicit;  // A longhand, implicitly set by missing values of shorthand.\n    this.text = text;\n    this.range = range ? TextUtils.TextRange.TextRange.fromObject(range) : null;\n\n    if (longhandProperties && longhandProperties.length > 0) {\n      for (const property of longhandProperties) {\n        this.#longhandProperties.push(\n            new CSSProperty(ownerStyle, ++index, property.name, property.value, important, disabled, parsedOk, true));\n      }\n    } else {\n      // Blink would not parse shorthands containing 'var()' functions:\n      // https://drafts.csswg.org/css-variables/#variables-in-shorthands).\n      // Therefore we manually check if the current property is a shorthand,\n      // and fills its longhand components with empty values.\n      const longhandNames = cssMetadata().getLonghands(name);\n      for (const longhandName of longhandNames || []) {\n        this.#longhandProperties.push(\n            new CSSProperty(ownerStyle, ++index, longhandName, '', important, disabled, parsedOk, true));\n      }\n    }\n  }\n\n  static parsePayload(ownerStyle: CSSStyleDeclaration, index: number, payload: Protocol.CSS.CSSProperty): CSSProperty {\n    // The following default field values are used in the payload:\n    // important: false\n    // parsedOk: true\n    // implicit: false\n    // disabled: false\n    const result = new CSSProperty(\n        ownerStyle, index, payload.name, payload.value, payload.important || false, payload.disabled || false,\n        ('parsedOk' in payload) ? Boolean(payload.parsedOk) : true, Boolean(payload.implicit), payload.text,\n        payload.range, payload.longhandProperties);\n    return result;\n  }\n\n  parseExpression(expression: string, matchedStyles: CSSMatchedStyles, computedStyles: Map<string, string>|null):\n      BottomUpTreeMatching|null {\n    if (!this.parsedOk) {\n      return null;\n    }\n\n    return matchDeclaration(this.name, expression, this.#matchers(matchedStyles, computedStyles));\n  }\n\n  parseValue(matchedStyles: CSSMatchedStyles, computedStyles: Map<string, string>|null): BottomUpTreeMatching|null {\n    if (!this.parsedOk) {\n      return null;\n    }\n\n    return matchDeclaration(this.name, this.value, this.#matchers(matchedStyles, computedStyles));\n  }\n\n  #matchers(matchedStyles: CSSMatchedStyles, computedStyles: Map<string, string>|null): Array<Matcher<Match>> {\n    const matchers = matchedStyles.propertyMatchers(this.ownerStyle, computedStyles);\n\n    matchers.push(new CSSWideKeywordMatcher(this, matchedStyles));\n    if (Root.Runtime.experiments.isEnabled('font-editor')) {\n      matchers.push(new FontMatcher());\n    }\n    return matchers;\n  }\n\n  private ensureRanges(): void {\n    if (this.#nameRange && this.#valueRange) {\n      return;\n    }\n    const range = this.range;\n    const text = this.text ? new TextUtils.Text.Text(this.text) : null;\n    if (!range || !text) {\n      return;\n    }\n\n    const nameIndex = text.value().indexOf(this.name);\n    const valueIndex = text.value().lastIndexOf(this.value);\n    if (nameIndex === -1 || valueIndex === -1 || nameIndex > valueIndex) {\n      return;\n    }\n\n    const nameSourceRange = new TextUtils.TextRange.SourceRange(nameIndex, this.name.length);\n    const valueSourceRange = new TextUtils.TextRange.SourceRange(valueIndex, this.value.length);\n\n    this.#nameRange = rebase(text.toTextRange(nameSourceRange), range.startLine, range.startColumn);\n    this.#valueRange = rebase(text.toTextRange(valueSourceRange), range.startLine, range.startColumn);\n\n    function rebase(oneLineRange: TextUtils.TextRange.TextRange, lineOffset: number, columnOffset: number):\n        TextUtils.TextRange.TextRange {\n      if (oneLineRange.startLine === 0) {\n        oneLineRange.startColumn += columnOffset;\n        oneLineRange.endColumn += columnOffset;\n      }\n      oneLineRange.startLine += lineOffset;\n      oneLineRange.endLine += lineOffset;\n      return oneLineRange;\n    }\n  }\n\n  nameRange(): TextUtils.TextRange.TextRange|null {\n    this.ensureRanges();\n    return this.#nameRange;\n  }\n\n  valueRange(): TextUtils.TextRange.TextRange|null {\n    this.ensureRanges();\n    return this.#valueRange;\n  }\n\n  rebase(edit: Edit): void {\n    if (this.ownerStyle.styleSheetId !== edit.styleSheetId) {\n      return;\n    }\n    if (this.range) {\n      this.range = this.range.rebaseAfterTextEdit(edit.oldRange, edit.newRange);\n    }\n  }\n\n  setActive(active: boolean): void {\n    this.#active = active;\n  }\n\n  get propertyText(): string|null {\n    if (this.text !== undefined) {\n      return this.text;\n    }\n\n    if (this.name === '') {\n      return '';\n    }\n    return this.name + ': ' + this.value + (this.important ? ' !important' : '') + ';';\n  }\n\n  activeInStyle(): boolean {\n    return this.#active;\n  }\n\n  async setText(propertyText: string, majorChange: boolean, overwrite?: boolean): Promise<boolean> {\n    if (!this.ownerStyle) {\n      throw new Error('No ownerStyle for property');\n    }\n\n    if (!this.ownerStyle.styleSheetId) {\n      throw new Error('No owner style id');\n    }\n\n    if (!this.range || !this.ownerStyle.range) {\n      throw new Error('Style not editable');\n    }\n\n    if (majorChange) {\n      HostModule.userMetrics.actionTaken(HostModule.UserMetrics.Action.StyleRuleEdited);\n      if (this.ownerStyle.parentRule?.isKeyframeRule()) {\n        HostModule.userMetrics.actionTaken(HostModule.UserMetrics.Action.StylePropertyInsideKeyframeEdited);\n      }\n\n      if (this.name.startsWith('--')) {\n        HostModule.userMetrics.actionTaken(HostModule.UserMetrics.Action.CustomPropertyEdited);\n      }\n    }\n\n    if (overwrite && propertyText === this.propertyText) {\n      this.ownerStyle.cssModel().domModel().markUndoableState(!majorChange);\n      return true;\n    }\n\n    const range = this.range.relativeTo(this.ownerStyle.range.startLine, this.ownerStyle.range.startColumn);\n    const indentation = this.ownerStyle.cssText ?\n        this.detectIndentation(this.ownerStyle.cssText) :\n        Common.Settings.Settings.instance().moduleSetting('text-editor-indent').get();\n    const endIndentation = this.ownerStyle.cssText ? indentation.substring(0, this.ownerStyle.range.endColumn) : '';\n    const text = new TextUtils.Text.Text(this.ownerStyle.cssText || '');\n    const newStyleText = text.replaceRange(range, Platform.StringUtilities.sprintf(';%s;', propertyText));\n    const styleText = await CSSProperty.formatStyle(newStyleText, indentation, endIndentation);\n    return await this.ownerStyle.setText(styleText, majorChange);\n  }\n\n  static async formatStyle(styleText: string, indentation: string, endIndentation: string): Promise<string> {\n    const doubleIndent = indentation.substring(endIndentation.length) + indentation;\n    if (indentation) {\n      indentation = '\\n' + indentation;\n    }\n    let result = '';\n    let propertyName = '';\n    let propertyText = '';\n    let insideProperty = false;\n    let needsSemi = false;\n    const tokenize = TextUtils.CodeMirrorUtils.createCssTokenizer();\n\n    await tokenize('*{' + styleText + '}', processToken);\n    if (insideProperty) {\n      result += propertyText;\n    }\n    result = result.substring(2, result.length - 1).trimEnd();\n    return result + (indentation ? '\\n' + endIndentation : '');\n\n    function processToken(token: string, tokenType: string|null): void {\n      if (!insideProperty) {\n        const disabledProperty = tokenType?.includes('comment') && isDisabledProperty(token);\n        const isPropertyStart =\n            (tokenType?.includes('def') || tokenType?.includes('string') || tokenType?.includes('meta') ||\n             tokenType?.includes('property') ||\n             (tokenType?.includes('variableName') && tokenType !== ('variableName.function')));\n        if (disabledProperty) {\n          result = result.trimEnd() + indentation + token;\n        } else if (isPropertyStart) {\n          insideProperty = true;\n          propertyText = token;\n        } else if (token !== ';' || needsSemi) {\n          result += token;\n          if (token.trim() && !(tokenType?.includes('comment'))) {\n            needsSemi = token !== ';';\n          }\n        }\n        if (token === '{' && !tokenType) {\n          needsSemi = false;\n        }\n        return;\n      }\n\n      if (token === '}' || token === ';') {\n        // While `propertyText` can generally be trimmed, doing so\n        // breaks valid CSS declarations such as `--foo:  ;` which would\n        // then produce invalid CSS of the form `--foo:;`. This\n        // implementation takes special care to restore a single\n        // whitespace token in this edge case. https://crbug.com/1071296\n        const trimmedPropertyText = propertyText.trim();\n        result = result.trimEnd() + indentation + trimmedPropertyText + (trimmedPropertyText.endsWith(':') ? ' ' : '') +\n            token;\n        needsSemi = false;\n        insideProperty = false;\n        propertyName = '';\n        return;\n      }\n      if (cssMetadata().isGridAreaDefiningProperty(propertyName)) {\n        const rowResult = GridAreaRowRegex.exec(token);\n        if (rowResult && rowResult.index === 0 && !propertyText.trimEnd().endsWith(']')) {\n          propertyText = propertyText.trimEnd() + '\\n' + doubleIndent;\n        }\n      }\n      if (!propertyName && token === ':') {\n        propertyName = propertyText;\n      }\n      propertyText += token;\n    }\n\n    function isDisabledProperty(text: string): boolean {\n      const colon = text.indexOf(':');\n      if (colon === -1) {\n        return false;\n      }\n      const propertyName = text.substring(2, colon).trim();\n      return cssMetadata().isCSSPropertyName(propertyName);\n    }\n  }\n\n  private detectIndentation(text: string): string {\n    const lines = text.split('\\n');\n    if (lines.length < 2) {\n      return '';\n    }\n    return TextUtils.TextUtils.Utils.lineIndent(lines[1]);\n  }\n\n  setValue(newValue: string, majorChange: boolean, overwrite: boolean, userCallback?: ((arg0: boolean) => void)): void {\n    const text = this.name + ': ' + newValue + (this.important ? ' !important' : '') + ';';\n    void this.setText(text, majorChange, overwrite).then(userCallback);\n  }\n\n  // Updates the value stored locally and emits an event to signal its update.\n  setLocalValue(value: string): void {\n    this.value = value;\n    this.dispatchEventToListeners(Events.LOCAL_VALUE_UPDATED);\n  }\n\n  async setDisabled(disabled: boolean): Promise<boolean> {\n    if (!this.ownerStyle) {\n      return false;\n    }\n    if (disabled === this.disabled) {\n      return true;\n    }\n    if (!this.text) {\n      return true;\n    }\n    const propertyText = this.text.trim();\n    // Ensure that if we try to enable/disable a property that has no semicolon (which is only legal\n    // in the last position of a css rule), we add it. This ensures that if we then later try\n    // to re-enable/-disable the rule, we end up with legal syntax (if the user adds more properties\n    // after the disabled rule).\n    const appendSemicolonIfMissing = (propertyText: string): string =>\n        propertyText + (propertyText.endsWith(';') ? '' : ';');\n    let text: string;\n    if (disabled) {\n      // We remove comments before wrapping comment tags around propertyText, because otherwise it will\n      // create an unmatched trailing `*/`, making the text invalid. This will result in disabled\n      // CSSProperty losing its original comments, but since escaping comments will result in the parser\n      // to completely ignore and then lose this declaration, this is the best compromise so far.\n      text = '/* ' + appendSemicolonIfMissing(stripComments(propertyText)) + ' */';\n    } else {\n      text = appendSemicolonIfMissing(this.text.substring(2, propertyText.length - 2).trim());\n    }\n    return await this.setText(text, true, true);\n  }\n\n  /**\n   * This stores the warning string when a CSS Property is improperly parsed.\n   */\n  setDisplayedStringForInvalidProperty(invalidString: Common.UIString.LocalizedString): void {\n    this.#invalidString = invalidString;\n  }\n\n  /**\n   * Retrieve the warning string for a screen reader to announce when editing the property.\n   */\n  getInvalidStringForInvalidProperty(): Common.UIString.LocalizedString|undefined {\n    return this.#invalidString;\n  }\n\n  getLonghandProperties(): CSSProperty[] {\n    return this.#longhandProperties;\n  }\n}\n"]}