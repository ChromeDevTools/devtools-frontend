{"version":3,"file":"CSSPropertyParserMatchers.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/CSSPropertyParserMatchers.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable @devtools/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as CodeMirror from '../../third_party/codemirror.next/codemirror.next.js';\n\nimport type {CSSMatchedStyles, CSSValueSource, CSSVariableValue} from './CSSMatchedStyles.js';\nimport {\n  CSSMetadata,\n  cssMetadata,\n  type CSSWideKeyword,\n  CubicBezierKeywordValues,\n} from './CSSMetadata.js';\nimport type {CSSProperty} from './CSSProperty.js';\nimport {\n  ASTUtils,\n  type BottomUpTreeMatching,\n  type Match,\n  matchDeclaration,\n  matcherBase,\n  type SyntaxTree,\n  tokenizeDeclaration\n} from './CSSPropertyParser.js';\nimport type {CSSStyleDeclaration} from './CSSStyleDeclaration.js';\n\nexport class BaseVariableMatch implements Match {\n  constructor(\n      readonly text: string,\n      readonly node: CodeMirror.SyntaxNode,\n      readonly name: string,\n      readonly fallback: CodeMirror.SyntaxNode[]|undefined,\n      readonly matching: BottomUpTreeMatching,\n      readonly computedTextCallback: (match: BaseVariableMatch, matching: BottomUpTreeMatching) => string | null,\n  ) {\n  }\n\n  computedText(): string|null {\n    return this.computedTextCallback(this, this.matching);\n  }\n\n  fallbackValue(): string|null {\n    // Fallback can be missing but it can be also be empty: var(--v,)\n    if (!this.fallback) {\n      return null;\n    }\n    if (this.fallback.length === 0) {\n      return '';\n    }\n    if (this.matching.hasUnresolvedSubstitutionsRange(this.fallback[0], this.fallback[this.fallback.length - 1])) {\n      return null;\n    }\n    return this.matching.getComputedTextRange(this.fallback[0], this.fallback[this.fallback.length - 1]);\n  }\n}\n\n// This matcher provides matching for var() functions and basic computedText support. Computed text is resolved by a\n// callback. This matcher is intended to be used directly only in environments where CSSMatchedStyles is not available.\n// A more ergonomic version of this matcher exists in VariableMatcher, which uses CSSMatchedStyles to correctly resolve\n// variable references automatically.\n// clang-format off\nexport class BaseVariableMatcher extends matcherBase(BaseVariableMatch) {\n  // clang-format on\n  readonly #computedTextCallback: (match: BaseVariableMatch, matching: BottomUpTreeMatching) => string | null;\n  constructor(computedTextCallback: (match: BaseVariableMatch, matching: BottomUpTreeMatching) => string | null) {\n    super();\n    this.#computedTextCallback = computedTextCallback;\n  }\n\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): BaseVariableMatch|null {\n    const callee = node.getChild('Callee');\n    if (node.name !== 'CallExpression' || !callee || (matching.ast.text(callee) !== 'var')) {\n      return null;\n    }\n\n    const args = ASTUtils.callArgs(node).map(args => Array.from(ASTUtils.stripComments(args)));\n    if (args.length < 1 || args[0].length !== 1) {\n      return null;\n    }\n    const nameNode = args[0][0];\n    const fallback = args.length === 2 ? args[1] : undefined;\n\n    if (nameNode?.name !== 'VariableName') {\n      return null;\n    }\n\n    const varName = matching.ast.text(nameNode);\n    if (!varName.startsWith('--')) {\n      return null;\n    }\n\n    return new BaseVariableMatch(\n        matching.ast.text(node), node, varName, fallback, matching, this.#computedTextCallback);\n  }\n}\n\nexport class VariableMatch extends BaseVariableMatch {\n  constructor(\n      text: string,\n      node: CodeMirror.SyntaxNode,\n      name: string,\n      fallback: CodeMirror.SyntaxNode[]|undefined,\n      matching: BottomUpTreeMatching,\n      readonly matchedStyles: CSSMatchedStyles,\n      readonly style: CSSStyleDeclaration,\n  ) {\n    super(text, node, name, fallback, matching, () => this.resolveVariable()?.value ?? this.fallbackValue());\n  }\n\n  resolveVariable(): CSSVariableValue|null {\n    return this.matchedStyles.computeCSSVariable(this.style, this.name);\n  }\n}\n\n// clang-format off\nexport class VariableMatcher extends matcherBase(VariableMatch) {\n  // clang-format on\n  constructor(readonly matchedStyles: CSSMatchedStyles, readonly style: CSSStyleDeclaration) {\n    super();\n  }\n\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): VariableMatch|null {\n    const match = new BaseVariableMatcher(() => null).matches(node, matching);\n    return match ?\n        new VariableMatch(\n            match.text, match.node, match.name, match.fallback, match.matching, this.matchedStyles, this.style) :\n        null;\n  }\n}\n\nexport class AttributeMatch extends BaseVariableMatch {\n  constructor(\n      text: string,\n      node: CodeMirror.SyntaxNode,\n      name: string,\n      fallback: CodeMirror.SyntaxNode[]|undefined,\n      matching: BottomUpTreeMatching,\n      readonly type: string|null,\n      readonly isCSSTokens: boolean,\n      readonly isValidType: boolean,\n      readonly rawValue: string|null,\n      readonly substitutionText: string|null,\n      readonly matchedStyles: CSSMatchedStyles,\n      readonly style: CSSStyleDeclaration,\n      computedTextCallback: (match: AttributeMatch, matching: BottomUpTreeMatching) => string | null,\n  ) {\n    super(text, node, name, fallback, matching, (_, matching) => computedTextCallback(this, matching));\n  }\n\n  rawAttributeValue(): string|null {\n    return this.rawValue;\n  }\n\n  cssType(): string {\n    return this.type ?? RAW_STRING_TYPE;\n  }\n\n  resolveAttributeValue(): string|null {\n    return this.matchedStyles.computeAttribute(\n        this.style, this.name, {type: this.cssType(), isCSSTokens: this.isCSSTokens});\n  }\n}\n\nlet cssEvaluationElement: HTMLElement|null = null;\nfunction getCssEvaluationElement(): HTMLElement {\n  const id = 'css-evaluation-element';\n  if (!cssEvaluationElement) {\n    cssEvaluationElement = document.getElementById(id);\n    if (!cssEvaluationElement) {\n      cssEvaluationElement = document.createElement('div');\n      cssEvaluationElement.setAttribute('id', id);\n      cssEvaluationElement.setAttribute('style', 'hidden: true; --evaluation: attr(data-custom-expr type(*))');\n      document.body.appendChild(cssEvaluationElement);\n    }\n  }\n  return cssEvaluationElement;\n}\n\n/**\n * These functions use an element in the frontend to evaluate CSS. The advantage\n * of this is that it is synchronous and doesn't require a CDP method. The\n * disadvantage is it lacks context that would allow substitutions such as\n * `var()` and `calc()` to be resolved correctly, and if the user is doing\n * remote debugging there is a possibility that the CSS behavior is different\n * between the two browser versions. We use it for type checking after\n * substitutions (but not for actual evaluation) and for applying units.\n **/\nexport function localEvalCSS(value: string, type: string): string|null {\n  const element = getCssEvaluationElement();\n  element.setAttribute('data-value', value);\n  element.setAttribute('data-custom-expr', `attr(data-value ${type})`);\n  return element.computedStyleMap().get('--evaluation')?.toString() ?? null;\n}\n\n/**\n * It is important to establish whether a type is valid, because if it is not,\n * the current behavior of blink is to ignore the fallback and parse as a\n * raw string, returning '' if the attribute is not set.\n **/\nexport function isValidCSSType(type: string): boolean {\n  const element = getCssEvaluationElement();\n  element.setAttribute('data-custom-expr', `attr(data-nonexistent ${type}, \"good\")`);\n  return '\"good\"' === (element.computedStyleMap().get('--evaluation')?.toString() ?? null);\n}\n\nexport function defaultValueForCSSType(type: string|null): string|null {\n  const element = getCssEvaluationElement();\n  element.setAttribute('data-custom-expr', `attr(data-nonexistent ${type ?? ''})`);\n  return element.computedStyleMap().get('--evaluation')?.toString() ?? null;\n}\n\nexport const RAW_STRING_TYPE = 'raw-string';\n\n// This matcher provides matching for attr() functions and basic computedText support. Computed text is resolved by a\n// callback.\n// clang-format off\nexport class AttributeMatcher extends matcherBase(AttributeMatch) {\n  // clang-format on\n  constructor(\n      private readonly matchedStyles: CSSMatchedStyles,\n      private readonly style: CSSStyleDeclaration,\n      private readonly computedTextCallback?: (match: AttributeMatch, matching: BottomUpTreeMatching) => string | null,\n\n  ) {\n    super();\n  }\n\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): AttributeMatch|null {\n    const callee = node.getChild('Callee');\n    if (node.name !== 'CallExpression' || !callee || (matching.ast.text(callee) !== 'attr')) {\n      return null;\n    }\n\n    const args = ASTUtils.callArgs(node).map(args => Array.from(ASTUtils.stripComments(args)));\n    if (args.length < 1) {\n      return null;\n    }\n    const nameNode = args[0][0];\n\n    if (args[0].length < 1 || args[0].length > 2 || nameNode?.name !== 'ValueName') {\n      return null;\n    }\n\n    const fallback = args.length === 2 ? args[1] : undefined;\n    let type: string|null = null;\n    let isCSSTokens = false;\n    if (args[0].length === 2) {\n      const typeNode = args[0][1] as CodeMirror.SyntaxNode;\n      type = matching.ast.text(typeNode);\n      if (typeNode.name === 'CallExpression') {\n        if (matching.ast.text(typeNode.getChild('Callee')) !== 'type') {\n          return null;\n        }\n        isCSSTokens = true;\n      } else if (typeNode.name !== 'ValueName' && type !== '%') {\n        return null;\n      }\n    }\n\n    const isValidType = type === null || isValidCSSType(type);\n    isCSSTokens = isCSSTokens && isValidType;\n\n    const attrName = matching.ast.text(nameNode);\n\n    const rawValue = this.matchedStyles.rawAttributeValueFromStyle(this.style, attrName);\n    let substitutionText: string|null = null;\n    if (rawValue !== null) {\n      substitutionText = isCSSTokens ? rawValue : localEvalCSS(rawValue, type ?? RAW_STRING_TYPE);\n    } else if (!fallback) {\n      // In the case of unspecified type, there is a default value\n      substitutionText = defaultValueForCSSType(type);\n    }\n\n    return new AttributeMatch(\n        matching.ast.text(node), node, attrName, fallback, matching, type, isCSSTokens, isValidType, rawValue,\n        substitutionText, this.matchedStyles, this.style, this.computedTextCallback ?? defaultComputeText);\n\n    function defaultComputeText(match: AttributeMatch, _matching: BottomUpTreeMatching): string|null {\n      // Don't fall back if the type is invalid.\n      return match.resolveAttributeValue() ??\n          (isValidType ? match.fallbackValue() : defaultValueForCSSType(match.type));\n    }\n  }\n}\n\nexport class BinOpMatch implements Match {\n  constructor(readonly text: string, readonly node: CodeMirror.SyntaxNode) {\n  }\n}\n\n// clang-format off\nexport class BinOpMatcher extends matcherBase(BinOpMatch) {\n  // clang-format on\n  override accepts(): boolean {\n    return true;\n  }\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): BinOpMatch|null {\n    return node.name === 'BinaryExpression' ? new BinOpMatch(matching.ast.text(node), node) : null;\n  }\n}\n\nexport class TextMatch implements Match {\n  computedText?: () => string;\n  constructor(readonly text: string, readonly node: CodeMirror.SyntaxNode) {\n    if (node.name === 'Comment') {\n      this.computedText = () => '';\n    }\n  }\n  render(): Node[] {\n    const span = document.createElement('span');\n    span.appendChild(document.createTextNode(this.text));\n    return [span];\n  }\n}\n\n// clang-format off\nexport class TextMatcher extends matcherBase(TextMatch) {\n  // clang-format on\n  override accepts(): boolean {\n    return true;\n  }\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): TextMatch|null {\n    if (!node.firstChild || node.name === 'NumberLiteral' /* may have a Unit child */) {\n      // Leaf node, just emit text\n      const text = matching.ast.text(node);\n      if (text.length) {\n        return new TextMatch(text, node);\n      }\n    }\n    return null;\n  }\n}\n\nexport class AngleMatch implements Match {\n  constructor(readonly text: string, readonly node: CodeMirror.SyntaxNode) {\n  }\n\n  computedText(): string {\n    return this.text;\n  }\n}\n\n// clang-format off\nexport class AngleMatcher extends matcherBase(AngleMatch) {\n  // clang-format on\n  override accepts(propertyName: string): boolean {\n    return cssMetadata().isAngleAwareProperty(propertyName);\n  }\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): AngleMatch|null {\n    if (node.name !== 'NumberLiteral') {\n      return null;\n    }\n    const unit = node.getChild('Unit');\n    // TODO(crbug/1138628) handle unitless 0\n    if (!unit || !['deg', 'grad', 'rad', 'turn'].includes(matching.ast.text(unit))) {\n      return null;\n    }\n\n    return new AngleMatch(matching.ast.text(node), node);\n  }\n}\n\nfunction literalToNumber(node: CodeMirror.SyntaxNode, ast: SyntaxTree): number|null {\n  if (node.type.name !== 'NumberLiteral') {\n    return null;\n  }\n  const text = ast.text(node);\n\n  return Number(text.substring(0, text.length - ast.text(node.getChild('Unit')).length));\n}\n\nexport class ColorMixMatch implements Match {\n  constructor(\n      readonly text: string, readonly node: CodeMirror.SyntaxNode, readonly space: CodeMirror.SyntaxNode[],\n      readonly color1: CodeMirror.SyntaxNode[], readonly color2: CodeMirror.SyntaxNode[]) {\n  }\n}\n\n// clang-format off\nexport class ColorMixMatcher extends matcherBase(ColorMixMatch) {\n  // clang-format on\n  override accepts(propertyName: string): boolean {\n    return cssMetadata().isColorAwareProperty(propertyName);\n  }\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): ColorMixMatch|null {\n    if (node.name !== 'CallExpression' || matching.ast.text(node.getChild('Callee')) !== 'color-mix') {\n      return null;\n    }\n\n    const computedValueTree = tokenizeDeclaration('--property', matching.getComputedText(node));\n    if (!computedValueTree) {\n      return null;\n    }\n\n    const value = ASTUtils.declValue(computedValueTree.tree);\n    if (!value) {\n      return null;\n    }\n    const computedValueArgs = ASTUtils.callArgs(value);\n    if (computedValueArgs.length !== 3) {\n      return null;\n    }\n\n    const [space, color1, color2] = computedValueArgs;\n    // Verify that all arguments are there, and that the space starts with a literal `in`.\n    if (space.length < 2 || computedValueTree.text(ASTUtils.stripComments(space).next().value) !== 'in' ||\n        color1.length < 1 || color2.length < 1) {\n      return null;\n    }\n\n    // Verify there's at most one percentage value for each color.\n    const p1 =\n        color1.filter(n => n.type.name === 'NumberLiteral' && computedValueTree.text(n.getChild('Unit')) === '%');\n    const p2 =\n        color2.filter(n => n.type.name === 'NumberLiteral' && computedValueTree.text(n.getChild('Unit')) === '%');\n    if (p1.length > 1 || p2.length > 1) {\n      return null;\n    }\n\n    // Verify that if both colors carry percentages, they aren't both zero (which is an invalid property value).\n    if (p1[0] && p2[0] && (literalToNumber(p1[0], computedValueTree) ?? 0) === 0 &&\n        (literalToNumber(p2[0], computedValueTree) ?? 0) === 0) {\n      return null;\n    }\n\n    const args = ASTUtils.callArgs(node);\n    if (args.length !== 3) {\n      return null;\n    }\n    return new ColorMixMatch(matching.ast.text(node), node, args[0], args[1], args[2]);\n  }\n}\n\n// clang-format off\nexport class URLMatch implements Match {\n  constructor(\n      readonly url: Platform.DevToolsPath.UrlString, readonly text: string, readonly node: CodeMirror.SyntaxNode) {\n  }\n}\n\n// clang-format off\nexport class URLMatcher extends matcherBase(URLMatch) {\n  // clang-format on\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): URLMatch|null {\n    if (node.name !== 'CallLiteral') {\n      return null;\n    }\n    const callee = node.getChild('CallTag');\n    if (!callee || matching.ast.text(callee) !== 'url') {\n      return null;\n    }\n    const [, lparenNode, urlNode, rparenNode] = ASTUtils.siblings(callee);\n    if (matching.ast.text(lparenNode) !== '(' ||\n        (urlNode.name !== 'ParenthesizedContent' && urlNode.name !== 'StringLiteral') ||\n        matching.ast.text(rparenNode) !== ')') {\n      return null;\n    }\n\n    const text = matching.ast.text(urlNode);\n    const url = (urlNode.name === 'StringLiteral' ? text.substr(1, text.length - 2) : text.trim()) as\n        Platform.DevToolsPath.UrlString;\n    return new URLMatch(url, matching.ast.text(node), node);\n  }\n}\n\nexport class LinearGradientMatch implements Match {\n  constructor(readonly text: string, readonly node: CodeMirror.SyntaxNode) {\n  }\n}\n\n// clang-format off\nexport class LinearGradientMatcher extends matcherBase(LinearGradientMatch) {\n  // clang-format on\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): Match|null {\n    const text = matching.ast.text(node);\n    if (node.name === 'CallExpression' && matching.ast.text(node.getChild('Callee')) === 'linear-gradient') {\n      return new LinearGradientMatch(text, node);\n    }\n    return null;\n  }\n  override accepts(propertyName: string): boolean {\n    return ['background', 'background-image', '-webkit-mask-image'].includes(propertyName);\n  }\n}\n\ninterface RelativeColor {\n  colorSpace: Common.Color.Format;\n  baseColor: ColorMatch;\n}\n\nexport class ColorMatch implements Match {\n  computedText: (() => string | null)|undefined;\n  constructor(\n      readonly text: string, readonly node: CodeMirror.SyntaxNode,\n      private readonly currentColorCallback?: () => string | null, readonly relativeColor?: RelativeColor) {\n    this.computedText = currentColorCallback;\n  }\n}\n\n// clang-format off\nexport class ColorMatcher extends matcherBase(ColorMatch) {\n  constructor(private readonly currentColorCallback?: () => string|null) {\n      super();\n  }\n  // clang-format on\n  override accepts(propertyName: string): boolean {\n    return cssMetadata().isColorAwareProperty(propertyName);\n  }\n\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): ColorMatch|null {\n    const text = matching.ast.text(node);\n    if (node.name === 'ColorLiteral') {\n      return new ColorMatch(text, node);\n    }\n    if (node.name === 'ValueName') {\n      if (Common.Color.Nicknames.has(text)) {\n        return new ColorMatch(text, node);\n      }\n      if (text.toLowerCase() === 'currentcolor' && this.currentColorCallback) {\n        const callback = this.currentColorCallback;\n        return new ColorMatch(text, node, () => callback() ?? text);\n      }\n    }\n    if (node.name === 'CallExpression') {\n      const callee = node.getChild('Callee');\n      const colorFunc = matching.ast.text(callee).toLowerCase();\n      if (callee && colorFunc.match(/^(rgba?|hsla?|hwba?|lab|lch|oklab|oklch|color)$/)) {\n        const args = ASTUtils.children(node.getChild('ArgList'));\n        // args are the tokens for the parthesized expression following the function name, so in a well-formed case\n        // should at least contain the open and closing parens.\n        const colorText = args.length >= 2 ? matching.getComputedTextRange(args[0], args[args.length - 1]) : '';\n        // colorText holds the fully substituted parenthesized expression, so colorFunc + colorText is the color\n        // function call.\n        const isRelativeColorSyntax = Boolean(\n            colorText.match(/^[^)]*\\(\\W*from\\W+/) && !matching.hasUnresolvedSubstitutions(node) &&\n            CSS.supports('color', colorFunc + colorText));\n        if (!isRelativeColorSyntax) {\n          return new ColorMatch(text, node);\n        }\n\n        const tokenized = matchDeclaration('--color', '--colorFunc' + colorText, [new ColorMatcher()]);\n        if (!tokenized) {\n          return null;\n        }\n\n        const [colorArgs] = ASTUtils.callArgs(ASTUtils.declValue(tokenized.ast.tree));\n        // getComputedText already removed comments and such, so there must be 5 or 6 args:\n        // rgb(from red c0 c1 c2) or color(from yellow srgb c0 c1 c2)\n        // If any of the C is a calc expression that is a single root node. If the value contains an alpha channel that\n        // is parsed as a BinOp into c2.\n        if (colorArgs.length !== (colorFunc === 'color' ? 6 : 5)) {\n          return null;\n        }\n        const colorSpace = Common.Color.getFormat(colorFunc !== 'color' ? colorFunc : matching.ast.text(colorArgs[2]));\n        if (!colorSpace) {\n          return null;\n        }\n\n        const baseColor = tokenized.getMatch(colorArgs[1]);\n        if (tokenized.ast.text(colorArgs[0]) !== 'from' || !(baseColor instanceof ColorMatch)) {\n          return null;\n        }\n\n        return new ColorMatch(text, node, undefined, {colorSpace, baseColor});\n      }\n    }\n    return null;\n  }\n}\n\nfunction isRelativeColorChannelName(channel: string): channel is Common.Color.ColorChannel {\n  const maybeChannel = channel as Common.Color.ColorChannel;\n  switch (maybeChannel) {\n    case Common.Color.ColorChannel.A:\n    case Common.Color.ColorChannel.ALPHA:\n    case Common.Color.ColorChannel.B:\n    case Common.Color.ColorChannel.C:\n    case Common.Color.ColorChannel.G:\n    case Common.Color.ColorChannel.H:\n    case Common.Color.ColorChannel.L:\n    case Common.Color.ColorChannel.R:\n    case Common.Color.ColorChannel.S:\n    case Common.Color.ColorChannel.W:\n    case Common.Color.ColorChannel.X:\n    case Common.Color.ColorChannel.Y:\n    case Common.Color.ColorChannel.Z:\n      return true;\n  }\n  // This assignment catches missed values in the switch above.\n  const catchFallback: never = maybeChannel;  // eslint-disable-line @typescript-eslint/no-unused-vars\n  return false;\n}\n\nexport class RelativeColorChannelMatch implements Match {\n  constructor(readonly text: Common.Color.ColorChannel, readonly node: CodeMirror.SyntaxNode) {\n  }\n\n  getColorChannelValue(relativeColor: RelativeColor): number|null {\n    const color = Common.Color.parse(relativeColor.baseColor.text)?.as(relativeColor.colorSpace);\n    if (color instanceof Common.Color.ColorFunction) {\n      switch (this.text) {\n        case Common.Color.ColorChannel.R:\n          return color.isXYZ() ? null : color.p0;\n        case Common.Color.ColorChannel.G:\n          return color.isXYZ() ? null : color.p1;\n        case Common.Color.ColorChannel.B:\n          return color.isXYZ() ? null : color.p2;\n        case Common.Color.ColorChannel.X:\n          return color.isXYZ() ? color.p0 : null;\n        case Common.Color.ColorChannel.Y:\n          return color.isXYZ() ? color.p1 : null;\n        case Common.Color.ColorChannel.Z:\n          return color.isXYZ() ? color.p2 : null;\n        case Common.Color.ColorChannel.ALPHA:\n          return color.alpha;\n      }\n    } else if (color instanceof Common.Color.Legacy) {\n      switch (this.text) {\n        case Common.Color.ColorChannel.R:\n          return color.rgba()[0];\n        case Common.Color.ColorChannel.G:\n          return color.rgba()[1];\n        case Common.Color.ColorChannel.B:\n          return color.rgba()[2];\n        case Common.Color.ColorChannel.ALPHA:\n          return color.rgba()[3];\n      }\n    } else if (color && this.text in color) {\n      return color[this.text as keyof typeof color] as number;\n    }\n    return null;\n  }\n\n  computedText(): string {\n    return this.text;\n  }\n}\n\n// clang-format off\nexport class RelativeColorChannelMatcher extends matcherBase(RelativeColorChannelMatch) {\n  // clang-format on\n  override accepts(propertyName: string): boolean {\n    return cssMetadata().isColorAwareProperty(propertyName);\n  }\n\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): RelativeColorChannelMatch|null {\n    const text = matching.ast.text(node);\n    if (node.name === 'ValueName' && isRelativeColorChannelName(text)) {\n      return new RelativeColorChannelMatch(text, node);\n    }\n    return null;\n  }\n}\n\nexport class LightDarkColorMatch implements Match {\n  constructor(\n      readonly text: string, readonly node: CodeMirror.SyntaxNode, readonly light: CodeMirror.SyntaxNode[],\n      readonly dark: CodeMirror.SyntaxNode[], readonly style: CSSStyleDeclaration) {\n  }\n}\n\n// clang-format off\nexport class LightDarkColorMatcher extends matcherBase(LightDarkColorMatch) {\n  // clang-format on\n  constructor(readonly style: CSSStyleDeclaration) {\n    super();\n  }\n  override accepts(propertyName: string): boolean {\n    return cssMetadata().isColorAwareProperty(propertyName);\n  }\n\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): LightDarkColorMatch|null {\n    if (node.name !== 'CallExpression' || matching.ast.text(node.getChild('Callee')) !== 'light-dark') {\n      return null;\n    }\n    const args = ASTUtils.callArgs(node);\n    if (args.length !== 2 || args[0].length === 0 || args[1].length === 0) {\n      return null;\n    }\n    return new LightDarkColorMatch(matching.ast.text(node), node, args[0], args[1], this.style);\n  }\n}\n\nexport class AutoBaseMatch implements Match {\n  constructor(\n      readonly text: string, readonly node: CodeMirror.SyntaxNode, readonly auto: CodeMirror.SyntaxNode[],\n      readonly base: CodeMirror.SyntaxNode[]) {\n  }\n}\n\n// clang-format off\nexport class AutoBaseMatcher extends matcherBase(AutoBaseMatch) {\n  // clang-format on\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): AutoBaseMatch|null {\n    if (node.name !== 'CallExpression' || matching.ast.text(node.getChild('Callee')) !== '-internal-auto-base') {\n      return null;\n    }\n\n    const args = ASTUtils.callArgs(node);\n    if (args.length !== 2 || args[0].length === 0 || args[1].length === 0) {\n      return null;\n    }\n\n    return new AutoBaseMatch(matching.ast.text(node), node, args[0], args[1]);\n  }\n}\n\nexport const enum LinkableNameProperties {\n  ANIMATION = 'animation',\n  ANIMATION_NAME = 'animation-name',\n  FONT_PALETTE = 'font-palette',\n  POSITION_TRY_FALLBACKS = 'position-try-fallbacks',\n  POSITION_TRY = 'position-try',\n}\n\nconst enum AnimationLonghandPart {\n  DIRECTION = 'direction',\n  FILL_MODE = 'fill-mode',\n  PLAY_STATE = 'play-state',\n  ITERATION_COUNT = 'iteration-count',\n  EASING_FUNCTION = 'easing-function',\n}\n\nexport class LinkableNameMatch implements Match {\n  constructor(\n      readonly text: string, readonly node: CodeMirror.SyntaxNode, readonly propertyName: LinkableNameProperties) {\n  }\n}\n\n// clang-format off\nexport class LinkableNameMatcher extends matcherBase(LinkableNameMatch) {\n  // clang-format on\n  private static isLinkableNameProperty(propertyName: string): propertyName is LinkableNameProperties {\n    const names: string[] = [\n      LinkableNameProperties.ANIMATION,\n      LinkableNameProperties.ANIMATION_NAME,\n      LinkableNameProperties.FONT_PALETTE,\n      LinkableNameProperties.POSITION_TRY_FALLBACKS,\n      LinkableNameProperties.POSITION_TRY,\n    ];\n    return names.includes(propertyName);\n  }\n\n  static readonly identifierAnimationLonghandMap = new Map<string, AnimationLonghandPart>(\n      Object.entries({\n        normal: AnimationLonghandPart.DIRECTION,\n        alternate: AnimationLonghandPart.DIRECTION,\n        reverse: AnimationLonghandPart.DIRECTION,\n        'alternate-reverse': AnimationLonghandPart.DIRECTION,\n        none: AnimationLonghandPart.FILL_MODE,\n        forwards: AnimationLonghandPart.FILL_MODE,\n        backwards: AnimationLonghandPart.FILL_MODE,\n        both: AnimationLonghandPart.FILL_MODE,\n        running: AnimationLonghandPart.PLAY_STATE,\n        paused: AnimationLonghandPart.PLAY_STATE,\n        infinite: AnimationLonghandPart.ITERATION_COUNT,\n        linear: AnimationLonghandPart.EASING_FUNCTION,\n        ease: AnimationLonghandPart.EASING_FUNCTION,\n        'ease-in': AnimationLonghandPart.EASING_FUNCTION,\n        'ease-out': AnimationLonghandPart.EASING_FUNCTION,\n        'ease-in-out': AnimationLonghandPart.EASING_FUNCTION,\n        steps: AnimationLonghandPart.EASING_FUNCTION,\n        'step-start': AnimationLonghandPart.EASING_FUNCTION,\n        'step-end': AnimationLonghandPart.EASING_FUNCTION,\n      }),\n  );\n\n  private matchAnimationNameInShorthand(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): LinkableNameMatch|\n      null {\n    // Order is important within each animation definition for distinguishing <keyframes-name> values from other keywords.\n    // When parsing, keywords that are valid for properties other than animation-name\n    // whose values were not found earlier in the shorthand must be accepted for those properties rather than for animation-name.\n    // See the details in: https://w3c.github.io/csswg-drafts/css-animations/#animation.\n    const text = matching.ast.text(node);\n    // This is not a known identifier, so return it as `animation-name`.\n    if (!LinkableNameMatcher.identifierAnimationLonghandMap.has(text)) {\n      return new LinkableNameMatch(text, node, LinkableNameProperties.ANIMATION);\n    }\n    // There can be multiple `animation` declarations splitted by a comma.\n    // So, we find the declaration nodes that are related to the node argument.\n    const declarations = ASTUtils.split(ASTUtils.siblings(ASTUtils.declValue(matching.ast.tree)));\n    const currentDeclarationNodes = declarations.find(\n        declaration => declaration[0].from <= node.from && declaration[declaration.length - 1].to >= node.to);\n    if (!currentDeclarationNodes) {\n      return null;\n    }\n\n    // We reparse here until the node argument since a variable might be\n    // providing a meaningful value such as a timing keyword,\n    // that might change the meaning of the node.\n    const computedText = matching.getComputedTextRange(currentDeclarationNodes[0], node);\n    const tokenized = tokenizeDeclaration('--p', computedText);\n    if (!tokenized) {\n      return null;\n    }\n\n    const identifierCategory =\n        LinkableNameMatcher.identifierAnimationLonghandMap.get(text);  // The category of the node argument\n    for (let itNode: typeof tokenized.tree|null = ASTUtils.declValue(tokenized.tree); itNode?.nextSibling;\n         itNode = itNode.nextSibling) {\n      // Run through all the nodes that come before node argument\n      // and check whether a value in the same category is found.\n      // if so, it means our identifier is an `animation-name` keyword.\n      if (itNode.name === 'ValueName') {\n        const categoryValue = LinkableNameMatcher.identifierAnimationLonghandMap.get(tokenized.text(itNode));\n        if (categoryValue && categoryValue === identifierCategory) {\n          return new LinkableNameMatch(text, node, LinkableNameProperties.ANIMATION);\n        }\n      }\n    }\n\n    return null;\n  }\n\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): LinkableNameMatch|null {\n    const {propertyName} = matching.ast;\n    const text = matching.ast.text(node);\n    const parentNode = node.parent;\n    if (!parentNode) {\n      return null;\n    }\n\n    if (!(propertyName && LinkableNameMatcher.isLinkableNameProperty(propertyName))) {\n      return null;\n    }\n\n    const isParentADeclaration = parentNode.name === 'Declaration';\n    const isInsideVarCall = parentNode.name === 'ArgList' && parentNode.prevSibling?.name === 'Callee' &&\n        matching.ast.text(parentNode.prevSibling) === 'var';\n    const isAParentDeclarationOrVarCall = isParentADeclaration || isInsideVarCall;\n    // `position-try-fallbacks` and `position-try` only accept names with dashed ident.\n    const shouldMatchOnlyVariableName = propertyName === LinkableNameProperties.POSITION_TRY ||\n        propertyName === LinkableNameProperties.POSITION_TRY_FALLBACKS;\n    // We only mark top level nodes or nodes that are inside `var()` expressions as linkable names.\n    if (!propertyName || (node.name !== 'ValueName' && node.name !== 'VariableName') ||\n        !isAParentDeclarationOrVarCall || (node.name === 'ValueName' && shouldMatchOnlyVariableName)) {\n      return null;\n    }\n\n    if (propertyName === 'animation') {\n      return this.matchAnimationNameInShorthand(node, matching);\n    }\n\n    // The assertion here is safe since this matcher only runs for\n    // properties with names inside `LinkableNameProperties` (See the `accepts` function.)\n    return new LinkableNameMatch(text, node, propertyName as LinkableNameProperties);\n  }\n}\n\nexport class BezierMatch implements Match {\n  constructor(readonly text: string, readonly node: CodeMirror.SyntaxNode) {\n  }\n}\n\n// clang-format off\nexport class BezierMatcher extends matcherBase(BezierMatch) {\n  // clang-format on\n  override accepts(propertyName: string): boolean {\n    return cssMetadata().isBezierAwareProperty(propertyName);\n  }\n\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): Match|null {\n    const text = matching.ast.text(node);\n\n    const isCubicBezierKeyword = node.name === 'ValueName' && CubicBezierKeywordValues.has(text);\n    const isCubicBezierOrLinearFunction = node.name === 'CallExpression' &&\n        ['cubic-bezier', 'linear'].includes(matching.ast.text(node.getChild('Callee')));\n\n    if (!isCubicBezierKeyword && !isCubicBezierOrLinearFunction) {\n      return null;\n    }\n    return new BezierMatch(text, node);\n  }\n}\n\nexport class StringMatch implements Match {\n  constructor(readonly text: string, readonly node: CodeMirror.SyntaxNode) {\n  }\n}\n\n// clang-format off\nexport class StringMatcher extends matcherBase(StringMatch) {\n  // clang-format on\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): Match|null {\n    return node.name === 'StringLiteral' ? new StringMatch(matching.ast.text(node), node) : null;\n  }\n}\n\nexport const enum ShadowType {\n  BOX_SHADOW = 'boxShadow',\n  TEXT_SHADOW = 'textShadow',\n}\nexport class ShadowMatch implements Match {\n  constructor(readonly text: string, readonly node: CodeMirror.SyntaxNode, readonly shadowType: ShadowType) {\n  }\n}\n\n// clang-format off\nexport class ShadowMatcher extends matcherBase(ShadowMatch) {\n  // clang-format on\n  override accepts(propertyName: string): boolean {\n    return cssMetadata().isShadowProperty(propertyName);\n  }\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): ShadowMatch|null {\n    if (node.name !== 'Declaration') {\n      return null;\n    }\n    const valueNodes = ASTUtils.siblings(ASTUtils.declValue(node));\n    if (valueNodes.length === 0) {\n      return null;\n    }\n    const valueText = matching.ast.textRange(valueNodes[0], valueNodes[valueNodes.length - 1]);\n    return new ShadowMatch(\n        valueText, node, matching.ast.propertyName === 'text-shadow' ? ShadowType.TEXT_SHADOW : ShadowType.BOX_SHADOW);\n  }\n}\n\nexport class FontMatch implements Match {\n  constructor(readonly text: string, readonly node: CodeMirror.SyntaxNode) {\n  }\n}\n\n// clang-format off\nexport class FontMatcher extends matcherBase(FontMatch) {\n  // clang-format on\n  override accepts(propertyName: string): boolean {\n    return cssMetadata().isFontAwareProperty(propertyName);\n  }\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): Match|null {\n    if (node.name !== 'Declaration') {\n      return null;\n    }\n    const valueNodes = ASTUtils.siblings(ASTUtils.declValue(node));\n    if (valueNodes.length === 0) {\n      return null;\n    }\n    const validNodes = matching.ast.propertyName === 'font-family' ? ['ValueName', 'StringLiteral', 'Comment', ','] :\n                                                                     ['Comment', 'ValueName', 'NumberLiteral'];\n\n    if (valueNodes.some(node => !validNodes.includes(node.name))) {\n      return null;\n    }\n    const valueText = matching.ast.textRange(valueNodes[0], valueNodes[valueNodes.length - 1]);\n    return new FontMatch(valueText, node);\n  }\n}\n\nexport class LengthMatch implements Match {\n  constructor(readonly text: string, readonly node: CodeMirror.SyntaxNode, readonly unit: string) {\n  }\n}\n\n// clang-format off\nexport class LengthMatcher extends matcherBase(LengthMatch) {\n  // clang-format on\n  static readonly LENGTH_UNITS = new Set([\n    'em',    'ex',    'ch',  'cap', 'ic',    'lh',    'rem',   'rex',   'rch',  'rlh',  'ric', 'rcap', 'pt',    'pc',\n    'in',    'cm',    'mm',  'Q',   'vw',    'vh',    'vi',    'vb',    'vmin', 'vmax', 'dvw', 'dvh',  'dvi',   'dvb',\n    'dvmin', 'dvmax', 'svw', 'svh', 'svi',   'svb',   'svmin', 'svmax', 'lvw',  'lvh',  'lvi', 'lvb',  'lvmin', 'lvmax',\n    'cqw',   'cqh',   'cqi', 'cqb', 'cqmin', 'cqmax', 'cqem',  'cqlh',  'cqex', 'cqch', '%'\n  ]);\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): LengthMatch|null {\n    if (node.name !== 'NumberLiteral') {\n      return null;\n    }\n    const unit = matching.ast.text(node.getChild('Unit'));\n    if (!LengthMatcher.LENGTH_UNITS.has(unit)) {\n      return null;\n    }\n    const text = matching.ast.text(node);\n    return new LengthMatch(text, node, unit);\n  }\n}\n\nexport const enum SelectFunction {\n  MIN = 'min',\n  MAX = 'max',\n  CLAMP = 'clamp',\n}\nexport const enum ArithmeticFunction {\n  CALC = 'calc',\n  SIBLING_COUNT = 'sibling-count',\n  SIBLING_INDEX = 'sibling-index',\n}\ntype MathFunction = SelectFunction|ArithmeticFunction;\n\nexport class BaseFunctionMatch<T extends string> implements Match {\n  constructor(\n      readonly text: string, readonly node: CodeMirror.SyntaxNode, readonly func: T,\n      readonly args: CodeMirror.SyntaxNode[][]) {\n  }\n}\n\nexport class MathFunctionMatch extends BaseFunctionMatch<MathFunction> {\n  isArithmeticFunctionCall(): boolean {\n    const func = this.func as ArithmeticFunction;\n    switch (func) {\n      case ArithmeticFunction.CALC:\n      case ArithmeticFunction.SIBLING_COUNT:\n      case ArithmeticFunction.SIBLING_INDEX:\n        return true;\n    }\n    // This assignment catches missed values in the switch above.\n    const catchFallback: never = func;  // eslint-disable-line @typescript-eslint/no-unused-vars\n    return false;\n  }\n}\n\n// clang-format off\nexport class MathFunctionMatcher extends matcherBase(MathFunctionMatch) {\n  // clang-format on\n  private static getFunctionType(callee: string|null): MathFunction|null {\n    const maybeFunc = callee as MathFunction | null;\n    switch (maybeFunc) {\n      case null:\n      case SelectFunction.MIN:\n      case SelectFunction.MAX:\n      case SelectFunction.CLAMP:\n      case ArithmeticFunction.CALC:\n      case ArithmeticFunction.SIBLING_COUNT:\n      case ArithmeticFunction.SIBLING_INDEX:\n        return maybeFunc;\n    }\n    // This assignment catches missed values in the switch above.\n    const catchFallback: never = maybeFunc;  // eslint-disable-line @typescript-eslint/no-unused-vars\n    return null;\n  }\n\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): MathFunctionMatch|null {\n    if (node.name !== 'CallExpression') {\n      return null;\n    }\n    const callee = MathFunctionMatcher.getFunctionType(matching.ast.text(node.getChild('Callee')));\n    if (!callee) {\n      return null;\n    }\n    const args = ASTUtils.callArgs(node);\n    if (args.some(arg => arg.length === 0 || matching.hasUnresolvedSubstitutionsRange(arg[0], arg[arg.length - 1]))) {\n      return null;\n    }\n    const text = matching.ast.text(node);\n    const match = new MathFunctionMatch(text, node, callee, args);\n    if (!match.isArithmeticFunctionCall() && args.length === 0) {\n      return null;\n    }\n    return match;\n  }\n}\n\nexport class CustomFunctionMatch extends BaseFunctionMatch<string> {}\n\n// clang-format off\nexport class CustomFunctionMatcher extends matcherBase(CustomFunctionMatch) {\n  // clang-format on\n\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): CustomFunctionMatch|null {\n    if (node.name !== 'CallExpression') {\n      return null;\n    }\n    const callee = matching.ast.text(node.getChild('VariableName'));\n    if (!callee?.startsWith('--')) {\n      return null;\n    }\n    const args = ASTUtils.callArgs(node);\n    if (args.some(arg => arg.length === 0 || matching.hasUnresolvedSubstitutionsRange(arg[0], arg[arg.length - 1]))) {\n      return null;\n    }\n    const text = matching.ast.text(node);\n    return new CustomFunctionMatch(text, node, callee, args);\n  }\n}\n\nexport const enum LayoutType {\n  FLEX = 'flex',\n  GRID = 'grid',\n  MASONRY = 'masonry'\n}\n\nexport class FlexGridMasonryMatch implements Match {\n  constructor(readonly text: string, readonly node: CodeMirror.SyntaxNode, readonly layoutType: LayoutType) {\n  }\n}\n\n// clang-format off\nexport class FlexGridMasonryMatcher extends matcherBase(FlexGridMasonryMatch) {\n  // clang-format on\n  static readonly FLEX = ['flex', 'inline-flex', 'block flex', 'inline flex'];\n  static readonly GRID = ['grid', 'inline-grid', 'block grid', 'inline grid'];\n  static readonly MASONRY = ['masonry', 'inline-masonry', 'block masonry', 'inline masonry'];\n  override accepts(propertyName: string): boolean {\n    return propertyName === 'display';\n  }\n\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): FlexGridMasonryMatch|null {\n    if (node.name !== 'Declaration') {\n      return null;\n    }\n    const valueNodes = ASTUtils.siblings(ASTUtils.declValue(node));\n    if (valueNodes.length < 1) {\n      return null;\n    }\n    const values = valueNodes.filter(node => node.name !== 'Important')\n                       .map(node => matching.getComputedText(node).trim())\n                       .filter(value => value);\n    const text = values.join(' ');\n    if (FlexGridMasonryMatcher.FLEX.includes(text)) {\n      return new FlexGridMasonryMatch(matching.ast.text(node), node, LayoutType.FLEX);\n    }\n    if (FlexGridMasonryMatcher.GRID.includes(text)) {\n      return new FlexGridMasonryMatch(matching.ast.text(node), node, LayoutType.GRID);\n    }\n    if (FlexGridMasonryMatcher.MASONRY.includes(text)) {\n      return new FlexGridMasonryMatch(matching.ast.text(node), node, LayoutType.MASONRY);\n    }\n    return null;\n  }\n}\n\nexport class GridTemplateMatch implements Match {\n  constructor(readonly text: string, readonly node: CodeMirror.SyntaxNode, readonly lines: CodeMirror.SyntaxNode[][]) {\n  }\n}\n\n// clang-format off\nexport class GridTemplateMatcher extends matcherBase(GridTemplateMatch) {\n  // clang-format on\n  override accepts(propertyName: string): boolean {\n    return cssMetadata().isGridAreaDefiningProperty(propertyName);\n  }\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): GridTemplateMatch|null {\n    if (node.name !== 'Declaration' || matching.hasUnresolvedSubstitutions(node)) {\n      return null;\n    }\n\n    const lines: CodeMirror.SyntaxNode[][] = [];\n    let curLine: CodeMirror.SyntaxNode[] = [];\n    // The following two states are designed to consume different cases of LineNames:\n    // 1. no LineNames in between StringLiterals;\n    // 2. one LineNames in between, which means the LineNames belongs to the current line;\n    // 3. two LineNames in between, which means the second LineNames starts a new line.\n    // `hasLeadingLineNames` tracks if the current row already starts with a LineNames and\n    // with no following StringLiteral yet, which means that the next StringLiteral should\n    // be appended to the same `curLine`, instead of creating a new line.\n    let hasLeadingLineNames = false;\n    // `needClosingLineNames` tracks if the current row can still consume an optional LineNames,\n    // which will decide if we should start a new line or not when a LineNames is encountered.\n    let needClosingLineNames = false;\n    /**\n     * Gather row definitions of [<line-names>? <string> <track-size>? <line-names>?], which\n     * be rendered into separate lines.\n     **/\n    function parseNodes(nodes: CodeMirror.SyntaxNode[], varParsingMode = false): void {\n      for (const curNode of nodes) {\n        if (matching.getMatch(curNode) instanceof BaseVariableMatch) {\n          const computedValueTree = tokenizeDeclaration('--property', matching.getComputedText(curNode));\n          if (!computedValueTree) {\n            continue;\n          }\n          const varNodes = ASTUtils.siblings(ASTUtils.declValue(computedValueTree.tree));\n          if (varNodes.length === 0) {\n            continue;\n          }\n          if ((varNodes[0].name === 'StringLiteral' && !hasLeadingLineNames) ||\n              (varNodes[0].name === 'BracketedValue' && !needClosingLineNames)) {\n            // The variable value either starts with a string, or with a line name that belongs to a new row;\n            // therefore we start a new line with the variable.\n            lines.push(curLine);\n            curLine = [curNode];\n          } else {\n            curLine.push(curNode);\n          }\n          // We parse computed nodes of this variable to correctly advance local states, but\n          // these computed nodes won't be added to the lines.\n          parseNodes(varNodes, true);\n        } else if (curNode.name === 'BinaryExpression') {\n          parseNodes(ASTUtils.siblings(curNode.firstChild));\n        } else if (curNode.name === 'StringLiteral') {\n          if (!varParsingMode) {\n            if (hasLeadingLineNames) {\n              curLine.push(curNode);\n            } else {\n              lines.push(curLine);\n              curLine = [curNode];\n            }\n          }\n          needClosingLineNames = true;\n          hasLeadingLineNames = false;\n        } else if (curNode.name === 'BracketedValue') {\n          if (!varParsingMode) {\n            if (needClosingLineNames) {\n              curLine.push(curNode);\n            } else {\n              lines.push(curLine);\n              curLine = [curNode];\n            }\n          }\n          hasLeadingLineNames = !needClosingLineNames;\n          needClosingLineNames = !needClosingLineNames;\n        } else if (!varParsingMode) {\n          curLine.push(curNode);\n        }\n      }\n    }\n\n    const valueNodes = ASTUtils.siblings(ASTUtils.declValue(node));\n    if (valueNodes.length === 0) {\n      return null;\n    }\n    parseNodes(valueNodes);\n    lines.push(curLine);\n    const valueText = matching.ast.textRange(valueNodes[0], valueNodes[valueNodes.length - 1]);\n    return new GridTemplateMatch(valueText, node, lines.filter(line => line.length > 0));\n  }\n}\nexport class AnchorFunctionMatch implements Match {\n  constructor(readonly text: string, readonly node: CodeMirror.SyntaxNode, readonly functionName: string|null) {\n  }\n}\n\n// clang-format off\nexport class AnchorFunctionMatcher extends matcherBase(AnchorFunctionMatch) {\n  // clang-format on\n  anchorFunction(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): string|null {\n    if (node.name !== 'CallExpression') {\n      return null;\n    }\n    const calleeText = matching.ast.text(node.getChild('Callee'));\n    if (calleeText === 'anchor' || calleeText === 'anchor-size') {\n      return calleeText;\n    }\n    return null;\n  }\n\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): AnchorFunctionMatch|null {\n    if (node.name === 'VariableName') {\n      // Double-dashed anchor reference to be rendered with a link to its matching anchor.\n      let parent = node.parent;\n      if (!parent || parent.name !== 'ArgList') {\n        return null;\n      }\n      parent = parent.parent;\n      if (!parent || !this.anchorFunction(parent, matching)) {\n        return null;\n      }\n      return new AnchorFunctionMatch(matching.ast.text(node), node, null);\n    }\n    const calleeText = this.anchorFunction(node, matching);\n    if (!calleeText) {\n      return null;\n    }\n    // Match if the anchor/anchor-size function implicitly references an anchor.\n    const args = ASTUtils.children(node.getChild('ArgList'));\n    if (calleeText === 'anchor' && args.length <= 2) {\n      return null;\n    }\n    if (args.find(arg => arg.name === 'VariableName')) {\n      // We have an explicit anchor reference, no need to render swatch.\n      return null;\n    }\n    return new AnchorFunctionMatch(matching.ast.text(node), node, calleeText);\n  }\n}\n\n/** For linking `position-anchor: --anchor-name`. **/\nexport class PositionAnchorMatch implements Match {\n  constructor(readonly text: string, readonly matching: BottomUpTreeMatching, readonly node: CodeMirror.SyntaxNode) {\n  }\n}\n\n// clang-format off\nexport class PositionAnchorMatcher extends matcherBase(PositionAnchorMatch) {\n  // clang-format on\n  override accepts(propertyName: string): boolean {\n    return propertyName === 'position-anchor';\n  }\n\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): PositionAnchorMatch|null {\n    if (node.name !== 'VariableName') {\n      return null;\n    }\n\n    const dashedIdentifier = matching.ast.text(node);\n    return new PositionAnchorMatch(dashedIdentifier, matching, node);\n  }\n}\n\nexport class CSSWideKeywordMatch implements Match {\n  constructor(\n      readonly text: CSSWideKeyword, readonly node: CodeMirror.SyntaxNode, readonly property: CSSProperty,\n      readonly matchedStyles: CSSMatchedStyles) {\n  }\n  resolveProperty(): CSSValueSource|null {\n    return this.matchedStyles.resolveGlobalKeyword(this.property, this.text);\n  }\n  computedText?(): string|null {\n    return this.resolveProperty()?.value ?? null;\n  }\n}\n\n// clang-format off\nexport class CSSWideKeywordMatcher extends matcherBase(CSSWideKeywordMatch) {\n  // clang-format on\n  constructor(readonly property: CSSProperty, readonly matchedStyles: CSSMatchedStyles) {\n    super();\n  }\n\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): CSSWideKeywordMatch|null {\n    const parentNode = node.parent;\n    if (node.name !== 'ValueName' || parentNode?.name !== 'Declaration') {\n      return null;\n    }\n\n    if (Array.from(ASTUtils.stripComments(ASTUtils.siblings(ASTUtils.declValue(parentNode))))\n            .some(child => !ASTUtils.equals(child, node))) {\n      return null;\n    }\n\n    const text = matching.ast.text(node);\n    if (!CSSMetadata.isCSSWideKeyword(text)) {\n      return null;\n    }\n\n    return new CSSWideKeywordMatch(text, node, this.property, this.matchedStyles);\n  }\n}\n\nexport class PositionTryMatch implements Match {\n  constructor(\n      readonly text: string, readonly node: CodeMirror.SyntaxNode, readonly preamble: CodeMirror.SyntaxNode[],\n      readonly fallbacks: CodeMirror.SyntaxNode[][]) {\n  }\n}\n\n// clang-format off\nexport class PositionTryMatcher extends matcherBase(PositionTryMatch) {\n  // clang-format on\n  override accepts(propertyName: string): boolean {\n    return propertyName === LinkableNameProperties.POSITION_TRY ||\n        propertyName === LinkableNameProperties.POSITION_TRY_FALLBACKS;\n  }\n\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): PositionTryMatch|null {\n    if (node.name !== 'Declaration') {\n      return null;\n    }\n\n    let preamble: CodeMirror.SyntaxNode[] = [];\n    const valueNodes = ASTUtils.siblings(ASTUtils.declValue(node));\n    const fallbacks = ASTUtils.split(valueNodes);\n    if (matching.ast.propertyName === LinkableNameProperties.POSITION_TRY) {\n      for (const [i, n] of fallbacks[0].entries()) {\n        const computedText = matching.getComputedText(n);\n        if (CSSMetadata.isCSSWideKeyword(computedText)) {\n          return null;\n        }\n        if (CSSMetadata.isPositionTryOrderKeyword(computedText)) {\n          preamble = fallbacks[0].splice(0, i + 1);\n          break;\n        }\n      }\n    }\n\n    const valueText = matching.ast.textRange(valueNodes[0], valueNodes[valueNodes.length - 1]);\n    return new PositionTryMatch(valueText, node, preamble, fallbacks);\n  }\n}\n\nexport class EnvFunctionMatch implements Match {\n  constructor(\n      readonly text: string, readonly node: CodeMirror.SyntaxNode, readonly varName: string,\n      readonly value: string|null, readonly varNameIsValid: boolean) {\n  }\n\n  computedText(): string|null {\n    return this.value;\n  }\n}\n\n// clang-format off\nexport class EnvFunctionMatcher extends matcherBase(EnvFunctionMatch) {\n  // clang-format on\n  constructor(readonly matchedStyles: CSSMatchedStyles) {\n    super();\n  }\n\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): EnvFunctionMatch|null {\n    if (node.name !== 'CallExpression' || matching.ast.text(node.getChild('Callee')) !== 'env') {\n      return null;\n    }\n\n    const [valueNodes, ...fallbackNodes] = ASTUtils.callArgs(node);\n    if (!valueNodes?.length) {\n      return null;\n    }\n\n    const fallbackValue =\n        fallbackNodes.length > 0 ? matching.getComputedTextRange(...ASTUtils.range(fallbackNodes.flat())) : undefined;\n    const varName = matching.getComputedTextRange(...ASTUtils.range(valueNodes)).trim();\n    const value = this.matchedStyles.environmentVariable(varName);\n\n    return new EnvFunctionMatch(matching.ast.text(node), node, varName, value ?? fallbackValue ?? null, Boolean(value));\n  }\n}\n"]}