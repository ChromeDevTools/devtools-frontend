{"version":3,"file":"CSSStyleDeclaration.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/CSSStyleDeclaration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2016 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\n\nimport {cssMetadata} from './CSSMetadata.js';\nimport type {CSSModel, Edit} from './CSSModel.js';\nimport {CSSProperty} from './CSSProperty.js';\nimport type {CSSRule} from './CSSRule.js';\nimport type {Target} from './Target.js';\n\nexport class CSSStyleDeclaration {\n  readonly #cssModel: CSSModel;\n  parentRule: CSSRule|null;\n  #allProperties: CSSProperty[] = [];\n  styleSheetId?: Protocol.CSS.StyleSheetId;\n  range: TextUtils.TextRange.TextRange|null = null;\n  cssText?: string;\n  #shorthandValues = new Map<string, string>();\n  #shorthandIsImportant = new Set<string>();\n  #activePropertyMap = new Map<string, CSSProperty>();\n  #leadingProperties: CSSProperty[]|null = null;\n  type: Type;\n  // For CSSStyles coming from animations,\n  // This holds the name of the animation.\n  #animationName?: string;\n  constructor(\n      cssModel: CSSModel, parentRule: CSSRule|null, payload: Protocol.CSS.CSSStyle, type: Type,\n      animationName?: string) {\n    this.#cssModel = cssModel;\n    this.parentRule = parentRule;\n    this.#reinitialize(payload);\n    this.type = type;\n    this.#animationName = animationName;\n  }\n\n  rebase(edit: Edit): void {\n    if (this.styleSheetId !== edit.styleSheetId || !this.range) {\n      return;\n    }\n    if (edit.oldRange.equal(this.range)) {\n      this.#reinitialize((edit.payload as Protocol.CSS.CSSStyle));\n    } else {\n      this.range = this.range.rebaseAfterTextEdit(edit.oldRange, edit.newRange);\n      for (let i = 0; i < this.#allProperties.length; ++i) {\n        this.#allProperties[i].rebase(edit);\n      }\n    }\n  }\n\n  animationName(): string|undefined {\n    return this.#animationName;\n  }\n\n  #reinitialize(payload: Protocol.CSS.CSSStyle): void {\n    this.styleSheetId = payload.styleSheetId;\n    this.range = payload.range ? TextUtils.TextRange.TextRange.fromObject(payload.range) : null;\n\n    const shorthandEntries = payload.shorthandEntries;\n    this.#shorthandValues = new Map();\n    this.#shorthandIsImportant = new Set();\n    for (let i = 0; i < shorthandEntries.length; ++i) {\n      this.#shorthandValues.set(shorthandEntries[i].name, shorthandEntries[i].value);\n      if (shorthandEntries[i].important) {\n        this.#shorthandIsImportant.add(shorthandEntries[i].name);\n      }\n    }\n\n    this.#allProperties = [];\n\n    if (payload.cssText && this.range) {\n      const longhands = [];\n      for (const cssProperty of payload.cssProperties) {\n        const range = cssProperty.range;\n        if (!range) {\n          continue;\n        }\n        const parsedProperty = CSSProperty.parsePayload(this, this.#allProperties.length, cssProperty);\n        this.#allProperties.push(parsedProperty);\n        for (const longhand of parsedProperty.getLonghandProperties()) {\n          longhands.push(longhand);\n        }\n      }\n      for (const longhand of longhands) {\n        longhand.index = this.#allProperties.length;\n        this.#allProperties.push(longhand);\n      }\n    } else {\n      for (const cssProperty of payload.cssProperties) {\n        this.#allProperties.push(CSSProperty.parsePayload(this, this.#allProperties.length, cssProperty));\n      }\n    }\n\n    this.#generateSyntheticPropertiesIfNeeded();\n    this.#computeInactiveProperties();\n\n    // TODO(changhaohan): verify if this #activePropertyMap is still necessary, or if it is\n    // providing different information against the activeness in #allProperties.\n    this.#activePropertyMap = new Map();\n    for (const property of this.#allProperties) {\n      if (!property.activeInStyle()) {\n        continue;\n      }\n      this.#activePropertyMap.set(property.name, property);\n    }\n\n    this.cssText = payload.cssText;\n    this.#leadingProperties = null;\n  }\n\n  #generateSyntheticPropertiesIfNeeded(): void {\n    if (this.range) {\n      return;\n    }\n\n    if (!this.#shorthandValues.size) {\n      return;\n    }\n\n    const propertiesSet = new Set<string>();\n    for (const property of this.#allProperties) {\n      propertiesSet.add(property.name);\n    }\n\n    const generatedProperties = [];\n    // For style-based properties, generate #shorthands with values when possible.\n    for (const property of this.#allProperties) {\n      // For style-based properties, try generating #shorthands.\n      const shorthands = cssMetadata().getShorthands(property.name) || [];\n      for (const shorthand of shorthands) {\n        if (propertiesSet.has(shorthand)) {\n          continue;\n        }  // There already is a shorthand this #longhand falls under.\n        const shorthandValue = this.#shorthandValues.get(shorthand);\n        if (!shorthandValue) {\n          continue;\n        }  // Never generate synthetic #shorthands when no value is available.\n\n        // Generate synthetic shorthand we have a value for.\n        const shorthandImportance = Boolean(this.#shorthandIsImportant.has(shorthand));\n        const shorthandProperty = new CSSProperty(\n            this, this.allProperties().length, shorthand, shorthandValue, shorthandImportance, false, true, false);\n        generatedProperties.push(shorthandProperty);\n        propertiesSet.add(shorthand);\n      }\n    }\n    this.#allProperties = this.#allProperties.concat(generatedProperties);\n  }\n\n  #computeLeadingProperties(): CSSProperty[] {\n    function propertyHasRange(property: CSSProperty): boolean {\n      return Boolean(property.range);\n    }\n\n    if (this.range) {\n      return this.#allProperties.filter(propertyHasRange);\n    }\n\n    const leadingProperties = [];\n    for (const property of this.#allProperties) {\n      const shorthands = cssMetadata().getShorthands(property.name) || [];\n      let belongToAnyShorthand = false;\n      for (const shorthand of shorthands) {\n        if (this.#shorthandValues.get(shorthand)) {\n          belongToAnyShorthand = true;\n          break;\n        }\n      }\n      if (!belongToAnyShorthand) {\n        leadingProperties.push(property);\n      }\n    }\n\n    return leadingProperties;\n  }\n\n  leadingProperties(): CSSProperty[] {\n    if (!this.#leadingProperties) {\n      this.#leadingProperties = this.#computeLeadingProperties();\n    }\n    return this.#leadingProperties;\n  }\n\n  target(): Target {\n    return this.#cssModel.target();\n  }\n\n  cssModel(): CSSModel {\n    return this.#cssModel;\n  }\n\n  #computeInactiveProperties(): void {\n    const activeProperties = new Map<string, CSSProperty>();\n    // The order of the properties are:\n    // 1. regular property, including shorthands\n    // 2. longhand components from shorthands, in the order of their shorthands.\n    const processedLonghands = new Set();\n    for (const property of this.#allProperties) {\n      const metadata = cssMetadata();\n      const canonicalName = metadata.canonicalPropertyName(property.name);\n      if (property.disabled || !property.parsedOk) {\n        if (!property.disabled && metadata.isCustomProperty(property.name)) {\n          // Variable declarations that aren't parsedOk still \"overload\" other previous active declarations.\n          activeProperties.get(canonicalName)?.setActive(false);\n          activeProperties.delete(canonicalName);\n        }\n        property.setActive(false);\n        continue;\n      }\n      if (processedLonghands.has(property)) {\n        continue;\n      }\n      for (const longhand of property.getLonghandProperties()) {\n        const activeLonghand = activeProperties.get(longhand.name);\n        if (!activeLonghand) {\n          activeProperties.set(longhand.name, longhand);\n        } else if (!activeLonghand.important || longhand.important) {\n          activeLonghand.setActive(false);\n          activeProperties.set(longhand.name, longhand);\n        } else {\n          longhand.setActive(false);\n        }\n        processedLonghands.add(longhand);\n      }\n\n      const activeProperty = activeProperties.get(canonicalName);\n      if (!activeProperty) {\n        activeProperties.set(canonicalName, property);\n      } else if (!activeProperty.important || property.important) {\n        activeProperty.setActive(false);\n        activeProperties.set(canonicalName, property);\n      } else {\n        property.setActive(false);\n      }\n    }\n  }\n\n  allProperties(): CSSProperty[] {\n    return this.#allProperties;\n  }\n\n  hasActiveProperty(name: string): boolean {\n    return this.#activePropertyMap.has(name);\n  }\n\n  getPropertyValue(name: string): string {\n    const property = this.#activePropertyMap.get(name);\n    return property ? property.value : '';\n  }\n\n  isPropertyImplicit(name: string): boolean {\n    const property = this.#activePropertyMap.get(name);\n    return property ? property.implicit : false;\n  }\n\n  propertyAt(index: number): CSSProperty|null {\n    return (index < this.allProperties().length) ? this.allProperties()[index] : null;\n  }\n\n  pastLastSourcePropertyIndex(): number {\n    for (let i = this.allProperties().length - 1; i >= 0; --i) {\n      if (this.allProperties()[i].range) {\n        return i + 1;\n      }\n    }\n    return 0;\n  }\n\n  #insertionRange(index: number): TextUtils.TextRange.TextRange {\n    const property = this.propertyAt(index);\n    if (property?.range) {\n      return property.range.collapseToStart();\n    }\n    if (!this.range) {\n      throw new Error('CSSStyleDeclaration.range is null');\n    }\n    return this.range.collapseToEnd();\n  }\n\n  newBlankProperty(index?: number): CSSProperty {\n    index = (typeof index === 'undefined') ? this.pastLastSourcePropertyIndex() : index;\n    const property = new CSSProperty(this, index, '', '', false, false, true, false, '', this.#insertionRange(index));\n    return property;\n  }\n\n  setText(text: string, majorChange: boolean): Promise<boolean> {\n    if (!this.range || !this.styleSheetId) {\n      return Promise.resolve(false);\n    }\n    return this.#cssModel.setStyleText(this.styleSheetId, this.range, text, majorChange);\n  }\n\n  insertPropertyAt(index: number, name: string, value: string, userCallback?: ((arg0: boolean) => void)): void {\n    void this.newBlankProperty(index).setText(name + ': ' + value + ';', false, true).then(userCallback);\n  }\n\n  appendProperty(name: string, value: string, userCallback?: ((arg0: boolean) => void)): void {\n    this.insertPropertyAt(this.allProperties().length, name, value, userCallback);\n  }\n}\n\nexport enum Type {\n  /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n  Regular = 'Regular',\n  Inline = 'Inline',\n  Attributes = 'Attributes',\n  Pseudo = 'Pseudo',  // This type is for style declarations generated by devtools\n  Transition = 'Transition',\n  Animation = 'Animation',\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n"]}