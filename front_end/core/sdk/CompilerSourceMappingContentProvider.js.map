{"version":3,"file":"CompilerSourceMappingContentProvider.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/CompilerSourceMappingContentProvider.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,SAAS,MAAM,uCAAuC,CAAC;AAEnE,OAAO,KAAK,IAAI,MAAM,iBAAiB,CAAC;AAGxC,OAAO,EAAC,kBAAkB,EAAiC,MAAM,yBAAyB,CAAC;AAE3F,MAAM,SAAS,GAAG;IAChB;;;;OAIG;IACH,wBAAwB,EAAE,0CAA0C;CAC5D,CAAC;AAEX,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,kDAAkD,EAAE,SAAS,CAAC,CAAC;AACxG,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAEtE,MAAM,OAAO,oCAAoC;IACtC,UAAU,CAAkC;IAC5C,YAAY,CAAmC;IAC/C,UAAU,CAA4B;IAE/C,YACI,SAA0C,EAAE,WAA6C,EACzF,SAAoC;QACtC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAC9B,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,kBAAkB;QACtB,IAAI,CAAC;YACH,MAAM,EAAC,OAAO,EAAC,GAAG,MAAM,kBAAkB,CAAC,QAAQ,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;YACrG,OAAO,IAAI,SAAS,CAAC,WAAW,CAAC,WAAW,CACxC,OAAO,EAAE,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC,CAAC;QAC5E,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,MAAM,KAAK,GAAG,UAAU,CAAC,SAAS,CAAC,wBAAwB,EAAE,EAAC,GAAG,EAAE,IAAI,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC,OAAO,EAAC,CAAC,CAAC;YACrG,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACrB,OAAO,EAAC,KAAK,EAAC,CAAC;QACjB,CAAC;IACH,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,KAAa,EAAE,aAAsB,EAAE,OAAgB;QAE3E,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACpD,OAAO,SAAS,CAAC,SAAS,CAAC,0BAA0B,CAAC,WAAW,EAAE,KAAK,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;IACpG,CAAC;CACF","sourcesContent":["// Copyright 2011 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport type * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\nimport type * as Platform from '../platform/platform.js';\n\nimport {PageResourceLoader, type PageResourceLoadInitiator} from './PageResourceLoader.js';\n\nconst UIStrings = {\n  /**\n   * @description Error message when failing to fetch a resource referenced in a source map\n   * @example {https://example.com/sourcemap.map} PH1\n   * @example {An error occurred} PH2\n   */\n  couldNotLoadContentForSS: 'Could not load content for {PH1} ({PH2})',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/CompilerSourceMappingContentProvider.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class CompilerSourceMappingContentProvider implements TextUtils.ContentProvider.ContentProvider {\n  readonly #sourceURL: Platform.DevToolsPath.UrlString;\n  readonly #contentType: Common.ResourceType.ResourceType;\n  readonly #initiator: PageResourceLoadInitiator;\n\n  constructor(\n      sourceURL: Platform.DevToolsPath.UrlString, contentType: Common.ResourceType.ResourceType,\n      initiator: PageResourceLoadInitiator) {\n    this.#sourceURL = sourceURL;\n    this.#contentType = contentType;\n    this.#initiator = initiator;\n  }\n\n  contentURL(): Platform.DevToolsPath.UrlString {\n    return this.#sourceURL;\n  }\n\n  contentType(): Common.ResourceType.ResourceType {\n    return this.#contentType;\n  }\n\n  async requestContentData(): Promise<TextUtils.ContentData.ContentDataOrError> {\n    try {\n      const {content} = await PageResourceLoader.instance().loadResource(this.#sourceURL, this.#initiator);\n      return new TextUtils.ContentData.ContentData(\n          content, /* isBase64=*/ false, this.#contentType.canonicalMimeType());\n    } catch (e) {\n      const error = i18nString(UIStrings.couldNotLoadContentForSS, {PH1: this.#sourceURL, PH2: e.message});\n      console.error(error);\n      return {error};\n    }\n  }\n\n  async searchInContent(query: string, caseSensitive: boolean, isRegex: boolean):\n      Promise<TextUtils.ContentProvider.SearchMatch[]> {\n    const contentData = await this.requestContentData();\n    return TextUtils.TextUtils.performSearchInContentData(contentData, query, caseSensitive, isRegex);\n  }\n}\n"]}