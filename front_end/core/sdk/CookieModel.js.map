{"version":3,"file":"CookieModel.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/CookieModel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2017 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Common from '../common/common.js';\nimport * as Platform from '../platform/platform.js';\nimport * as Root from '../root/root.js';\n\nimport {type Attribute, Cookie} from './Cookie.js';\nimport {Events as NetworkManagerEvents, NetworkManager} from './NetworkManager.js';\nimport type {Resource} from './Resource.js';\nimport {Events as ResourceTreeModelEvents, ResourceTreeModel} from './ResourceTreeModel.js';\nimport {SDKModel} from './SDKModel.js';\nimport {Capability, type Target} from './Target.js';\n\nexport class CookieModel extends SDKModel<EventTypes> {\n  readonly #blockedCookies = new Map<string, Cookie>();\n  readonly #cookieToBlockedReasons = new Map<Cookie, BlockedReason[]>();\n  readonly #refreshThrottler = new Common.Throttler.Throttler(300);\n  #cookies = new Map<string, Cookie[]>();\n\n  constructor(target: Target) {\n    super(target);\n\n    target.model(ResourceTreeModel)\n        ?.addEventListener(ResourceTreeModelEvents.PrimaryPageChanged, this.#onPrimaryPageChanged, this);\n    target.model(NetworkManager)\n        ?.addEventListener(NetworkManagerEvents.ResponseReceived, this.#onResponseReceived, this);\n    target.model(NetworkManager)?.addEventListener(NetworkManagerEvents.LoadingFinished, this.#onLoadingFinished, this);\n  }\n\n  addBlockedCookie(cookie: Cookie, blockedReasons: BlockedReason[]|null): void {\n    const key = cookie.key();\n    const previousCookie = this.#blockedCookies.get(key);\n    this.#blockedCookies.set(key, cookie);\n    if (blockedReasons) {\n      this.#cookieToBlockedReasons.set(cookie, blockedReasons);\n    } else {\n      this.#cookieToBlockedReasons.delete(cookie);\n    }\n    if (previousCookie) {\n      this.#cookieToBlockedReasons.delete(previousCookie);\n    }\n  }\n\n  removeBlockedCookie(cookie: Cookie): void {\n    this.#blockedCookies.delete(cookie.key());\n  }\n\n  async #onPrimaryPageChanged(): Promise<void> {\n    this.#blockedCookies.clear();\n    this.#cookieToBlockedReasons.clear();\n    await this.#refresh();\n  }\n\n  getCookieToBlockedReasonsMap(): ReadonlyMap<Cookie, BlockedReason[]> {\n    return this.#cookieToBlockedReasons;\n  }\n\n  async #getCookies(urls: Platform.MapUtilities.Multimap<string, string>): Promise<void> {\n    const networkAgent = this.target().networkAgent();\n    const newCookies = new Map<string, Cookie[]>(await Promise.all(urls.keysArray().map(\n        domain => networkAgent.invoke_getCookies({urls: [...urls.get(domain).values()]})\n                      .then(({cookies}) => [domain, cookies.map(Cookie.fromProtocolCookie)] as const))));\n    const updated = this.#isUpdated(newCookies);\n    this.#cookies = newCookies;\n    if (updated) {\n      this.dispatchEventToListeners(Events.COOKIE_LIST_UPDATED);\n    }\n  }\n\n  async deleteCookie(cookie: Cookie): Promise<void> {\n    await this.deleteCookies([cookie]);\n  }\n\n  async clear(domain?: string, securityOrigin?: string): Promise<void> {\n    if (!this.#isRefreshing()) {\n      await this.#refreshThrottled();\n    }\n    const cookies = domain ? (this.#cookies.get(domain) || []) : [...this.#cookies.values()].flat();\n    cookies.push(...this.#blockedCookies.values());\n    if (securityOrigin) {\n      const cookiesToDelete = cookies.filter(cookie => {\n        return cookie.matchesSecurityOrigin(securityOrigin);\n      });\n      await this.deleteCookies(cookiesToDelete);\n    } else {\n      await this.deleteCookies(cookies);\n    }\n  }\n\n  async saveCookie(cookie: Cookie): Promise<boolean> {\n    let domain = cookie.domain();\n    if (!domain.startsWith('.')) {\n      domain = '';\n    }\n    let expires: number|undefined = undefined;\n    if (cookie.expires()) {\n      expires = Math.floor(Date.parse(`${cookie.expires()}`) / 1000);\n    }\n    const enabled = Root.Runtime.experiments.isEnabled('experimental-cookie-features');\n    const preserveUnset = (scheme: Protocol.Network.CookieSourceScheme): Protocol.Network.CookieSourceScheme.Unset|\n                          undefined => scheme === Protocol.Network.CookieSourceScheme.Unset ? scheme : undefined;\n    const protocolCookie = {\n      name: cookie.name(),\n      value: cookie.value(),\n      url: cookie.url() || undefined,\n      domain,\n      path: cookie.path(),\n      secure: cookie.secure(),\n      httpOnly: cookie.httpOnly(),\n      sameSite: cookie.sameSite(),\n      expires,\n      priority: cookie.priority(),\n      partitionKey: cookie.partitionKey(),\n      sourceScheme: enabled ? cookie.sourceScheme() : preserveUnset(cookie.sourceScheme()),\n      sourcePort: enabled ? cookie.sourcePort() : undefined,\n    };\n    const response = await this.target().networkAgent().invoke_setCookie(protocolCookie);\n    const error = response.getError();\n    if (error || !response.success) {\n      return false;\n    }\n    await this.#refreshThrottled();\n    return response.success;\n  }\n\n  /**\n   * Returns cookies needed by current page's frames whose security origins are |domain|.\n   */\n  async getCookiesForDomain(domain: string, forceUpdate?: boolean): Promise<Cookie[]> {\n    if (!this.#isRefreshing() || forceUpdate) {\n      await this.#refreshThrottled();\n    }\n    const normalCookies = this.#cookies.get(domain) || [];\n    return normalCookies.concat(Array.from(this.#blockedCookies.values()));\n  }\n\n  async deleteCookies(cookies: Cookie[]): Promise<void> {\n    const networkAgent = this.target().networkAgent();\n    this.#blockedCookies.clear();\n    this.#cookieToBlockedReasons.clear();\n    await Promise.all(cookies.map(cookie => networkAgent.invoke_deleteCookies({\n      name: cookie.name(),\n      url: undefined,\n      domain: cookie.domain(),\n      path: cookie.path(),\n      partitionKey: cookie.partitionKey(),\n    })));\n    await this.#refreshThrottled();\n  }\n\n  #isRefreshing(): boolean {\n    return Boolean(this.listeners?.size);\n  }\n\n  #isUpdated(newCookies: Map<string, Cookie[]>): boolean {\n    if (newCookies.size !== this.#cookies.size) {\n      return true;\n    }\n    for (const [domain, newDomainCookies] of newCookies) {\n      if (!this.#cookies.has(domain)) {\n        return true;\n      }\n      const oldDomainCookies = this.#cookies.get(domain) || [];\n      if (newDomainCookies.length !== oldDomainCookies.length) {\n        return true;\n      }\n      const comparisonKey = (c: Cookie): string => c.key() + ' ' + c.value();\n      const oldDomainCookieKeys = new Set(oldDomainCookies.map(comparisonKey));\n      for (const newCookie of newDomainCookies) {\n        if (!oldDomainCookieKeys.has(comparisonKey(newCookie))) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  #refreshThrottled(): Promise<void> {\n    return this.#refreshThrottler.schedule(() => this.#refresh());\n  }\n\n  #refresh(): Promise<void> {\n    const resourceURLs = new Platform.MapUtilities.Multimap<string, string>();\n    function populateResourceURLs(resource: Resource): boolean {\n      const documentURL = Common.ParsedURL.ParsedURL.fromString(resource.documentURL);\n      if (documentURL) {\n        resourceURLs.set(documentURL.securityOrigin(), resource.url);\n      }\n      return false;\n    }\n    const resourceTreeModel = this.target().model(ResourceTreeModel);\n    if (resourceTreeModel) {\n      // In case the current frame was unreachable, add its cookies\n      // because they might help to debug why the frame was unreachable.\n      const unreachableUrl = resourceTreeModel.mainFrame?.unreachableUrl();\n      if (unreachableUrl) {\n        const documentURL = Common.ParsedURL.ParsedURL.fromString(unreachableUrl);\n        if (documentURL) {\n          resourceURLs.set(documentURL.securityOrigin(), unreachableUrl);\n        }\n      }\n\n      resourceTreeModel.forAllResources(populateResourceURLs);\n    }\n    return this.#getCookies(resourceURLs);\n  }\n\n  #onResponseReceived(): void {\n    if (this.#isRefreshing()) {\n      void this.#refreshThrottled();\n    }\n  }\n\n  #onLoadingFinished(): void {\n    if (this.#isRefreshing()) {\n      void this.#refreshThrottled();\n    }\n  }\n}\n\nSDKModel.register(CookieModel, {capabilities: Capability.NETWORK, autostart: false});\nexport interface BlockedReason {\n  uiString: string;\n  attribute: Attribute|null;\n}\nexport interface ExemptionReason {\n  uiString: string;\n}\n\nexport const enum Events {\n  COOKIE_LIST_UPDATED = 'CookieListUpdated',\n}\n\nexport interface EventTypes {\n  [Events.COOKIE_LIST_UPDATED]: void;\n}\n"]}