{"version":3,"file":"EventBreakpointsModel.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/EventBreakpointsModel.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAI7B,OAAO,EAAC,qBAAqB,EAAW,MAAM,4BAA4B,CAAC;AAE3E,OAAO,EAAC,QAAQ,EAAC,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAwB,aAAa,EAAC,MAAM,oBAAoB,CAAC;AAkCxE,MAAM,OAAO,qBAAsB,SAAQ,QAAc;IAC9C,KAAK,CAAuC;IAErD,YAAY,MAAc;QACxB,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,qBAAqB,EAAE,CAAC;IAC9C,CAAC;CACF;AAED;;;IAGI;AACJ,MAAM,uBAAwB,SAAQ,qBAAqB;IAChD,UAAU,CAAC,OAAgB;QAClC,IAAI,IAAI,CAAC,OAAO,EAAE,KAAK,OAAO,EAAE,CAAC;YAC/B,OAAO;QACT,CAAC;QACD,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC1B,KAAK,MAAM,KAAK,IAAI,aAAa,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,qBAAqB,CAAC,EAAE,CAAC;YAC3E,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC5B,CAAC;IACH,CAAC;IAED,aAAa,CAAC,KAA4B;QACxC,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC;YACnB,KAAK,KAAK,CAAC,KAAK,CAAC,mCAAmC,CAAC,EAAC,SAAS,EAAE,IAAI,CAAC,IAAI,EAAC,CAAC,CAAC;QAC/E,CAAC;aAAM,CAAC;YACN,KAAK,KAAK,CAAC,KAAK,CAAC,sCAAsC,CAAC,EAAC,SAAS,EAAE,IAAI,CAAC,IAAI,EAAC,CAAC,CAAC;QAClF,CAAC;IACH,CAAC;IAED,MAAM,CAAU,qBAAqB,GAAG,kBAAkB,CAAC;;AAG7D,IAAI,8BAAuD,CAAC;AAE5D,MAAM,OAAO,uBAAuB;IACzB,yBAAyB,GAA8B,EAAE,CAAC;IAEnE;QACE,IAAI,CAAC,gCAAgC,mDAA2B;;;;;SAK/D,CAAC,CAAC;QACH,IAAI,CAAC,gCAAgC,uCAAqB;;;;SAIzD,CAAC,CAAC;QACH,IAAI,CAAC,gCAAgC,iCAAkB;;;;SAItD,CAAC,CAAC;QACH,IAAI,CAAC,gCAAgC,2CAAuB;;;SAG3D,CAAC,CAAC;QACH,IAAI,CAAC,gCAAgC,6CAAwB;;SAE5D,CAAC,CAAC;QACH,IAAI,CAAC,gCAAgC,+BAAiB;;;SAGrD,CAAC,CAAC;QACH,IAAI,CAAC,gCAAgC,iCAAkB;;;SAGtD,CAAC,CAAC;QACH,IAAI,CAAC,gCAAgC,iEAAkC;;SAEtE,CAAC,CAAC;QACH,IAAI,CAAC,gCAAgC,+BAAiB;;;;;;;SAOrD,CAAC,CAAC;QACH,IAAI,CAAC,gCAAgC,iCAAkB;;SAEtD,CAAC,CAAC;QACH,IAAI,CAAC,gCAAgC,uCAAqB;;;;;SAKzD,CAAC,CAAC;QAEH,aAAa,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,qBAAqB,EAAE,IAAI,CAAC,CAAC;IACtE,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,OAEZ,EAAC,QAAQ,EAAE,IAAI,EAAC;QAClB,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,8BAA8B,IAAI,QAAQ,EAAE,CAAC;YAChD,8BAA8B,GAAG,IAAI,uBAAuB,EAAE,CAAC;QACjE,CAAC;QAED,OAAO,8BAA8B,CAAC;IACxC,CAAC;IAEO,gCAAgC,CAAC,QAAkB,EAAE,oBAA4C;QACvG,KAAK,MAAM,mBAAmB,IAAI,oBAAoB,EAAE,CAAC;YACvD,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,IAAI,uBAAuB,CAAC,QAAQ,EAAE,mBAAmB,CAAC,CAAC,CAAC;QAClG,CAAC;IACH,CAAC;IAED,wBAAwB;QACtB,OAAO,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,CAAC;IAChD,CAAC;IAED,8BAA8B,CAAC,EAAC,SAAS,EAAoC;QAC3E,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,uBAAuB,CAAC,qBAAqB,CAAC,EAAE,CAAC;YACzE,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,mBAAmB,GAAG,SAAS,CAAC,SAAS,CAAC,uBAAuB,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;QACtG,OAAO,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,mBAAmB,CAAC,IAAI,IAAI,CAAC;IAC1F,CAAC;IAED,UAAU,CAAC,oBAA2C;QACpD,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,yBAAyB,EAAE,CAAC;YACxD,IAAI,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC;gBACzB,UAAU,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC;YACjD,CAAC;QACH,CAAC;IACH,CAAC;IAED,YAAY,CAAC,qBAA4C;IACzD,CAAC;CACF;AAED,QAAQ,CAAC,QAAQ,CAAC,qBAAqB,EAAE,EAAC,YAAY,2CAA8B,EAAE,SAAS,EAAE,KAAK,EAAC,CAAC,CAAC","sourcesContent":["// Copyright 2021 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\n\nimport {CategorizedBreakpoint, Category} from './CategorizedBreakpoint.js';\nimport type {EventListenerPausedDetailsAuxData} from './DebuggerModel.js';\nimport {SDKModel} from './SDKModel.js';\nimport {Capability, type Target} from './Target.js';\nimport {type SDKModelObserver, TargetManager} from './TargetManager.js';\n\nexport const enum InstrumentationNames {\n  BEFORE_BIDDER_WORKLET_BIDDING_START = 'beforeBidderWorkletBiddingStart',\n  BEFORE_BIDDER_WORKLET_REPORTING_START = 'beforeBidderWorkletReportingStart',\n  BEFORE_SELLER_WORKLET_SCORING_START = 'beforeSellerWorkletScoringStart',\n  BEFORE_SELLER_WORKLET_REPORTING_START = 'beforeSellerWorkletReportingStart',\n  SET_TIMEOUT = 'setTimeout',\n  CLEAR_TIMEOUT = 'clearTimeout',\n  SET_TIMEOUT_CALLBACK = 'setTimeout.callback',\n  SET_INTERVAL = 'setInterval',\n  CLEAR_INTERVAL = 'clearInterval',\n  SET_INTERVAL_CALLBACK = 'setInterval.callback',\n  SCRIPT_FIRST_STATEMENT = 'scriptFirstStatement',\n  SCRIPT_BLOCKED_BY_CSP = 'scriptBlockedByCSP',\n  SHARED_STORAGE_WORKLET_SCRIPT_FIRST_STATEMENT = 'sharedStorageWorkletScriptFirstStatement',\n  REQUEST_ANIMATION_FRAME = 'requestAnimationFrame',\n  CANCEL_ANIMATION_FRAME = 'cancelAnimationFrame',\n  REQUEST_ANIMATION_FRAME_CALLBACK = 'requestAnimationFrame.callback',\n  WEBGL_ERROR_FIRED = 'webglErrorFired',\n  WEBGL_WARNING_FIRED = 'webglWarningFired',\n  ELEMENT_SET_INNER_HTML = 'Element.setInnerHTML',\n  CANVAS_CONTEXT_CREATED = 'canvasContextCreated',\n  GEOLOCATION_GET_CURRENT_POSITION = 'Geolocation.getCurrentPosition',\n  GEOLOCATION_WATCH_POSITION = 'Geolocation.watchPosition',\n  NOTIFICATION_REQUEST_PERMISSION = 'Notification.requestPermission',\n  DOM_WINDOW_CLOSE = 'DOMWindow.close',\n  DOCUMENT_WRITE = 'Document.write',\n  AUDIO_CONTEXT_CREATED = 'audioContextCreated',\n  AUDIO_CONTEXT_CLOSED = 'audioContextClosed',\n  AUDIO_CONTEXT_RESUMED = 'audioContextResumed',\n  AUDIO_CONTEXT_SUSPENDED = 'audioContextSuspended',\n}\n\nexport class EventBreakpointsModel extends SDKModel<void> {\n  readonly agent: ProtocolProxyApi.EventBreakpointsApi;\n\n  constructor(target: Target) {\n    super(target);\n    this.agent = target.eventBreakpointsAgent();\n  }\n}\n\n/**\n * This implementation (as opposed to similar class in DOMDebuggerModel) is for\n * instrumentation breakpoints in targets that run JS but do not have a DOM.\n **/\nclass EventListenerBreakpoint extends CategorizedBreakpoint {\n  override setEnabled(enabled: boolean): void {\n    if (this.enabled() === enabled) {\n      return;\n    }\n    super.setEnabled(enabled);\n    for (const model of TargetManager.instance().models(EventBreakpointsModel)) {\n      this.updateOnModel(model);\n    }\n  }\n\n  updateOnModel(model: EventBreakpointsModel): void {\n    if (this.enabled()) {\n      void model.agent.invoke_setInstrumentationBreakpoint({eventName: this.name});\n    } else {\n      void model.agent.invoke_removeInstrumentationBreakpoint({eventName: this.name});\n    }\n  }\n\n  static readonly instrumentationPrefix = 'instrumentation:';\n}\n\nlet eventBreakpointManagerInstance: EventBreakpointsManager;\n\nexport class EventBreakpointsManager implements SDKModelObserver<EventBreakpointsModel> {\n  readonly #eventListenerBreakpoints: EventListenerBreakpoint[] = [];\n\n  constructor() {\n    this.createInstrumentationBreakpoints(Category.AUCTION_WORKLET, [\n      InstrumentationNames.BEFORE_BIDDER_WORKLET_BIDDING_START,\n      InstrumentationNames.BEFORE_BIDDER_WORKLET_REPORTING_START,\n      InstrumentationNames.BEFORE_SELLER_WORKLET_SCORING_START,\n      InstrumentationNames.BEFORE_SELLER_WORKLET_REPORTING_START,\n    ]);\n    this.createInstrumentationBreakpoints(Category.ANIMATION, [\n      InstrumentationNames.REQUEST_ANIMATION_FRAME,\n      InstrumentationNames.CANCEL_ANIMATION_FRAME,\n      InstrumentationNames.REQUEST_ANIMATION_FRAME_CALLBACK,\n    ]);\n    this.createInstrumentationBreakpoints(Category.CANVAS, [\n      InstrumentationNames.CANVAS_CONTEXT_CREATED,\n      InstrumentationNames.WEBGL_ERROR_FIRED,\n      InstrumentationNames.WEBGL_WARNING_FIRED,\n    ]);\n    this.createInstrumentationBreakpoints(Category.GEOLOCATION, [\n      InstrumentationNames.GEOLOCATION_GET_CURRENT_POSITION,\n      InstrumentationNames.GEOLOCATION_WATCH_POSITION,\n    ]);\n    this.createInstrumentationBreakpoints(Category.NOTIFICATION, [\n      InstrumentationNames.NOTIFICATION_REQUEST_PERMISSION,\n    ]);\n    this.createInstrumentationBreakpoints(Category.PARSE, [\n      InstrumentationNames.ELEMENT_SET_INNER_HTML,\n      InstrumentationNames.DOCUMENT_WRITE,\n    ]);\n    this.createInstrumentationBreakpoints(Category.SCRIPT, [\n      InstrumentationNames.SCRIPT_FIRST_STATEMENT,\n      InstrumentationNames.SCRIPT_BLOCKED_BY_CSP,\n    ]);\n    this.createInstrumentationBreakpoints(Category.SHARED_STORAGE_WORKLET, [\n      InstrumentationNames.SHARED_STORAGE_WORKLET_SCRIPT_FIRST_STATEMENT,\n    ]);\n    this.createInstrumentationBreakpoints(Category.TIMER, [\n      InstrumentationNames.SET_TIMEOUT,\n      InstrumentationNames.CLEAR_TIMEOUT,\n      InstrumentationNames.SET_TIMEOUT_CALLBACK,\n      InstrumentationNames.SET_INTERVAL,\n      InstrumentationNames.CLEAR_INTERVAL,\n      InstrumentationNames.SET_INTERVAL_CALLBACK,\n    ]);\n    this.createInstrumentationBreakpoints(Category.WINDOW, [\n      InstrumentationNames.DOM_WINDOW_CLOSE,\n    ]);\n    this.createInstrumentationBreakpoints(Category.WEB_AUDIO, [\n      InstrumentationNames.AUDIO_CONTEXT_CREATED,\n      InstrumentationNames.AUDIO_CONTEXT_CLOSED,\n      InstrumentationNames.AUDIO_CONTEXT_RESUMED,\n      InstrumentationNames.AUDIO_CONTEXT_SUSPENDED,\n    ]);\n\n    TargetManager.instance().observeModels(EventBreakpointsModel, this);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): EventBreakpointsManager {\n    const {forceNew} = opts;\n    if (!eventBreakpointManagerInstance || forceNew) {\n      eventBreakpointManagerInstance = new EventBreakpointsManager();\n    }\n\n    return eventBreakpointManagerInstance;\n  }\n\n  private createInstrumentationBreakpoints(category: Category, instrumentationNames: InstrumentationNames[]): void {\n    for (const instrumentationName of instrumentationNames) {\n      this.#eventListenerBreakpoints.push(new EventListenerBreakpoint(category, instrumentationName));\n    }\n  }\n\n  eventListenerBreakpoints(): EventListenerBreakpoint[] {\n    return this.#eventListenerBreakpoints.slice();\n  }\n\n  resolveEventListenerBreakpoint({eventName}: EventListenerPausedDetailsAuxData): EventListenerBreakpoint|null {\n    if (!eventName.startsWith(EventListenerBreakpoint.instrumentationPrefix)) {\n      return null;\n    }\n\n    const instrumentationName = eventName.substring(EventListenerBreakpoint.instrumentationPrefix.length);\n    return this.#eventListenerBreakpoints.find(b => b.name === instrumentationName) || null;\n  }\n\n  modelAdded(eventBreakpointModel: EventBreakpointsModel): void {\n    for (const breakpoint of this.#eventListenerBreakpoints) {\n      if (breakpoint.enabled()) {\n        breakpoint.updateOnModel(eventBreakpointModel);\n      }\n    }\n  }\n\n  modelRemoved(_eventBreakpointModel: EventBreakpointsModel): void {\n  }\n}\n\nSDKModel.register(EventBreakpointsModel, {capabilities: Capability.EVENT_BREAKPOINTS, autostart: false});\n"]}