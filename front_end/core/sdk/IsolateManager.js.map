{"version":3,"file":"IsolateManager.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/IsolateManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\n\nimport type {HeapProfilerModel} from './HeapProfilerModel.js';\nimport {RuntimeModel} from './RuntimeModel.js';\nimport {type SDKModelObserver, TargetManager} from './TargetManager.js';\n\nlet isolateManagerInstance: IsolateManager;\n\nexport class IsolateManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements\n    SDKModelObserver<RuntimeModel> {\n  readonly #isolates = new Map<string, Isolate>();\n  /**\n   * Contains null while the isolateId is being retrieved.\n   */\n  #isolateIdByModel = new Map<RuntimeModel, string|null>();\n  #observers = new Set<Observer>();\n  #pollId = 0;\n\n  constructor() {\n    super();\n\n    TargetManager.instance().observeModels(RuntimeModel, this);\n  }\n\n  static instance({forceNew}: {\n    forceNew: boolean,\n  } = {forceNew: false}): IsolateManager {\n    if (!isolateManagerInstance || forceNew) {\n      isolateManagerInstance = new IsolateManager();\n    }\n\n    return isolateManagerInstance;\n  }\n\n  observeIsolates(observer: Observer): void {\n    if (this.#observers.has(observer)) {\n      throw new Error('Observer can only be registered once');\n    }\n    if (!this.#observers.size) {\n      void this.poll();\n    }\n    this.#observers.add(observer);\n    for (const isolate of this.#isolates.values()) {\n      observer.isolateAdded(isolate);\n    }\n  }\n\n  modelAdded(model: RuntimeModel): void {\n    void this.#modelAdded(model);\n  }\n\n  async #modelAdded(model: RuntimeModel): Promise<void> {\n    this.#isolateIdByModel.set(model, null);\n    const isolateId = await model.isolateId();\n    if (!this.#isolateIdByModel.has(model)) {\n      // The model has been removed during await.\n      return;\n    }\n    if (!isolateId) {\n      this.#isolateIdByModel.delete(model);\n      return;\n    }\n    this.#isolateIdByModel.set(model, isolateId);\n    let isolate = this.#isolates.get(isolateId);\n    if (!isolate) {\n      isolate = new Isolate(isolateId);\n      this.#isolates.set(isolateId, isolate);\n    }\n    isolate.models().add(model);\n    if (isolate.models().size === 1) {\n      for (const observer of this.#observers) {\n        observer.isolateAdded(isolate);\n      }\n    } else {\n      for (const observer of this.#observers) {\n        observer.isolateChanged(isolate);\n      }\n    }\n  }\n\n  modelRemoved(model: RuntimeModel): void {\n    const isolateId = this.#isolateIdByModel.get(model);\n    this.#isolateIdByModel.delete(model);\n    if (!isolateId) {\n      return;\n    }\n    const isolate = this.#isolates.get(isolateId);\n    if (!isolate) {\n      return;\n    }\n    isolate.models().delete(model);\n    if (isolate.models().size) {\n      for (const observer of this.#observers) {\n        observer.isolateChanged(isolate);\n      }\n      return;\n    }\n    for (const observer of this.#observers) {\n      observer.isolateRemoved(isolate);\n    }\n    this.#isolates.delete(isolateId);\n  }\n\n  isolateByModel(model: RuntimeModel): Isolate|null {\n    return this.#isolates.get(this.#isolateIdByModel.get(model) || '') || null;\n  }\n\n  isolates(): Iterable<Isolate> {\n    return this.#isolates.values();\n  }\n\n  private async poll(): Promise<void> {\n    const pollId = this.#pollId;\n    while (pollId === this.#pollId) {\n      await Promise.all(Array.from(this.isolates(), isolate => isolate.update()));\n      await new Promise(r => window.setTimeout(r, PollIntervalMs));\n    }\n  }\n}\n\nexport interface Observer {\n  isolateAdded(isolate: Isolate): void;\n\n  isolateRemoved(isolate: Isolate): void;\n  isolateChanged(isolate: Isolate): void;\n}\n\nexport const enum Events {\n  MEMORY_CHANGED = 'MemoryChanged',\n}\n\nexport interface EventTypes {\n  [Events.MEMORY_CHANGED]: Isolate;\n}\n\nexport const MemoryTrendWindowMs = 120e3;\nconst PollIntervalMs = 2e3;\n\nexport class Isolate {\n  readonly #id: string;\n  readonly #models: Set<RuntimeModel>;\n  #usedHeapSize: number;\n  readonly #memoryTrend: MemoryTrend;\n\n  constructor(id: string) {\n    this.#id = id;\n    this.#models = new Set();\n    this.#usedHeapSize = 0;\n    const count = MemoryTrendWindowMs / PollIntervalMs;\n    this.#memoryTrend = new MemoryTrend(count);\n  }\n\n  id(): string {\n    return this.#id;\n  }\n\n  models(): Set<RuntimeModel> {\n    return this.#models;\n  }\n\n  runtimeModel(): RuntimeModel|null {\n    return this.#models.values().next().value || null;\n  }\n\n  heapProfilerModel(): HeapProfilerModel|null {\n    const runtimeModel = this.runtimeModel();\n    return runtimeModel?.heapProfilerModel() ?? null;\n  }\n\n  async update(): Promise<void> {\n    const model = this.runtimeModel();\n    const usage = model && await model.heapUsage();\n    if (!usage) {\n      return;\n    }\n    this.#usedHeapSize = usage.usedSize + (usage.embedderHeapUsedSize ?? 0) + (usage.backingStorageSize ?? 0);\n    this.#memoryTrend.add(this.#usedHeapSize);\n    IsolateManager.instance().dispatchEventToListeners(Events.MEMORY_CHANGED, this);\n  }\n\n  samplesCount(): number {\n    return this.#memoryTrend.count();\n  }\n\n  usedHeapSize(): number {\n    return this.#usedHeapSize;\n  }\n\n  /**\n   * bytes per millisecond\n   */\n  usedHeapSizeGrowRate(): number {\n    return this.#memoryTrend.fitSlope();\n  }\n}\n\nexport class MemoryTrend {\n  #maxCount: number;\n  #base!: number;\n  #index!: number;\n  #x!: number[];\n  #y!: number[];\n  #sx!: number;\n  #sy!: number;\n  #sxx!: number;\n  #sxy!: number;\n  constructor(maxCount: number) {\n    this.#maxCount = maxCount | 0;\n    this.reset();\n  }\n\n  reset(): void {\n    this.#base = Date.now();\n    this.#index = 0;\n    this.#x = [];\n    this.#y = [];\n    this.#sx = 0;\n    this.#sy = 0;\n    this.#sxx = 0;\n    this.#sxy = 0;\n  }\n\n  count(): number {\n    return this.#x.length;\n  }\n\n  add(heapSize: number, timestamp?: number): void {\n    const x = typeof timestamp === 'number' ? timestamp : Date.now() - this.#base;\n    const y = heapSize;\n    if (this.#x.length === this.#maxCount) {\n      // Turns into a cyclic buffer once it reaches the |#maxCount|.\n      const x0 = this.#x[this.#index];\n      const y0 = this.#y[this.#index];\n      this.#sx -= x0;\n      this.#sy -= y0;\n      this.#sxx -= x0 * x0;\n      this.#sxy -= x0 * y0;\n    }\n    this.#sx += x;\n    this.#sy += y;\n    this.#sxx += x * x;\n    this.#sxy += x * y;\n    this.#x[this.#index] = x;\n    this.#y[this.#index] = y;\n    this.#index = (this.#index + 1) % this.#maxCount;\n  }\n\n  fitSlope(): number {\n    // We use the linear regression model to find the slope.\n    const n = this.count();\n    return n < 2 ? 0 : (this.#sxy - this.#sx * this.#sy / n) / (this.#sxx - this.#sx * this.#sx / n);\n  }\n}\n"]}