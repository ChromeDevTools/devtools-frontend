{"version":3,"file":"PageResourceLoader.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/PageResourceLoader.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as Common from '../common/common.js';\nimport * as Host from '../host/host.js';\nimport * as i18n from '../i18n/i18n.js';\nimport type * as Platform from '../platform/platform.js';\n\nimport {FrameManager} from './FrameManager.js';\nimport {IOModel} from './IOModel.js';\nimport {MultitargetNetworkManager, NetworkManager} from './NetworkManager.js';\nimport {\n  Events as ResourceTreeModelEvents,\n  PrimaryPageChangeType,\n  type ResourceTreeFrame,\n  ResourceTreeModel,\n} from './ResourceTreeModel.js';\nimport type {Target} from './Target.js';\nimport {TargetManager} from './TargetManager.js';\n\nconst UIStrings = {\n  /**\n   * @description Error message for canceled source map loads\n   */\n  loadCanceledDueToReloadOf: 'Load canceled due to reload of inspected page',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/PageResourceLoader.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface ExtensionInitiator {\n  target: null;\n  frameId: null;\n  initiatorUrl: Platform.DevToolsPath.UrlString;\n  extensionId: string;\n}\n\nexport type PageResourceLoadInitiator = {\n  target: null,\n  frameId: Protocol.Page.FrameId,\n  initiatorUrl: Platform.DevToolsPath.UrlString|null,\n}|{\n  target: Target,\n  frameId: Protocol.Page.FrameId | null,\n  initiatorUrl: Platform.DevToolsPath.UrlString | null,\n}|ExtensionInitiator;\n\nfunction isExtensionInitiator(initiator: PageResourceLoadInitiator): initiator is ExtensionInitiator {\n  return 'extensionId' in initiator;\n}\n\nexport interface PageResource {\n  success: boolean|null;\n  errorMessage?: string;\n  initiator: PageResourceLoadInitiator;\n  url: Platform.DevToolsPath.UrlString;\n  size: number|null;\n  duration: number|null;\n}\n\n/** Used for revealing a resource. **/\nexport class ResourceKey {\n  readonly key: string;\n\n  constructor(key: string) {\n    this.key = key;\n  }\n}\n\nlet pageResourceLoader: PageResourceLoader|null = null;\n\ninterface LoadQueueEntry {\n  resolve: () => void;\n  reject: (arg0: Error) => void;\n}\n\n/**\n * The page resource loader is a bottleneck for all DevTools-initiated resource loads. For each such load, it keeps a\n * `PageResource` object around that holds meta information. This can be as the basis for reporting to the user which\n * resources were loaded, and whether there was a load error.\n */\nexport class PageResourceLoader extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  #currentlyLoading = 0;\n  #currentlyLoadingPerTarget = new Map<Protocol.Target.TargetID|'main', number>();\n  readonly #maxConcurrentLoads: number;\n  #pageResources = new Map<string, PageResource>();\n  #queuedLoads: LoadQueueEntry[] = [];\n  readonly #loadOverride: ((arg0: string) => Promise<{\n                             success: boolean,\n                             content: string,\n                             errorDescription: Host.ResourceLoader.LoadErrorDescription,\n                           }>)|null;\n  constructor(\n      loadOverride: ((arg0: string) => Promise<{\n                       success: boolean,\n                       content: string,\n                       errorDescription: Host.ResourceLoader.LoadErrorDescription,\n                     }>)|null,\n      maxConcurrentLoads: number) {\n    super();\n    this.#maxConcurrentLoads = maxConcurrentLoads;\n    TargetManager.instance().addModelListener(\n        ResourceTreeModel, ResourceTreeModelEvents.PrimaryPageChanged, this.onPrimaryPageChanged, this);\n    this.#loadOverride = loadOverride;\n  }\n\n  static instance({forceNew, loadOverride, maxConcurrentLoads}: {\n    forceNew: boolean,\n    loadOverride: (null|((arg0: string) => Promise<{\n                           success: boolean,\n                           content: string,\n                           errorDescription: Host.ResourceLoader.LoadErrorDescription,\n                         }>)),\n    maxConcurrentLoads: number,\n  } = {\n    forceNew: false,\n    loadOverride: null,\n    maxConcurrentLoads: 500,\n  }): PageResourceLoader {\n    if (!pageResourceLoader || forceNew) {\n      pageResourceLoader = new PageResourceLoader(loadOverride, maxConcurrentLoads);\n    }\n\n    return pageResourceLoader;\n  }\n\n  static removeInstance(): void {\n    pageResourceLoader = null;\n  }\n\n  onPrimaryPageChanged(\n      event: Common.EventTarget.EventTargetEvent<{frame: ResourceTreeFrame, type: PrimaryPageChangeType}>): void {\n    const {frame: mainFrame, type} = event.data;\n    if (!mainFrame.isOutermostFrame()) {\n      return;\n    }\n    for (const {reject} of this.#queuedLoads) {\n      reject(new Error(i18nString(UIStrings.loadCanceledDueToReloadOf)));\n    }\n    this.#queuedLoads = [];\n    const mainFrameTarget = mainFrame.resourceTreeModel().target();\n    const keptResources = new Map<string, PageResource>();\n    // If the navigation is a prerender-activation, the pageResources for the destination page have\n    // already been preloaded. In such cases, we therefore don't just discard all pageResources, but\n    // instead make sure to keep the pageResources for the prerendered target.\n    for (const [key, pageResource] of this.#pageResources.entries()) {\n      if ((type === PrimaryPageChangeType.ACTIVATION) && mainFrameTarget === pageResource.initiator.target) {\n        keptResources.set(key, pageResource);\n      }\n    }\n    this.#pageResources = keptResources;\n    this.dispatchEventToListeners(Events.UPDATE);\n  }\n\n  getResourcesLoaded(): Map<string, PageResource> {\n    return this.#pageResources;\n  }\n\n  getScopedResourcesLoaded(): Map<string, PageResource> {\n    return new Map([...this.#pageResources].filter(\n        ([_, pageResource]) => TargetManager.instance().isInScope(pageResource.initiator.target) ||\n            isExtensionInitiator(pageResource.initiator)));\n  }\n\n  /**\n   * Loading is the number of currently loading and queued items. Resources is the total number of resources,\n   * including loading and queued resources, but not including resources that are still loading but scheduled\n   * for cancelation.;\n   */\n  getNumberOfResources(): {\n    loading: number,\n    queued: number,\n    resources: number,\n  } {\n    return {loading: this.#currentlyLoading, queued: this.#queuedLoads.length, resources: this.#pageResources.size};\n  }\n\n  getScopedNumberOfResources(): {\n    loading: number,\n    resources: number,\n  } {\n    const targetManager = TargetManager.instance();\n    let loadingCount = 0;\n    for (const [targetId, count] of this.#currentlyLoadingPerTarget) {\n      const target = targetManager.targetById(targetId);\n      if (targetManager.isInScope(target)) {\n        loadingCount += count;\n      }\n    }\n    return {loading: loadingCount, resources: this.getScopedResourcesLoaded().size};\n  }\n\n  private async acquireLoadSlot(target: Target|null): Promise<void> {\n    this.#currentlyLoading++;\n    if (target) {\n      const currentCount = this.#currentlyLoadingPerTarget.get(target.id()) || 0;\n      this.#currentlyLoadingPerTarget.set(target.id(), currentCount + 1);\n    }\n    if (this.#currentlyLoading > this.#maxConcurrentLoads) {\n      const {\n        promise: waitForCapacity,\n        resolve,\n        reject,\n      } = Promise.withResolvers<void>();\n      this.#queuedLoads.push({resolve, reject});\n      await waitForCapacity;\n    }\n  }\n\n  private releaseLoadSlot(target: Target|null): void {\n    this.#currentlyLoading--;\n    if (target) {\n      const currentCount = this.#currentlyLoadingPerTarget.get(target.id());\n      if (currentCount) {\n        this.#currentlyLoadingPerTarget.set(target.id(), currentCount - 1);\n      }\n    }\n    const entry = this.#queuedLoads.shift();\n    if (entry) {\n      entry.resolve();\n    }\n  }\n\n  static makeExtensionKey(url: Platform.DevToolsPath.UrlString, initiator: PageResourceLoadInitiator): string {\n    if (isExtensionInitiator(initiator) && initiator.extensionId) {\n      return `${url}-${initiator.extensionId}`;\n    }\n    throw new Error('Invalid initiator');\n  }\n\n  static makeKey(url: Platform.DevToolsPath.UrlString, initiator: PageResourceLoadInitiator): string {\n    if (initiator.frameId) {\n      return `${url}-${initiator.frameId}`;\n    }\n    if (initiator.target) {\n      return `${url}-${initiator.target.id()}`;\n    }\n    throw new Error('Invalid initiator');\n  }\n\n  resourceLoadedThroughExtension(pageResource: PageResource): void {\n    const key = PageResourceLoader.makeExtensionKey(pageResource.url, pageResource.initiator);\n    this.#pageResources.set(key, pageResource);\n    this.dispatchEventToListeners(Events.UPDATE);\n  }\n\n  loadResource(url: Platform.DevToolsPath.UrlString, initiator: PageResourceLoadInitiator, isBinary: true): Promise<{\n    content: Uint8Array<ArrayBuffer>,\n  }>;\n  loadResource(url: Platform.DevToolsPath.UrlString, initiator: PageResourceLoadInitiator, isBinary?: false): Promise<{\n    content: string,\n  }>;\n  async loadResource(url: Platform.DevToolsPath.UrlString, initiator: PageResourceLoadInitiator, isBinary = false):\n      Promise<{\n        content: string | Uint8Array<ArrayBuffer>,\n      }> {\n    if (isExtensionInitiator(initiator)) {\n      throw new Error('Invalid initiator');\n    }\n    const key = PageResourceLoader.makeKey(url, initiator);\n    const pageResource:\n        PageResource = {success: null, size: null, duration: null, errorMessage: undefined, url, initiator};\n    this.#pageResources.set(key, pageResource);\n    this.dispatchEventToListeners(Events.UPDATE);\n    const startTime = performance.now();\n    try {\n      await this.acquireLoadSlot(initiator.target);\n      const resultPromise = this.dispatchLoad(url, initiator, isBinary);\n      const result = await resultPromise;\n      pageResource.errorMessage = result.errorDescription.message;\n      pageResource.success = result.success;\n      if (result.success) {\n        pageResource.size = result.content.length;\n        return {content: result.content};\n      }\n      throw new Error(result.errorDescription.message);\n    } catch (e) {\n      if (pageResource.errorMessage === undefined) {\n        pageResource.errorMessage = e.message;\n      }\n      if (pageResource.success === null) {\n        pageResource.success = false;\n      }\n      throw e;\n    } finally {\n      pageResource.duration = performance.now() - startTime;\n      this.releaseLoadSlot(initiator.target);\n      this.dispatchEventToListeners(Events.UPDATE);\n    }\n  }\n\n  private async dispatchLoad(\n      url: Platform.DevToolsPath.UrlString, initiator: PageResourceLoadInitiator, isBinary: boolean): Promise<{\n    success: boolean,\n    content: string|Uint8Array<ArrayBuffer>,\n    errorDescription: Host.ResourceLoader.LoadErrorDescription,\n  }> {\n    if (isExtensionInitiator(initiator)) {\n      throw new Error('Invalid initiator');\n    }\n\n    const failureReason: string|null = null;\n    if (this.#loadOverride) {\n      return await this.#loadOverride(url);\n    }\n    const parsedURL = new Common.ParsedURL.ParsedURL(url);\n    const eligibleForLoadFromTarget = getLoadThroughTargetSetting().get() && parsedURL && parsedURL.scheme !== 'file' &&\n        parsedURL.scheme !== 'data' && parsedURL.scheme !== 'devtools';\n    Host.userMetrics.developerResourceScheme(this.getDeveloperResourceScheme(parsedURL));\n    if (eligibleForLoadFromTarget) {\n      try {\n        if (initiator.target) {\n          Host.userMetrics.developerResourceLoaded(\n              Host.UserMetrics.DeveloperResourceLoaded.LOAD_THROUGH_PAGE_VIA_TARGET);\n          const result = await this.loadFromTarget(initiator.target, initiator.frameId, url, isBinary);\n          return result;\n        }\n        const frame = FrameManager.instance().getFrame(initiator.frameId);\n        if (frame) {\n          Host.userMetrics.developerResourceLoaded(\n              Host.UserMetrics.DeveloperResourceLoaded.LOAD_THROUGH_PAGE_VIA_FRAME);\n          const result =\n              await this.loadFromTarget(frame.resourceTreeModel().target(), initiator.frameId, url, isBinary);\n          return result;\n        }\n      } catch (e) {\n        if (e instanceof Error) {\n          Host.userMetrics.developerResourceLoaded(Host.UserMetrics.DeveloperResourceLoaded.LOAD_THROUGH_PAGE_FAILURE);\n          if (e.message.includes('CSP violation')) {\n            return {\n              success: false,\n              content: '',\n              errorDescription:\n                  {statusCode: 0, netError: undefined, netErrorName: undefined, message: e.message, urlValid: undefined}\n            };\n          }\n        }\n      }\n      Host.userMetrics.developerResourceLoaded(Host.UserMetrics.DeveloperResourceLoaded.LOAD_THROUGH_PAGE_FALLBACK);\n    } else {\n      const code = getLoadThroughTargetSetting().get() ?\n          Host.UserMetrics.DeveloperResourceLoaded.FALLBACK_PER_PROTOCOL :\n          Host.UserMetrics.DeveloperResourceLoaded.FALLBACK_PER_OVERRIDE;\n      Host.userMetrics.developerResourceLoaded(code);\n    }\n\n    const result = await MultitargetNetworkManager.instance().loadResource(url);\n    if (eligibleForLoadFromTarget && !result.success) {\n      Host.userMetrics.developerResourceLoaded(Host.UserMetrics.DeveloperResourceLoaded.FALLBACK_FAILURE);\n    }\n    if (failureReason) {\n      // In case we have a success, add a note about why the load through the target failed.\n      result.errorDescription.message =\n          `Fetch through target failed: ${failureReason}; Fallback: ${result.errorDescription.message}`;\n    }\n    return result;\n  }\n\n  private getDeveloperResourceScheme(parsedURL: Common.ParsedURL.ParsedURL|null):\n      Host.UserMetrics.DeveloperResourceScheme {\n    if (!parsedURL || parsedURL.scheme === '') {\n      return Host.UserMetrics.DeveloperResourceScheme.UKNOWN;\n    }\n    const isLocalhost = parsedURL.host === 'localhost' || parsedURL.host.endsWith('.localhost');\n    switch (parsedURL.scheme) {\n      case 'file':\n        return Host.UserMetrics.DeveloperResourceScheme.FILE;\n      case 'data':\n        return Host.UserMetrics.DeveloperResourceScheme.DATA;\n      case 'blob':\n        return Host.UserMetrics.DeveloperResourceScheme.BLOB;\n      case 'http':\n        return isLocalhost ? Host.UserMetrics.DeveloperResourceScheme.HTTP_LOCALHOST :\n                             Host.UserMetrics.DeveloperResourceScheme.HTTP;\n      case 'https':\n        return isLocalhost ? Host.UserMetrics.DeveloperResourceScheme.HTTPS_LOCALHOST :\n                             Host.UserMetrics.DeveloperResourceScheme.HTTPS;\n    }\n    return Host.UserMetrics.DeveloperResourceScheme.OTHER;\n  }\n\n  private async loadFromTarget(\n      target: Target, frameId: Protocol.Page.FrameId|null, url: Platform.DevToolsPath.UrlString,\n      isBinary: boolean): Promise<{\n    success: boolean,\n    content: string|Uint8Array<ArrayBuffer>,\n    errorDescription: {\n      statusCode: number,\n      netError: number|undefined,\n      netErrorName: string|undefined,\n      message: string,\n      urlValid: undefined,\n    },\n  }> {\n    const networkManager = (target.model(NetworkManager) as NetworkManager);\n    const ioModel = (target.model(IOModel) as IOModel);\n    const disableCache = Common.Settings.Settings.instance().moduleSetting('cache-disabled').get();\n    const resource = await networkManager.loadNetworkResource(frameId, url, {disableCache, includeCredentials: true});\n    try {\n      const content = resource.stream ?\n          (isBinary ? await ioModel.readToBuffer(resource.stream) : await ioModel.readToString(resource.stream)) :\n          '';\n      return {\n        success: resource.success,\n        content,\n        errorDescription: {\n          statusCode: resource.httpStatusCode || 0,\n          netError: resource.netError,\n          netErrorName: resource.netErrorName,\n          message: Host.ResourceLoader.netErrorToMessage(\n                       resource.netError, resource.httpStatusCode, resource.netErrorName) ||\n              '',\n          urlValid: undefined,\n        },\n      };\n    } finally {\n      if (resource.stream) {\n        void ioModel.close(resource.stream);\n      }\n    }\n  }\n}\n\nexport function getLoadThroughTargetSetting(): Common.Settings.Setting<boolean> {\n  return Common.Settings.Settings.instance().createSetting('load-through-target', true);\n}\n\nexport const enum Events {\n  UPDATE = 'Update',\n}\n\nexport interface EventTypes {\n  [Events.UPDATE]: void;\n}\n"]}