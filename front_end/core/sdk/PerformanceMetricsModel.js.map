{"version":3,"file":"PerformanceMetricsModel.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/PerformanceMetricsModel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2017 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Platform from '../platform/platform.js';\n\nimport {SDKModel} from './SDKModel.js';\nimport {Capability, type Target} from './Target.js';\n\nexport class PerformanceMetricsModel extends SDKModel<void> {\n  readonly #agent: ProtocolProxyApi.PerformanceApi;\n  readonly #metricModes = new Map<string, MetricMode>([\n    ['TaskDuration', MetricMode.CUMULATIVE_TIME],\n    ['ScriptDuration', MetricMode.CUMULATIVE_TIME],\n    ['LayoutDuration', MetricMode.CUMULATIVE_TIME],\n    ['RecalcStyleDuration', MetricMode.CUMULATIVE_TIME],\n    ['LayoutCount', MetricMode.CUMULATIVE_COUNT],\n    ['RecalcStyleCount', MetricMode.CUMULATIVE_COUNT],\n  ]);\n  readonly #metricData = new Map<string, {\n    lastValue: (number | undefined),\n    lastTimestamp: (number|undefined),\n  }>();\n\n  constructor(target: Target) {\n    super(target);\n    this.#agent = target.performanceAgent();\n  }\n\n  enable(): Promise<Object> {\n    return this.#agent.invoke_enable({});\n  }\n\n  disable(): Promise<Object> {\n    return this.#agent.invoke_disable();\n  }\n\n  async requestMetrics(): Promise<{\n    metrics: Map<string, number>,\n    timestamp: number,\n  }> {\n    const rawMetrics = await this.#agent.invoke_getMetrics() || [];\n    const metrics = new Map<string, number>();\n    const timestamp = performance.now();\n    for (const metric of rawMetrics.metrics) {\n      let data = this.#metricData.get(metric.name);\n      if (!data) {\n        data = {lastValue: undefined, lastTimestamp: undefined};\n        this.#metricData.set(metric.name, data);\n      }\n      let value;\n      switch (this.#metricModes.get(metric.name)) {\n        case MetricMode.CUMULATIVE_TIME:\n          value = (data.lastTimestamp && data.lastValue) ?\n              Platform.NumberUtilities.clamp(\n                  (metric.value - data.lastValue) * 1000 / (timestamp - data.lastTimestamp), 0, 1) :\n              0;\n          data.lastValue = metric.value;\n          data.lastTimestamp = timestamp;\n          break;\n        case MetricMode.CUMULATIVE_COUNT:\n          value = (data.lastTimestamp && data.lastValue) ?\n              Math.max(0, (metric.value - data.lastValue) * 1000 / (timestamp - data.lastTimestamp)) :\n              0;\n          data.lastValue = metric.value;\n          data.lastTimestamp = timestamp;\n          break;\n        default:\n          value = metric.value;\n          break;\n      }\n      metrics.set(metric.name, value);\n    }\n    return {metrics, timestamp};\n  }\n}\n\nconst enum MetricMode {\n  CUMULATIVE_TIME = 'CumulativeTime',\n  CUMULATIVE_COUNT = 'CumulativeCount',\n}\n\nSDKModel.register(PerformanceMetricsModel, {capabilities: Capability.DOM, autostart: false});\n"]}