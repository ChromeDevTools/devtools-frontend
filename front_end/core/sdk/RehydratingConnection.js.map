{"version":3,"file":"RehydratingConnection.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/RehydratingConnection.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * This file is the implementation of a protocol `Connection` object\n *  which is central to the rehydrated devtools feature. The premise of\n * this feature is that the enhanced traces will contain enough\n * information to power this class with all metadata needed. This class\n * then interacts with rehydrated devtools in a way that produces the\n * equivalent result as live debugging session.\n *\n * It's much more of a state machine than the other Connection\n * implementations, which simply interact with a network protocol in\n * one way or another.\n *\n * Note on the methodology to derive runtime/debugger domain behavior below:\n * We can use protocol monitor in the devtools to look at how dt-fe\n * communicates with the backend, and it's also how majority of the behavior\n * in the rehydrated sesion was derived at the first place. In the event of\n * adding more support and capability to rehydrated session, developers will\n * want to look at protocol monitor to imitate the behavior in a real session\n *\n */\n\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\nimport type * as Platform from '../platform/platform.js';\nimport type * as ProtocolClient from '../protocol_client/protocol_client.js';\nimport * as Root from '../root/root.js';\n\nimport * as EnhancedTraces from './EnhancedTracesParser.js';\nimport type {\n  ProtocolMessage, RehydratingExecutionContext, RehydratingResource, RehydratingScript, RehydratingTarget,\n  ServerMessage} from './RehydratingObject.js';\nimport {TraceObject} from './TraceObject.js';\n\nconst UIStrings = {\n  /**\n   * @description Text that appears when no source text is available for the given script\n   */\n  noSourceText: 'No source text available',\n  /**\n   * @description Text to indicate rehydrating connection cannot find host window\n   */\n  noHostWindow: 'Can not find host window',\n  /**\n   * @description Text to indicate that there is an error loading the log\n   */\n  errorLoadingLog: 'Error loading log',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/RehydratingConnection.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface RehydratingConnectionInterface {\n  postToFrontend: (arg: ServerMessage) => void;\n}\n\nexport const enum RehydratingConnectionState {\n  UNINITIALIZED = 1,\n  INITIALIZED = 2,\n  REHYDRATED = 3,\n}\n\nexport class RehydratingConnection implements ProtocolClient.ConnectionTransport.ConnectionTransport {\n  rehydratingConnectionState: RehydratingConnectionState = RehydratingConnectionState.UNINITIALIZED;\n  onDisconnect: ((arg0: string) => void)|null = null;\n  onMessage: ((arg0: Object) => void)|null = null;\n  trace: TraceObject|null = null;\n  sessions = new Map<number, RehydratingSessionBase>();\n  #onConnectionLost: (message: Platform.UIString.LocalizedString) => void;\n  #rehydratingWindow = window;\n  #onReceiveHostWindowPayloadBound = this.onReceiveHostWindowPayload.bind(this);\n\n  constructor(onConnectionLost: (message: Platform.UIString.LocalizedString) => void) {\n    this.#onConnectionLost = onConnectionLost;\n    if (!this.#maybeHandleLoadingFromUrl()) {\n      this.#setupMessagePassing();\n    }\n  }\n\n  /** Returns true if found a trace URL. */\n  #maybeHandleLoadingFromUrl(): boolean {\n    let traceUrl = Root.Runtime.Runtime.queryParam('traceURL');\n\n    if (!traceUrl) {\n      // For compatibility, handle the older loadTimelineFromURL.\n      const timelineUrl = Root.Runtime.Runtime.queryParam('loadTimelineFromURL');\n      if (timelineUrl) {\n        // It was double-URI encoded for some reason.\n        traceUrl = decodeURIComponent(timelineUrl);\n      }\n    }\n\n    if (traceUrl) {\n      void fetch(traceUrl).then(r => r.arrayBuffer()).then(b => Common.Gzip.arrayBufferToString(b)).then(traceJson => {\n        const trace = new TraceObject(JSON.parse(traceJson));\n        void this.startHydration(trace);\n      });\n      return true;\n    }\n\n    return false;\n  }\n\n  #setupMessagePassing(): void {\n    this.#rehydratingWindow.addEventListener('message', this.#onReceiveHostWindowPayloadBound);\n    if (this.#rehydratingWindow.opener) {\n      this.#rehydratingWindow.opener.postMessage({type: 'REHYDRATING_WINDOW_READY'});\n    } else if (this.#rehydratingWindow !== window.top) {\n      this.#rehydratingWindow.parent.postMessage({type: 'REHYDRATING_IFRAME_READY'}, '*');\n    } else {\n      this.#onConnectionLost(i18nString(UIStrings.noHostWindow));\n    }\n  }\n\n  /**\n   * This is a callback for rehydrated session to receive payload from host window. Payload includes but not limited to\n   * the trace event and all necessary data to power a rehydrated session.\n   */\n  onReceiveHostWindowPayload(event: MessageEvent): void {\n    if (event.data.type === 'REHYDRATING_TRACE_FILE') {\n      const traceJson = event.data.traceJson as string;\n      let trace;\n      try {\n        trace = new TraceObject(JSON.parse(traceJson));\n      } catch {\n        this.#onConnectionLost(i18nString(UIStrings.errorLoadingLog));\n        return;\n      }\n      void this.startHydration(trace);\n    }\n    this.#rehydratingWindow.removeEventListener('message', this.#onReceiveHostWindowPayloadBound);\n  }\n\n  async startHydration(trace: TraceObject): Promise<boolean> {\n    // OnMessage should've been set before hydration, and the connection should\n    // be initialized and not hydrated already.\n    if (!this.onMessage || this.rehydratingConnectionState !== RehydratingConnectionState.INITIALIZED) {\n      return false;\n    }\n\n    if (!('traceEvents' in trace)) {\n      console.error('RehydratingConnection failed to initialize due to missing trace events in payload');\n      return false;\n    }\n\n    this.trace = trace;\n    const enhancedTracesParser = new EnhancedTraces.EnhancedTracesParser(trace);\n    const hydratingData = enhancedTracesParser.data();\n\n    let sessionId = 0;\n    // Set up default rehydrating session.\n    this.sessions.set(sessionId, new RehydratingSessionBase(this));\n    for (const hydratingDataPerTarget of hydratingData) {\n      const target = hydratingDataPerTarget.target;\n      const executionContexts = hydratingDataPerTarget.executionContexts;\n      const scripts = hydratingDataPerTarget.scripts;\n      const resources = hydratingDataPerTarget.resources;\n      this.postToFrontend({\n        method: 'Target.targetCreated',\n        params: {\n          targetInfo: {\n            targetId: target.targetId,\n            type: target.type,\n            title: target.url,\n            url: target.url,\n            attached: false,\n            canAccessOpener: false,\n          },\n        },\n      });\n\n      sessionId += 1;\n      const session = new RehydratingSession(sessionId, target, executionContexts, scripts, resources, this);\n      this.sessions.set(sessionId, session);\n      session.declareSessionAttachedToTarget();\n    }\n    await this.#onRehydrated();\n    return true;\n  }\n\n  async #onRehydrated(): Promise<void> {\n    if (!this.trace) {\n      return;\n    }\n\n    this.rehydratingConnectionState = RehydratingConnectionState.REHYDRATED;\n    // Use revealer to load trace into performance panel\n    await Common.Revealer.reveal(this.trace);\n  }\n\n  setOnMessage(onMessage: (arg0: Object|string) => void): void {\n    this.onMessage = onMessage;\n    this.rehydratingConnectionState = RehydratingConnectionState.INITIALIZED;\n  }\n\n  setOnDisconnect(onDisconnect: (arg0: string) => void): void {\n    this.onDisconnect = onDisconnect;\n  }\n\n  // The function \"sendRawMessage\" is typically devtools front-end\n  // sending message to the backend via CDP. In this case, given that Rehydrating\n  // connection is an emulation of devtool back-end, sendRawMessage here\n  // is in fact rehydrating connection directly handling and acting on the\n  // receieved message.\n  sendRawMessage(message: string|object): void {\n    if (typeof message === 'string') {\n      message = JSON.parse(message);\n    }\n    const data = message as ProtocolMessage;\n    if (typeof data.sessionId !== 'undefined') {\n      const session = this.sessions.get(data.sessionId);\n      if (session) {\n        session.handleFrontendMessageAsFakeCDPAgent(data);\n      } else {\n        console.error('Invalid SessionId: ' + data.sessionId);\n      }\n    } else {\n      this.sessions.get(0)?.handleFrontendMessageAsFakeCDPAgent(data);\n    }\n  }\n\n  // Posting rehydrating connection's message/response\n  // to devtools frontend through debugger protocol.\n  postToFrontend(arg: ServerMessage): void {\n    if (this.onMessage) {\n      this.onMessage(arg);\n    } else {\n      // onMessage should be set before the connection is rehydrated\n      console.error('onMessage was not initialized');\n    }\n  }\n\n  disconnect(): Promise<void> {\n    return Promise.reject();\n  }\n}\n\n/** Default rehydrating session with default responses. **/\nclass RehydratingSessionBase {\n  connection: RehydratingConnectionInterface|null = null;\n\n  constructor(connection: RehydratingConnectionInterface) {\n    this.connection = connection;\n  }\n\n  sendMessageToFrontend(payload: ServerMessage): void {\n    // The frontend doesn't expect CDP responses within the same synchronous event loop, so it breaks unexpectedly.\n    //  Any async boundary will do, so we use setTimeout.\n    setTimeout(() => {\n      this.connection?.postToFrontend(payload);\n    });\n  }\n\n  handleFrontendMessageAsFakeCDPAgent(data: ProtocolMessage): void {\n    // Send default response in default session.\n    this.sendMessageToFrontend({\n      id: data.id,\n      result: {},\n    });\n  }\n}\n\nexport class RehydratingSession extends RehydratingSessionBase {\n  sessionId: number;\n  target: RehydratingTarget;\n  executionContexts: RehydratingExecutionContext[] = [];\n  scripts: RehydratingScript[] = [];\n  resources: RehydratingResource[] = [];\n\n  constructor(\n      sessionId: number, target: RehydratingTarget, executionContexts: RehydratingExecutionContext[],\n      scripts: RehydratingScript[], resources: RehydratingResource[], connection: RehydratingConnectionInterface) {\n    super(connection);\n    this.sessionId = sessionId;\n    this.target = target;\n    this.executionContexts = executionContexts;\n    this.scripts = scripts;\n    this.resources = resources;\n  }\n\n  override sendMessageToFrontend(payload: ServerMessage, attachSessionId = true): void {\n    // Attach the session's Id to the message.\n    if (this.sessionId !== 0 && attachSessionId) {\n      payload.sessionId = this.sessionId;\n    }\n    super.sendMessageToFrontend(payload);\n  }\n\n  override handleFrontendMessageAsFakeCDPAgent(data: ProtocolMessage): void {\n    switch (data.method) {\n      case 'Runtime.enable':\n        this.handleRuntimeEnabled(data.id);\n        break;\n      case 'Debugger.enable':\n        this.handleDebuggerEnable(data.id);\n        break;\n      case 'CSS.enable':\n        this.sendMessageToFrontend({\n          id: data.id,\n          result: {},\n        });\n        break;\n      case 'Debugger.getScriptSource':\n        if (data.params) {\n          const params = data.params as Protocol.Debugger.GetScriptSourceRequest;\n          this.handleDebuggerGetScriptSource(data.id, params.scriptId);\n        }\n        break;\n      case 'Page.getResourceTree':\n        this.handleGetResourceTree(data.id);\n        break;\n      case 'Page.getResourceContent': {\n        const request = data.params as unknown as Protocol.Page.GetResourceContentRequest;\n        this.handleGetResourceContent(request.frameId, request.url, data.id);\n        break;\n      }\n      case 'CSS.getStyleSheetText': {\n        const request = data.params as unknown as Protocol.CSS.GetStyleSheetTextRequest;\n        this.handleGetStyleSheetText(request.styleSheetId, data.id);\n        break;\n      }\n      default:\n        this.sendMessageToFrontend({\n          id: data.id,\n          result: {},\n        });\n        break;\n    }\n  }\n\n  declareSessionAttachedToTarget(): void {\n    this.sendMessageToFrontend(\n        {\n          method: 'Target.attachedToTarget',\n          params: {\n            sessionId: this.sessionId,\n            waitingForDebugger: false,\n            targetInfo: {\n              targetId: this.target.targetId,\n              type: this.target.type,\n              title: this.target.url,\n              url: this.target.url,\n              attached: true,\n              canAccessOpener: false,\n            },\n          },\n        },\n        /* attachSessionId */ false);\n  }\n\n  // Runtime.Enable indicates that Runtime domain is flushing the event to communicate\n  // the current state with the backend. In rehydrating connection, we made up the artificial\n  // execution context to support the rehydrated session.\n  private handleRuntimeEnabled(id: number): void {\n    for (const executionContext of this.executionContexts) {\n      executionContext.name = executionContext.origin;\n      this.sendMessageToFrontend({\n        method: 'Runtime.executionContextCreated',\n        params: {\n          context: executionContext,\n        },\n      });\n    }\n\n    this.sendMessageToFrontend({\n      id,\n      result: {},\n    });\n  }\n\n  private handleDebuggerGetScriptSource(id: number, scriptId: Protocol.Runtime.ScriptId): void {\n    const script = this.scripts.find(script => script.scriptId === scriptId);\n    if (!script) {\n      console.error('No script for id: ' + scriptId);\n      return;\n    }\n    this.sendMessageToFrontend({\n      id,\n      result: {\n        scriptSource: typeof script.sourceText === 'undefined' ? i18nString(UIStrings.noSourceText) : script.sourceText,\n      },\n    });\n  }\n\n  // Debugger.Enable indicates that Debugger domain is flushing the event to communicate\n  // the current state with the backend. In rehydrating connection, we made up the artificial\n  // script parsed event to communicate the current script state and respond with a mock\n  // debugger id.\n  private handleDebuggerEnable(id: number): void {\n    const htmlResourceUrls = new Set(this.resources.filter(r => r.mimeType === 'text/html').map(r => r.url));\n\n    for (const script of this.scripts) {\n      // Handle inline scripts.\n      if (htmlResourceUrls.has(script.url)) {\n        script.embedderName = script.url;\n        // We don't have the actual embedded offset from this trace event. Non-zero\n        // values are important though: that is what `Script.isInlineScript()`\n        // checks. Otherwise these scripts would try to show individually within the\n        // Sources panel.\n        script.startColumn = 1;\n        script.startLine = 1;\n        script.endColumn = 1;\n        script.endLine = 1;\n      }\n\n      this.sendMessageToFrontend({\n        method: 'Debugger.scriptParsed',\n        params: script,\n      });\n    }\n\n    const mockDebuggerId = '7777777777777777777.8888888888888888888';\n    this.sendMessageToFrontend({\n      id,\n      result: {\n        debuggerId: mockDebuggerId,\n      },\n    });\n  }\n\n  private handleGetResourceTree(id: number): void {\n    const resources = this.resources.filter(r => r.mimeType === 'text/html' || r.mimeType === 'text/css');\n    if (!resources.length) {\n      return;\n    }\n\n    const frameTree = {\n      frame: {\n        id: this.target.targetId,\n        url: this.target.url,\n      },\n      childFrames: [],\n      resources: resources.map(r => ({\n                                 url: r.url,\n                                 type: r.mimeType === 'text/html' ? 'Document' : 'Stylesheet',\n                                 mimeType: r.mimeType,\n                                 contentSize: r.content.length,\n                               })),\n    };\n\n    this.sendMessageToFrontend({\n      id,\n      result: {\n        frameTree,\n      },\n    });\n\n    const stylesheets = this.resources.filter(r => r.mimeType === 'text/css');\n    for (const stylesheet of stylesheets) {\n      this.sendMessageToFrontend({\n        method: 'CSS.styleSheetAdded',\n        params: {\n          header: {\n            styleSheetId: `sheet.${stylesheet.frame}.${stylesheet.url}`,\n            frameId: stylesheet.frame,\n            sourceURL: stylesheet.url,\n          },\n        },\n      });\n    }\n  }\n\n  private handleGetResourceContent(frame: string, url: string, id: number): void {\n    const resource = this.resources.find(r => r.frame === frame && r.url === url);\n    if (!resource) {\n      return;\n    }\n\n    this.sendMessageToFrontend({\n      id,\n      result: {\n        content: resource.content,\n        base64Encoded: false,\n      },\n    });\n  }\n\n  private handleGetStyleSheetText(stylesheetId: string, id: number): void {\n    const resource = this.resources.find(r => `sheet.${r.frame}.${r.url}` === stylesheetId);\n    if (!resource) {\n      return;\n    }\n\n    this.sendMessageToFrontend({\n      id,\n      result: {\n        text: resource.content,\n      },\n    });\n  }\n}\n"]}