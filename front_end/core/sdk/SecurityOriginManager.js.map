{"version":3,"file":"SecurityOriginManager.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/SecurityOriginManager.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,QAAQ,EAAC,MAAM,eAAe,CAAC;AAGvC,MAAM,OAAO,qBAAsB,SAAQ,QAAoB;IAC7D,qEAAqE;IACrE,iFAAiF;IACjF,yEAAyE;IACzE,0EAA0E;IAC1E,mBAAmB,GAAG,EAAE,CAAC;IACzB,8BAA8B,GAAgB,EAAE,CAAC;IACjD,gBAAgB,GAAG,IAAI,GAAG,EAAU,CAAC;IAErC,qBAAqB,CAAC,eAA4B;QAChD,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC;QACzC,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;QAExC,KAAK,MAAM,MAAM,IAAI,UAAU,EAAE,CAAC;YAChC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;gBACvC,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC;YACtE,CAAC;QACH,CAAC;QAED,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC3C,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;gBAC5B,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;YACpE,CAAC;QACH,CAAC;IACH,CAAC;IAED,eAAe;QACb,OAAO,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACpC,CAAC;IAED,kBAAkB;QAChB,OAAO,IAAI,CAAC,mBAAmB,CAAC;IAClC,CAAC;IAED,6BAA6B;QAC3B,OAAO,IAAI,CAAC,8BAA8B,CAAC;IAC7C,CAAC;IAED,qBAAqB,CAAC,cAAsB,EAAE,yBAAiC;QAC7E,IAAI,CAAC,mBAAmB,GAAG,cAAc,CAAC;QAC1C,IAAI,CAAC,8BAA8B,GAAG,yBAAyB,IAAI,IAAI,CAAC;QACxE,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,yBAAyB,EAAE;YAC9D,kBAAkB,EAAE,IAAI,CAAC,mBAAmB;YAC5C,6BAA6B,EAAE,IAAI,CAAC,8BAA8B;SACnE,CAAC,CAAC;IACL,CAAC;CACF;AAED,MAAM,CAAN,IAAY,MAMX;AAND,WAAY,MAAM;IAChB,+EAA+E;IAC/E,qDAA2C,CAAA;IAC3C,yDAA+C,CAAA;IAC/C,iEAAuD,CAAA;IACvD,wDAAwD;AAC1D,CAAC,EANW,MAAM,KAAN,MAAM,QAMjB;AAaD,6FAA6F;AAC7F,QAAQ,CAAC,QAAQ,CAAC,qBAAqB,EAAE,EAAC,YAAY,yBAAiB,EAAE,SAAS,EAAE,KAAK,EAAC,CAAC,CAAC","sourcesContent":["// Copyright 2016 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {SDKModel} from './SDKModel.js';\nimport {Capability} from './Target.js';\n\nexport class SecurityOriginManager extends SDKModel<EventTypes> {\n  // if a URL is unreachable, the browser will jump to an error page at\n  // 'chrome-error://chromewebdata/', and |this.#mainSecurityOriginInternal| stores\n  // its origin. In this situation, the original unreachable URL's security\n  // origin will be stored in |this.#unreachableMainSecurityOriginInternal|.\n  #mainSecurityOrigin = '';\n  #unreachableMainSecurityOrigin: string|null = '';\n  #securityOrigins = new Set<string>();\n\n  updateSecurityOrigins(securityOrigins: Set<string>): void {\n    const oldOrigins = this.#securityOrigins;\n    this.#securityOrigins = securityOrigins;\n\n    for (const origin of oldOrigins) {\n      if (!this.#securityOrigins.has(origin)) {\n        this.dispatchEventToListeners(Events.SecurityOriginRemoved, origin);\n      }\n    }\n\n    for (const origin of this.#securityOrigins) {\n      if (!oldOrigins.has(origin)) {\n        this.dispatchEventToListeners(Events.SecurityOriginAdded, origin);\n      }\n    }\n  }\n\n  securityOrigins(): string[] {\n    return [...this.#securityOrigins];\n  }\n\n  mainSecurityOrigin(): string {\n    return this.#mainSecurityOrigin;\n  }\n\n  unreachableMainSecurityOrigin(): string|null {\n    return this.#unreachableMainSecurityOrigin;\n  }\n\n  setMainSecurityOrigin(securityOrigin: string, unreachableSecurityOrigin: string): void {\n    this.#mainSecurityOrigin = securityOrigin;\n    this.#unreachableMainSecurityOrigin = unreachableSecurityOrigin || null;\n    this.dispatchEventToListeners(Events.MainSecurityOriginChanged, {\n      mainSecurityOrigin: this.#mainSecurityOrigin,\n      unreachableMainSecurityOrigin: this.#unreachableMainSecurityOrigin,\n    });\n  }\n}\n\nexport enum Events {\n  /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n  SecurityOriginAdded = 'SecurityOriginAdded',\n  SecurityOriginRemoved = 'SecurityOriginRemoved',\n  MainSecurityOriginChanged = 'MainSecurityOriginChanged',\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport interface MainSecurityOriginChangedEvent {\n  mainSecurityOrigin: string;\n  unreachableMainSecurityOrigin: string|null;\n}\n\nexport interface EventTypes {\n  [Events.SecurityOriginAdded]: string;\n  [Events.SecurityOriginRemoved]: string;\n  [Events.MainSecurityOriginChanged]: MainSecurityOriginChangedEvent;\n}\n\n// TODO(jarhar): this is the one of the two usages of Capability.None. Do something about it!\nSDKModel.register(SecurityOriginManager, {capabilities: Capability.NONE, autostart: false});\n"]}