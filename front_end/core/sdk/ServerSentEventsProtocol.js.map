{"version":3,"file":"ServerSentEventsProtocol.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/ServerSentEventsProtocol.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAI7B;;;;;;;;;;GAUG;AACH,MAAM,OAAO,sBAAsB;IACjC,gBAAgB,CAA6D;IAC7E,QAAQ,CAAoB;IAE5B,gBAAgB;IAChB,kBAAkB,GAAG,KAAK,CAAC;IAC3B,KAAK,GAAG,EAAE,CAAC;IACX,GAAG,GAAG,EAAE,CAAC;IACT,KAAK,GAAG,EAAE,CAAC;IACX,UAAU,GAAG,EAAE,CAAC;IAEhB,YAAY,QAAoE,EAAE,aAAsB;QACtG,IAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,aAAa,CAAC,CAAC;IACrF,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,GAAoB;QACvC,MAAM,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;IAC1C,CAAC;IAED,YAAY,CAAC,KAAa;QACxB,mFAAmF;QACnF,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;YACtC,IAAI,IAAI,CAAC,kBAAkB,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;gBACjD,sCAAsC;gBACtC,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;gBAChC,EAAE,KAAK,CAAC;gBACR,SAAS;YACX,CAAC;YACD,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;YAChC,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;gBAC3C,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBACxC,IAAI,CAAC,UAAU,EAAE,CAAC;gBAClB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;gBAChB,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;gBACd,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC;YAC9C,CAAC;QACH,CAAC;QACD,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC;IAED,UAAU;QACR,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC5B,kDAAkD;YAClD,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC1B,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAE,2BAA2B;gBAClE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,IAAI,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;gBACpE,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;YAClB,CAAC;YACD,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;YACrB,OAAO;QACT,CAAC;QAED,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC3C,IAAI,eAAe,CAAC;QACpB,IAAI,YAAY,GAAG,CAAC,EAAE,CAAC;YACrB,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;YACjC,eAAe,GAAG,YAAY,CAAC;QACjC,CAAC;aAAM,CAAC;YACN,eAAe,GAAG,YAAY,GAAG,CAAC,CAAC;YACnC,IAAI,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,KAAK,GAAG,EAAE,CAAC;gBAC/E,4CAA4C;gBAC5C,EAAE,eAAe,CAAC;YACpB,CAAC;QACH,CAAC;QACD,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;QACxD,IAAI,SAAS,KAAK,OAAO,EAAE,CAAC;YAC1B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;YACxD,OAAO;QACT,CAAC;QACD,IAAI,SAAS,KAAK,MAAM,EAAE,CAAC;YACzB,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;YACpD,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC;QACrB,CAAC;QACD,IAAI,SAAS,KAAK,IAAI,EAAE,CAAC;YACvB,8EAA8E;YAC9E,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;QACnD,CAAC;QACD,sFAAsF;IACxF,CAAC;CACF;AAED;;;GAGG;AACH,MAAM,iBAAiB;IACrB,QAAQ,CAAoB;IAC5B,OAAO,CAA8B;IAErC,YAAY,WAAoC,EAAE,aAAsB;QACtE,IAAI,CAAC,QAAQ,GAAG,IAAI,iBAAiB,CAAC,aAAa,CAAC,CAAC;QACrD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;QAClD,KAAK,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,cAAc,CAAC,EAAC,KAAK,EAAE,WAAW,EAAC,CAAC,CAAC,CAAC;IAC/E,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,KAAsB;QACzC,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrC,MAAM,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAW,CAAC,CAAC;QAE1E,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;QACzB,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;CACF","sourcesContent":["// Copyright 2023 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\n\n/**\n * Implements Server-Sent-Events protocl parsing as described by\n * https://html.spec.whatwg.org/multipage/server-sent-events.html#parsing-an-event-stream\n *\n * Webpages can use SSE over fetch/XHR and not go through EventSource. DevTools\n * only receives the raw binary data in this case, which means we have to decode\n * and parse the event stream ourselves here.\n *\n * Implementation mostly ported over from blink\n * third_party/blink/renderer/modules/eventsource/event_source_parser.cc.\n */\nexport class ServerSentEventsParser {\n  #onEventCallback: (eventType: string, data: string, eventId: string) => void;\n  #decoder: Base64TextDecoder;\n\n  // Parser state.\n  #isRecognizingCrLf = false;\n  #line = '';\n  #id = '';\n  #data = '';\n  #eventType = '';\n\n  constructor(callback: (eventType: string, data: string, eventId: string) => void, encodingLabel?: string) {\n    this.#onEventCallback = callback;\n    this.#decoder = new Base64TextDecoder(this.#onTextChunk.bind(this), encodingLabel);\n  }\n\n  async addBase64Chunk(raw: Protocol.binary): Promise<void> {\n    await this.#decoder.addBase64Chunk(raw);\n  }\n\n  #onTextChunk(chunk: string): void {\n    // A line consists of \"this.#line\" plus a slice of \"chunk[start:<next new cr/lf>]\".\n    let start = 0;\n    for (let i = 0; i < chunk.length; ++i) {\n      if (this.#isRecognizingCrLf && chunk[i] === '\\n') {\n        // We found the latter part of \"\\r\\n\".\n        this.#isRecognizingCrLf = false;\n        ++start;\n        continue;\n      }\n      this.#isRecognizingCrLf = false;\n      if (chunk[i] === '\\r' || chunk[i] === '\\n') {\n        this.#line += chunk.substring(start, i);\n        this.#parseLine();\n        this.#line = '';\n        start = i + 1;\n        this.#isRecognizingCrLf = chunk[i] === '\\r';\n      }\n    }\n    this.#line += chunk.substring(start);\n  }\n\n  #parseLine(): void {\n    if (this.#line.length === 0) {\n      // We dispatch an event when seeing an empty line.\n      if (this.#data.length > 0) {\n        const data = this.#data.slice(0, -1);  // Remove the last newline.\n        this.#onEventCallback(this.#eventType || 'message', data, this.#id);\n        this.#data = '';\n      }\n      this.#eventType = '';\n      return;\n    }\n\n    let fieldNameEnd = this.#line.indexOf(':');\n    let fieldValueStart;\n    if (fieldNameEnd < 0) {\n      fieldNameEnd = this.#line.length;\n      fieldValueStart = fieldNameEnd;\n    } else {\n      fieldValueStart = fieldNameEnd + 1;\n      if (fieldValueStart < this.#line.length && this.#line[fieldValueStart] === ' ') {\n        // Skip a single space preceeding the value.\n        ++fieldValueStart;\n      }\n    }\n    const fieldName = this.#line.substring(0, fieldNameEnd);\n    if (fieldName === 'event') {\n      this.#eventType = this.#line.substring(fieldValueStart);\n      return;\n    }\n    if (fieldName === 'data') {\n      this.#data += this.#line.substring(fieldValueStart);\n      this.#data += '\\n';\n    }\n    if (fieldName === 'id') {\n      // We should do a check here whether the id field contains \"\\0\" and ignore it.\n      this.#id = this.#line.substring(fieldValueStart);\n    }\n    // Ignore all other fields. Also ignore \"retry\", we won't forward that to the backend.\n  }\n}\n\n/**\n * Small helper class that can decode a stream of base64 encoded bytes. Specify the\n * text encoding for the raw bytes via constructor. Default is utf-8.\n */\nclass Base64TextDecoder {\n  #decoder: TextDecoderStream;\n  #writer: WritableStreamDefaultWriter;\n\n  constructor(onTextChunk: (chunk: string) => void, encodingLabel?: string) {\n    this.#decoder = new TextDecoderStream(encodingLabel);\n    this.#writer = this.#decoder.writable.getWriter();\n    void this.#decoder.readable.pipeTo(new WritableStream({write: onTextChunk}));\n  }\n\n  async addBase64Chunk(chunk: Protocol.binary): Promise<void> {\n    const binString = window.atob(chunk);\n    const bytes = Uint8Array.from(binString, m => m.codePointAt(0) as number);\n\n    await this.#writer.ready;\n    await this.#writer.write(bytes);\n  }\n}\n"]}