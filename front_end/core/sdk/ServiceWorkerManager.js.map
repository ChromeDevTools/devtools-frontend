{"version":3,"file":"ServiceWorkerManager.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/ServiceWorkerManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2011 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\nimport type * as Platform from '../platform/platform.js';\n\nimport {Events as RuntimeModelEvents, type ExecutionContext, RuntimeModel} from './RuntimeModel.js';\nimport {SDKModel} from './SDKModel.js';\nimport {Capability, type Target, Type} from './Target.js';\nimport {TargetManager} from './TargetManager.js';\n\nconst UIStrings = {\n  /**\n   * @description Service worker running status displayed in the Service Workers view in the Application panel\n   */\n  running: 'running',\n  /**\n   * @description Service worker running status displayed in the Service Workers view in the Application panel\n   */\n  starting: 'starting',\n  /**\n   * @description Service worker running status displayed in the Service Workers view in the Application panel\n   */\n  stopped: 'stopped',\n  /**\n   * @description Service worker running status displayed in the Service Workers view in the Application panel\n   */\n  stopping: 'stopping',\n  /**\n   * @description Service worker version status displayed in the Threads view of the Debugging side pane in the Sources panel\n   */\n  activated: 'activated',\n  /**\n   * @description Service worker version status displayed in the Threads view of the Debugging side pane in the Sources panel\n   */\n  activating: 'activating',\n  /**\n   * @description Service worker version status displayed in the Threads view of the Debugging side pane in the Sources panel\n   */\n  installed: 'installed',\n  /**\n   * @description Service worker version status displayed in the Threads view of the Debugging side pane in the Sources panel\n   */\n  installing: 'installing',\n  /**\n   * @description Service worker version status displayed in the Threads view of the Debugging side pane in the Sources panel\n   */\n  new: 'new',\n  /**\n   * @description Service worker version status displayed in the Threads view of the Debugging side pane in the Sources panel\n   */\n  redundant: 'redundant',\n  /**\n   * @description Service worker version status displayed in the Threads view of the Debugging side pane in the Sources panel\n   * @example {sw.js} PH1\n   * @example {117} PH2\n   * @example {activated} PH3\n   */\n  sSS: '{PH1} #{PH2} ({PH3})',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/ServiceWorkerManager.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nexport class ServiceWorkerManager extends SDKModel<EventTypes> {\n  readonly #agent: ProtocolProxyApi.ServiceWorkerApi;\n  readonly #registrations = new Map<string, ServiceWorkerRegistration>();\n  #enabled = false;\n  readonly #forceUpdateSetting: Common.Settings.Setting<boolean>;\n\n  constructor(target: Target) {\n    super(target);\n    target.registerServiceWorkerDispatcher(new ServiceWorkerDispatcher(this));\n    this.#agent = target.serviceWorkerAgent();\n    void this.enable();\n    this.#forceUpdateSetting =\n        Common.Settings.Settings.instance().createSetting('service-worker-update-on-reload', false);\n    if (this.#forceUpdateSetting.get()) {\n      this.forceUpdateSettingChanged();\n    }\n    this.#forceUpdateSetting.addChangeListener(this.forceUpdateSettingChanged, this);\n    new ServiceWorkerContextNamer(target, this);\n  }\n\n  async enable(): Promise<void> {\n    if (this.#enabled) {\n      return;\n    }\n    this.#enabled = true;\n    await this.#agent.invoke_enable();\n  }\n\n  async disable(): Promise<void> {\n    if (!this.#enabled) {\n      return;\n    }\n    this.#enabled = false;\n    this.#registrations.clear();\n    await this.#agent.invoke_enable();\n  }\n\n  registrations(): Map<string, ServiceWorkerRegistration> {\n    return this.#registrations;\n  }\n\n  findVersion(versionId: string): ServiceWorkerVersion|null {\n    for (const registration of this.registrations().values()) {\n      const version = registration.versions.get(versionId);\n      if (version) {\n        return version;\n      }\n    }\n    return null;\n  }\n\n  deleteRegistration(registrationId: string): void {\n    const registration = this.#registrations.get(registrationId);\n    if (!registration) {\n      return;\n    }\n    if (registration.isRedundant()) {\n      this.#registrations.delete(registrationId);\n      this.dispatchEventToListeners(Events.REGISTRATION_DELETED, registration);\n      return;\n    }\n    registration.deleting = true;\n    for (const version of registration.versions.values()) {\n      void this.stopWorker(version.id);\n    }\n    void this.unregister(registration.scopeURL);\n  }\n\n  async updateRegistration(registrationId: string): Promise<void> {\n    const registration = this.#registrations.get(registrationId);\n    if (!registration) {\n      return;\n    }\n    await this.#agent.invoke_updateRegistration({scopeURL: registration.scopeURL});\n  }\n\n  async deliverPushMessage(registrationId: Protocol.ServiceWorker.RegistrationID, data: string): Promise<void> {\n    const registration = this.#registrations.get(registrationId);\n    if (!registration) {\n      return;\n    }\n    const origin = Common.ParsedURL.ParsedURL.extractOrigin(registration.scopeURL);\n    await this.#agent.invoke_deliverPushMessage({origin, registrationId, data});\n  }\n\n  async dispatchSyncEvent(registrationId: Protocol.ServiceWorker.RegistrationID, tag: string, lastChance: boolean):\n      Promise<void> {\n    const registration = this.#registrations.get(registrationId);\n    if (!registration) {\n      return;\n    }\n    const origin = Common.ParsedURL.ParsedURL.extractOrigin(registration.scopeURL);\n    await this.#agent.invoke_dispatchSyncEvent({origin, registrationId, tag, lastChance});\n  }\n\n  async dispatchPeriodicSyncEvent(registrationId: Protocol.ServiceWorker.RegistrationID, tag: string): Promise<void> {\n    const registration = this.#registrations.get(registrationId);\n    if (!registration) {\n      return;\n    }\n    const origin = Common.ParsedURL.ParsedURL.extractOrigin(registration.scopeURL);\n    await this.#agent.invoke_dispatchPeriodicSyncEvent({origin, registrationId, tag});\n  }\n\n  private async unregister(scopeURL: string): Promise<void> {\n    await this.#agent.invoke_unregister({scopeURL});\n  }\n\n  async startWorker(scopeURL: string): Promise<void> {\n    await this.#agent.invoke_startWorker({scopeURL});\n  }\n\n  async skipWaiting(scopeURL: string): Promise<void> {\n    await this.#agent.invoke_skipWaiting({scopeURL});\n  }\n\n  async stopWorker(versionId: string): Promise<void> {\n    await this.#agent.invoke_stopWorker({versionId});\n  }\n\n  workerRegistrationUpdated(registrations: Protocol.ServiceWorker.ServiceWorkerRegistration[]): void {\n    for (const payload of registrations) {\n      let registration = this.#registrations.get(payload.registrationId);\n      if (!registration) {\n        registration = new ServiceWorkerRegistration(payload);\n        this.#registrations.set(payload.registrationId, registration);\n        this.dispatchEventToListeners(Events.REGISTRATION_UPDATED, registration);\n        continue;\n      }\n      registration.update(payload);\n\n      if (registration.shouldBeRemoved()) {\n        this.#registrations.delete(registration.id);\n        this.dispatchEventToListeners(Events.REGISTRATION_DELETED, registration);\n      } else {\n        this.dispatchEventToListeners(Events.REGISTRATION_UPDATED, registration);\n      }\n    }\n  }\n\n  workerVersionUpdated(versions: Protocol.ServiceWorker.ServiceWorkerVersion[]): void {\n    const registrations = new Set<ServiceWorkerRegistration>();\n    for (const payload of versions) {\n      const registration = this.#registrations.get(payload.registrationId);\n      if (!registration) {\n        continue;\n      }\n      registration.updateVersion(payload);\n      registrations.add(registration);\n    }\n    for (const registration of registrations) {\n      if (registration.shouldBeRemoved()) {\n        this.#registrations.delete(registration.id);\n        this.dispatchEventToListeners(Events.REGISTRATION_DELETED, registration);\n      } else {\n        this.dispatchEventToListeners(Events.REGISTRATION_UPDATED, registration);\n      }\n    }\n  }\n\n  workerErrorReported(payload: Protocol.ServiceWorker.ServiceWorkerErrorMessage): void {\n    const registration = this.#registrations.get(payload.registrationId);\n    if (!registration) {\n      return;\n    }\n    registration.errors.push(payload);\n    this.dispatchEventToListeners(Events.REGISTRATION_ERROR_ADDED, {registration, error: payload});\n  }\n\n  private forceUpdateSettingChanged(): void {\n    const forceUpdateOnPageLoad = this.#forceUpdateSetting.get();\n    void this.#agent.invoke_setForceUpdateOnPageLoad({forceUpdateOnPageLoad});\n  }\n}\n\nexport const enum Events {\n  REGISTRATION_UPDATED = 'RegistrationUpdated',\n  REGISTRATION_ERROR_ADDED = 'RegistrationErrorAdded',\n  REGISTRATION_DELETED = 'RegistrationDeleted',\n}\n\nexport interface RegistrationErrorAddedEvent {\n  registration: ServiceWorkerRegistration;\n  error: Protocol.ServiceWorker.ServiceWorkerErrorMessage;\n}\n\nexport interface EventTypes {\n  [Events.REGISTRATION_UPDATED]: ServiceWorkerRegistration;\n  [Events.REGISTRATION_ERROR_ADDED]: RegistrationErrorAddedEvent;\n  [Events.REGISTRATION_DELETED]: ServiceWorkerRegistration;\n}\n\nclass ServiceWorkerDispatcher implements ProtocolProxyApi.ServiceWorkerDispatcher {\n  readonly #manager: ServiceWorkerManager;\n  constructor(manager: ServiceWorkerManager) {\n    this.#manager = manager;\n  }\n\n  workerRegistrationUpdated({registrations}: Protocol.ServiceWorker.WorkerRegistrationUpdatedEvent): void {\n    this.#manager.workerRegistrationUpdated(registrations);\n  }\n\n  workerVersionUpdated({versions}: Protocol.ServiceWorker.WorkerVersionUpdatedEvent): void {\n    this.#manager.workerVersionUpdated(versions);\n  }\n\n  workerErrorReported({errorMessage}: Protocol.ServiceWorker.WorkerErrorReportedEvent): void {\n    this.#manager.workerErrorReported(errorMessage);\n  }\n}\n\n/**\n * For every version, we keep a history of ServiceWorkerVersionState. Every time\n * a version is updated we will add a new state at the head of the history chain.\n * This history tells us information such as what the current state is, or when\n * the version becomes installed.\n */\nexport class ServiceWorkerVersionState {\n  runningStatus: Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus;\n  status: Protocol.ServiceWorker.ServiceWorkerVersionStatus;\n  lastUpdatedTimestamp: number;\n  previousState: ServiceWorkerVersionState|null;\n  constructor(\n      runningStatus: Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus,\n      status: Protocol.ServiceWorker.ServiceWorkerVersionStatus, previousState: ServiceWorkerVersionState|null,\n      timestamp: number) {\n    this.runningStatus = runningStatus;\n    this.status = status;\n    this.lastUpdatedTimestamp = timestamp;\n    this.previousState = previousState;\n  }\n}\n\nexport class ServiceWorkerRouterRule {\n  condition: string;\n  source: string;\n  id: number;\n  constructor(condition: string, source: string, id: number) {\n    this.condition = condition;\n    this.source = source;\n    this.id = id;\n  }\n}\n\nexport class ServiceWorkerVersion {\n  id!: string;\n  scriptURL!: Platform.DevToolsPath.UrlString;\n  parsedURL!: Common.ParsedURL.ParsedURL;\n  securityOrigin!: string;\n  scriptLastModified!: number|undefined;\n  scriptResponseTime!: number|undefined;\n  controlledClients!: Protocol.Target.TargetID[];\n  targetId!: string|null;\n  routerRules!: ServiceWorkerRouterRule[]|null;\n  currentState!: ServiceWorkerVersionState;\n  registration: ServiceWorkerRegistration;\n  constructor(registration: ServiceWorkerRegistration, payload: Protocol.ServiceWorker.ServiceWorkerVersion) {\n    this.registration = registration;\n    this.update(payload);\n  }\n\n  update(payload: Protocol.ServiceWorker.ServiceWorkerVersion): void {\n    this.id = payload.versionId;\n    this.scriptURL = payload.scriptURL as Platform.DevToolsPath.UrlString;\n    const parsedURL = new Common.ParsedURL.ParsedURL(payload.scriptURL);\n    this.securityOrigin = parsedURL.securityOrigin();\n    this.currentState =\n        new ServiceWorkerVersionState(payload.runningStatus, payload.status, this.currentState, Date.now());\n    this.scriptLastModified = payload.scriptLastModified;\n    this.scriptResponseTime = payload.scriptResponseTime;\n    if (payload.controlledClients) {\n      this.controlledClients = payload.controlledClients.slice();\n    } else {\n      this.controlledClients = [];\n    }\n    this.targetId = payload.targetId || null;\n    this.routerRules = null;\n    if (payload.routerRules) {\n      this.routerRules = this.parseJSONRules(payload.routerRules);\n    }\n  }\n\n  isStartable(): boolean {\n    return !this.registration.isDeleted && this.isActivated() && this.isStopped();\n  }\n\n  isStoppedAndRedundant(): boolean {\n    return this.runningStatus === Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopped &&\n        this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Redundant;\n  }\n\n  isStopped(): boolean {\n    return this.runningStatus === Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopped;\n  }\n\n  isStarting(): boolean {\n    return this.runningStatus === Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Starting;\n  }\n\n  isRunning(): boolean {\n    return this.runningStatus === Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Running;\n  }\n\n  isStopping(): boolean {\n    return this.runningStatus === Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopping;\n  }\n\n  isNew(): boolean {\n    return this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.New;\n  }\n\n  isInstalling(): boolean {\n    return this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installing;\n  }\n\n  isInstalled(): boolean {\n    return this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installed;\n  }\n\n  isActivating(): boolean {\n    return this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activating;\n  }\n\n  isActivated(): boolean {\n    return this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activated;\n  }\n\n  isRedundant(): boolean {\n    return this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Redundant;\n  }\n\n  get status(): Protocol.ServiceWorker.ServiceWorkerVersionStatus {\n    return this.currentState.status;\n  }\n\n  get runningStatus(): Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus {\n    return this.currentState.runningStatus;\n  }\n\n  mode(): string {\n    if (this.isNew() || this.isInstalling()) {\n      return ServiceWorkerVersion.Modes.INSTALLING;\n    }\n    if (this.isInstalled()) {\n      return ServiceWorkerVersion.Modes.WAITING;\n    }\n    if (this.isActivating() || this.isActivated()) {\n      return ServiceWorkerVersion.Modes.ACTIVE;\n    }\n    return ServiceWorkerVersion.Modes.REDUNDANT;\n  }\n\n  private parseJSONRules(input: string): ServiceWorkerRouterRule[]|null {\n    try {\n      const parsedObject = JSON.parse(input);\n      if (!Array.isArray(parsedObject)) {\n        console.error('Parse error: `routerRules` in ServiceWorkerVersion should be an array');\n        return null;\n      }\n      const routerRules: ServiceWorkerRouterRule[] = [];\n      for (const parsedRule of parsedObject) {\n        const {condition, source, id} = parsedRule;\n        if (condition === undefined || source === undefined || id === undefined) {\n          console.error('Parse error: Missing some fields of `routerRules` in ServiceWorkerVersion');\n          return null;\n        }\n        routerRules.push(new ServiceWorkerRouterRule(JSON.stringify(condition), JSON.stringify(source), id));\n      }\n      return routerRules;\n    } catch {\n      console.error('Parse error: Invalid `routerRules` in ServiceWorkerVersion');\n      return null;\n    }\n  }\n}\n\nexport namespace ServiceWorkerVersion {\n  export const RunningStatus = {\n    [Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Running]: i18nLazyString(UIStrings.running),\n    [Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Starting]: i18nLazyString(UIStrings.starting),\n    [Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopped]: i18nLazyString(UIStrings.stopped),\n    [Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopping]: i18nLazyString(UIStrings.stopping),\n  };\n\n  export const Status = {\n    [Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activated]: i18nLazyString(UIStrings.activated),\n    [Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activating]: i18nLazyString(UIStrings.activating),\n    [Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installed]: i18nLazyString(UIStrings.installed),\n    [Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installing]: i18nLazyString(UIStrings.installing),\n    [Protocol.ServiceWorker.ServiceWorkerVersionStatus.New]: i18nLazyString(UIStrings.new),\n    [Protocol.ServiceWorker.ServiceWorkerVersionStatus.Redundant]: i18nLazyString(UIStrings.redundant),\n  };\n\n  export const enum Modes {\n    INSTALLING = 'installing',\n    WAITING = 'waiting',\n    ACTIVE = 'active',\n    REDUNDANT = 'redundant',\n  }\n}\n\nexport class ServiceWorkerRegistration {\n  #fingerprint!: symbol;\n  id!: Protocol.ServiceWorker.RegistrationID;\n  scopeURL!: Platform.DevToolsPath.UrlString;\n  securityOrigin!: Platform.DevToolsPath.UrlString;\n  isDeleted!: boolean;\n  versions = new Map<string, ServiceWorkerVersion>();\n  deleting = false;\n  errors: Protocol.ServiceWorker.ServiceWorkerErrorMessage[] = [];\n\n  constructor(payload: Protocol.ServiceWorker.ServiceWorkerRegistration) {\n    this.update(payload);\n  }\n\n  update(payload: Protocol.ServiceWorker.ServiceWorkerRegistration): void {\n    this.#fingerprint = Symbol('fingerprint');\n    this.id = payload.registrationId;\n    this.scopeURL = payload.scopeURL as Platform.DevToolsPath.UrlString;\n    const parsedURL = new Common.ParsedURL.ParsedURL(payload.scopeURL);\n    this.securityOrigin = parsedURL.securityOrigin();\n    this.isDeleted = payload.isDeleted;\n  }\n\n  fingerprint(): symbol {\n    return this.#fingerprint;\n  }\n\n  versionsByMode(): Map<string, ServiceWorkerVersion> {\n    const result = new Map<string, ServiceWorkerVersion>();\n    for (const version of this.versions.values()) {\n      result.set(version.mode(), version);\n    }\n    return result;\n  }\n\n  updateVersion(payload: Protocol.ServiceWorker.ServiceWorkerVersion): ServiceWorkerVersion {\n    this.#fingerprint = Symbol('fingerprint');\n    let version = this.versions.get(payload.versionId);\n    if (!version) {\n      version = new ServiceWorkerVersion(this, payload);\n      this.versions.set(payload.versionId, version);\n      return version;\n    }\n    version.update(payload);\n    return version;\n  }\n\n  isRedundant(): boolean {\n    for (const version of this.versions.values()) {\n      if (!version.isStoppedAndRedundant()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  shouldBeRemoved(): boolean {\n    return this.isRedundant() && (!this.errors.length || this.deleting);\n  }\n\n  canBeRemoved(): boolean {\n    return this.isDeleted || this.deleting;\n  }\n}\n\nclass ServiceWorkerContextNamer {\n  readonly #target: Target;\n  readonly #serviceWorkerManager: ServiceWorkerManager;\n  readonly #versionByTargetId = new Map<string, ServiceWorkerVersion>();\n\n  constructor(target: Target, serviceWorkerManager: ServiceWorkerManager) {\n    this.#target = target;\n    this.#serviceWorkerManager = serviceWorkerManager;\n    serviceWorkerManager.addEventListener(Events.REGISTRATION_UPDATED, this.registrationsUpdated, this);\n    serviceWorkerManager.addEventListener(Events.REGISTRATION_DELETED, this.registrationsUpdated, this);\n    TargetManager.instance().addModelListener(\n        RuntimeModel, RuntimeModelEvents.ExecutionContextCreated, this.executionContextCreated, this);\n  }\n\n  private registrationsUpdated(): void {\n    this.#versionByTargetId.clear();\n    const registrations = this.#serviceWorkerManager.registrations().values();\n    for (const registration of registrations) {\n      for (const version of registration.versions.values()) {\n        if (version.targetId) {\n          this.#versionByTargetId.set(version.targetId, version);\n        }\n      }\n    }\n    this.updateAllContextLabels();\n  }\n\n  private executionContextCreated(event: Common.EventTarget.EventTargetEvent<ExecutionContext>): void {\n    const executionContext = event.data;\n    const serviceWorkerTargetId = this.serviceWorkerTargetId(executionContext.target());\n    if (!serviceWorkerTargetId) {\n      return;\n    }\n    this.updateContextLabel(executionContext, this.#versionByTargetId.get(serviceWorkerTargetId) || null);\n  }\n\n  private serviceWorkerTargetId(target: Target): string|null {\n    if (target.parentTarget() !== this.#target || target.type() !== Type.ServiceWorker) {\n      return null;\n    }\n    return target.id();\n  }\n\n  private updateAllContextLabels(): void {\n    for (const target of TargetManager.instance().targets()) {\n      const serviceWorkerTargetId = this.serviceWorkerTargetId(target);\n      if (!serviceWorkerTargetId) {\n        continue;\n      }\n      const version = this.#versionByTargetId.get(serviceWorkerTargetId) || null;\n      const runtimeModel = target.model(RuntimeModel);\n      const executionContexts = runtimeModel ? runtimeModel.executionContexts() : [];\n      for (const context of executionContexts) {\n        this.updateContextLabel(context, version);\n      }\n    }\n  }\n\n  private updateContextLabel(context: ExecutionContext, version: ServiceWorkerVersion|null): void {\n    if (!version) {\n      context.setLabel('');\n      return;\n    }\n    const parsedUrl = Common.ParsedURL.ParsedURL.fromString(context.origin);\n    const label = parsedUrl ? parsedUrl.lastPathComponentWithFragment() : context.name;\n    const localizedStatus = ServiceWorkerVersion.Status[version.status];\n    context.setLabel(i18nString(UIStrings.sSS, {PH1: label, PH2: version.id, PH3: localizedStatus()}));\n  }\n}\n\nSDKModel.register(ServiceWorkerManager, {capabilities: Capability.SERVICE_WORKER, autostart: true});\n"]}