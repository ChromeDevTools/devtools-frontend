{"version":3,"file":"SourceMapCache.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/SourceMapCache.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAI7B,uFAAuF;AACvF,MAAM,OAAO,cAAc;IACzB,MAAM,CAAU,SAAS,GAAG,IAAI,cAAc,CAAC,2BAA2B,CAAC,CAAC;IAE5E,MAAM,CAAC,QAAQ;QACb,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,IAAY;QAC/B,OAAO,IAAI,cAAc,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC;IAEQ,KAAK,CAAS;IACvB,aAAa,CAAkB;IAE/B,YAAoB,IAAY;QAC9B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,OAAgB,EAAE,SAAsB;QAChD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;QAClC,MAAM,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,IAAI,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IACnG,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,OAAgB;QACxB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;QAClC,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;QAC3E,OAAO,MAAM,QAAQ,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,MAAM;QACV,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC;QAClC,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpD,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC;IAClC,CAAC;IAED,iJAAiJ;IACjJ,MAAM,CAAC,cAAc,CAAC,OAAgB;QACpC,OAAO,kBAAkB,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC;IAC1D,CAAC;IAED,KAAK,CAAC,cAAc;QAClB,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {DebugId, SourceMapV3} from './SourceMap.js';\n\n/** A thin wrapper around the Cache API to store source map JSONs keyed on Debug IDs */\nexport class SourceMapCache {\n  static readonly #INSTANCE = new SourceMapCache('devtools-source-map-cache');\n\n  static instance(): SourceMapCache {\n    return this.#INSTANCE;\n  }\n\n  static createForTest(name: string): SourceMapCache {\n    return new SourceMapCache(name);\n  }\n\n  readonly #name: string;\n  #cachePromise?: Promise<Cache>;\n\n  private constructor(name: string) {\n    this.#name = name;\n  }\n\n  async set(debugId: DebugId, sourceMap: SourceMapV3): Promise<void> {\n    const cache = await this.#cache();\n    await cache.put(SourceMapCache.#urlForDebugId(debugId), new Response(JSON.stringify(sourceMap)));\n  }\n\n  async get(debugId: DebugId): Promise<SourceMapV3|null> {\n    const cache = await this.#cache();\n    const response = await cache.match(SourceMapCache.#urlForDebugId(debugId));\n    return await response?.json() ?? null;\n  }\n\n  async #cache(): Promise<Cache> {\n    if (this.#cachePromise) {\n      return await this.#cachePromise;\n    }\n\n    this.#cachePromise = window.caches.open(this.#name);\n    return await this.#cachePromise;\n  }\n\n  /** The Cache API only allows URL as keys, so we construct a simple one. Given that we have our own cache, we have no risk of conflicting URLs */\n  static #urlForDebugId(debugId: DebugId): string {\n    return 'http://debug.id/' + encodeURIComponent(debugId);\n  }\n\n  async disposeForTest(): Promise<void> {\n    await window.caches.delete(this.#name);\n  }\n}\n"]}