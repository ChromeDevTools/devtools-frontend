{"version":3,"file":"StorageBucketsModel.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/StorageBucketsModel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport type * as Common from '../common/common.js';\n\nimport {SDKModel} from './SDKModel.js';\nimport {Events as StorageKeyManagerEvents, StorageKeyManager} from './StorageKeyManager.js';\nimport {Capability, type Target} from './Target.js';\n\nexport class StorageBucketsModel extends SDKModel<EventTypes> implements ProtocolProxyApi.StorageDispatcher {\n  private enabled = false;\n  readonly storageAgent: ProtocolProxyApi.StorageApi;\n  private readonly storageKeyManager: StorageKeyManager|null;\n  private bucketsById = new Map<string, Protocol.Storage.StorageBucketInfo>();\n  private trackedStorageKeys = new Set<string>();\n\n  constructor(target: Target) {\n    super(target);\n    target.registerStorageDispatcher(this);\n    this.storageAgent = target.storageAgent();\n    this.storageKeyManager = target.model(StorageKeyManager);\n  }\n\n  getBuckets(): Set<Protocol.Storage.StorageBucketInfo> {\n    return new Set(this.bucketsById.values());\n  }\n\n  getBucketsForStorageKey(storageKey: string): Set<Protocol.Storage.StorageBucketInfo> {\n    const buckets = [...this.bucketsById.values()];\n    return new Set(buckets.filter(({bucket}) => bucket.storageKey === storageKey));\n  }\n\n  getDefaultBucketForStorageKey(storageKey: string): Protocol.Storage.StorageBucketInfo|null {\n    const buckets = [...this.bucketsById.values()];\n    return buckets.find(({bucket}) => bucket.storageKey === storageKey && bucket.name === undefined) ?? null;\n  }\n\n  getBucketById(bucketId: string): Protocol.Storage.StorageBucketInfo|null {\n    return this.bucketsById.get(bucketId) ?? null;\n  }\n\n  getBucketByName(storageKey: string, bucketName?: string): Protocol.Storage.StorageBucketInfo|null {\n    if (!bucketName) {\n      return this.getDefaultBucketForStorageKey(storageKey);\n    }\n    const buckets = [...this.bucketsById.values()];\n    return buckets.find(({bucket}) => bucket.storageKey === storageKey && bucket.name === bucketName) ?? null;\n  }\n\n  deleteBucket(bucket: Protocol.Storage.StorageBucket): void {\n    void this.storageAgent.invoke_deleteStorageBucket({bucket});\n  }\n\n  enable(): void {\n    if (this.enabled) {\n      return;\n    }\n\n    if (this.storageKeyManager) {\n      this.storageKeyManager.addEventListener(StorageKeyManagerEvents.STORAGE_KEY_ADDED, this.storageKeyAdded, this);\n      this.storageKeyManager.addEventListener(\n          StorageKeyManagerEvents.STORAGE_KEY_REMOVED, this.storageKeyRemoved, this);\n      for (const storageKey of this.storageKeyManager.storageKeys()) {\n        this.addStorageKey(storageKey);\n      }\n    }\n\n    this.enabled = true;\n  }\n\n  private storageKeyAdded(event: Common.EventTarget.EventTargetEvent<string>): void {\n    this.addStorageKey(event.data);\n  }\n  private storageKeyRemoved(event: Common.EventTarget.EventTargetEvent<string>): void {\n    this.removeStorageKey(event.data);\n  }\n\n  private addStorageKey(storageKey: string): void {\n    if (this.trackedStorageKeys.has(storageKey)) {\n      throw new Error('Can\\'t call addStorageKey for a storage key if it has already been added.');\n    }\n\n    this.trackedStorageKeys.add(storageKey);\n    void this.storageAgent.invoke_setStorageBucketTracking({storageKey, enable: true});\n  }\n\n  private removeStorageKey(storageKey: string): void {\n    if (!this.trackedStorageKeys.has(storageKey)) {\n      throw new Error('Can\\'t call removeStorageKey for a storage key if it hasn\\'t already been added.');\n    }\n    const bucketsForStorageKey = this.getBucketsForStorageKey(storageKey);\n    for (const bucket of bucketsForStorageKey) {\n      this.bucketRemoved(bucket);\n    }\n    this.trackedStorageKeys.delete(storageKey);\n    void this.storageAgent.invoke_setStorageBucketTracking({storageKey, enable: false});\n  }\n\n  private bucketAdded(bucketInfo: Protocol.Storage.StorageBucketInfo): void {\n    this.bucketsById.set(bucketInfo.id, bucketInfo);\n    this.dispatchEventToListeners(Events.BUCKET_ADDED, {model: this, bucketInfo});\n  }\n\n  private bucketRemoved(bucketInfo: Protocol.Storage.StorageBucketInfo): void {\n    this.bucketsById.delete(bucketInfo.id);\n    this.dispatchEventToListeners(Events.BUCKET_REMOVED, {model: this, bucketInfo});\n  }\n\n  private bucketChanged(bucketInfo: Protocol.Storage.StorageBucketInfo): void {\n    this.dispatchEventToListeners(Events.BUCKET_CHANGED, {model: this, bucketInfo});\n  }\n\n  private bucketInfosAreEqual(\n      bucketInfo1: Protocol.Storage.StorageBucketInfo, bucketInfo2: Protocol.Storage.StorageBucketInfo): boolean {\n    return bucketInfo1.bucket.storageKey === bucketInfo2.bucket.storageKey && bucketInfo1.id === bucketInfo2.id &&\n        bucketInfo1.bucket.name === bucketInfo2.bucket.name && bucketInfo1.expiration === bucketInfo2.expiration &&\n        bucketInfo1.quota === bucketInfo2.quota && bucketInfo1.persistent === bucketInfo2.persistent &&\n        bucketInfo1.durability === bucketInfo2.durability;\n  }\n\n  storageBucketCreatedOrUpdated({bucketInfo}: Protocol.Storage.StorageBucketCreatedOrUpdatedEvent): void {\n    const curBucket = this.getBucketById(bucketInfo.id);\n    if (curBucket) {\n      if (!this.bucketInfosAreEqual(curBucket, bucketInfo)) {\n        this.bucketChanged(bucketInfo);\n      }\n    } else {\n      this.bucketAdded(bucketInfo);\n    }\n  }\n\n  storageBucketDeleted({bucketId}: Protocol.Storage.StorageBucketDeletedEvent): void {\n    const curBucket = this.getBucketById(bucketId);\n    if (curBucket) {\n      this.bucketRemoved(curBucket);\n    } else {\n      throw new Error(\n          `Received an event that Storage Bucket '${bucketId}' was deleted, but it wasn't in the StorageBucketsModel.`);\n    }\n  }\n\n  attributionReportingTriggerRegistered(_event: Protocol.Storage.AttributionReportingTriggerRegisteredEvent): void {\n  }\n\n  interestGroupAccessed(_event: Protocol.Storage.InterestGroupAccessedEvent): void {\n  }\n\n  interestGroupAuctionEventOccurred(_event: Protocol.Storage.InterestGroupAuctionEventOccurredEvent): void {\n  }\n\n  interestGroupAuctionNetworkRequestCreated(_event: Protocol.Storage.InterestGroupAuctionNetworkRequestCreatedEvent):\n      void {\n  }\n\n  indexedDBListUpdated(_event: Protocol.Storage.IndexedDBListUpdatedEvent): void {\n  }\n\n  indexedDBContentUpdated(_event: Protocol.Storage.IndexedDBContentUpdatedEvent): void {\n  }\n\n  cacheStorageListUpdated(_event: Protocol.Storage.CacheStorageListUpdatedEvent): void {\n  }\n\n  cacheStorageContentUpdated(_event: Protocol.Storage.CacheStorageContentUpdatedEvent): void {\n  }\n\n  sharedStorageAccessed(_event: Protocol.Storage.SharedStorageAccessedEvent): void {\n  }\n\n  sharedStorageWorkletOperationExecutionFinished(\n      _event: Protocol.Storage.SharedStorageWorkletOperationExecutionFinishedEvent): void {\n  }\n\n  attributionReportingSourceRegistered(_event: Protocol.Storage.AttributionReportingSourceRegisteredEvent): void {\n  }\n  attributionReportingReportSent(_event: Protocol.Storage.AttributionReportingReportSentEvent): void {\n  }\n\n  attributionReportingVerboseDebugReportSent(_event: Protocol.Storage.AttributionReportingVerboseDebugReportSentEvent):\n      void {\n  }\n}\n\nSDKModel.register(StorageBucketsModel, {capabilities: Capability.STORAGE, autostart: false});\n\nexport const enum Events {\n  BUCKET_ADDED = 'BucketAdded',\n  BUCKET_REMOVED = 'BucketRemoved',\n  BUCKET_CHANGED = 'BucketChanged',\n}\n\nexport interface BucketEvent {\n  model: StorageBucketsModel;\n  bucketInfo: Protocol.Storage.StorageBucketInfo;\n}\n\nexport interface EventTypes {\n  [Events.BUCKET_ADDED]: BucketEvent;\n  [Events.BUCKET_REMOVED]: BucketEvent;\n  [Events.BUCKET_CHANGED]: BucketEvent;\n}\n"]}