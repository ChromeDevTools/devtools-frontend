{"version":3,"file":"TraceObject.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/TraceObject.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AAMtD,OAAO,EAAC,iBAAiB,EAAC,MAAM,wBAAwB,CAAC;AAGzD,wGAAwG;AACxG,MAAM,OAAO,WAAW;IACb,WAAW,CAA+C;IAC1D,QAAQ,CAGf;IACF,YAAY,OAAiE,EAAE,IAAa;QAC1F,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC;YAC3B,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC;YAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC;QAC7B,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;YACvC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QACnC,CAAC;IACH,CAAC;CACF;AAED,+GAA+G;AAC/G,MAAM,OAAO,eAAe;IAGP;IAFnB,yFAAyF;IACzF,iEAAiE;IACjE,YAAmB,KAAU;QAAV,UAAK,GAAL,KAAK,CAAK;IAC7B,CAAC;CACF;AAED;;;;;;;;;GASG;AACH,MAAM,OAAO,wBAAwB;IAChB;IAAnB,YAAmB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;IACjD,CAAC;IAED,2GAA2G;IAC3G,MAAM,CAAC,MAAM,CAAC,KAAc;QAC1B,MAAM,uBAAuB,GAAG,KAAK,CAAC;QACtC,iGAAiG;QACjG,MAAM,GAAG,GAAG,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAsC,CAAC;QACrF,MAAM,cAAc,GAAG,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,cAAc,CAAC,GAAG,CAAoC,CAAC;QAEzG,MAAM,QAAQ,GAAG,iBAAiB,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,iBAAiB,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;QAC3G,MAAM,iBAAiB,GAAG,QAAQ,EAAE,OAAO,CAAC;QAC5C,OAAO,iBAAiB,CAAC,CAAC,CAAC,IAAI,wBAAwB,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACpF,CAAC;CACF","sourcesContent":["// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type {NetworkRequest} from './NetworkRequest.js';\nimport type {RehydratingResource} from './RehydratingObject.js';\nimport {ResourceTreeModel} from './ResourceTreeModel.js';\nimport type {SourceMapV3} from './SourceMap.js';\n\n/** A thin wrapper class, mostly to enable instanceof-based revealing of traces to open in Timeline. **/\nexport class TraceObject {\n  readonly traceEvents: Protocol.Tracing.DataCollectedEvent['value'];\n  readonly metadata: {\n    sourceMaps?: Array<{sourceMapUrl: string, sourceMap: SourceMapV3, url: string}>,\n    resources?: RehydratingResource[],\n  };\n  constructor(payload: Protocol.Tracing.DataCollectedEvent['value']|TraceObject, meta?: Object) {\n    if (Array.isArray(payload)) {\n      this.traceEvents = payload;\n      this.metadata = meta ?? {};\n    } else {\n      this.traceEvents = payload.traceEvents;\n      this.metadata = payload.metadata;\n    }\n  }\n}\n\n/** Another thin wrapper class to enable revealing individual trace events (aka entries) in Timeline panel. **/\nexport class RevealableEvent {\n  // Only Trace.Types.Events.Event are passed in, but we can't depend on that type from SDK\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  constructor(public event: any) {\n  }\n}\n\n/**\n * Another wrapper class for revealing network requests in Network panel. The reason is the `Open in Network panel`\n * option is handled by the context menu provider, which will add this option for all supporting types. And there are a\n * lot of context menu providers that support `SDK.NetworkRequest.NetworkRequest`, for example `Override content` by\n * PersistenceActions, but we so far just want the one to reveal in network panel, so add a new class which will only be\n * supported by Network panel.\n *\n * Also we want to have a different behavior(select the network request) from the `SDK.NetworkRequest.NetworkRequest`\n * (highlight the network request once).\n */\nexport class RevealableNetworkRequest {\n  constructor(public networkRequest: NetworkRequest) {\n  }\n\n  // Only Trace.Types.Events.SyntheticNetworkRequest are passed in, but we can't depend on that type from SDK\n  static create(event: unknown): RevealableNetworkRequest|null {\n    const syntheticNetworkRequest = event;\n    // @ts-expect-error We don't have type checking here to confirm these events have .args.data.url.\n    const url = syntheticNetworkRequest.args.data.url as Platform.DevToolsPath.UrlString;\n    const urlWithoutHash = Common.ParsedURL.ParsedURL.urlWithoutHash(url) as Platform.DevToolsPath.UrlString;\n\n    const resource = ResourceTreeModel.resourceForURL(url) ?? ResourceTreeModel.resourceForURL(urlWithoutHash);\n    const sdkNetworkRequest = resource?.request;\n    return sdkNetworkRequest ? new RevealableNetworkRequest(sdkNetworkRequest) : null;\n  }\n}\n"]}