{"version":3,"file":"AcornTokenizer.js","sourceRoot":"","sources":["../../../../../../front_end/entrypoints/formatter_worker/AcornTokenizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Acorn from '../../third_party/acorn/acorn.js';\n\nexport type TokenOrComment = Acorn.Token|Acorn.Comment;\n\n/**\n * The tokenizer in Acorn does not allow you to peek into the next token.\n * We use the peekToken method to determine when to stop formatting a\n * particular block of code.\n *\n * To remedy the situation, we implement the peeking of tokens ourselves.\n * To do so, whenever we call `nextToken`, we already retrieve the token\n * after it (in `bufferedToken`), so that `_peekToken` can check if there\n * is more work to do.\n *\n * There are 2 catches:\n *\n * 1. in the constructor we need to start the initialize the buffered token,\n *    such that `peekToken` on the first call is able to retrieve it. However,\n * 2. comments and tokens can arrive intermixed from the tokenizer. This usually\n *    happens when comments are the first comments of a file. In the scenario that\n *    the first comment in a file is a line comment attached to a token, we first\n *    receive the token and after that we receive the comment. However, when tokenizing\n *    we should reverse the order and return the comment, before the token.\n *\n * All that is to say that the `bufferedToken` is only used for *true* tokens.\n * We mimic comments to be tokens to fix the reordering issue, but we store these\n * separately to keep track of them. Any call to `nextTokenInternal` will figure\n * out whether the next token should be the preceding comment or not.\n */\nexport class AcornTokenizer {\n  #textCursor: TextUtils.TextCursor.TextCursor;\n  #tokenLineStart: number;\n  #tokenLineEnd: number;\n  #tokens: Array<Acorn.Comment|Acorn.Token>;\n  #idx = 0;\n\n  constructor(content: string, tokens: Array<Acorn.Comment|Acorn.Token>) {\n    this.#tokens = tokens;\n    const contentLineEndings = Platform.StringUtilities.findLineEndingIndexes(content);\n    this.#textCursor = new TextUtils.TextCursor.TextCursor(contentLineEndings);\n    this.#tokenLineStart = 0;\n    this.#tokenLineEnd = 0;\n  }\n\n  static punctuator(token: Acorn.Token, values?: string): boolean {\n    return token.type !== Acorn.tokTypes.num && token.type !== Acorn.tokTypes.regexp &&\n        token.type !== Acorn.tokTypes.string && token.type !== Acorn.tokTypes.name && !token.type.keyword &&\n        (!values || (token.type.label.length === 1 && values.indexOf(token.type.label) !== -1));\n  }\n\n  static keyword(token: Acorn.Token, keyword?: string): boolean {\n    return Boolean(token.type.keyword) && token.type !== Acorn.tokTypes['_true'] &&\n        token.type !== Acorn.tokTypes['_false'] && token.type !== Acorn.tokTypes['_null'] &&\n        (!keyword || token.type.keyword === keyword);\n  }\n\n  static identifier(token: TokenOrComment, identifier?: string): boolean {\n    return token.type === Acorn.tokTypes.name && (!identifier || token.value === identifier);\n  }\n\n  static arrowIdentifier(token: TokenOrComment, identifier?: string): boolean {\n    return token.type === Acorn.tokTypes.arrow && (!identifier || token.type.label === identifier);\n  }\n\n  static lineComment(token: TokenOrComment): boolean {\n    return token.type === 'Line';\n  }\n\n  static blockComment(token: TokenOrComment): boolean {\n    return token.type === 'Block';\n  }\n\n  nextToken(): TokenOrComment|null {\n    const token = this.#tokens[this.#idx++];\n    if (!token || token.type === Acorn.tokTypes.eof) {\n      return null;\n    }\n\n    this.#textCursor.advance(token.start);\n    this.#tokenLineStart = this.#textCursor.lineNumber();\n\n    this.#textCursor.advance(token.end);\n    this.#tokenLineEnd = this.#textCursor.lineNumber();\n    return token;\n  }\n\n  peekToken(): TokenOrComment|null {\n    const token = this.#tokens[this.#idx];\n    if (!token || token.type === Acorn.tokTypes.eof) {\n      return null;\n    }\n    return token;\n  }\n\n  tokenLineStart(): number {\n    return this.#tokenLineStart;\n  }\n\n  tokenLineEnd(): number {\n    return this.#tokenLineEnd;\n  }\n}\n\nexport const ECMA_VERSION = 2022;\n"]}