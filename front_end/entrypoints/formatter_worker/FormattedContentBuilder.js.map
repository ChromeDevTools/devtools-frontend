{"version":3,"file":"FormattedContentBuilder.js","sourceRoot":"","sources":["../../../../../../front_end/entrypoints/formatter_worker/FormattedContentBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2016 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport class FormattedContentBuilder {\n  #lastOriginalPosition = 0;\n  #formattedContent: string[] = [];\n  #formattedContentLength = 0;\n  #lastFormattedPosition = 0;\n  #nestingLevel = 0;\n  #newLines = 0;\n  #enforceSpaceBetweenWords = true;\n  #softSpace = false;\n  #hardSpaces = 0;\n  #cachedIndents = new Map<number, string>();\n  #canBeIdentifierOrNumber = /[$\\u200C\\u200D\\p{ID_Continue}]/u;\n\n  mapping = {original: [0], formatted: [0]};\n\n  constructor(private indentString: string) {\n  }\n\n  setEnforceSpaceBetweenWords(value: boolean): boolean {\n    const oldValue = this.#enforceSpaceBetweenWords;\n    this.#enforceSpaceBetweenWords = value;\n    return oldValue;\n  }\n\n  addToken(token: string, offset: number): void {\n    // Skip the regex check if `addSoftSpace` will be a no-op.\n    if (this.#enforceSpaceBetweenWords && !this.#hardSpaces && !this.#softSpace) {\n      const lastCharOfLastToken = this.#formattedContent.at(-1)?.at(-1) ?? '';\n      if (this.#canBeIdentifierOrNumber.test(lastCharOfLastToken) && this.#canBeIdentifierOrNumber.test(token)) {\n        this.addSoftSpace();\n      }\n    }\n\n    this.#appendFormatting();\n\n    // Insert token.\n    this.#addMappingIfNeeded(offset);\n    this.#addText(token);\n  }\n\n  addSoftSpace(): void {\n    if (!this.#hardSpaces) {\n      this.#softSpace = true;\n    }\n  }\n\n  addHardSpace(): void {\n    this.#softSpace = false;\n    ++this.#hardSpaces;\n  }\n\n  addNewLine(noSquash?: boolean): void {\n    // Avoid leading newlines.\n    if (!this.#formattedContentLength) {\n      return;\n    }\n    if (noSquash) {\n      ++this.#newLines;\n    } else {\n      this.#newLines = this.#newLines || 1;\n    }\n  }\n\n  increaseNestingLevel(): void {\n    this.#nestingLevel += 1;\n  }\n\n  decreaseNestingLevel(): void {\n    if (this.#nestingLevel > 0) {\n      this.#nestingLevel -= 1;\n    }\n  }\n\n  content(): string {\n    return this.#formattedContent.join('') + (this.#newLines ? '\\n' : '');\n  }\n\n  #appendFormatting(): void {\n    if (this.#newLines) {\n      for (let i = 0; i < this.#newLines; ++i) {\n        this.#addText('\\n');\n      }\n      this.#addText(this.#indent());\n    } else if (this.#softSpace) {\n      this.#addText(' ');\n    }\n    if (this.#hardSpaces) {\n      for (let i = 0; i < this.#hardSpaces; ++i) {\n        this.#addText(' ');\n      }\n    }\n    this.#newLines = 0;\n    this.#softSpace = false;\n    this.#hardSpaces = 0;\n  }\n\n  #indent(): string {\n    const cachedValue = this.#cachedIndents.get(this.#nestingLevel);\n    if (cachedValue) {\n      return cachedValue;\n    }\n\n    let fullIndent = '';\n    for (let i = 0; i < this.#nestingLevel; ++i) {\n      fullIndent += this.indentString;\n    }\n\n    // Cache a maximum of 20 nesting level indents.\n    if (this.#nestingLevel <= 20) {\n      this.#cachedIndents.set(this.#nestingLevel, fullIndent);\n    }\n    return fullIndent;\n  }\n\n  #addText(text: string): void {\n    this.#formattedContent.push(text);\n    this.#formattedContentLength += text.length;\n  }\n\n  #addMappingIfNeeded(originalPosition: number): void {\n    if (originalPosition - this.#lastOriginalPosition === this.#formattedContentLength - this.#lastFormattedPosition) {\n      return;\n    }\n    this.mapping.original.push(originalPosition);\n    this.#lastOriginalPosition = originalPosition;\n    this.mapping.formatted.push(this.#formattedContentLength);\n    this.#lastFormattedPosition = this.#formattedContentLength;\n  }\n}\n"]}