{"version":3,"file":"ScopeParser.js","sourceRoot":"","sources":["../../../../../../front_end/entrypoints/formatter_worker/ScopeParser.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Acorn from '../../third_party/acorn/acorn.js';\n\nimport {ECMA_VERSION} from './AcornTokenizer.js';\nimport {DefinitionKind, ScopeKind, type ScopeTreeNode} from './FormatterActions.js';\n\nexport function parseScopes(expression: string, sourceType: 'module'|'script' = 'script'): Scope|null {\n  // Parse the expression and find variables and scopes.\n  let root: Acorn.ESTree.Node|null = null;\n  try {\n    root = Acorn.parse(\n               expression, {ecmaVersion: ECMA_VERSION, allowAwaitOutsideFunction: true, ranges: false, sourceType}) as\n        Acorn.ESTree.Node;\n  } catch {\n    return null;\n  }\n  return new ScopeVariableAnalysis(root).run();\n}\n\nexport interface Use {\n  offset: number;\n  scope: Scope;\n  isShorthandAssignmentProperty: boolean;\n}\n\nexport interface VariableUses {\n  definitionKind: DefinitionKind;\n  uses: Use[];\n}\n\nexport class Scope {\n  readonly variables = new Map<string, VariableUses>();\n  readonly parent: Scope|null;\n  readonly start: number;\n  readonly end: number;\n  readonly kind: ScopeKind;\n  readonly children: Scope[] = [];\n\n  constructor(start: number, end: number, parent: Scope|null, kind: ScopeKind) {\n    this.start = start;\n    this.end = end;\n    this.parent = parent;\n    this.kind = kind;\n    if (parent) {\n      parent.children.push(this);\n    }\n  }\n\n  export(): ScopeTreeNode {\n    const variables = [];\n    for (const variable of this.variables) {\n      const offsets = [];\n      for (const use of variable[1].uses) {\n        offsets.push(use.offset);\n      }\n      variables.push({name: variable[0], kind: variable[1].definitionKind, offsets});\n    }\n    const children = this.children.map(c => c.export());\n    return {\n      start: this.start,\n      end: this.end,\n      variables,\n      kind: this.kind,\n      children,\n    };\n  }\n\n  addVariable(name: string, offset: number, definitionKind: DefinitionKind, isShorthandAssignmentProperty: boolean):\n      void {\n    const variable = this.variables.get(name);\n    const use = {offset, scope: this, isShorthandAssignmentProperty};\n    if (!variable) {\n      this.variables.set(name, {definitionKind, uses: [use]});\n      return;\n    }\n    if (variable.definitionKind === DefinitionKind.NONE) {\n      variable.definitionKind = definitionKind;\n    }\n    variable.uses.push(use);\n  }\n\n  findBinders(name: string): VariableUses[] {\n    const result = [];\n    let scope: Scope|null = this;\n    while (scope !== null) {\n      const defUse = scope.variables.get(name);\n      if (defUse && defUse.definitionKind !== DefinitionKind.NONE) {\n        result.push(defUse);\n      }\n      scope = scope.parent;\n    }\n    return result;\n  }\n\n  #mergeChildDefUses(name: string, defUses: VariableUses): void {\n    const variable = this.variables.get(name);\n    if (!variable) {\n      this.variables.set(name, defUses);\n      return;\n    }\n    variable.uses.push(...defUses.uses);\n    if (defUses.definitionKind === DefinitionKind.VAR) {\n      console.assert(variable.definitionKind !== DefinitionKind.LET);\n      if (variable.definitionKind === DefinitionKind.NONE) {\n        variable.definitionKind = defUses.definitionKind;\n      }\n    } else {\n      console.assert(defUses.definitionKind === DefinitionKind.NONE);\n    }\n  }\n\n  finalizeToParent(isFunctionScope: boolean): void {\n    if (!this.parent) {\n      console.error('Internal error: wrong nesting in scope analysis.');\n      throw new Error('Internal error');\n    }\n\n    // Move all unbound variables to the parent (also move var-bound variables\n    // if the parent is not a function).\n    const keysToRemove = [];\n    for (const [name, defUse] of this.variables.entries()) {\n      if (defUse.definitionKind === DefinitionKind.NONE ||\n          (defUse.definitionKind === DefinitionKind.VAR && !isFunctionScope)) {\n        this.parent.#mergeChildDefUses(name, defUse);\n        keysToRemove.push(name);\n      }\n    }\n    keysToRemove.forEach(k => this.variables.delete(k));\n  }\n}\n\nexport class ScopeVariableAnalysis {\n  readonly #rootScope: Scope;\n  readonly #allNames = new Set<string>();\n  #currentScope: Scope;\n  readonly #rootNode: Acorn.ESTree.Node;\n\n  constructor(node: Acorn.ESTree.Node) {\n    this.#rootNode = node;\n    this.#rootScope = new Scope(node.start, node.end, null, ScopeKind.GLOBAL);\n    this.#currentScope = this.#rootScope;\n  }\n\n  run(): Scope {\n    this.#processNode(this.#rootNode);\n    return this.#rootScope;\n  }\n\n  #processNode(node: Acorn.ESTree.Node|null): void {\n    if (node === null) {\n      return;\n    }\n    switch (node.type) {\n      case 'AwaitExpression':\n        this.#processNode(node.argument);\n        break;\n      case 'ArrayExpression':\n        node.elements.forEach(item => this.#processNode(item));\n        break;\n      case 'ExpressionStatement':\n        this.#processNode(node.expression);\n        break;\n      case 'Program':\n        console.assert(this.#currentScope === this.#rootScope);\n        node.body.forEach(item => this.#processNode(item));\n        console.assert(this.#currentScope === this.#rootScope);\n        break;\n      case 'ArrayPattern':\n        node.elements.forEach(item => this.#processNode(item));\n        break;\n      case 'ArrowFunctionExpression': {\n        this.#pushScope(node.start, node.end, ScopeKind.FUNCTION);\n        node.params.forEach(this.#processNodeAsDefinition.bind(this, DefinitionKind.VAR, false));\n        if (node.body.type === 'BlockStatement') {\n          // Include the body of the arrow function in the same scope as the arguments.\n          node.body.body.forEach(this.#processNode.bind(this));\n        } else {\n          this.#processNode(node.body);\n        }\n        this.#popScope(true);\n        break;\n      }\n      case 'AssignmentExpression':\n      case 'AssignmentPattern':\n      case 'BinaryExpression':\n      case 'LogicalExpression':\n        this.#processNode(node.left);\n        this.#processNode(node.right);\n        break;\n      case 'BlockStatement':\n        this.#pushScope(node.start, node.end, ScopeKind.BLOCK);\n        node.body.forEach(this.#processNode.bind(this));\n        this.#popScope(false);\n        break;\n      case 'CallExpression':\n        this.#processNode(node.callee);\n        node.arguments.forEach(this.#processNode.bind(this));\n        break;\n      case 'VariableDeclaration': {\n        const definitionKind = node.kind === 'var' ? DefinitionKind.VAR : DefinitionKind.LET;\n        node.declarations.forEach(this.#processVariableDeclarator.bind(this, definitionKind));\n        break;\n      }\n      case 'CatchClause':\n        this.#pushScope(node.start, node.end, ScopeKind.BLOCK);\n        this.#processNodeAsDefinition(DefinitionKind.LET, false, node.param);\n        this.#processNode(node.body);\n        this.#popScope(false);\n        break;\n      case 'ClassBody':\n        node.body.forEach(this.#processNode.bind(this));\n        break;\n      case 'ClassDeclaration':\n        this.#processNodeAsDefinition(DefinitionKind.LET, false, node.id);\n        this.#processNode(node.superClass ?? null);\n        this.#processNode(node.body);\n        break;\n      case 'ClassExpression':\n        // Intentionally ignore the id.\n        this.#processNode(node.superClass ?? null);\n        this.#processNode(node.body);\n        break;\n      case 'ChainExpression':\n        this.#processNode(node.expression);\n        break;\n      case 'ConditionalExpression':\n        this.#processNode(node.test);\n        this.#processNode(node.consequent);\n        this.#processNode(node.alternate);\n        break;\n      case 'DoWhileStatement':\n        this.#processNode(node.body);\n        this.#processNode(node.test);\n        break;\n      case 'ForInStatement':\n      case 'ForOfStatement':\n        this.#pushScope(node.start, node.end, ScopeKind.BLOCK);\n        this.#processNode(node.left);\n        this.#processNode(node.right);\n        this.#processNode(node.body);\n        this.#popScope(false);\n        break;\n      case 'ForStatement':\n        this.#pushScope(node.start, node.end, ScopeKind.BLOCK);\n        this.#processNode(node.init ?? null);\n        this.#processNode(node.test ?? null);\n        this.#processNode(node.update ?? null);\n        this.#processNode(node.body);\n        this.#popScope(false);\n        break;\n      case 'FunctionDeclaration':\n        this.#processNodeAsDefinition(DefinitionKind.VAR, false, node.id);\n        this.#pushScope(node.id?.end ?? node.start, node.end, ScopeKind.FUNCTION);\n        this.#addVariable('this', node.start, DefinitionKind.FIXED);\n        this.#addVariable('arguments', node.start, DefinitionKind.FIXED);\n        node.params.forEach(this.#processNodeAsDefinition.bind(this, DefinitionKind.LET, false));\n        // Process the body of the block statement directly to avoid creating new scope.\n        node.body.body.forEach(this.#processNode.bind(this));\n        this.#popScope(true);\n        break;\n      case 'FunctionExpression':\n        this.#pushScope(node.id?.end ?? node.start, node.end, ScopeKind.FUNCTION);\n        this.#addVariable('this', node.start, DefinitionKind.FIXED);\n        this.#addVariable('arguments', node.start, DefinitionKind.FIXED);\n        node.params.forEach(this.#processNodeAsDefinition.bind(this, DefinitionKind.LET, false));\n        // Process the body of the block statement directly to avoid creating new scope.\n        node.body.body.forEach(this.#processNode.bind(this));\n        this.#popScope(true);\n        break;\n      case 'Identifier':\n        this.#addVariable(node.name, node.start);\n        break;\n      case 'IfStatement':\n        this.#processNode(node.test);\n        this.#processNode(node.consequent);\n        this.#processNode(node.alternate ?? null);\n        break;\n      case 'LabeledStatement':\n        this.#processNode(node.body);\n        break;\n      case 'MetaProperty':\n        break;\n      case 'MethodDefinition':\n        if (node.computed) {\n          this.#processNode(node.key);\n        }\n        this.#processNode(node.value);\n        break;\n      case 'NewExpression':\n        this.#processNode(node.callee);\n        node.arguments.forEach(this.#processNode.bind(this));\n        break;\n      case 'MemberExpression':\n        this.#processNode(node.object);\n        if (node.computed) {\n          this.#processNode(node.property);\n        }\n        break;\n      case 'ObjectExpression':\n        node.properties.forEach(this.#processNode.bind(this));\n        break;\n      case 'ObjectPattern':\n        node.properties.forEach(this.#processNode.bind(this));\n        break;\n      case 'PrivateIdentifier':\n        break;\n      case 'PropertyDefinition':\n        if (node.computed) {\n          this.#processNode(node.key);\n        }\n        this.#processNode(node.value ?? null);\n        break;\n      case 'Property':\n        if (node.shorthand) {\n          console.assert(node.value.type === 'Identifier');\n          console.assert(node.key.type === 'Identifier');\n          console.assert((node.value as Acorn.ESTree.Identifier).name === (node.key as Acorn.ESTree.Identifier).name);\n          this.#addVariable((node.value as Acorn.ESTree.Identifier).name, node.value.start, DefinitionKind.NONE, true);\n        } else {\n          if (node.computed) {\n            this.#processNode(node.key);\n          }\n          this.#processNode(node.value);\n        }\n        break;\n      case 'RestElement':\n        this.#processNodeAsDefinition(DefinitionKind.LET, false, node.argument);\n        break;\n      case 'ReturnStatement':\n        this.#processNode(node.argument ?? null);\n        break;\n      case 'SequenceExpression':\n        node.expressions.forEach(this.#processNode.bind(this));\n        break;\n      case 'SpreadElement':\n        this.#processNode(node.argument);\n        break;\n      case 'SwitchCase':\n        this.#processNode(node.test ?? null);\n        node.consequent.forEach(this.#processNode.bind(this));\n        break;\n      case 'SwitchStatement':\n        this.#processNode(node.discriminant);\n        node.cases.forEach(this.#processNode.bind(this));\n        break;\n      case 'TaggedTemplateExpression':\n        this.#processNode(node.tag);\n        this.#processNode(node.quasi);\n        break;\n      case 'TemplateLiteral':\n        node.expressions.forEach(this.#processNode.bind(this));\n        break;\n      case 'ThisExpression':\n        this.#addVariable('this', node.start);\n        break;\n      case 'ThrowStatement':\n        this.#processNode(node.argument);\n        break;\n      case 'TryStatement':\n        this.#processNode(node.block);\n        this.#processNode(node.handler ?? null);\n        this.#processNode(node.finalizer ?? null);\n        break;\n      case 'WithStatement':\n        this.#processNode(node.object);\n        // TODO jarin figure how to treat the with body.\n        this.#processNode(node.body);\n        break;\n      case 'YieldExpression':\n        this.#processNode(node.argument ?? null);\n        break;\n      case 'UnaryExpression':\n      case 'UpdateExpression':\n        this.#processNode(node.argument);\n        break;\n      case 'WhileStatement':\n        this.#processNode(node.test);\n        this.#processNode(node.body);\n        break;\n\n      // Ignore, no expressions involved.\n      case 'BreakStatement':\n      case 'ContinueStatement':\n      case 'DebuggerStatement':\n      case 'EmptyStatement':\n      case 'Literal':\n      case 'Super':\n      case 'TemplateElement':\n        break;\n        // Ignore, cannot be used outside of a module.\n      case 'ImportDeclaration':\n      case 'ImportDefaultSpecifier':\n      case 'ImportNamespaceSpecifier':\n      case 'ImportSpecifier':\n      case 'ImportExpression':\n      case 'ExportAllDeclaration':\n      case 'ExportDefaultDeclaration':\n      case 'ExportNamedDeclaration':\n      case 'ExportSpecifier':\n        break;\n\n      case 'VariableDeclarator':\n        console.error('Should not encounter VariableDeclarator in general traversal.');\n        break;\n    }\n  }\n\n  getFreeVariables(): Map<string, Use[]> {\n    const result = new Map<string, Use[]>();\n    for (const [name, defUse] of this.#rootScope.variables) {\n      if (defUse.definitionKind !== DefinitionKind.NONE) {\n        // Skip bound variables.\n        continue;\n      }\n      result.set(name, defUse.uses);\n    }\n    return result;\n  }\n\n  getAllNames(): Set<string> {\n    return this.#allNames;\n  }\n\n  #pushScope(start: number, end: number, kind: ScopeKind): void {\n    this.#currentScope = new Scope(start, end, this.#currentScope, kind);\n  }\n\n  #popScope(isFunctionContext: boolean): void {\n    if (this.#currentScope.parent === null) {\n      console.error('Internal error: wrong nesting in scope analysis.');\n      throw new Error('Internal error');\n    }\n    this.#currentScope.finalizeToParent(isFunctionContext);\n    this.#currentScope = this.#currentScope.parent;\n  }\n\n  #addVariable(\n      name: string, offset: number, definitionKind: DefinitionKind = DefinitionKind.NONE,\n      isShorthandAssignmentProperty = false): void {\n    this.#allNames.add(name);\n    this.#currentScope.addVariable(name, offset, definitionKind, isShorthandAssignmentProperty);\n  }\n\n  #processNodeAsDefinition(\n      definitionKind: DefinitionKind.LET|DefinitionKind.VAR, isShorthandAssignmentProperty: boolean,\n      node: Acorn.ESTree.Pattern|Acorn.ESTree.AssignmentProperty|null): void {\n    if (node === null) {\n      return;\n    }\n    switch (node.type) {\n      case 'ArrayPattern':\n        node.elements.forEach(this.#processNodeAsDefinition.bind(this, definitionKind, false));\n        break;\n      case 'AssignmentPattern':\n        this.#processNodeAsDefinition(definitionKind, isShorthandAssignmentProperty, node.left);\n        this.#processNode(node.right);\n        break;\n      case 'Identifier':\n        this.#addVariable(node.name, node.start, definitionKind, isShorthandAssignmentProperty);\n        break;\n      case 'MemberExpression':\n        this.#processNode(node.object);\n        if (node.computed) {\n          this.#processNode(node.property);\n        }\n        break;\n      case 'ObjectPattern':\n        node.properties.forEach(this.#processNodeAsDefinition.bind(this, definitionKind, false));\n        break;\n      case 'Property':\n        if (node.computed) {\n          this.#processNode(node.key);\n        }\n        this.#processNodeAsDefinition(definitionKind, node.shorthand, node.value);\n        break;\n      case 'RestElement':\n        this.#processNodeAsDefinition(definitionKind, false, node.argument);\n        break;\n    }\n  }\n\n  #processVariableDeclarator(\n      definitionKind: DefinitionKind.LET|DefinitionKind.VAR, decl: Acorn.ESTree.VariableDeclarator): void {\n    this.#processNodeAsDefinition(definitionKind, false, decl.id);\n    this.#processNode(decl.init ?? null);\n  }\n}\n"]}