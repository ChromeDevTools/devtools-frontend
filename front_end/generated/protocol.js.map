{"version":3,"file":"protocol.js","sourceRoot":"","sources":["../../../../../front_end/generated/protocol.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B","sourcesContent":["// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * This file is auto-generated, do not edit manually. *\n * Re-generate with: npm run generate-protocol-resources.\n */\n\n\nexport type integer = number;\nexport type binary = string;\nexport type EnumerableEnum<T> = {[K in keyof T]: T[K]};\nexport interface ProtocolResponseWithError {\n  /** Returns an error message if the request failed. */\n  getError(): string|undefined;\n}\ntype OpaqueType<Tag extends string> = {protocolOpaqueTypeTag: Tag};\ntype OpaqueIdentifier<RepresentationType, Tag extends string> = RepresentationType&OpaqueType<Tag>;\n\nexport namespace Accessibility {\n\n  /**\n   * Unique accessibility node identifier.\n   */\n  export type AXNodeId = OpaqueIdentifier<string, 'Protocol.Accessibility.AXNodeId'>;\n\n  /**\n   * Enum of possible property types.\n   */\n  export const enum AXValueType {\n    Boolean = 'boolean',\n    Tristate = 'tristate',\n    BooleanOrUndefined = 'booleanOrUndefined',\n    Idref = 'idref',\n    IdrefList = 'idrefList',\n    Integer = 'integer',\n    Node = 'node',\n    NodeList = 'nodeList',\n    Number = 'number',\n    String = 'string',\n    ComputedString = 'computedString',\n    Token = 'token',\n    TokenList = 'tokenList',\n    DomRelation = 'domRelation',\n    Role = 'role',\n    InternalRole = 'internalRole',\n    ValueUndefined = 'valueUndefined',\n  }\n\n  /**\n   * Enum of possible property sources.\n   */\n  export const enum AXValueSourceType {\n    Attribute = 'attribute',\n    Implicit = 'implicit',\n    Style = 'style',\n    Contents = 'contents',\n    Placeholder = 'placeholder',\n    RelatedElement = 'relatedElement',\n  }\n\n  /**\n   * Enum of possible native property sources (as a subtype of a particular AXValueSourceType).\n   */\n  export const enum AXValueNativeSourceType {\n    Description = 'description',\n    Figcaption = 'figcaption',\n    Label = 'label',\n    Labelfor = 'labelfor',\n    Labelwrapped = 'labelwrapped',\n    Legend = 'legend',\n    Rubyannotation = 'rubyannotation',\n    Tablecaption = 'tablecaption',\n    Title = 'title',\n    Other = 'other',\n  }\n\n  /**\n   * A single source for a computed AX property.\n   */\n  export interface AXValueSource {\n    /**\n     * What type of source this is.\n     */\n    type: AXValueSourceType;\n    /**\n     * The value of this property source.\n     */\n    value?: AXValue;\n    /**\n     * The name of the relevant attribute, if any.\n     */\n    attribute?: string;\n    /**\n     * The value of the relevant attribute, if any.\n     */\n    attributeValue?: AXValue;\n    /**\n     * Whether this source is superseded by a higher priority source.\n     */\n    superseded?: boolean;\n    /**\n     * The native markup source for this value, e.g. a `<label>` element.\n     */\n    nativeSource?: AXValueNativeSourceType;\n    /**\n     * The value, such as a node or node list, of the native source.\n     */\n    nativeSourceValue?: AXValue;\n    /**\n     * Whether the value for this property is invalid.\n     */\n    invalid?: boolean;\n    /**\n     * Reason for the value being invalid, if it is.\n     */\n    invalidReason?: string;\n  }\n\n  export interface AXRelatedNode {\n    /**\n     * The BackendNodeId of the related DOM node.\n     */\n    backendDOMNodeId: DOM.BackendNodeId;\n    /**\n     * The IDRef value provided, if any.\n     */\n    idref?: string;\n    /**\n     * The text alternative of this node in the current context.\n     */\n    text?: string;\n  }\n\n  export interface AXProperty {\n    /**\n     * The name of this property.\n     */\n    name: AXPropertyName;\n    /**\n     * The value of this property.\n     */\n    value: AXValue;\n  }\n\n  /**\n   * A single computed AX property.\n   */\n  export interface AXValue {\n    /**\n     * The type of this value.\n     */\n    type: AXValueType;\n    /**\n     * The computed value of this property.\n     */\n    value?: any;\n    /**\n     * One or more related nodes, if applicable.\n     */\n    relatedNodes?: AXRelatedNode[];\n    /**\n     * The sources which contributed to the computation of this property.\n     */\n    sources?: AXValueSource[];\n  }\n\n  /**\n   * Values of AXProperty name:\n   * - from 'busy' to 'roledescription': states which apply to every AX node\n   * - from 'live' to 'root': attributes which apply to nodes in live regions\n   * - from 'autocomplete' to 'valuetext': attributes which apply to widgets\n   * - from 'checked' to 'selected': states which apply to widgets\n   * - from 'activedescendant' to 'owns': relationships between elements other than parent/child/sibling\n   * - from 'activeFullscreenElement' to 'uninteresting': reasons why this noode is hidden\n   */\n  export const enum AXPropertyName {\n    Actions = 'actions',\n    Busy = 'busy',\n    Disabled = 'disabled',\n    Editable = 'editable',\n    Focusable = 'focusable',\n    Focused = 'focused',\n    Hidden = 'hidden',\n    HiddenRoot = 'hiddenRoot',\n    Invalid = 'invalid',\n    Keyshortcuts = 'keyshortcuts',\n    Settable = 'settable',\n    Roledescription = 'roledescription',\n    Live = 'live',\n    Atomic = 'atomic',\n    Relevant = 'relevant',\n    Root = 'root',\n    Autocomplete = 'autocomplete',\n    HasPopup = 'hasPopup',\n    Level = 'level',\n    Multiselectable = 'multiselectable',\n    Orientation = 'orientation',\n    Multiline = 'multiline',\n    Readonly = 'readonly',\n    Required = 'required',\n    Valuemin = 'valuemin',\n    Valuemax = 'valuemax',\n    Valuetext = 'valuetext',\n    Checked = 'checked',\n    Expanded = 'expanded',\n    Modal = 'modal',\n    Pressed = 'pressed',\n    Selected = 'selected',\n    Activedescendant = 'activedescendant',\n    Controls = 'controls',\n    Describedby = 'describedby',\n    Details = 'details',\n    Errormessage = 'errormessage',\n    Flowto = 'flowto',\n    Labelledby = 'labelledby',\n    Owns = 'owns',\n    Url = 'url',\n    ActiveFullscreenElement = 'activeFullscreenElement',\n    ActiveModalDialog = 'activeModalDialog',\n    ActiveAriaModalDialog = 'activeAriaModalDialog',\n    AriaHiddenElement = 'ariaHiddenElement',\n    AriaHiddenSubtree = 'ariaHiddenSubtree',\n    EmptyAlt = 'emptyAlt',\n    EmptyText = 'emptyText',\n    InertElement = 'inertElement',\n    InertSubtree = 'inertSubtree',\n    LabelContainer = 'labelContainer',\n    LabelFor = 'labelFor',\n    NotRendered = 'notRendered',\n    NotVisible = 'notVisible',\n    PresentationalRole = 'presentationalRole',\n    ProbablyPresentational = 'probablyPresentational',\n    InactiveCarouselTabContent = 'inactiveCarouselTabContent',\n    Uninteresting = 'uninteresting',\n  }\n\n  /**\n   * A node in the accessibility tree.\n   */\n  export interface AXNode {\n    /**\n     * Unique identifier for this node.\n     */\n    nodeId: AXNodeId;\n    /**\n     * Whether this node is ignored for accessibility\n     */\n    ignored: boolean;\n    /**\n     * Collection of reasons why this node is hidden.\n     */\n    ignoredReasons?: AXProperty[];\n    /**\n     * This `Node`'s role, whether explicit or implicit.\n     */\n    role?: AXValue;\n    /**\n     * This `Node`'s Chrome raw role.\n     */\n    chromeRole?: AXValue;\n    /**\n     * The accessible name for this `Node`.\n     */\n    name?: AXValue;\n    /**\n     * The accessible description for this `Node`.\n     */\n    description?: AXValue;\n    /**\n     * The value for this `Node`.\n     */\n    value?: AXValue;\n    /**\n     * All other properties\n     */\n    properties?: AXProperty[];\n    /**\n     * ID for this node's parent.\n     */\n    parentId?: AXNodeId;\n    /**\n     * IDs for each of this node's child nodes.\n     */\n    childIds?: AXNodeId[];\n    /**\n     * The backend ID for the associated DOM node, if any.\n     */\n    backendDOMNodeId?: DOM.BackendNodeId;\n    /**\n     * The frame ID for the frame associated with this nodes document.\n     */\n    frameId?: Page.FrameId;\n  }\n\n  export interface GetPartialAXTreeRequest {\n    /**\n     * Identifier of the node to get the partial accessibility tree for.\n     */\n    nodeId?: DOM.NodeId;\n    /**\n     * Identifier of the backend node to get the partial accessibility tree for.\n     */\n    backendNodeId?: DOM.BackendNodeId;\n    /**\n     * JavaScript object id of the node wrapper to get the partial accessibility tree for.\n     */\n    objectId?: Runtime.RemoteObjectId;\n    /**\n     * Whether to fetch this node's ancestors, siblings and children. Defaults to true.\n     */\n    fetchRelatives?: boolean;\n  }\n\n  export interface GetPartialAXTreeResponse extends ProtocolResponseWithError {\n    /**\n     * The `Accessibility.AXNode` for this DOM node, if it exists, plus its ancestors, siblings and\n     * children, if requested.\n     */\n    nodes: AXNode[];\n  }\n\n  export interface GetFullAXTreeRequest {\n    /**\n     * The maximum depth at which descendants of the root node should be retrieved.\n     * If omitted, the full tree is returned.\n     */\n    depth?: integer;\n    /**\n     * The frame for whose document the AX tree should be retrieved.\n     * If omitted, the root frame is used.\n     */\n    frameId?: Page.FrameId;\n  }\n\n  export interface GetFullAXTreeResponse extends ProtocolResponseWithError {\n    nodes: AXNode[];\n  }\n\n  export interface GetRootAXNodeRequest {\n    /**\n     * The frame in whose document the node resides.\n     * If omitted, the root frame is used.\n     */\n    frameId?: Page.FrameId;\n  }\n\n  export interface GetRootAXNodeResponse extends ProtocolResponseWithError {\n    node: AXNode;\n  }\n\n  export interface GetAXNodeAndAncestorsRequest {\n    /**\n     * Identifier of the node to get.\n     */\n    nodeId?: DOM.NodeId;\n    /**\n     * Identifier of the backend node to get.\n     */\n    backendNodeId?: DOM.BackendNodeId;\n    /**\n     * JavaScript object id of the node wrapper to get.\n     */\n    objectId?: Runtime.RemoteObjectId;\n  }\n\n  export interface GetAXNodeAndAncestorsResponse extends ProtocolResponseWithError {\n    nodes: AXNode[];\n  }\n\n  export interface GetChildAXNodesRequest {\n    id: AXNodeId;\n    /**\n     * The frame in whose document the node resides.\n     * If omitted, the root frame is used.\n     */\n    frameId?: Page.FrameId;\n  }\n\n  export interface GetChildAXNodesResponse extends ProtocolResponseWithError {\n    nodes: AXNode[];\n  }\n\n  export interface QueryAXTreeRequest {\n    /**\n     * Identifier of the node for the root to query.\n     */\n    nodeId?: DOM.NodeId;\n    /**\n     * Identifier of the backend node for the root to query.\n     */\n    backendNodeId?: DOM.BackendNodeId;\n    /**\n     * JavaScript object id of the node wrapper for the root to query.\n     */\n    objectId?: Runtime.RemoteObjectId;\n    /**\n     * Find nodes with this computed name.\n     */\n    accessibleName?: string;\n    /**\n     * Find nodes with this computed role.\n     */\n    role?: string;\n  }\n\n  export interface QueryAXTreeResponse extends ProtocolResponseWithError {\n    /**\n     * A list of `Accessibility.AXNode` matching the specified attributes,\n     * including nodes that are ignored for accessibility.\n     */\n    nodes: AXNode[];\n  }\n\n  /**\n   * The loadComplete event mirrors the load complete event sent by the browser to assistive\n   * technology when the web page has finished loading.\n   */\n  export interface LoadCompleteEvent {\n    /**\n     * New document root node.\n     */\n    root: AXNode;\n  }\n\n  /**\n   * The nodesUpdated event is sent every time a previously requested node has changed the in tree.\n   */\n  export interface NodesUpdatedEvent {\n    /**\n     * Updated node data.\n     */\n    nodes: AXNode[];\n  }\n}\n\nexport namespace Animation {\n\n  export const enum AnimationType {\n    CSSTransition = 'CSSTransition',\n    CSSAnimation = 'CSSAnimation',\n    WebAnimation = 'WebAnimation',\n  }\n\n  /**\n   * Animation instance.\n   */\n  export interface Animation {\n    /**\n     * `Animation`'s id.\n     */\n    id: string;\n    /**\n     * `Animation`'s name.\n     */\n    name: string;\n    /**\n     * `Animation`'s internal paused state.\n     */\n    pausedState: boolean;\n    /**\n     * `Animation`'s play state.\n     */\n    playState: string;\n    /**\n     * `Animation`'s playback rate.\n     */\n    playbackRate: number;\n    /**\n     * `Animation`'s start time.\n     * Milliseconds for time based animations and\n     * percentage [0 - 100] for scroll driven animations\n     * (i.e. when viewOrScrollTimeline exists).\n     */\n    startTime: number;\n    /**\n     * `Animation`'s current time.\n     */\n    currentTime: number;\n    /**\n     * Animation type of `Animation`.\n     */\n    type: AnimationType;\n    /**\n     * `Animation`'s source animation node.\n     */\n    source?: AnimationEffect;\n    /**\n     * A unique ID for `Animation` representing the sources that triggered this CSS\n     * animation/transition.\n     */\n    cssId?: string;\n    /**\n     * View or scroll timeline\n     */\n    viewOrScrollTimeline?: ViewOrScrollTimeline;\n  }\n\n  /**\n   * Timeline instance\n   */\n  export interface ViewOrScrollTimeline {\n    /**\n     * Scroll container node\n     */\n    sourceNodeId?: DOM.BackendNodeId;\n    /**\n     * Represents the starting scroll position of the timeline\n     * as a length offset in pixels from scroll origin.\n     */\n    startOffset?: number;\n    /**\n     * Represents the ending scroll position of the timeline\n     * as a length offset in pixels from scroll origin.\n     */\n    endOffset?: number;\n    /**\n     * The element whose principal box's visibility in the\n     * scrollport defined the progress of the timeline.\n     * Does not exist for animations with ScrollTimeline\n     */\n    subjectNodeId?: DOM.BackendNodeId;\n    /**\n     * Orientation of the scroll\n     */\n    axis: DOM.ScrollOrientation;\n  }\n\n  /**\n   * AnimationEffect instance\n   */\n  export interface AnimationEffect {\n    /**\n     * `AnimationEffect`'s delay.\n     */\n    delay: number;\n    /**\n     * `AnimationEffect`'s end delay.\n     */\n    endDelay: number;\n    /**\n     * `AnimationEffect`'s iteration start.\n     */\n    iterationStart: number;\n    /**\n     * `AnimationEffect`'s iterations.\n     */\n    iterations: number;\n    /**\n     * `AnimationEffect`'s iteration duration.\n     * Milliseconds for time based animations and\n     * percentage [0 - 100] for scroll driven animations\n     * (i.e. when viewOrScrollTimeline exists).\n     */\n    duration: number;\n    /**\n     * `AnimationEffect`'s playback direction.\n     */\n    direction: string;\n    /**\n     * `AnimationEffect`'s fill mode.\n     */\n    fill: string;\n    /**\n     * `AnimationEffect`'s target node.\n     */\n    backendNodeId?: DOM.BackendNodeId;\n    /**\n     * `AnimationEffect`'s keyframes.\n     */\n    keyframesRule?: KeyframesRule;\n    /**\n     * `AnimationEffect`'s timing function.\n     */\n    easing: string;\n  }\n\n  /**\n   * Keyframes Rule\n   */\n  export interface KeyframesRule {\n    /**\n     * CSS keyframed animation's name.\n     */\n    name?: string;\n    /**\n     * List of animation keyframes.\n     */\n    keyframes: KeyframeStyle[];\n  }\n\n  /**\n   * Keyframe Style\n   */\n  export interface KeyframeStyle {\n    /**\n     * Keyframe's time offset.\n     */\n    offset: string;\n    /**\n     * `AnimationEffect`'s timing function.\n     */\n    easing: string;\n  }\n\n  export interface GetCurrentTimeRequest {\n    /**\n     * Id of animation.\n     */\n    id: string;\n  }\n\n  export interface GetCurrentTimeResponse extends ProtocolResponseWithError {\n    /**\n     * Current time of the page.\n     */\n    currentTime: number;\n  }\n\n  export interface GetPlaybackRateResponse extends ProtocolResponseWithError {\n    /**\n     * Playback rate for animations on page.\n     */\n    playbackRate: number;\n  }\n\n  export interface ReleaseAnimationsRequest {\n    /**\n     * List of animation ids to seek.\n     */\n    animations: string[];\n  }\n\n  export interface ResolveAnimationRequest {\n    /**\n     * Animation id.\n     */\n    animationId: string;\n  }\n\n  export interface ResolveAnimationResponse extends ProtocolResponseWithError {\n    /**\n     * Corresponding remote object.\n     */\n    remoteObject: Runtime.RemoteObject;\n  }\n\n  export interface SeekAnimationsRequest {\n    /**\n     * List of animation ids to seek.\n     */\n    animations: string[];\n    /**\n     * Set the current time of each animation.\n     */\n    currentTime: number;\n  }\n\n  export interface SetPausedRequest {\n    /**\n     * Animations to set the pause state of.\n     */\n    animations: string[];\n    /**\n     * Paused state to set to.\n     */\n    paused: boolean;\n  }\n\n  export interface SetPlaybackRateRequest {\n    /**\n     * Playback rate for animations on page\n     */\n    playbackRate: number;\n  }\n\n  export interface SetTimingRequest {\n    /**\n     * Animation id.\n     */\n    animationId: string;\n    /**\n     * Duration of the animation.\n     */\n    duration: number;\n    /**\n     * Delay of the animation.\n     */\n    delay: number;\n  }\n\n  /**\n   * Event for when an animation has been cancelled.\n   */\n  export interface AnimationCanceledEvent {\n    /**\n     * Id of the animation that was cancelled.\n     */\n    id: string;\n  }\n\n  /**\n   * Event for each animation that has been created.\n   */\n  export interface AnimationCreatedEvent {\n    /**\n     * Id of the animation that was created.\n     */\n    id: string;\n  }\n\n  /**\n   * Event for animation that has been started.\n   */\n  export interface AnimationStartedEvent {\n    /**\n     * Animation that was started.\n     */\n    animation: Animation;\n  }\n\n  /**\n   * Event for animation that has been updated.\n   */\n  export interface AnimationUpdatedEvent {\n    /**\n     * Animation that was updated.\n     */\n    animation: Animation;\n  }\n}\n\n/**\n * Audits domain allows investigation of page violations and possible improvements.\n */\nexport namespace Audits {\n\n  /**\n   * Information about a cookie that is affected by an inspector issue.\n   */\n  export interface AffectedCookie {\n    /**\n     * The following three properties uniquely identify a cookie\n     */\n    name: string;\n    path: string;\n    domain: string;\n  }\n\n  /**\n   * Information about a request that is affected by an inspector issue.\n   */\n  export interface AffectedRequest {\n    /**\n     * The unique request id.\n     */\n    requestId?: Network.RequestId;\n    url: string;\n  }\n\n  /**\n   * Information about the frame affected by an inspector issue.\n   */\n  export interface AffectedFrame {\n    frameId: Page.FrameId;\n  }\n\n  export const enum CookieExclusionReason {\n    ExcludeSameSiteUnspecifiedTreatedAsLax = 'ExcludeSameSiteUnspecifiedTreatedAsLax',\n    ExcludeSameSiteNoneInsecure = 'ExcludeSameSiteNoneInsecure',\n    ExcludeSameSiteLax = 'ExcludeSameSiteLax',\n    ExcludeSameSiteStrict = 'ExcludeSameSiteStrict',\n    ExcludeInvalidSameParty = 'ExcludeInvalidSameParty',\n    ExcludeSamePartyCrossPartyContext = 'ExcludeSamePartyCrossPartyContext',\n    ExcludeDomainNonASCII = 'ExcludeDomainNonASCII',\n    ExcludeThirdPartyCookieBlockedInFirstPartySet = 'ExcludeThirdPartyCookieBlockedInFirstPartySet',\n    ExcludeThirdPartyPhaseout = 'ExcludeThirdPartyPhaseout',\n    ExcludePortMismatch = 'ExcludePortMismatch',\n    ExcludeSchemeMismatch = 'ExcludeSchemeMismatch',\n  }\n\n  export const enum CookieWarningReason {\n    WarnSameSiteUnspecifiedCrossSiteContext = 'WarnSameSiteUnspecifiedCrossSiteContext',\n    WarnSameSiteNoneInsecure = 'WarnSameSiteNoneInsecure',\n    WarnSameSiteUnspecifiedLaxAllowUnsafe = 'WarnSameSiteUnspecifiedLaxAllowUnsafe',\n    WarnSameSiteStrictLaxDowngradeStrict = 'WarnSameSiteStrictLaxDowngradeStrict',\n    WarnSameSiteStrictCrossDowngradeStrict = 'WarnSameSiteStrictCrossDowngradeStrict',\n    WarnSameSiteStrictCrossDowngradeLax = 'WarnSameSiteStrictCrossDowngradeLax',\n    WarnSameSiteLaxCrossDowngradeStrict = 'WarnSameSiteLaxCrossDowngradeStrict',\n    WarnSameSiteLaxCrossDowngradeLax = 'WarnSameSiteLaxCrossDowngradeLax',\n    WarnAttributeValueExceedsMaxSize = 'WarnAttributeValueExceedsMaxSize',\n    WarnDomainNonASCII = 'WarnDomainNonASCII',\n    WarnThirdPartyPhaseout = 'WarnThirdPartyPhaseout',\n    WarnCrossSiteRedirectDowngradeChangesInclusion = 'WarnCrossSiteRedirectDowngradeChangesInclusion',\n    WarnDeprecationTrialMetadata = 'WarnDeprecationTrialMetadata',\n    WarnThirdPartyCookieHeuristic = 'WarnThirdPartyCookieHeuristic',\n  }\n\n  export const enum CookieOperation {\n    SetCookie = 'SetCookie',\n    ReadCookie = 'ReadCookie',\n  }\n\n  /**\n   * Represents the category of insight that a cookie issue falls under.\n   */\n  export const enum InsightType {\n    GitHubResource = 'GitHubResource',\n    GracePeriod = 'GracePeriod',\n    Heuristics = 'Heuristics',\n  }\n\n  /**\n   * Information about the suggested solution to a cookie issue.\n   */\n  export interface CookieIssueInsight {\n    type: InsightType;\n    /**\n     * Link to table entry in third-party cookie migration readiness list.\n     */\n    tableEntryUrl?: string;\n  }\n\n  /**\n   * This information is currently necessary, as the front-end has a difficult\n   * time finding a specific cookie. With this, we can convey specific error\n   * information without the cookie.\n   */\n  export interface CookieIssueDetails {\n    /**\n     * If AffectedCookie is not set then rawCookieLine contains the raw\n     * Set-Cookie header string. This hints at a problem where the\n     * cookie line is syntactically or semantically malformed in a way\n     * that no valid cookie could be created.\n     */\n    cookie?: AffectedCookie;\n    rawCookieLine?: string;\n    cookieWarningReasons: CookieWarningReason[];\n    cookieExclusionReasons: CookieExclusionReason[];\n    /**\n     * Optionally identifies the site-for-cookies and the cookie url, which\n     * may be used by the front-end as additional context.\n     */\n    operation: CookieOperation;\n    siteForCookies?: string;\n    cookieUrl?: string;\n    request?: AffectedRequest;\n    /**\n     * The recommended solution to the issue.\n     */\n    insight?: CookieIssueInsight;\n  }\n\n  export const enum MixedContentResolutionStatus {\n    MixedContentBlocked = 'MixedContentBlocked',\n    MixedContentAutomaticallyUpgraded = 'MixedContentAutomaticallyUpgraded',\n    MixedContentWarning = 'MixedContentWarning',\n  }\n\n  export const enum MixedContentResourceType {\n    AttributionSrc = 'AttributionSrc',\n    Audio = 'Audio',\n    Beacon = 'Beacon',\n    CSPReport = 'CSPReport',\n    Download = 'Download',\n    EventSource = 'EventSource',\n    Favicon = 'Favicon',\n    Font = 'Font',\n    Form = 'Form',\n    Frame = 'Frame',\n    Image = 'Image',\n    Import = 'Import',\n    JSON = 'JSON',\n    Manifest = 'Manifest',\n    Ping = 'Ping',\n    PluginData = 'PluginData',\n    PluginResource = 'PluginResource',\n    Prefetch = 'Prefetch',\n    Resource = 'Resource',\n    Script = 'Script',\n    ServiceWorker = 'ServiceWorker',\n    SharedWorker = 'SharedWorker',\n    SpeculationRules = 'SpeculationRules',\n    Stylesheet = 'Stylesheet',\n    Track = 'Track',\n    Video = 'Video',\n    Worker = 'Worker',\n    XMLHttpRequest = 'XMLHttpRequest',\n    XSLT = 'XSLT',\n  }\n\n  export interface MixedContentIssueDetails {\n    /**\n     * The type of resource causing the mixed content issue (css, js, iframe,\n     * form,...). Marked as optional because it is mapped to from\n     * blink::mojom::RequestContextType, which will be replaced\n     * by network::mojom::RequestDestination\n     */\n    resourceType?: MixedContentResourceType;\n    /**\n     * The way the mixed content issue is being resolved.\n     */\n    resolutionStatus: MixedContentResolutionStatus;\n    /**\n     * The unsafe http url causing the mixed content issue.\n     */\n    insecureURL: string;\n    /**\n     * The url responsible for the call to an unsafe url.\n     */\n    mainResourceURL: string;\n    /**\n     * The mixed content request.\n     * Does not always exist (e.g. for unsafe form submission urls).\n     */\n    request?: AffectedRequest;\n    /**\n     * Optional because not every mixed content issue is necessarily linked to a frame.\n     */\n    frame?: AffectedFrame;\n  }\n\n  /**\n   * Enum indicating the reason a response has been blocked. These reasons are\n   * refinements of the net error BLOCKED_BY_RESPONSE.\n   */\n  export const enum BlockedByResponseReason {\n    CoepFrameResourceNeedsCoepHeader = 'CoepFrameResourceNeedsCoepHeader',\n    CoopSandboxedIFrameCannotNavigateToCoopPage = 'CoopSandboxedIFrameCannotNavigateToCoopPage',\n    CorpNotSameOrigin = 'CorpNotSameOrigin',\n    CorpNotSameOriginAfterDefaultedToSameOriginByCoep = 'CorpNotSameOriginAfterDefaultedToSameOriginByCoep',\n    CorpNotSameOriginAfterDefaultedToSameOriginByDip = 'CorpNotSameOriginAfterDefaultedToSameOriginByDip',\n    CorpNotSameOriginAfterDefaultedToSameOriginByCoepAndDip = 'CorpNotSameOriginAfterDefaultedToSameOriginByCoepAndDip',\n    CorpNotSameSite = 'CorpNotSameSite',\n    SRIMessageSignatureMismatch = 'SRIMessageSignatureMismatch',\n  }\n\n  /**\n   * Details for a request that has been blocked with the BLOCKED_BY_RESPONSE\n   * code. Currently only used for COEP/COOP, but may be extended to include\n   * some CSP errors in the future.\n   */\n  export interface BlockedByResponseIssueDetails {\n    request: AffectedRequest;\n    parentFrame?: AffectedFrame;\n    blockedFrame?: AffectedFrame;\n    reason: BlockedByResponseReason;\n  }\n\n  export const enum HeavyAdResolutionStatus {\n    HeavyAdBlocked = 'HeavyAdBlocked',\n    HeavyAdWarning = 'HeavyAdWarning',\n  }\n\n  export const enum HeavyAdReason {\n    NetworkTotalLimit = 'NetworkTotalLimit',\n    CpuTotalLimit = 'CpuTotalLimit',\n    CpuPeakLimit = 'CpuPeakLimit',\n  }\n\n  export interface HeavyAdIssueDetails {\n    /**\n     * The resolution status, either blocking the content or warning.\n     */\n    resolution: HeavyAdResolutionStatus;\n    /**\n     * The reason the ad was blocked, total network or cpu or peak cpu.\n     */\n    reason: HeavyAdReason;\n    /**\n     * The frame that was blocked.\n     */\n    frame: AffectedFrame;\n  }\n\n  export const enum ContentSecurityPolicyViolationType {\n    KInlineViolation = 'kInlineViolation',\n    KEvalViolation = 'kEvalViolation',\n    KURLViolation = 'kURLViolation',\n    KSRIViolation = 'kSRIViolation',\n    KTrustedTypesSinkViolation = 'kTrustedTypesSinkViolation',\n    KTrustedTypesPolicyViolation = 'kTrustedTypesPolicyViolation',\n    KWasmEvalViolation = 'kWasmEvalViolation',\n  }\n\n  export interface SourceCodeLocation {\n    scriptId?: Runtime.ScriptId;\n    url: string;\n    lineNumber: integer;\n    columnNumber: integer;\n  }\n\n  export interface ContentSecurityPolicyIssueDetails {\n    /**\n     * The url not included in allowed sources.\n     */\n    blockedURL?: string;\n    /**\n     * Specific directive that is violated, causing the CSP issue.\n     */\n    violatedDirective: string;\n    isReportOnly: boolean;\n    contentSecurityPolicyViolationType: ContentSecurityPolicyViolationType;\n    frameAncestor?: AffectedFrame;\n    sourceCodeLocation?: SourceCodeLocation;\n    violatingNodeId?: DOM.BackendNodeId;\n  }\n\n  export const enum SharedArrayBufferIssueType {\n    TransferIssue = 'TransferIssue',\n    CreationIssue = 'CreationIssue',\n  }\n\n  /**\n   * Details for a issue arising from an SAB being instantiated in, or\n   * transferred to a context that is not cross-origin isolated.\n   */\n  export interface SharedArrayBufferIssueDetails {\n    sourceCodeLocation: SourceCodeLocation;\n    isWarning: boolean;\n    type: SharedArrayBufferIssueType;\n  }\n\n  export interface LowTextContrastIssueDetails {\n    violatingNodeId: DOM.BackendNodeId;\n    violatingNodeSelector: string;\n    contrastRatio: number;\n    thresholdAA: number;\n    thresholdAAA: number;\n    fontSize: string;\n    fontWeight: string;\n  }\n\n  /**\n   * Details for a CORS related issue, e.g. a warning or error related to\n   * CORS RFC1918 enforcement.\n   */\n  export interface CorsIssueDetails {\n    corsErrorStatus: Network.CorsErrorStatus;\n    isWarning: boolean;\n    request: AffectedRequest;\n    location?: SourceCodeLocation;\n    initiatorOrigin?: string;\n    resourceIPAddressSpace?: Network.IPAddressSpace;\n    clientSecurityState?: Network.ClientSecurityState;\n  }\n\n  export const enum AttributionReportingIssueType {\n    PermissionPolicyDisabled = 'PermissionPolicyDisabled',\n    UntrustworthyReportingOrigin = 'UntrustworthyReportingOrigin',\n    InsecureContext = 'InsecureContext',\n    InvalidHeader = 'InvalidHeader',\n    InvalidRegisterTriggerHeader = 'InvalidRegisterTriggerHeader',\n    SourceAndTriggerHeaders = 'SourceAndTriggerHeaders',\n    SourceIgnored = 'SourceIgnored',\n    TriggerIgnored = 'TriggerIgnored',\n    OsSourceIgnored = 'OsSourceIgnored',\n    OsTriggerIgnored = 'OsTriggerIgnored',\n    InvalidRegisterOsSourceHeader = 'InvalidRegisterOsSourceHeader',\n    InvalidRegisterOsTriggerHeader = 'InvalidRegisterOsTriggerHeader',\n    WebAndOsHeaders = 'WebAndOsHeaders',\n    NoWebOrOsSupport = 'NoWebOrOsSupport',\n    NavigationRegistrationWithoutTransientUserActivation = 'NavigationRegistrationWithoutTransientUserActivation',\n    InvalidInfoHeader = 'InvalidInfoHeader',\n    NoRegisterSourceHeader = 'NoRegisterSourceHeader',\n    NoRegisterTriggerHeader = 'NoRegisterTriggerHeader',\n    NoRegisterOsSourceHeader = 'NoRegisterOsSourceHeader',\n    NoRegisterOsTriggerHeader = 'NoRegisterOsTriggerHeader',\n    NavigationRegistrationUniqueScopeAlreadySet = 'NavigationRegistrationUniqueScopeAlreadySet',\n  }\n\n  export const enum SharedDictionaryError {\n    UseErrorCrossOriginNoCorsRequest = 'UseErrorCrossOriginNoCorsRequest',\n    UseErrorDictionaryLoadFailure = 'UseErrorDictionaryLoadFailure',\n    UseErrorMatchingDictionaryNotUsed = 'UseErrorMatchingDictionaryNotUsed',\n    UseErrorUnexpectedContentDictionaryHeader = 'UseErrorUnexpectedContentDictionaryHeader',\n    WriteErrorCossOriginNoCorsRequest = 'WriteErrorCossOriginNoCorsRequest',\n    WriteErrorDisallowedBySettings = 'WriteErrorDisallowedBySettings',\n    WriteErrorExpiredResponse = 'WriteErrorExpiredResponse',\n    WriteErrorFeatureDisabled = 'WriteErrorFeatureDisabled',\n    WriteErrorInsufficientResources = 'WriteErrorInsufficientResources',\n    WriteErrorInvalidMatchField = 'WriteErrorInvalidMatchField',\n    WriteErrorInvalidStructuredHeader = 'WriteErrorInvalidStructuredHeader',\n    WriteErrorInvalidTTLField = 'WriteErrorInvalidTTLField',\n    WriteErrorNavigationRequest = 'WriteErrorNavigationRequest',\n    WriteErrorNoMatchField = 'WriteErrorNoMatchField',\n    WriteErrorNonIntegerTTLField = 'WriteErrorNonIntegerTTLField',\n    WriteErrorNonListMatchDestField = 'WriteErrorNonListMatchDestField',\n    WriteErrorNonSecureContext = 'WriteErrorNonSecureContext',\n    WriteErrorNonStringIdField = 'WriteErrorNonStringIdField',\n    WriteErrorNonStringInMatchDestList = 'WriteErrorNonStringInMatchDestList',\n    WriteErrorNonStringMatchField = 'WriteErrorNonStringMatchField',\n    WriteErrorNonTokenTypeField = 'WriteErrorNonTokenTypeField',\n    WriteErrorRequestAborted = 'WriteErrorRequestAborted',\n    WriteErrorShuttingDown = 'WriteErrorShuttingDown',\n    WriteErrorTooLongIdField = 'WriteErrorTooLongIdField',\n    WriteErrorUnsupportedType = 'WriteErrorUnsupportedType',\n  }\n\n  export const enum SRIMessageSignatureError {\n    MissingSignatureHeader = 'MissingSignatureHeader',\n    MissingSignatureInputHeader = 'MissingSignatureInputHeader',\n    InvalidSignatureHeader = 'InvalidSignatureHeader',\n    InvalidSignatureInputHeader = 'InvalidSignatureInputHeader',\n    SignatureHeaderValueIsNotByteSequence = 'SignatureHeaderValueIsNotByteSequence',\n    SignatureHeaderValueIsParameterized = 'SignatureHeaderValueIsParameterized',\n    SignatureHeaderValueIsIncorrectLength = 'SignatureHeaderValueIsIncorrectLength',\n    SignatureInputHeaderMissingLabel = 'SignatureInputHeaderMissingLabel',\n    SignatureInputHeaderValueNotInnerList = 'SignatureInputHeaderValueNotInnerList',\n    SignatureInputHeaderValueMissingComponents = 'SignatureInputHeaderValueMissingComponents',\n    SignatureInputHeaderInvalidComponentType = 'SignatureInputHeaderInvalidComponentType',\n    SignatureInputHeaderInvalidComponentName = 'SignatureInputHeaderInvalidComponentName',\n    SignatureInputHeaderInvalidHeaderComponentParameter = 'SignatureInputHeaderInvalidHeaderComponentParameter',\n    SignatureInputHeaderInvalidDerivedComponentParameter = 'SignatureInputHeaderInvalidDerivedComponentParameter',\n    SignatureInputHeaderKeyIdLength = 'SignatureInputHeaderKeyIdLength',\n    SignatureInputHeaderInvalidParameter = 'SignatureInputHeaderInvalidParameter',\n    SignatureInputHeaderMissingRequiredParameters = 'SignatureInputHeaderMissingRequiredParameters',\n    ValidationFailedSignatureExpired = 'ValidationFailedSignatureExpired',\n    ValidationFailedInvalidLength = 'ValidationFailedInvalidLength',\n    ValidationFailedSignatureMismatch = 'ValidationFailedSignatureMismatch',\n    ValidationFailedIntegrityMismatch = 'ValidationFailedIntegrityMismatch',\n  }\n\n  export const enum UnencodedDigestError {\n    MalformedDictionary = 'MalformedDictionary',\n    UnknownAlgorithm = 'UnknownAlgorithm',\n    IncorrectDigestType = 'IncorrectDigestType',\n    IncorrectDigestLength = 'IncorrectDigestLength',\n  }\n\n  /**\n   * Details for issues around \"Attribution Reporting API\" usage.\n   * Explainer: https://github.com/WICG/attribution-reporting-api\n   */\n  export interface AttributionReportingIssueDetails {\n    violationType: AttributionReportingIssueType;\n    request?: AffectedRequest;\n    violatingNodeId?: DOM.BackendNodeId;\n    invalidParameter?: string;\n  }\n\n  /**\n   * Details for issues about documents in Quirks Mode\n   * or Limited Quirks Mode that affects page layouting.\n   */\n  export interface QuirksModeIssueDetails {\n    /**\n     * If false, it means the document's mode is \"quirks\"\n     * instead of \"limited-quirks\".\n     */\n    isLimitedQuirksMode: boolean;\n    documentNodeId: DOM.BackendNodeId;\n    url: string;\n    frameId: Page.FrameId;\n    loaderId: Network.LoaderId;\n  }\n\n  /**\n   * @deprecated\n   */\n  export interface NavigatorUserAgentIssueDetails {\n    url: string;\n    location?: SourceCodeLocation;\n  }\n\n  export interface SharedDictionaryIssueDetails {\n    sharedDictionaryError: SharedDictionaryError;\n    request: AffectedRequest;\n  }\n\n  export interface SRIMessageSignatureIssueDetails {\n    error: SRIMessageSignatureError;\n    signatureBase: string;\n    integrityAssertions: string[];\n    request: AffectedRequest;\n  }\n\n  export interface UnencodedDigestIssueDetails {\n    error: UnencodedDigestError;\n    request: AffectedRequest;\n  }\n\n  export const enum GenericIssueErrorType {\n    FormLabelForNameError = 'FormLabelForNameError',\n    FormDuplicateIdForInputError = 'FormDuplicateIdForInputError',\n    FormInputWithNoLabelError = 'FormInputWithNoLabelError',\n    FormAutocompleteAttributeEmptyError = 'FormAutocompleteAttributeEmptyError',\n    FormEmptyIdAndNameAttributesForInputError = 'FormEmptyIdAndNameAttributesForInputError',\n    FormAriaLabelledByToNonExistingId = 'FormAriaLabelledByToNonExistingId',\n    FormInputAssignedAutocompleteValueToIdOrNameAttributeError = 'FormInputAssignedAutocompleteValueToIdOrNameAttributeError',\n    FormLabelHasNeitherForNorNestedInput = 'FormLabelHasNeitherForNorNestedInput',\n    FormLabelForMatchesNonExistingIdError = 'FormLabelForMatchesNonExistingIdError',\n    FormInputHasWrongButWellIntendedAutocompleteValueError = 'FormInputHasWrongButWellIntendedAutocompleteValueError',\n    ResponseWasBlockedByORB = 'ResponseWasBlockedByORB',\n  }\n\n  /**\n   * Depending on the concrete errorType, different properties are set.\n   */\n  export interface GenericIssueDetails {\n    /**\n     * Issues with the same errorType are aggregated in the frontend.\n     */\n    errorType: GenericIssueErrorType;\n    frameId?: Page.FrameId;\n    violatingNodeId?: DOM.BackendNodeId;\n    violatingNodeAttribute?: string;\n    request?: AffectedRequest;\n  }\n\n  /**\n   * This issue tracks information needed to print a deprecation message.\n   * https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/frame/third_party/blink/renderer/core/frame/deprecation/README.md\n   */\n  export interface DeprecationIssueDetails {\n    affectedFrame?: AffectedFrame;\n    sourceCodeLocation: SourceCodeLocation;\n    /**\n     * One of the deprecation names from third_party/blink/renderer/core/frame/deprecation/deprecation.json5\n     */\n    type: string;\n  }\n\n  /**\n   * This issue warns about sites in the redirect chain of a finished navigation\n   * that may be flagged as trackers and have their state cleared if they don't\n   * receive a user interaction. Note that in this context 'site' means eTLD+1.\n   * For example, if the URL `https://example.test:80/bounce` was in the\n   * redirect chain, the site reported would be `example.test`.\n   */\n  export interface BounceTrackingIssueDetails {\n    trackingSites: string[];\n  }\n\n  /**\n   * This issue warns about third-party sites that are accessing cookies on the\n   * current page, and have been permitted due to having a global metadata grant.\n   * Note that in this context 'site' means eTLD+1. For example, if the URL\n   * `https://example.test:80/web_page` was accessing cookies, the site reported\n   * would be `example.test`.\n   */\n  export interface CookieDeprecationMetadataIssueDetails {\n    allowedSites: string[];\n    optOutPercentage: number;\n    isOptOutTopLevel: boolean;\n    operation: CookieOperation;\n  }\n\n  export const enum ClientHintIssueReason {\n    MetaTagAllowListInvalidOrigin = 'MetaTagAllowListInvalidOrigin',\n    MetaTagModifiedHTML = 'MetaTagModifiedHTML',\n  }\n\n  export interface FederatedAuthRequestIssueDetails {\n    federatedAuthRequestIssueReason: FederatedAuthRequestIssueReason;\n  }\n\n  /**\n   * Represents the failure reason when a federated authentication reason fails.\n   * Should be updated alongside RequestIdTokenStatus in\n   * third_party/blink/public/mojom/devtools/inspector_issue.mojom to include\n   * all cases except for success.\n   */\n  export const enum FederatedAuthRequestIssueReason {\n    ShouldEmbargo = 'ShouldEmbargo',\n    TooManyRequests = 'TooManyRequests',\n    WellKnownHttpNotFound = 'WellKnownHttpNotFound',\n    WellKnownNoResponse = 'WellKnownNoResponse',\n    WellKnownInvalidResponse = 'WellKnownInvalidResponse',\n    WellKnownListEmpty = 'WellKnownListEmpty',\n    WellKnownInvalidContentType = 'WellKnownInvalidContentType',\n    ConfigNotInWellKnown = 'ConfigNotInWellKnown',\n    WellKnownTooBig = 'WellKnownTooBig',\n    ConfigHttpNotFound = 'ConfigHttpNotFound',\n    ConfigNoResponse = 'ConfigNoResponse',\n    ConfigInvalidResponse = 'ConfigInvalidResponse',\n    ConfigInvalidContentType = 'ConfigInvalidContentType',\n    ClientMetadataHttpNotFound = 'ClientMetadataHttpNotFound',\n    ClientMetadataNoResponse = 'ClientMetadataNoResponse',\n    ClientMetadataInvalidResponse = 'ClientMetadataInvalidResponse',\n    ClientMetadataInvalidContentType = 'ClientMetadataInvalidContentType',\n    IdpNotPotentiallyTrustworthy = 'IdpNotPotentiallyTrustworthy',\n    DisabledInSettings = 'DisabledInSettings',\n    DisabledInFlags = 'DisabledInFlags',\n    ErrorFetchingSignin = 'ErrorFetchingSignin',\n    InvalidSigninResponse = 'InvalidSigninResponse',\n    AccountsHttpNotFound = 'AccountsHttpNotFound',\n    AccountsNoResponse = 'AccountsNoResponse',\n    AccountsInvalidResponse = 'AccountsInvalidResponse',\n    AccountsListEmpty = 'AccountsListEmpty',\n    AccountsInvalidContentType = 'AccountsInvalidContentType',\n    IdTokenHttpNotFound = 'IdTokenHttpNotFound',\n    IdTokenNoResponse = 'IdTokenNoResponse',\n    IdTokenInvalidResponse = 'IdTokenInvalidResponse',\n    IdTokenIdpErrorResponse = 'IdTokenIdpErrorResponse',\n    IdTokenCrossSiteIdpErrorResponse = 'IdTokenCrossSiteIdpErrorResponse',\n    IdTokenInvalidRequest = 'IdTokenInvalidRequest',\n    IdTokenInvalidContentType = 'IdTokenInvalidContentType',\n    ErrorIdToken = 'ErrorIdToken',\n    Canceled = 'Canceled',\n    RpPageNotVisible = 'RpPageNotVisible',\n    SilentMediationFailure = 'SilentMediationFailure',\n    ThirdPartyCookiesBlocked = 'ThirdPartyCookiesBlocked',\n    NotSignedInWithIdp = 'NotSignedInWithIdp',\n    MissingTransientUserActivation = 'MissingTransientUserActivation',\n    ReplacedByActiveMode = 'ReplacedByActiveMode',\n    InvalidFieldsSpecified = 'InvalidFieldsSpecified',\n    RelyingPartyOriginIsOpaque = 'RelyingPartyOriginIsOpaque',\n    TypeNotMatching = 'TypeNotMatching',\n    UiDismissedNoEmbargo = 'UiDismissedNoEmbargo',\n    CorsError = 'CorsError',\n    SuppressedBySegmentationPlatform = 'SuppressedBySegmentationPlatform',\n  }\n\n  export interface FederatedAuthUserInfoRequestIssueDetails {\n    federatedAuthUserInfoRequestIssueReason: FederatedAuthUserInfoRequestIssueReason;\n  }\n\n  /**\n   * Represents the failure reason when a getUserInfo() call fails.\n   * Should be updated alongside FederatedAuthUserInfoRequestResult in\n   * third_party/blink/public/mojom/devtools/inspector_issue.mojom.\n   */\n  export const enum FederatedAuthUserInfoRequestIssueReason {\n    NotSameOrigin = 'NotSameOrigin',\n    NotIframe = 'NotIframe',\n    NotPotentiallyTrustworthy = 'NotPotentiallyTrustworthy',\n    NoAPIPermission = 'NoApiPermission',\n    NotSignedInWithIdp = 'NotSignedInWithIdp',\n    NoAccountSharingPermission = 'NoAccountSharingPermission',\n    InvalidConfigOrWellKnown = 'InvalidConfigOrWellKnown',\n    InvalidAccountsResponse = 'InvalidAccountsResponse',\n    NoReturningUserFromFetchedAccounts = 'NoReturningUserFromFetchedAccounts',\n  }\n\n  /**\n   * This issue tracks client hints related issues. It's used to deprecate old\n   * features, encourage the use of new ones, and provide general guidance.\n   */\n  export interface ClientHintIssueDetails {\n    sourceCodeLocation: SourceCodeLocation;\n    clientHintIssueReason: ClientHintIssueReason;\n  }\n\n  export interface FailedRequestInfo {\n    /**\n     * The URL that failed to load.\n     */\n    url: string;\n    /**\n     * The failure message for the failed request.\n     */\n    failureMessage: string;\n    requestId?: Network.RequestId;\n  }\n\n  export const enum PartitioningBlobURLInfo {\n    BlockedCrossPartitionFetching = 'BlockedCrossPartitionFetching',\n    EnforceNoopenerForNavigation = 'EnforceNoopenerForNavigation',\n  }\n\n  export interface PartitioningBlobURLIssueDetails {\n    /**\n     * The BlobURL that failed to load.\n     */\n    url: string;\n    /**\n     * Additional information about the Partitioning Blob URL issue.\n     */\n    partitioningBlobURLInfo: PartitioningBlobURLInfo;\n  }\n\n  export const enum ElementAccessibilityIssueReason {\n    DisallowedSelectChild = 'DisallowedSelectChild',\n    DisallowedOptGroupChild = 'DisallowedOptGroupChild',\n    NonPhrasingContentOptionChild = 'NonPhrasingContentOptionChild',\n    InteractiveContentOptionChild = 'InteractiveContentOptionChild',\n    InteractiveContentLegendChild = 'InteractiveContentLegendChild',\n    InteractiveContentSummaryDescendant = 'InteractiveContentSummaryDescendant',\n  }\n\n  /**\n   * This issue warns about errors in the select or summary element content model.\n   */\n  export interface ElementAccessibilityIssueDetails {\n    nodeId: DOM.BackendNodeId;\n    elementAccessibilityIssueReason: ElementAccessibilityIssueReason;\n    hasDisallowedAttributes: boolean;\n  }\n\n  export const enum StyleSheetLoadingIssueReason {\n    LateImportRule = 'LateImportRule',\n    RequestFailed = 'RequestFailed',\n  }\n\n  /**\n   * This issue warns when a referenced stylesheet couldn't be loaded.\n   */\n  export interface StylesheetLoadingIssueDetails {\n    /**\n     * Source code position that referenced the failing stylesheet.\n     */\n    sourceCodeLocation: SourceCodeLocation;\n    /**\n     * Reason why the stylesheet couldn't be loaded.\n     */\n    styleSheetLoadingIssueReason: StyleSheetLoadingIssueReason;\n    /**\n     * Contains additional info when the failure was due to a request.\n     */\n    failedRequestInfo?: FailedRequestInfo;\n  }\n\n  export const enum PropertyRuleIssueReason {\n    InvalidSyntax = 'InvalidSyntax',\n    InvalidInitialValue = 'InvalidInitialValue',\n    InvalidInherits = 'InvalidInherits',\n    InvalidName = 'InvalidName',\n  }\n\n  /**\n   * This issue warns about errors in property rules that lead to property\n   * registrations being ignored.\n   */\n  export interface PropertyRuleIssueDetails {\n    /**\n     * Source code position of the property rule.\n     */\n    sourceCodeLocation: SourceCodeLocation;\n    /**\n     * Reason why the property rule was discarded.\n     */\n    propertyRuleIssueReason: PropertyRuleIssueReason;\n    /**\n     * The value of the property rule property that failed to parse\n     */\n    propertyValue?: string;\n  }\n\n  export const enum UserReidentificationIssueType {\n    BlockedFrameNavigation = 'BlockedFrameNavigation',\n    BlockedSubresource = 'BlockedSubresource',\n    NoisedCanvasReadback = 'NoisedCanvasReadback',\n  }\n\n  /**\n   * This issue warns about uses of APIs that may be considered misuse to\n   * re-identify users.\n   */\n  export interface UserReidentificationIssueDetails {\n    type: UserReidentificationIssueType;\n    /**\n     * Applies to BlockedFrameNavigation and BlockedSubresource issue types.\n     */\n    request?: AffectedRequest;\n    /**\n     * Applies to NoisedCanvasReadback issue type.\n     */\n    sourceCodeLocation?: SourceCodeLocation;\n  }\n\n  /**\n   * A unique identifier for the type of issue. Each type may use one of the\n   * optional fields in InspectorIssueDetails to convey more specific\n   * information about the kind of issue.\n   */\n  export const enum InspectorIssueCode {\n    CookieIssue = 'CookieIssue',\n    MixedContentIssue = 'MixedContentIssue',\n    BlockedByResponseIssue = 'BlockedByResponseIssue',\n    HeavyAdIssue = 'HeavyAdIssue',\n    ContentSecurityPolicyIssue = 'ContentSecurityPolicyIssue',\n    SharedArrayBufferIssue = 'SharedArrayBufferIssue',\n    LowTextContrastIssue = 'LowTextContrastIssue',\n    CorsIssue = 'CorsIssue',\n    AttributionReportingIssue = 'AttributionReportingIssue',\n    QuirksModeIssue = 'QuirksModeIssue',\n    PartitioningBlobURLIssue = 'PartitioningBlobURLIssue',\n    NavigatorUserAgentIssue = 'NavigatorUserAgentIssue',\n    GenericIssue = 'GenericIssue',\n    DeprecationIssue = 'DeprecationIssue',\n    ClientHintIssue = 'ClientHintIssue',\n    FederatedAuthRequestIssue = 'FederatedAuthRequestIssue',\n    BounceTrackingIssue = 'BounceTrackingIssue',\n    CookieDeprecationMetadataIssue = 'CookieDeprecationMetadataIssue',\n    StylesheetLoadingIssue = 'StylesheetLoadingIssue',\n    FederatedAuthUserInfoRequestIssue = 'FederatedAuthUserInfoRequestIssue',\n    PropertyRuleIssue = 'PropertyRuleIssue',\n    SharedDictionaryIssue = 'SharedDictionaryIssue',\n    ElementAccessibilityIssue = 'ElementAccessibilityIssue',\n    SRIMessageSignatureIssue = 'SRIMessageSignatureIssue',\n    UnencodedDigestIssue = 'UnencodedDigestIssue',\n    UserReidentificationIssue = 'UserReidentificationIssue',\n  }\n\n  /**\n   * This struct holds a list of optional fields with additional information\n   * specific to the kind of issue. When adding a new issue code, please also\n   * add a new optional field to this type.\n   */\n  export interface InspectorIssueDetails {\n    cookieIssueDetails?: CookieIssueDetails;\n    mixedContentIssueDetails?: MixedContentIssueDetails;\n    blockedByResponseIssueDetails?: BlockedByResponseIssueDetails;\n    heavyAdIssueDetails?: HeavyAdIssueDetails;\n    contentSecurityPolicyIssueDetails?: ContentSecurityPolicyIssueDetails;\n    sharedArrayBufferIssueDetails?: SharedArrayBufferIssueDetails;\n    lowTextContrastIssueDetails?: LowTextContrastIssueDetails;\n    corsIssueDetails?: CorsIssueDetails;\n    attributionReportingIssueDetails?: AttributionReportingIssueDetails;\n    quirksModeIssueDetails?: QuirksModeIssueDetails;\n    partitioningBlobURLIssueDetails?: PartitioningBlobURLIssueDetails;\n    /**\n     * @deprecated\n     */\n    navigatorUserAgentIssueDetails?: NavigatorUserAgentIssueDetails;\n    genericIssueDetails?: GenericIssueDetails;\n    deprecationIssueDetails?: DeprecationIssueDetails;\n    clientHintIssueDetails?: ClientHintIssueDetails;\n    federatedAuthRequestIssueDetails?: FederatedAuthRequestIssueDetails;\n    bounceTrackingIssueDetails?: BounceTrackingIssueDetails;\n    cookieDeprecationMetadataIssueDetails?: CookieDeprecationMetadataIssueDetails;\n    stylesheetLoadingIssueDetails?: StylesheetLoadingIssueDetails;\n    propertyRuleIssueDetails?: PropertyRuleIssueDetails;\n    federatedAuthUserInfoRequestIssueDetails?: FederatedAuthUserInfoRequestIssueDetails;\n    sharedDictionaryIssueDetails?: SharedDictionaryIssueDetails;\n    elementAccessibilityIssueDetails?: ElementAccessibilityIssueDetails;\n    sriMessageSignatureIssueDetails?: SRIMessageSignatureIssueDetails;\n    unencodedDigestIssueDetails?: UnencodedDigestIssueDetails;\n    userReidentificationIssueDetails?: UserReidentificationIssueDetails;\n  }\n\n  /**\n   * A unique id for a DevTools inspector issue. Allows other entities (e.g.\n   * exceptions, CDP message, console messages, etc.) to reference an issue.\n   */\n  export type IssueId = OpaqueIdentifier<string, 'Protocol.Audits.IssueId'>;\n\n  /**\n   * An inspector issue reported from the back-end.\n   */\n  export interface InspectorIssue {\n    code: InspectorIssueCode;\n    details: InspectorIssueDetails;\n    /**\n     * A unique id for this issue. May be omitted if no other entity (e.g.\n     * exception, CDP message, etc.) is referencing this issue.\n     */\n    issueId?: IssueId;\n  }\n\n  export const enum GetEncodedResponseRequestEncoding {\n    Webp = 'webp',\n    Jpeg = 'jpeg',\n    Png = 'png',\n  }\n\n  export interface GetEncodedResponseRequest {\n    /**\n     * Identifier of the network request to get content for.\n     */\n    requestId: Network.RequestId;\n    /**\n     * The encoding to use.\n     */\n    encoding: GetEncodedResponseRequestEncoding;\n    /**\n     * The quality of the encoding (0-1). (defaults to 1)\n     */\n    quality?: number;\n    /**\n     * Whether to only return the size information (defaults to false).\n     */\n    sizeOnly?: boolean;\n  }\n\n  export interface GetEncodedResponseResponse extends ProtocolResponseWithError {\n    /**\n     * The encoded body as a base64 string. Omitted if sizeOnly is true.\n     */\n    body?: binary;\n    /**\n     * Size before re-encoding.\n     */\n    originalSize: integer;\n    /**\n     * Size after re-encoding.\n     */\n    encodedSize: integer;\n  }\n\n  export interface CheckContrastRequest {\n    /**\n     * Whether to report WCAG AAA level issues. Default is false.\n     */\n    reportAAA?: boolean;\n  }\n\n  export interface CheckFormsIssuesResponse extends ProtocolResponseWithError {\n    formIssues: GenericIssueDetails[];\n  }\n\n  export interface IssueAddedEvent {\n    issue: InspectorIssue;\n  }\n}\n\n/**\n * Defines commands and events for Autofill.\n */\nexport namespace Autofill {\n\n  export interface CreditCard {\n    /**\n     * 16-digit credit card number.\n     */\n    number: string;\n    /**\n     * Name of the credit card owner.\n     */\n    name: string;\n    /**\n     * 2-digit expiry month.\n     */\n    expiryMonth: string;\n    /**\n     * 4-digit expiry year.\n     */\n    expiryYear: string;\n    /**\n     * 3-digit card verification code.\n     */\n    cvc: string;\n  }\n\n  export interface AddressField {\n    /**\n     * address field name, for example GIVEN_NAME.\n     * The full list of supported field names:\n     * https://source.chromium.org/chromium/chromium/src/+/main:components/autofill/core/browser/field_types.cc;l=38\n     */\n    name: string;\n    /**\n     * address field value, for example Jon Doe.\n     */\n    value: string;\n  }\n\n  /**\n   * A list of address fields.\n   */\n  export interface AddressFields {\n    fields: AddressField[];\n  }\n\n  export interface Address {\n    /**\n     * fields and values defining an address.\n     */\n    fields: AddressField[];\n  }\n\n  /**\n   * Defines how an address can be displayed like in chrome://settings/addresses.\n   * Address UI is a two dimensional array, each inner array is an \"address information line\", and when rendered in a UI surface should be displayed as such.\n   * The following address UI for instance:\n   * [[{name: \"GIVE_NAME\", value: \"Jon\"}, {name: \"FAMILY_NAME\", value: \"Doe\"}], [{name: \"CITY\", value: \"Munich\"}, {name: \"ZIP\", value: \"81456\"}]]\n   * should allow the receiver to render:\n   * Jon Doe\n   * Munich 81456\n   */\n  export interface AddressUI {\n    /**\n     * A two dimension array containing the representation of values from an address profile.\n     */\n    addressFields: AddressFields[];\n  }\n\n  /**\n   * Specified whether a filled field was done so by using the html autocomplete attribute or autofill heuristics.\n   */\n  export const enum FillingStrategy {\n    AutocompleteAttribute = 'autocompleteAttribute',\n    AutofillInferred = 'autofillInferred',\n  }\n\n  export interface FilledField {\n    /**\n     * The type of the field, e.g text, password etc.\n     */\n    htmlType: string;\n    /**\n     * the html id\n     */\n    id: string;\n    /**\n     * the html name\n     */\n    name: string;\n    /**\n     * the field value\n     */\n    value: string;\n    /**\n     * The actual field type, e.g FAMILY_NAME\n     */\n    autofillType: string;\n    /**\n     * The filling strategy\n     */\n    fillingStrategy: FillingStrategy;\n    /**\n     * The frame the field belongs to\n     */\n    frameId: Page.FrameId;\n    /**\n     * The form field's DOM node\n     */\n    fieldId: DOM.BackendNodeId;\n  }\n\n  export interface TriggerRequest {\n    /**\n     * Identifies a field that serves as an anchor for autofill.\n     */\n    fieldId: DOM.BackendNodeId;\n    /**\n     * Identifies the frame that field belongs to.\n     */\n    frameId?: Page.FrameId;\n    /**\n     * Credit card information to fill out the form. Credit card data is not saved.  Mutually exclusive with `address`.\n     */\n    card?: CreditCard;\n    /**\n     * Address to fill out the form. Address data is not saved. Mutually exclusive with `card`.\n     */\n    address?: Address;\n  }\n\n  export interface SetAddressesRequest {\n    addresses: Address[];\n  }\n\n  /**\n   * Emitted when an address form is filled.\n   */\n  export interface AddressFormFilledEvent {\n    /**\n     * Information about the fields that were filled\n     */\n    filledFields: FilledField[];\n    /**\n     * An UI representation of the address used to fill the form.\n     * Consists of a 2D array where each child represents an address/profile line.\n     */\n    addressUi: AddressUI;\n  }\n}\n\n/**\n * Defines events for background web platform features.\n */\nexport namespace BackgroundService {\n\n  /**\n   * The Background Service that will be associated with the commands/events.\n   * Every Background Service operates independently, but they share the same\n   * API.\n   */\n  export const enum ServiceName {\n    BackgroundFetch = 'backgroundFetch',\n    BackgroundSync = 'backgroundSync',\n    PushMessaging = 'pushMessaging',\n    Notifications = 'notifications',\n    PaymentHandler = 'paymentHandler',\n    PeriodicBackgroundSync = 'periodicBackgroundSync',\n  }\n\n  /**\n   * A key-value pair for additional event information to pass along.\n   */\n  export interface EventMetadata {\n    key: string;\n    value: string;\n  }\n\n  export interface BackgroundServiceEvent {\n    /**\n     * Timestamp of the event (in seconds).\n     */\n    timestamp: Network.TimeSinceEpoch;\n    /**\n     * The origin this event belongs to.\n     */\n    origin: string;\n    /**\n     * The Service Worker ID that initiated the event.\n     */\n    serviceWorkerRegistrationId: ServiceWorker.RegistrationID;\n    /**\n     * The Background Service this event belongs to.\n     */\n    service: ServiceName;\n    /**\n     * A description of the event.\n     */\n    eventName: string;\n    /**\n     * An identifier that groups related events together.\n     */\n    instanceId: string;\n    /**\n     * A list of event-specific information.\n     */\n    eventMetadata: EventMetadata[];\n    /**\n     * Storage key this event belongs to.\n     */\n    storageKey: string;\n  }\n\n  export interface StartObservingRequest {\n    service: ServiceName;\n  }\n\n  export interface StopObservingRequest {\n    service: ServiceName;\n  }\n\n  export interface SetRecordingRequest {\n    shouldRecord: boolean;\n    service: ServiceName;\n  }\n\n  export interface ClearEventsRequest {\n    service: ServiceName;\n  }\n\n  /**\n   * Called when the recording state for the service has been updated.\n   */\n  export interface RecordingStateChangedEvent {\n    isRecording: boolean;\n    service: ServiceName;\n  }\n\n  /**\n   * Called with all existing backgroundServiceEvents when enabled, and all new\n   * events afterwards if enabled and recording.\n   */\n  export interface BackgroundServiceEventReceivedEvent {\n    backgroundServiceEvent: BackgroundServiceEvent;\n  }\n}\n\n/**\n * This domain allows configuring virtual Bluetooth devices to test\n * the web-bluetooth API.\n */\nexport namespace BluetoothEmulation {\n\n  /**\n   * Indicates the various states of Central.\n   */\n  export const enum CentralState {\n    Absent = 'absent',\n    PoweredOff = 'powered-off',\n    PoweredOn = 'powered-on',\n  }\n\n  /**\n   * Indicates the various types of GATT event.\n   */\n  export const enum GATTOperationType {\n    Connection = 'connection',\n    Discovery = 'discovery',\n  }\n\n  /**\n   * Indicates the various types of characteristic write.\n   */\n  export const enum CharacteristicWriteType {\n    WriteDefaultDeprecated = 'write-default-deprecated',\n    WriteWithResponse = 'write-with-response',\n    WriteWithoutResponse = 'write-without-response',\n  }\n\n  /**\n   * Indicates the various types of characteristic operation.\n   */\n  export const enum CharacteristicOperationType {\n    Read = 'read',\n    Write = 'write',\n    SubscribeToNotifications = 'subscribe-to-notifications',\n    UnsubscribeFromNotifications = 'unsubscribe-from-notifications',\n  }\n\n  /**\n   * Indicates the various types of descriptor operation.\n   */\n  export const enum DescriptorOperationType {\n    Read = 'read',\n    Write = 'write',\n  }\n\n  /**\n   * Stores the manufacturer data\n   */\n  export interface ManufacturerData {\n    /**\n     * Company identifier\n     * https://bitbucket.org/bluetooth-SIG/public/src/main/assigned_numbers/company_identifiers/company_identifiers.yaml\n     * https://usb.org/developers\n     */\n    key: integer;\n    /**\n     * Manufacturer-specific data\n     */\n    data: binary;\n  }\n\n  /**\n   * Stores the byte data of the advertisement packet sent by a Bluetooth device.\n   */\n  export interface ScanRecord {\n    name?: string;\n    uuids?: string[];\n    /**\n     * Stores the external appearance description of the device.\n     */\n    appearance?: integer;\n    /**\n     * Stores the transmission power of a broadcasting device.\n     */\n    txPower?: integer;\n    /**\n     * Key is the company identifier and the value is an array of bytes of\n     * manufacturer specific data.\n     */\n    manufacturerData?: ManufacturerData[];\n  }\n\n  /**\n   * Stores the advertisement packet information that is sent by a Bluetooth device.\n   */\n  export interface ScanEntry {\n    deviceAddress: string;\n    rssi: integer;\n    scanRecord: ScanRecord;\n  }\n\n  /**\n   * Describes the properties of a characteristic. This follows Bluetooth Core\n   * Specification BT 4.2 Vol 3 Part G 3.3.1. Characteristic Properties.\n   */\n  export interface CharacteristicProperties {\n    broadcast?: boolean;\n    read?: boolean;\n    writeWithoutResponse?: boolean;\n    write?: boolean;\n    notify?: boolean;\n    indicate?: boolean;\n    authenticatedSignedWrites?: boolean;\n    extendedProperties?: boolean;\n  }\n\n  export interface EnableRequest {\n    /**\n     * State of the simulated central.\n     */\n    state: CentralState;\n    /**\n     * If the simulated central supports low-energy.\n     */\n    leSupported: boolean;\n  }\n\n  export interface SetSimulatedCentralStateRequest {\n    /**\n     * State of the simulated central.\n     */\n    state: CentralState;\n  }\n\n  export interface SimulatePreconnectedPeripheralRequest {\n    address: string;\n    name: string;\n    manufacturerData: ManufacturerData[];\n    knownServiceUuids: string[];\n  }\n\n  export interface SimulateAdvertisementRequest {\n    entry: ScanEntry;\n  }\n\n  export interface SimulateGATTOperationResponseRequest {\n    address: string;\n    type: GATTOperationType;\n    code: integer;\n  }\n\n  export interface SimulateCharacteristicOperationResponseRequest {\n    characteristicId: string;\n    type: CharacteristicOperationType;\n    code: integer;\n    data?: binary;\n  }\n\n  export interface SimulateDescriptorOperationResponseRequest {\n    descriptorId: string;\n    type: DescriptorOperationType;\n    code: integer;\n    data?: binary;\n  }\n\n  export interface AddServiceRequest {\n    address: string;\n    serviceUuid: string;\n  }\n\n  export interface AddServiceResponse extends ProtocolResponseWithError {\n    /**\n     * An identifier that uniquely represents this service.\n     */\n    serviceId: string;\n  }\n\n  export interface RemoveServiceRequest {\n    serviceId: string;\n  }\n\n  export interface AddCharacteristicRequest {\n    serviceId: string;\n    characteristicUuid: string;\n    properties: CharacteristicProperties;\n  }\n\n  export interface AddCharacteristicResponse extends ProtocolResponseWithError {\n    /**\n     * An identifier that uniquely represents this characteristic.\n     */\n    characteristicId: string;\n  }\n\n  export interface RemoveCharacteristicRequest {\n    characteristicId: string;\n  }\n\n  export interface AddDescriptorRequest {\n    characteristicId: string;\n    descriptorUuid: string;\n  }\n\n  export interface AddDescriptorResponse extends ProtocolResponseWithError {\n    /**\n     * An identifier that uniquely represents this descriptor.\n     */\n    descriptorId: string;\n  }\n\n  export interface RemoveDescriptorRequest {\n    descriptorId: string;\n  }\n\n  export interface SimulateGATTDisconnectionRequest {\n    address: string;\n  }\n\n  /**\n   * Event for when a GATT operation of |type| to the peripheral with |address|\n   * happened.\n   */\n  export interface GattOperationReceivedEvent {\n    address: string;\n    type: GATTOperationType;\n  }\n\n  /**\n   * Event for when a characteristic operation of |type| to the characteristic\n   * respresented by |characteristicId| happened. |data| and |writeType| is\n   * expected to exist when |type| is write.\n   */\n  export interface CharacteristicOperationReceivedEvent {\n    characteristicId: string;\n    type: CharacteristicOperationType;\n    data?: binary;\n    writeType?: CharacteristicWriteType;\n  }\n\n  /**\n   * Event for when a descriptor operation of |type| to the descriptor\n   * respresented by |descriptorId| happened. |data| is expected to exist when\n   * |type| is write.\n   */\n  export interface DescriptorOperationReceivedEvent {\n    descriptorId: string;\n    type: DescriptorOperationType;\n    data?: binary;\n  }\n}\n\n/**\n * The Browser domain defines methods and events for browser managing.\n */\nexport namespace Browser {\n\n  export type BrowserContextID = OpaqueIdentifier<string, 'Protocol.Browser.BrowserContextID'>;\n\n  export type WindowID = OpaqueIdentifier<integer, 'Protocol.Browser.WindowID'>;\n\n  /**\n   * The state of the browser window.\n   */\n  export const enum WindowState {\n    Normal = 'normal',\n    Minimized = 'minimized',\n    Maximized = 'maximized',\n    Fullscreen = 'fullscreen',\n  }\n\n  /**\n   * Browser window bounds information\n   */\n  export interface Bounds {\n    /**\n     * The offset from the left edge of the screen to the window in pixels.\n     */\n    left?: integer;\n    /**\n     * The offset from the top edge of the screen to the window in pixels.\n     */\n    top?: integer;\n    /**\n     * The window width in pixels.\n     */\n    width?: integer;\n    /**\n     * The window height in pixels.\n     */\n    height?: integer;\n    /**\n     * The window state. Default to normal.\n     */\n    windowState?: WindowState;\n  }\n\n  export const enum PermissionType {\n    Ar = 'ar',\n    AudioCapture = 'audioCapture',\n    AutomaticFullscreen = 'automaticFullscreen',\n    BackgroundFetch = 'backgroundFetch',\n    BackgroundSync = 'backgroundSync',\n    CameraPanTiltZoom = 'cameraPanTiltZoom',\n    CapturedSurfaceControl = 'capturedSurfaceControl',\n    ClipboardReadWrite = 'clipboardReadWrite',\n    ClipboardSanitizedWrite = 'clipboardSanitizedWrite',\n    DisplayCapture = 'displayCapture',\n    DurableStorage = 'durableStorage',\n    Geolocation = 'geolocation',\n    HandTracking = 'handTracking',\n    IdleDetection = 'idleDetection',\n    KeyboardLock = 'keyboardLock',\n    LocalFonts = 'localFonts',\n    LocalNetworkAccess = 'localNetworkAccess',\n    Midi = 'midi',\n    MidiSysex = 'midiSysex',\n    Nfc = 'nfc',\n    Notifications = 'notifications',\n    PaymentHandler = 'paymentHandler',\n    PeriodicBackgroundSync = 'periodicBackgroundSync',\n    PointerLock = 'pointerLock',\n    ProtectedMediaIdentifier = 'protectedMediaIdentifier',\n    Sensors = 'sensors',\n    SmartCard = 'smartCard',\n    SpeakerSelection = 'speakerSelection',\n    StorageAccess = 'storageAccess',\n    TopLevelStorageAccess = 'topLevelStorageAccess',\n    VideoCapture = 'videoCapture',\n    Vr = 'vr',\n    WakeLockScreen = 'wakeLockScreen',\n    WakeLockSystem = 'wakeLockSystem',\n    WebAppInstallation = 'webAppInstallation',\n    WebPrinting = 'webPrinting',\n    WindowManagement = 'windowManagement',\n  }\n\n  export const enum PermissionSetting {\n    Granted = 'granted',\n    Denied = 'denied',\n    Prompt = 'prompt',\n  }\n\n  /**\n   * Definition of PermissionDescriptor defined in the Permissions API:\n   * https://w3c.github.io/permissions/#dom-permissiondescriptor.\n   */\n  export interface PermissionDescriptor {\n    /**\n     * Name of permission.\n     * See https://cs.chromium.org/chromium/src/third_party/blink/renderer/modules/permissions/permission_descriptor.idl for valid permission names.\n     */\n    name: string;\n    /**\n     * For \"midi\" permission, may also specify sysex control.\n     */\n    sysex?: boolean;\n    /**\n     * For \"push\" permission, may specify userVisibleOnly.\n     * Note that userVisibleOnly = true is the only currently supported type.\n     */\n    userVisibleOnly?: boolean;\n    /**\n     * For \"clipboard\" permission, may specify allowWithoutSanitization.\n     */\n    allowWithoutSanitization?: boolean;\n    /**\n     * For \"fullscreen\" permission, must specify allowWithoutGesture:true.\n     */\n    allowWithoutGesture?: boolean;\n    /**\n     * For \"camera\" permission, may specify panTiltZoom.\n     */\n    panTiltZoom?: boolean;\n  }\n\n  /**\n   * Browser command ids used by executeBrowserCommand.\n   */\n  export const enum BrowserCommandId {\n    OpenTabSearch = 'openTabSearch',\n    CloseTabSearch = 'closeTabSearch',\n    OpenGlic = 'openGlic',\n  }\n\n  /**\n   * Chrome histogram bucket.\n   */\n  export interface Bucket {\n    /**\n     * Minimum value (inclusive).\n     */\n    low: integer;\n    /**\n     * Maximum value (exclusive).\n     */\n    high: integer;\n    /**\n     * Number of samples.\n     */\n    count: integer;\n  }\n\n  /**\n   * Chrome histogram.\n   */\n  export interface Histogram {\n    /**\n     * Name.\n     */\n    name: string;\n    /**\n     * Sum of sample values.\n     */\n    sum: integer;\n    /**\n     * Total number of samples.\n     */\n    count: integer;\n    /**\n     * Buckets.\n     */\n    buckets: Bucket[];\n  }\n\n  export const enum PrivacySandboxAPI {\n    BiddingAndAuctionServices = 'BiddingAndAuctionServices',\n    TrustedKeyValue = 'TrustedKeyValue',\n  }\n\n  export interface SetPermissionRequest {\n    /**\n     * Descriptor of permission to override.\n     */\n    permission: PermissionDescriptor;\n    /**\n     * Setting of the permission.\n     */\n    setting: PermissionSetting;\n    /**\n     * Embedding origin the permission applies to, all origins if not specified.\n     */\n    origin?: string;\n    /**\n     * Embedded origin the permission applies to. It is ignored unless the embedding origin is\n     * present and valid. If the embedding origin is provided but the embedded origin isn't, the\n     * embedding origin is used as the embedded origin.\n     */\n    embeddedOrigin?: string;\n    /**\n     * Context to override. When omitted, default browser context is used.\n     */\n    browserContextId?: BrowserContextID;\n  }\n\n  export interface GrantPermissionsRequest {\n    permissions: PermissionType[];\n    /**\n     * Origin the permission applies to, all origins if not specified.\n     */\n    origin?: string;\n    /**\n     * BrowserContext to override permissions. When omitted, default browser context is used.\n     */\n    browserContextId?: BrowserContextID;\n  }\n\n  export interface ResetPermissionsRequest {\n    /**\n     * BrowserContext to reset permissions. When omitted, default browser context is used.\n     */\n    browserContextId?: BrowserContextID;\n  }\n\n  export const enum SetDownloadBehaviorRequestBehavior {\n    Deny = 'deny',\n    Allow = 'allow',\n    AllowAndName = 'allowAndName',\n    Default = 'default',\n  }\n\n  export interface SetDownloadBehaviorRequest {\n    /**\n     * Whether to allow all or deny all download requests, or use default Chrome behavior if\n     * available (otherwise deny). |allowAndName| allows download and names files according to\n     * their download guids.\n     */\n    behavior: SetDownloadBehaviorRequestBehavior;\n    /**\n     * BrowserContext to set download behavior. When omitted, default browser context is used.\n     */\n    browserContextId?: BrowserContextID;\n    /**\n     * The default path to save downloaded files to. This is required if behavior is set to 'allow'\n     * or 'allowAndName'.\n     */\n    downloadPath?: string;\n    /**\n     * Whether to emit download events (defaults to false).\n     */\n    eventsEnabled?: boolean;\n  }\n\n  export interface CancelDownloadRequest {\n    /**\n     * Global unique identifier of the download.\n     */\n    guid: string;\n    /**\n     * BrowserContext to perform the action in. When omitted, default browser context is used.\n     */\n    browserContextId?: BrowserContextID;\n  }\n\n  export interface GetVersionResponse extends ProtocolResponseWithError {\n    /**\n     * Protocol version.\n     */\n    protocolVersion: string;\n    /**\n     * Product name.\n     */\n    product: string;\n    /**\n     * Product revision.\n     */\n    revision: string;\n    /**\n     * User-Agent.\n     */\n    userAgent: string;\n    /**\n     * V8 version.\n     */\n    jsVersion: string;\n  }\n\n  export interface GetBrowserCommandLineResponse extends ProtocolResponseWithError {\n    /**\n     * Commandline parameters\n     */\n    arguments: string[];\n  }\n\n  export interface GetHistogramsRequest {\n    /**\n     * Requested substring in name. Only histograms which have query as a\n     * substring in their name are extracted. An empty or absent query returns\n     * all histograms.\n     */\n    query?: string;\n    /**\n     * If true, retrieve delta since last delta call.\n     */\n    delta?: boolean;\n  }\n\n  export interface GetHistogramsResponse extends ProtocolResponseWithError {\n    /**\n     * Histograms.\n     */\n    histograms: Histogram[];\n  }\n\n  export interface GetHistogramRequest {\n    /**\n     * Requested histogram name.\n     */\n    name: string;\n    /**\n     * If true, retrieve delta since last delta call.\n     */\n    delta?: boolean;\n  }\n\n  export interface GetHistogramResponse extends ProtocolResponseWithError {\n    /**\n     * Histogram.\n     */\n    histogram: Histogram;\n  }\n\n  export interface GetWindowBoundsRequest {\n    /**\n     * Browser window id.\n     */\n    windowId: WindowID;\n  }\n\n  export interface GetWindowBoundsResponse extends ProtocolResponseWithError {\n    /**\n     * Bounds information of the window. When window state is 'minimized', the restored window\n     * position and size are returned.\n     */\n    bounds: Bounds;\n  }\n\n  export interface GetWindowForTargetRequest {\n    /**\n     * Devtools agent host id. If called as a part of the session, associated targetId is used.\n     */\n    targetId?: Target.TargetID;\n  }\n\n  export interface GetWindowForTargetResponse extends ProtocolResponseWithError {\n    /**\n     * Browser window id.\n     */\n    windowId: WindowID;\n    /**\n     * Bounds information of the window. When window state is 'minimized', the restored window\n     * position and size are returned.\n     */\n    bounds: Bounds;\n  }\n\n  export interface SetWindowBoundsRequest {\n    /**\n     * Browser window id.\n     */\n    windowId: WindowID;\n    /**\n     * New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined\n     * with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.\n     */\n    bounds: Bounds;\n  }\n\n  export interface SetContentsSizeRequest {\n    /**\n     * Browser window id.\n     */\n    windowId: WindowID;\n    /**\n     * The window contents width in DIP. Assumes current width if omitted.\n     * Must be specified if 'height' is omitted.\n     */\n    width?: integer;\n    /**\n     * The window contents height in DIP. Assumes current height if omitted.\n     * Must be specified if 'width' is omitted.\n     */\n    height?: integer;\n  }\n\n  export interface SetDockTileRequest {\n    badgeLabel?: string;\n    /**\n     * Png encoded image.\n     */\n    image?: binary;\n  }\n\n  export interface ExecuteBrowserCommandRequest {\n    commandId: BrowserCommandId;\n  }\n\n  export interface AddPrivacySandboxEnrollmentOverrideRequest {\n    url: string;\n  }\n\n  export interface AddPrivacySandboxCoordinatorKeyConfigRequest {\n    api: PrivacySandboxAPI;\n    coordinatorOrigin: string;\n    keyConfig: string;\n    /**\n     * BrowserContext to perform the action in. When omitted, default browser\n     * context is used.\n     */\n    browserContextId?: BrowserContextID;\n  }\n\n  /**\n   * Fired when page is about to start a download.\n   */\n  export interface DownloadWillBeginEvent {\n    /**\n     * Id of the frame that caused the download to begin.\n     */\n    frameId: Page.FrameId;\n    /**\n     * Global unique identifier of the download.\n     */\n    guid: string;\n    /**\n     * URL of the resource being downloaded.\n     */\n    url: string;\n    /**\n     * Suggested file name of the resource (the actual name of the file saved on disk may differ).\n     */\n    suggestedFilename: string;\n  }\n\n  export const enum DownloadProgressEventState {\n    InProgress = 'inProgress',\n    Completed = 'completed',\n    Canceled = 'canceled',\n  }\n\n  /**\n   * Fired when download makes progress. Last call has |done| == true.\n   */\n  export interface DownloadProgressEvent {\n    /**\n     * Global unique identifier of the download.\n     */\n    guid: string;\n    /**\n     * Total expected bytes to download.\n     */\n    totalBytes: number;\n    /**\n     * Total bytes received.\n     */\n    receivedBytes: number;\n    /**\n     * Download status.\n     */\n    state: DownloadProgressEventState;\n    /**\n     * If download is \"completed\", provides the path of the downloaded file.\n     * Depending on the platform, it is not guaranteed to be set, nor the file\n     * is guaranteed to exist.\n     */\n    filePath?: string;\n  }\n}\n\n/**\n * This domain exposes CSS read/write operations. All CSS objects (stylesheets, rules, and styles)\n * have an associated `id` used in subsequent operations on the related object. Each object type has\n * a specific `id` structure, and those are not interchangeable between objects of different kinds.\n * CSS objects can be loaded using the `get*ForNode()` calls (which accept a DOM node id). A client\n * can also keep track of stylesheets via the `styleSheetAdded`/`styleSheetRemoved` events and\n * subsequently load the required stylesheet contents using the `getStyleSheet[Text]()` methods.\n */\nexport namespace CSS {\n\n  export type StyleSheetId = OpaqueIdentifier<string, 'Protocol.CSS.StyleSheetId'>;\n\n  /**\n   * Stylesheet type: \"injected\" for stylesheets injected via extension, \"user-agent\" for user-agent\n   * stylesheets, \"inspector\" for stylesheets created by the inspector (i.e. those holding the \"via\n   * inspector\" rules), \"regular\" for regular stylesheets.\n   */\n  export const enum StyleSheetOrigin {\n    Injected = 'injected',\n    UserAgent = 'user-agent',\n    Inspector = 'inspector',\n    Regular = 'regular',\n  }\n\n  /**\n   * CSS rule collection for a single pseudo style.\n   */\n  export interface PseudoElementMatches {\n    /**\n     * Pseudo element type.\n     */\n    pseudoType: DOM.PseudoType;\n    /**\n     * Pseudo element custom ident.\n     */\n    pseudoIdentifier?: string;\n    /**\n     * Matches of CSS rules applicable to the pseudo style.\n     */\n    matches: RuleMatch[];\n  }\n\n  /**\n   * CSS style coming from animations with the name of the animation.\n   */\n  export interface CSSAnimationStyle {\n    /**\n     * The name of the animation.\n     */\n    name?: string;\n    /**\n     * The style coming from the animation.\n     */\n    style: CSSStyle;\n  }\n\n  /**\n   * Inherited CSS rule collection from ancestor node.\n   */\n  export interface InheritedStyleEntry {\n    /**\n     * The ancestor node's inline style, if any, in the style inheritance chain.\n     */\n    inlineStyle?: CSSStyle;\n    /**\n     * Matches of CSS rules matching the ancestor node in the style inheritance chain.\n     */\n    matchedCSSRules: RuleMatch[];\n  }\n\n  /**\n   * Inherited CSS style collection for animated styles from ancestor node.\n   */\n  export interface InheritedAnimatedStyleEntry {\n    /**\n     * Styles coming from the animations of the ancestor, if any, in the style inheritance chain.\n     */\n    animationStyles?: CSSAnimationStyle[];\n    /**\n     * The style coming from the transitions of the ancestor, if any, in the style inheritance chain.\n     */\n    transitionsStyle?: CSSStyle;\n  }\n\n  /**\n   * Inherited pseudo element matches from pseudos of an ancestor node.\n   */\n  export interface InheritedPseudoElementMatches {\n    /**\n     * Matches of pseudo styles from the pseudos of an ancestor node.\n     */\n    pseudoElements: PseudoElementMatches[];\n  }\n\n  /**\n   * Match data for a CSS rule.\n   */\n  export interface RuleMatch {\n    /**\n     * CSS rule in the match.\n     */\n    rule: CSSRule;\n    /**\n     * Matching selector indices in the rule's selectorList selectors (0-based).\n     */\n    matchingSelectors: integer[];\n  }\n\n  /**\n   * Data for a simple selector (these are delimited by commas in a selector list).\n   */\n  export interface Value {\n    /**\n     * Value text.\n     */\n    text: string;\n    /**\n     * Value range in the underlying resource (if available).\n     */\n    range?: SourceRange;\n    /**\n     * Specificity of the selector.\n     */\n    specificity?: Specificity;\n  }\n\n  /**\n   * Specificity:\n   * https://drafts.csswg.org/selectors/#specificity-rules\n   */\n  export interface Specificity {\n    /**\n     * The a component, which represents the number of ID selectors.\n     */\n    a: integer;\n    /**\n     * The b component, which represents the number of class selectors, attributes selectors, and\n     * pseudo-classes.\n     */\n    b: integer;\n    /**\n     * The c component, which represents the number of type selectors and pseudo-elements.\n     */\n    c: integer;\n  }\n\n  /**\n   * Selector list data.\n   */\n  export interface SelectorList {\n    /**\n     * Selectors in the list.\n     */\n    selectors: Value[];\n    /**\n     * Rule selector text.\n     */\n    text: string;\n  }\n\n  /**\n   * CSS stylesheet metainformation.\n   */\n  export interface CSSStyleSheetHeader {\n    /**\n     * The stylesheet identifier.\n     */\n    styleSheetId: StyleSheetId;\n    /**\n     * Owner frame identifier.\n     */\n    frameId: Page.FrameId;\n    /**\n     * Stylesheet resource URL. Empty if this is a constructed stylesheet created using\n     * new CSSStyleSheet() (but non-empty if this is a constructed stylesheet imported\n     * as a CSS module script).\n     */\n    sourceURL: string;\n    /**\n     * URL of source map associated with the stylesheet (if any).\n     */\n    sourceMapURL?: string;\n    /**\n     * Stylesheet origin.\n     */\n    origin: StyleSheetOrigin;\n    /**\n     * Stylesheet title.\n     */\n    title: string;\n    /**\n     * The backend id for the owner node of the stylesheet.\n     */\n    ownerNode?: DOM.BackendNodeId;\n    /**\n     * Denotes whether the stylesheet is disabled.\n     */\n    disabled: boolean;\n    /**\n     * Whether the sourceURL field value comes from the sourceURL comment.\n     */\n    hasSourceURL?: boolean;\n    /**\n     * Whether this stylesheet is created for STYLE tag by parser. This flag is not set for\n     * document.written STYLE tags.\n     */\n    isInline: boolean;\n    /**\n     * Whether this stylesheet is mutable. Inline stylesheets become mutable\n     * after they have been modified via CSSOM API.\n     * `<link>` element's stylesheets become mutable only if DevTools modifies them.\n     * Constructed stylesheets (new CSSStyleSheet()) are mutable immediately after creation.\n     */\n    isMutable: boolean;\n    /**\n     * True if this stylesheet is created through new CSSStyleSheet() or imported as a\n     * CSS module script.\n     */\n    isConstructed: boolean;\n    /**\n     * Line offset of the stylesheet within the resource (zero based).\n     */\n    startLine: number;\n    /**\n     * Column offset of the stylesheet within the resource (zero based).\n     */\n    startColumn: number;\n    /**\n     * Size of the content (in characters).\n     */\n    length: number;\n    /**\n     * Line offset of the end of the stylesheet within the resource (zero based).\n     */\n    endLine: number;\n    /**\n     * Column offset of the end of the stylesheet within the resource (zero based).\n     */\n    endColumn: number;\n    /**\n     * If the style sheet was loaded from a network resource, this indicates when the resource failed to load\n     */\n    loadingFailed?: boolean;\n  }\n\n  /**\n   * CSS rule representation.\n   */\n  export interface CSSRule {\n    /**\n     * The css style sheet identifier (absent for user agent stylesheet and user-specified\n     * stylesheet rules) this rule came from.\n     */\n    styleSheetId?: StyleSheetId;\n    /**\n     * Rule selector data.\n     */\n    selectorList: SelectorList;\n    /**\n     * Array of selectors from ancestor style rules, sorted by distance from the current rule.\n     */\n    nestingSelectors?: string[];\n    /**\n     * Parent stylesheet's origin.\n     */\n    origin: StyleSheetOrigin;\n    /**\n     * Associated style declaration.\n     */\n    style: CSSStyle;\n    /**\n     * The BackendNodeId of the DOM node that constitutes the origin tree scope of this rule.\n     */\n    originTreeScopeNodeId?: DOM.BackendNodeId;\n    /**\n     * Media list array (for rules involving media queries). The array enumerates media queries\n     * starting with the innermost one, going outwards.\n     */\n    media?: CSSMedia[];\n    /**\n     * Container query list array (for rules involving container queries).\n     * The array enumerates container queries starting with the innermost one, going outwards.\n     */\n    containerQueries?: CSSContainerQuery[];\n    /**\n     * @supports CSS at-rule array.\n     * The array enumerates @supports at-rules starting with the innermost one, going outwards.\n     */\n    supports?: CSSSupports[];\n    /**\n     * Cascade layer array. Contains the layer hierarchy that this rule belongs to starting\n     * with the innermost layer and going outwards.\n     */\n    layers?: CSSLayer[];\n    /**\n     * @scope CSS at-rule array.\n     * The array enumerates @scope at-rules starting with the innermost one, going outwards.\n     */\n    scopes?: CSSScope[];\n    /**\n     * The array keeps the types of ancestor CSSRules from the innermost going outwards.\n     */\n    ruleTypes?: CSSRuleType[];\n    /**\n     * @starting-style CSS at-rule array.\n     * The array enumerates @starting-style at-rules starting with the innermost one, going outwards.\n     */\n    startingStyles?: CSSStartingStyle[];\n  }\n\n  /**\n   * Enum indicating the type of a CSS rule, used to represent the order of a style rule's ancestors.\n   * This list only contains rule types that are collected during the ancestor rule collection.\n   */\n  export const enum CSSRuleType {\n    MediaRule = 'MediaRule',\n    SupportsRule = 'SupportsRule',\n    ContainerRule = 'ContainerRule',\n    LayerRule = 'LayerRule',\n    ScopeRule = 'ScopeRule',\n    StyleRule = 'StyleRule',\n    StartingStyleRule = 'StartingStyleRule',\n  }\n\n  /**\n   * CSS coverage information.\n   */\n  export interface RuleUsage {\n    /**\n     * The css style sheet identifier (absent for user agent stylesheet and user-specified\n     * stylesheet rules) this rule came from.\n     */\n    styleSheetId: StyleSheetId;\n    /**\n     * Offset of the start of the rule (including selector) from the beginning of the stylesheet.\n     */\n    startOffset: number;\n    /**\n     * Offset of the end of the rule body from the beginning of the stylesheet.\n     */\n    endOffset: number;\n    /**\n     * Indicates whether the rule was actually used by some element in the page.\n     */\n    used: boolean;\n  }\n\n  /**\n   * Text range within a resource. All numbers are zero-based.\n   */\n  export interface SourceRange {\n    /**\n     * Start line of range.\n     */\n    startLine: integer;\n    /**\n     * Start column of range (inclusive).\n     */\n    startColumn: integer;\n    /**\n     * End line of range\n     */\n    endLine: integer;\n    /**\n     * End column of range (exclusive).\n     */\n    endColumn: integer;\n  }\n\n  export interface ShorthandEntry {\n    /**\n     * Shorthand name.\n     */\n    name: string;\n    /**\n     * Shorthand value.\n     */\n    value: string;\n    /**\n     * Whether the property has \"!important\" annotation (implies `false` if absent).\n     */\n    important?: boolean;\n  }\n\n  export interface CSSComputedStyleProperty {\n    /**\n     * Computed style property name.\n     */\n    name: string;\n    /**\n     * Computed style property value.\n     */\n    value: string;\n  }\n\n  export interface ComputedStyleExtraFields {\n    /**\n     * Returns whether or not this node is being rendered with base appearance,\n     * which happens when it has its appearance property set to base/base-select\n     * or it is in the subtree of an element being rendered with base appearance.\n     */\n    isAppearanceBase: boolean;\n  }\n\n  /**\n   * CSS style representation.\n   */\n  export interface CSSStyle {\n    /**\n     * The css style sheet identifier (absent for user agent stylesheet and user-specified\n     * stylesheet rules) this rule came from.\n     */\n    styleSheetId?: StyleSheetId;\n    /**\n     * CSS properties in the style.\n     */\n    cssProperties: CSSProperty[];\n    /**\n     * Computed values for all shorthands found in the style.\n     */\n    shorthandEntries: ShorthandEntry[];\n    /**\n     * Style declaration text (if available).\n     */\n    cssText?: string;\n    /**\n     * Style declaration range in the enclosing stylesheet (if available).\n     */\n    range?: SourceRange;\n  }\n\n  /**\n   * CSS property declaration data.\n   */\n  export interface CSSProperty {\n    /**\n     * The property name.\n     */\n    name: string;\n    /**\n     * The property value.\n     */\n    value: string;\n    /**\n     * Whether the property has \"!important\" annotation (implies `false` if absent).\n     */\n    important?: boolean;\n    /**\n     * Whether the property is implicit (implies `false` if absent).\n     */\n    implicit?: boolean;\n    /**\n     * The full property text as specified in the style.\n     */\n    text?: string;\n    /**\n     * Whether the property is understood by the browser (implies `true` if absent).\n     */\n    parsedOk?: boolean;\n    /**\n     * Whether the property is disabled by the user (present for source-based properties only).\n     */\n    disabled?: boolean;\n    /**\n     * The entire property range in the enclosing style declaration (if available).\n     */\n    range?: SourceRange;\n    /**\n     * Parsed longhand components of this property if it is a shorthand.\n     * This field will be empty if the given property is not a shorthand.\n     */\n    longhandProperties?: CSSProperty[];\n  }\n\n  export const enum CSSMediaSource {\n    MediaRule = 'mediaRule',\n    ImportRule = 'importRule',\n    LinkedSheet = 'linkedSheet',\n    InlineSheet = 'inlineSheet',\n  }\n\n  /**\n   * CSS media rule descriptor.\n   */\n  export interface CSSMedia {\n    /**\n     * Media query text.\n     */\n    text: string;\n    /**\n     * Source of the media query: \"mediaRule\" if specified by a @media rule, \"importRule\" if\n     * specified by an @import rule, \"linkedSheet\" if specified by a \"media\" attribute in a linked\n     * stylesheet's LINK tag, \"inlineSheet\" if specified by a \"media\" attribute in an inline\n     * stylesheet's STYLE tag.\n     */\n    source: CSSMediaSource;\n    /**\n     * URL of the document containing the media query description.\n     */\n    sourceURL?: string;\n    /**\n     * The associated rule (@media or @import) header range in the enclosing stylesheet (if\n     * available).\n     */\n    range?: SourceRange;\n    /**\n     * Identifier of the stylesheet containing this object (if exists).\n     */\n    styleSheetId?: StyleSheetId;\n    /**\n     * Array of media queries.\n     */\n    mediaList?: MediaQuery[];\n  }\n\n  /**\n   * Media query descriptor.\n   */\n  export interface MediaQuery {\n    /**\n     * Array of media query expressions.\n     */\n    expressions: MediaQueryExpression[];\n    /**\n     * Whether the media query condition is satisfied.\n     */\n    active: boolean;\n  }\n\n  /**\n   * Media query expression descriptor.\n   */\n  export interface MediaQueryExpression {\n    /**\n     * Media query expression value.\n     */\n    value: number;\n    /**\n     * Media query expression units.\n     */\n    unit: string;\n    /**\n     * Media query expression feature.\n     */\n    feature: string;\n    /**\n     * The associated range of the value text in the enclosing stylesheet (if available).\n     */\n    valueRange?: SourceRange;\n    /**\n     * Computed length of media query expression (if applicable).\n     */\n    computedLength?: number;\n  }\n\n  /**\n   * CSS container query rule descriptor.\n   */\n  export interface CSSContainerQuery {\n    /**\n     * Container query text.\n     */\n    text: string;\n    /**\n     * The associated rule header range in the enclosing stylesheet (if\n     * available).\n     */\n    range?: SourceRange;\n    /**\n     * Identifier of the stylesheet containing this object (if exists).\n     */\n    styleSheetId?: StyleSheetId;\n    /**\n     * Optional name for the container.\n     */\n    name?: string;\n    /**\n     * Optional physical axes queried for the container.\n     */\n    physicalAxes?: DOM.PhysicalAxes;\n    /**\n     * Optional logical axes queried for the container.\n     */\n    logicalAxes?: DOM.LogicalAxes;\n    /**\n     * true if the query contains scroll-state() queries.\n     */\n    queriesScrollState?: boolean;\n    /**\n     * true if the query contains anchored() queries.\n     */\n    queriesAnchored?: boolean;\n  }\n\n  /**\n   * CSS Supports at-rule descriptor.\n   */\n  export interface CSSSupports {\n    /**\n     * Supports rule text.\n     */\n    text: string;\n    /**\n     * Whether the supports condition is satisfied.\n     */\n    active: boolean;\n    /**\n     * The associated rule header range in the enclosing stylesheet (if\n     * available).\n     */\n    range?: SourceRange;\n    /**\n     * Identifier of the stylesheet containing this object (if exists).\n     */\n    styleSheetId?: StyleSheetId;\n  }\n\n  /**\n   * CSS Scope at-rule descriptor.\n   */\n  export interface CSSScope {\n    /**\n     * Scope rule text.\n     */\n    text: string;\n    /**\n     * The associated rule header range in the enclosing stylesheet (if\n     * available).\n     */\n    range?: SourceRange;\n    /**\n     * Identifier of the stylesheet containing this object (if exists).\n     */\n    styleSheetId?: StyleSheetId;\n  }\n\n  /**\n   * CSS Layer at-rule descriptor.\n   */\n  export interface CSSLayer {\n    /**\n     * Layer name.\n     */\n    text: string;\n    /**\n     * The associated rule header range in the enclosing stylesheet (if\n     * available).\n     */\n    range?: SourceRange;\n    /**\n     * Identifier of the stylesheet containing this object (if exists).\n     */\n    styleSheetId?: StyleSheetId;\n  }\n\n  /**\n   * CSS Starting Style at-rule descriptor.\n   */\n  export interface CSSStartingStyle {\n    /**\n     * The associated rule header range in the enclosing stylesheet (if\n     * available).\n     */\n    range?: SourceRange;\n    /**\n     * Identifier of the stylesheet containing this object (if exists).\n     */\n    styleSheetId?: StyleSheetId;\n  }\n\n  /**\n   * CSS Layer data.\n   */\n  export interface CSSLayerData {\n    /**\n     * Layer name.\n     */\n    name: string;\n    /**\n     * Direct sub-layers\n     */\n    subLayers?: CSSLayerData[];\n    /**\n     * Layer order. The order determines the order of the layer in the cascade order.\n     * A higher number has higher priority in the cascade order.\n     */\n    order: number;\n  }\n\n  /**\n   * Information about amount of glyphs that were rendered with given font.\n   */\n  export interface PlatformFontUsage {\n    /**\n     * Font's family name reported by platform.\n     */\n    familyName: string;\n    /**\n     * Font's PostScript name reported by platform.\n     */\n    postScriptName: string;\n    /**\n     * Indicates if the font was downloaded or resolved locally.\n     */\n    isCustomFont: boolean;\n    /**\n     * Amount of glyphs that were rendered with this font.\n     */\n    glyphCount: number;\n  }\n\n  /**\n   * Information about font variation axes for variable fonts\n   */\n  export interface FontVariationAxis {\n    /**\n     * The font-variation-setting tag (a.k.a. \"axis tag\").\n     */\n    tag: string;\n    /**\n     * Human-readable variation name in the default language (normally, \"en\").\n     */\n    name: string;\n    /**\n     * The minimum value (inclusive) the font supports for this tag.\n     */\n    minValue: number;\n    /**\n     * The maximum value (inclusive) the font supports for this tag.\n     */\n    maxValue: number;\n    /**\n     * The default value.\n     */\n    defaultValue: number;\n  }\n\n  /**\n   * Properties of a web font: https://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions\n   * and additional information such as platformFontFamily and fontVariationAxes.\n   */\n  export interface FontFace {\n    /**\n     * The font-family.\n     */\n    fontFamily: string;\n    /**\n     * The font-style.\n     */\n    fontStyle: string;\n    /**\n     * The font-variant.\n     */\n    fontVariant: string;\n    /**\n     * The font-weight.\n     */\n    fontWeight: string;\n    /**\n     * The font-stretch.\n     */\n    fontStretch: string;\n    /**\n     * The font-display.\n     */\n    fontDisplay: string;\n    /**\n     * The unicode-range.\n     */\n    unicodeRange: string;\n    /**\n     * The src.\n     */\n    src: string;\n    /**\n     * The resolved platform font family\n     */\n    platformFontFamily: string;\n    /**\n     * Available variation settings (a.k.a. \"axes\").\n     */\n    fontVariationAxes?: FontVariationAxis[];\n  }\n\n  /**\n   * CSS try rule representation.\n   */\n  export interface CSSTryRule {\n    /**\n     * The css style sheet identifier (absent for user agent stylesheet and user-specified\n     * stylesheet rules) this rule came from.\n     */\n    styleSheetId?: StyleSheetId;\n    /**\n     * Parent stylesheet's origin.\n     */\n    origin: StyleSheetOrigin;\n    /**\n     * Associated style declaration.\n     */\n    style: CSSStyle;\n  }\n\n  /**\n   * CSS @position-try rule representation.\n   */\n  export interface CSSPositionTryRule {\n    /**\n     * The prelude dashed-ident name\n     */\n    name: Value;\n    /**\n     * The css style sheet identifier (absent for user agent stylesheet and user-specified\n     * stylesheet rules) this rule came from.\n     */\n    styleSheetId?: StyleSheetId;\n    /**\n     * Parent stylesheet's origin.\n     */\n    origin: StyleSheetOrigin;\n    /**\n     * Associated style declaration.\n     */\n    style: CSSStyle;\n    active: boolean;\n  }\n\n  /**\n   * CSS keyframes rule representation.\n   */\n  export interface CSSKeyframesRule {\n    /**\n     * Animation name.\n     */\n    animationName: Value;\n    /**\n     * List of keyframes.\n     */\n    keyframes: CSSKeyframeRule[];\n  }\n\n  /**\n   * Representation of a custom property registration through CSS.registerProperty\n   */\n  export interface CSSPropertyRegistration {\n    propertyName: string;\n    initialValue?: Value;\n    inherits: boolean;\n    syntax: string;\n  }\n\n  /**\n   * CSS font-palette-values rule representation.\n   */\n  export interface CSSFontPaletteValuesRule {\n    /**\n     * The css style sheet identifier (absent for user agent stylesheet and user-specified\n     * stylesheet rules) this rule came from.\n     */\n    styleSheetId?: StyleSheetId;\n    /**\n     * Parent stylesheet's origin.\n     */\n    origin: StyleSheetOrigin;\n    /**\n     * Associated font palette name.\n     */\n    fontPaletteName: Value;\n    /**\n     * Associated style declaration.\n     */\n    style: CSSStyle;\n  }\n\n  /**\n   * CSS property at-rule representation.\n   */\n  export interface CSSPropertyRule {\n    /**\n     * The css style sheet identifier (absent for user agent stylesheet and user-specified\n     * stylesheet rules) this rule came from.\n     */\n    styleSheetId?: StyleSheetId;\n    /**\n     * Parent stylesheet's origin.\n     */\n    origin: StyleSheetOrigin;\n    /**\n     * Associated property name.\n     */\n    propertyName: Value;\n    /**\n     * Associated style declaration.\n     */\n    style: CSSStyle;\n  }\n\n  /**\n   * CSS function argument representation.\n   */\n  export interface CSSFunctionParameter {\n    /**\n     * The parameter name.\n     */\n    name: string;\n    /**\n     * The parameter type.\n     */\n    type: string;\n  }\n\n  /**\n   * CSS function conditional block representation.\n   */\n  export interface CSSFunctionConditionNode {\n    /**\n     * Media query for this conditional block. Only one type of condition should be set.\n     */\n    media?: CSSMedia;\n    /**\n     * Container query for this conditional block. Only one type of condition should be set.\n     */\n    containerQueries?: CSSContainerQuery;\n    /**\n     * @supports CSS at-rule condition. Only one type of condition should be set.\n     */\n    supports?: CSSSupports;\n    /**\n     * Block body.\n     */\n    children: CSSFunctionNode[];\n    /**\n     * The condition text.\n     */\n    conditionText: string;\n  }\n\n  /**\n   * Section of the body of a CSS function rule.\n   */\n  export interface CSSFunctionNode {\n    /**\n     * A conditional block. If set, style should not be set.\n     */\n    condition?: CSSFunctionConditionNode;\n    /**\n     * Values set by this node. If set, condition should not be set.\n     */\n    style?: CSSStyle;\n  }\n\n  /**\n   * CSS function at-rule representation.\n   */\n  export interface CSSFunctionRule {\n    /**\n     * Name of the function.\n     */\n    name: Value;\n    /**\n     * The css style sheet identifier (absent for user agent stylesheet and user-specified\n     * stylesheet rules) this rule came from.\n     */\n    styleSheetId?: StyleSheetId;\n    /**\n     * Parent stylesheet's origin.\n     */\n    origin: StyleSheetOrigin;\n    /**\n     * List of parameters.\n     */\n    parameters: CSSFunctionParameter[];\n    /**\n     * Function body.\n     */\n    children: CSSFunctionNode[];\n  }\n\n  /**\n   * CSS keyframe rule representation.\n   */\n  export interface CSSKeyframeRule {\n    /**\n     * The css style sheet identifier (absent for user agent stylesheet and user-specified\n     * stylesheet rules) this rule came from.\n     */\n    styleSheetId?: StyleSheetId;\n    /**\n     * Parent stylesheet's origin.\n     */\n    origin: StyleSheetOrigin;\n    /**\n     * Associated key text.\n     */\n    keyText: Value;\n    /**\n     * Associated style declaration.\n     */\n    style: CSSStyle;\n  }\n\n  /**\n   * A descriptor of operation to mutate style declaration text.\n   */\n  export interface StyleDeclarationEdit {\n    /**\n     * The css style sheet identifier.\n     */\n    styleSheetId: StyleSheetId;\n    /**\n     * The range of the style text in the enclosing stylesheet.\n     */\n    range: SourceRange;\n    /**\n     * New style text.\n     */\n    text: string;\n  }\n\n  export interface AddRuleRequest {\n    /**\n     * The css style sheet identifier where a new rule should be inserted.\n     */\n    styleSheetId: StyleSheetId;\n    /**\n     * The text of a new rule.\n     */\n    ruleText: string;\n    /**\n     * Text position of a new rule in the target style sheet.\n     */\n    location: SourceRange;\n    /**\n     * NodeId for the DOM node in whose context custom property declarations for registered properties should be\n     * validated. If omitted, declarations in the new rule text can only be validated statically, which may produce\n     * incorrect results if the declaration contains a var() for example.\n     */\n    nodeForPropertySyntaxValidation?: DOM.NodeId;\n  }\n\n  export interface AddRuleResponse extends ProtocolResponseWithError {\n    /**\n     * The newly created rule.\n     */\n    rule: CSSRule;\n  }\n\n  export interface CollectClassNamesRequest {\n    styleSheetId: StyleSheetId;\n  }\n\n  export interface CollectClassNamesResponse extends ProtocolResponseWithError {\n    /**\n     * Class name list.\n     */\n    classNames: string[];\n  }\n\n  export interface CreateStyleSheetRequest {\n    /**\n     * Identifier of the frame where \"via-inspector\" stylesheet should be created.\n     */\n    frameId: Page.FrameId;\n    /**\n     * If true, creates a new stylesheet for every call. If false,\n     * returns a stylesheet previously created by a call with force=false\n     * for the frame's document if it exists or creates a new stylesheet\n     * (default: false).\n     */\n    force?: boolean;\n  }\n\n  export interface CreateStyleSheetResponse extends ProtocolResponseWithError {\n    /**\n     * Identifier of the created \"via-inspector\" stylesheet.\n     */\n    styleSheetId: StyleSheetId;\n  }\n\n  export interface ForcePseudoStateRequest {\n    /**\n     * The element id for which to force the pseudo state.\n     */\n    nodeId: DOM.NodeId;\n    /**\n     * Element pseudo classes to force when computing the element's style.\n     */\n    forcedPseudoClasses: string[];\n  }\n\n  export interface ForceStartingStyleRequest {\n    /**\n     * The element id for which to force the starting-style state.\n     */\n    nodeId: DOM.NodeId;\n    /**\n     * Boolean indicating if this is on or off.\n     */\n    forced: boolean;\n  }\n\n  export interface GetBackgroundColorsRequest {\n    /**\n     * Id of the node to get background colors for.\n     */\n    nodeId: DOM.NodeId;\n  }\n\n  export interface GetBackgroundColorsResponse extends ProtocolResponseWithError {\n    /**\n     * The range of background colors behind this element, if it contains any visible text. If no\n     * visible text is present, this will be undefined. In the case of a flat background color,\n     * this will consist of simply that color. In the case of a gradient, this will consist of each\n     * of the color stops. For anything more complicated, this will be an empty array. Images will\n     * be ignored (as if the image had failed to load).\n     */\n    backgroundColors?: string[];\n    /**\n     * The computed font size for this node, as a CSS computed value string (e.g. '12px').\n     */\n    computedFontSize?: string;\n    /**\n     * The computed font weight for this node, as a CSS computed value string (e.g. 'normal' or\n     * '100').\n     */\n    computedFontWeight?: string;\n  }\n\n  export interface GetComputedStyleForNodeRequest {\n    nodeId: DOM.NodeId;\n  }\n\n  export interface GetComputedStyleForNodeResponse extends ProtocolResponseWithError {\n    /**\n     * Computed style for the specified DOM node.\n     */\n    computedStyle: CSSComputedStyleProperty[];\n    /**\n     * A list of non-standard \"extra fields\" which blink stores alongside each\n     * computed style.\n     */\n    extraFields: ComputedStyleExtraFields;\n  }\n\n  export interface ResolveValuesRequest {\n    /**\n     * Cascade-dependent keywords (revert/revert-layer) do not work.\n     */\n    values: string[];\n    /**\n     * Id of the node in whose context the expression is evaluated\n     */\n    nodeId: DOM.NodeId;\n    /**\n     * Only longhands and custom property names are accepted.\n     */\n    propertyName?: string;\n    /**\n     * Pseudo element type, only works for pseudo elements that generate\n     * elements in the tree, such as ::before and ::after.\n     */\n    pseudoType?: DOM.PseudoType;\n    /**\n     * Pseudo element custom ident.\n     */\n    pseudoIdentifier?: string;\n  }\n\n  export interface ResolveValuesResponse extends ProtocolResponseWithError {\n    results: string[];\n  }\n\n  export interface GetLonghandPropertiesRequest {\n    shorthandName: string;\n    value: string;\n  }\n\n  export interface GetLonghandPropertiesResponse extends ProtocolResponseWithError {\n    longhandProperties: CSSProperty[];\n  }\n\n  export interface GetInlineStylesForNodeRequest {\n    nodeId: DOM.NodeId;\n  }\n\n  export interface GetInlineStylesForNodeResponse extends ProtocolResponseWithError {\n    /**\n     * Inline style for the specified DOM node.\n     */\n    inlineStyle?: CSSStyle;\n    /**\n     * Attribute-defined element style (e.g. resulting from \"width=20 height=100%\").\n     */\n    attributesStyle?: CSSStyle;\n  }\n\n  export interface GetAnimatedStylesForNodeRequest {\n    nodeId: DOM.NodeId;\n  }\n\n  export interface GetAnimatedStylesForNodeResponse extends ProtocolResponseWithError {\n    /**\n     * Styles coming from animations.\n     */\n    animationStyles?: CSSAnimationStyle[];\n    /**\n     * Style coming from transitions.\n     */\n    transitionsStyle?: CSSStyle;\n    /**\n     * Inherited style entries for animationsStyle and transitionsStyle from\n     * the inheritance chain of the element.\n     */\n    inherited?: InheritedAnimatedStyleEntry[];\n  }\n\n  export interface GetMatchedStylesForNodeRequest {\n    nodeId: DOM.NodeId;\n  }\n\n  export interface GetMatchedStylesForNodeResponse extends ProtocolResponseWithError {\n    /**\n     * Inline style for the specified DOM node.\n     */\n    inlineStyle?: CSSStyle;\n    /**\n     * Attribute-defined element style (e.g. resulting from \"width=20 height=100%\").\n     */\n    attributesStyle?: CSSStyle;\n    /**\n     * CSS rules matching this node, from all applicable stylesheets.\n     */\n    matchedCSSRules?: RuleMatch[];\n    /**\n     * Pseudo style matches for this node.\n     */\n    pseudoElements?: PseudoElementMatches[];\n    /**\n     * A chain of inherited styles (from the immediate node parent up to the DOM tree root).\n     */\n    inherited?: InheritedStyleEntry[];\n    /**\n     * A chain of inherited pseudo element styles (from the immediate node parent up to the DOM tree root).\n     */\n    inheritedPseudoElements?: InheritedPseudoElementMatches[];\n    /**\n     * A list of CSS keyframed animations matching this node.\n     */\n    cssKeyframesRules?: CSSKeyframesRule[];\n    /**\n     * A list of CSS @position-try rules matching this node, based on the position-try-fallbacks property.\n     */\n    cssPositionTryRules?: CSSPositionTryRule[];\n    /**\n     * Index of the active fallback in the applied position-try-fallback property,\n     * will not be set if there is no active position-try fallback.\n     */\n    activePositionFallbackIndex?: integer;\n    /**\n     * A list of CSS at-property rules matching this node.\n     */\n    cssPropertyRules?: CSSPropertyRule[];\n    /**\n     * A list of CSS property registrations matching this node.\n     */\n    cssPropertyRegistrations?: CSSPropertyRegistration[];\n    /**\n     * A font-palette-values rule matching this node.\n     */\n    cssFontPaletteValuesRule?: CSSFontPaletteValuesRule;\n    /**\n     * Id of the first parent element that does not have display: contents.\n     */\n    parentLayoutNodeId?: DOM.NodeId;\n    /**\n     * A list of CSS at-function rules referenced by styles of this node.\n     */\n    cssFunctionRules?: CSSFunctionRule[];\n  }\n\n  export interface GetEnvironmentVariablesResponse extends ProtocolResponseWithError {\n    environmentVariables: any;\n  }\n\n  export interface GetMediaQueriesResponse extends ProtocolResponseWithError {\n    medias: CSSMedia[];\n  }\n\n  export interface GetPlatformFontsForNodeRequest {\n    nodeId: DOM.NodeId;\n  }\n\n  export interface GetPlatformFontsForNodeResponse extends ProtocolResponseWithError {\n    /**\n     * Usage statistics for every employed platform font.\n     */\n    fonts: PlatformFontUsage[];\n  }\n\n  export interface GetStyleSheetTextRequest {\n    styleSheetId: StyleSheetId;\n  }\n\n  export interface GetStyleSheetTextResponse extends ProtocolResponseWithError {\n    /**\n     * The stylesheet text.\n     */\n    text: string;\n  }\n\n  export interface GetLayersForNodeRequest {\n    nodeId: DOM.NodeId;\n  }\n\n  export interface GetLayersForNodeResponse extends ProtocolResponseWithError {\n    rootLayer: CSSLayerData;\n  }\n\n  export interface GetLocationForSelectorRequest {\n    styleSheetId: StyleSheetId;\n    selectorText: string;\n  }\n\n  export interface GetLocationForSelectorResponse extends ProtocolResponseWithError {\n    ranges: SourceRange[];\n  }\n\n  export interface TrackComputedStyleUpdatesForNodeRequest {\n    nodeId?: DOM.NodeId;\n  }\n\n  export interface TrackComputedStyleUpdatesRequest {\n    propertiesToTrack: CSSComputedStyleProperty[];\n  }\n\n  export interface TakeComputedStyleUpdatesResponse extends ProtocolResponseWithError {\n    /**\n     * The list of node Ids that have their tracked computed styles updated.\n     */\n    nodeIds: DOM.NodeId[];\n  }\n\n  export interface SetEffectivePropertyValueForNodeRequest {\n    /**\n     * The element id for which to set property.\n     */\n    nodeId: DOM.NodeId;\n    propertyName: string;\n    value: string;\n  }\n\n  export interface SetPropertyRulePropertyNameRequest {\n    styleSheetId: StyleSheetId;\n    range: SourceRange;\n    propertyName: string;\n  }\n\n  export interface SetPropertyRulePropertyNameResponse extends ProtocolResponseWithError {\n    /**\n     * The resulting key text after modification.\n     */\n    propertyName: Value;\n  }\n\n  export interface SetKeyframeKeyRequest {\n    styleSheetId: StyleSheetId;\n    range: SourceRange;\n    keyText: string;\n  }\n\n  export interface SetKeyframeKeyResponse extends ProtocolResponseWithError {\n    /**\n     * The resulting key text after modification.\n     */\n    keyText: Value;\n  }\n\n  export interface SetMediaTextRequest {\n    styleSheetId: StyleSheetId;\n    range: SourceRange;\n    text: string;\n  }\n\n  export interface SetMediaTextResponse extends ProtocolResponseWithError {\n    /**\n     * The resulting CSS media rule after modification.\n     */\n    media: CSSMedia;\n  }\n\n  export interface SetContainerQueryTextRequest {\n    styleSheetId: StyleSheetId;\n    range: SourceRange;\n    text: string;\n  }\n\n  export interface SetContainerQueryTextResponse extends ProtocolResponseWithError {\n    /**\n     * The resulting CSS container query rule after modification.\n     */\n    containerQuery: CSSContainerQuery;\n  }\n\n  export interface SetSupportsTextRequest {\n    styleSheetId: StyleSheetId;\n    range: SourceRange;\n    text: string;\n  }\n\n  export interface SetSupportsTextResponse extends ProtocolResponseWithError {\n    /**\n     * The resulting CSS Supports rule after modification.\n     */\n    supports: CSSSupports;\n  }\n\n  export interface SetScopeTextRequest {\n    styleSheetId: StyleSheetId;\n    range: SourceRange;\n    text: string;\n  }\n\n  export interface SetScopeTextResponse extends ProtocolResponseWithError {\n    /**\n     * The resulting CSS Scope rule after modification.\n     */\n    scope: CSSScope;\n  }\n\n  export interface SetRuleSelectorRequest {\n    styleSheetId: StyleSheetId;\n    range: SourceRange;\n    selector: string;\n  }\n\n  export interface SetRuleSelectorResponse extends ProtocolResponseWithError {\n    /**\n     * The resulting selector list after modification.\n     */\n    selectorList: SelectorList;\n  }\n\n  export interface SetStyleSheetTextRequest {\n    styleSheetId: StyleSheetId;\n    text: string;\n  }\n\n  export interface SetStyleSheetTextResponse extends ProtocolResponseWithError {\n    /**\n     * URL of source map associated with script (if any).\n     */\n    sourceMapURL?: string;\n  }\n\n  export interface SetStyleTextsRequest {\n    edits: StyleDeclarationEdit[];\n    /**\n     * NodeId for the DOM node in whose context custom property declarations for registered properties should be\n     * validated. If omitted, declarations in the new rule text can only be validated statically, which may produce\n     * incorrect results if the declaration contains a var() for example.\n     */\n    nodeForPropertySyntaxValidation?: DOM.NodeId;\n  }\n\n  export interface SetStyleTextsResponse extends ProtocolResponseWithError {\n    /**\n     * The resulting styles after modification.\n     */\n    styles: CSSStyle[];\n  }\n\n  export interface StopRuleUsageTrackingResponse extends ProtocolResponseWithError {\n    ruleUsage: RuleUsage[];\n  }\n\n  export interface TakeCoverageDeltaResponse extends ProtocolResponseWithError {\n    coverage: RuleUsage[];\n    /**\n     * Monotonically increasing time, in seconds.\n     */\n    timestamp: number;\n  }\n\n  export interface SetLocalFontsEnabledRequest {\n    /**\n     * Whether rendering of local fonts is enabled.\n     */\n    enabled: boolean;\n  }\n\n  /**\n   * Fires whenever a web font is updated.  A non-empty font parameter indicates a successfully loaded\n   * web font.\n   */\n  export interface FontsUpdatedEvent {\n    /**\n     * The web font that has loaded.\n     */\n    font?: FontFace;\n  }\n\n  /**\n   * Fired whenever an active document stylesheet is added.\n   */\n  export interface StyleSheetAddedEvent {\n    /**\n     * Added stylesheet metainfo.\n     */\n    header: CSSStyleSheetHeader;\n  }\n\n  /**\n   * Fired whenever a stylesheet is changed as a result of the client operation.\n   */\n  export interface StyleSheetChangedEvent {\n    styleSheetId: StyleSheetId;\n  }\n\n  /**\n   * Fired whenever an active document stylesheet is removed.\n   */\n  export interface StyleSheetRemovedEvent {\n    /**\n     * Identifier of the removed stylesheet.\n     */\n    styleSheetId: StyleSheetId;\n  }\n\n  export interface ComputedStyleUpdatedEvent {\n    /**\n     * The node id that has updated computed styles.\n     */\n    nodeId: DOM.NodeId;\n  }\n}\n\nexport namespace CacheStorage {\n\n  /**\n   * Unique identifier of the Cache object.\n   */\n  export type CacheId = OpaqueIdentifier<string, 'Protocol.CacheStorage.CacheId'>;\n\n  /**\n   * type of HTTP response cached\n   */\n  export const enum CachedResponseType {\n    Basic = 'basic',\n    Cors = 'cors',\n    Default = 'default',\n    Error = 'error',\n    OpaqueResponse = 'opaqueResponse',\n    OpaqueRedirect = 'opaqueRedirect',\n  }\n\n  /**\n   * Data entry.\n   */\n  export interface DataEntry {\n    /**\n     * Request URL.\n     */\n    requestURL: string;\n    /**\n     * Request method.\n     */\n    requestMethod: string;\n    /**\n     * Request headers\n     */\n    requestHeaders: Header[];\n    /**\n     * Number of seconds since epoch.\n     */\n    responseTime: number;\n    /**\n     * HTTP response status code.\n     */\n    responseStatus: integer;\n    /**\n     * HTTP response status text.\n     */\n    responseStatusText: string;\n    /**\n     * HTTP response type\n     */\n    responseType: CachedResponseType;\n    /**\n     * Response headers\n     */\n    responseHeaders: Header[];\n  }\n\n  /**\n   * Cache identifier.\n   */\n  export interface Cache {\n    /**\n     * An opaque unique id of the cache.\n     */\n    cacheId: CacheId;\n    /**\n     * Security origin of the cache.\n     */\n    securityOrigin: string;\n    /**\n     * Storage key of the cache.\n     */\n    storageKey: string;\n    /**\n     * Storage bucket of the cache.\n     */\n    storageBucket?: Storage.StorageBucket;\n    /**\n     * The name of the cache.\n     */\n    cacheName: string;\n  }\n\n  export interface Header {\n    name: string;\n    value: string;\n  }\n\n  /**\n   * Cached response\n   */\n  export interface CachedResponse {\n    /**\n     * Entry content, base64-encoded.\n     */\n    body: binary;\n  }\n\n  export interface DeleteCacheRequest {\n    /**\n     * Id of cache for deletion.\n     */\n    cacheId: CacheId;\n  }\n\n  export interface DeleteEntryRequest {\n    /**\n     * Id of cache where the entry will be deleted.\n     */\n    cacheId: CacheId;\n    /**\n     * URL spec of the request.\n     */\n    request: string;\n  }\n\n  export interface RequestCacheNamesRequest {\n    /**\n     * At least and at most one of securityOrigin, storageKey, storageBucket must be specified.\n     * Security origin.\n     */\n    securityOrigin?: string;\n    /**\n     * Storage key.\n     */\n    storageKey?: string;\n    /**\n     * Storage bucket. If not specified, it uses the default bucket.\n     */\n    storageBucket?: Storage.StorageBucket;\n  }\n\n  export interface RequestCacheNamesResponse extends ProtocolResponseWithError {\n    /**\n     * Caches for the security origin.\n     */\n    caches: Cache[];\n  }\n\n  export interface RequestCachedResponseRequest {\n    /**\n     * Id of cache that contains the entry.\n     */\n    cacheId: CacheId;\n    /**\n     * URL spec of the request.\n     */\n    requestURL: string;\n    /**\n     * headers of the request.\n     */\n    requestHeaders: Header[];\n  }\n\n  export interface RequestCachedResponseResponse extends ProtocolResponseWithError {\n    /**\n     * Response read from the cache.\n     */\n    response: CachedResponse;\n  }\n\n  export interface RequestEntriesRequest {\n    /**\n     * ID of cache to get entries from.\n     */\n    cacheId: CacheId;\n    /**\n     * Number of records to skip.\n     */\n    skipCount?: integer;\n    /**\n     * Number of records to fetch.\n     */\n    pageSize?: integer;\n    /**\n     * If present, only return the entries containing this substring in the path\n     */\n    pathFilter?: string;\n  }\n\n  export interface RequestEntriesResponse extends ProtocolResponseWithError {\n    /**\n     * Array of object store data entries.\n     */\n    cacheDataEntries: DataEntry[];\n    /**\n     * Count of returned entries from this storage. If pathFilter is empty, it\n     * is the count of all entries from this storage.\n     */\n    returnCount: number;\n  }\n}\n\n/**\n * A domain for interacting with Cast, Presentation API, and Remote Playback API\n * functionalities.\n */\nexport namespace Cast {\n\n  export interface Sink {\n    name: string;\n    id: string;\n    /**\n     * Text describing the current session. Present only if there is an active\n     * session on the sink.\n     */\n    session?: string;\n  }\n\n  export interface EnableRequest {\n    presentationUrl?: string;\n  }\n\n  export interface SetSinkToUseRequest {\n    sinkName: string;\n  }\n\n  export interface StartDesktopMirroringRequest {\n    sinkName: string;\n  }\n\n  export interface StartTabMirroringRequest {\n    sinkName: string;\n  }\n\n  export interface StopCastingRequest {\n    sinkName: string;\n  }\n\n  /**\n   * This is fired whenever the list of available sinks changes. A sink is a\n   * device or a software surface that you can cast to.\n   */\n  export interface SinksUpdatedEvent {\n    sinks: Sink[];\n  }\n\n  /**\n   * This is fired whenever the outstanding issue/error message changes.\n   * |issueMessage| is empty if there is no issue.\n   */\n  export interface IssueUpdatedEvent {\n    issueMessage: string;\n  }\n}\n\n/**\n * This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object\n * that has an `id`. This `id` can be used to get additional information on the Node, resolve it into\n * the JavaScript object wrapper, etc. It is important that client receives DOM events only for the\n * nodes that are known to the client. Backend keeps track of the nodes that were sent to the client\n * and never sends the same node twice. It is client's responsibility to collect information about\n * the nodes that were sent to the client. Note that `iframe` owner elements will return\n * corresponding document elements as their child nodes.\n */\nexport namespace DOM {\n\n  /**\n   * Unique DOM node identifier.\n   */\n  export type NodeId = OpaqueIdentifier<integer, 'Protocol.DOM.NodeId'>;\n\n  /**\n   * Unique DOM node identifier used to reference a node that may not have been pushed to the\n   * front-end.\n   */\n  export type BackendNodeId = OpaqueIdentifier<integer, 'Protocol.DOM.BackendNodeId'>;\n\n  /**\n   * Backend node with a friendly name.\n   */\n  export interface BackendNode {\n    /**\n     * `Node`'s nodeType.\n     */\n    nodeType: integer;\n    /**\n     * `Node`'s nodeName.\n     */\n    nodeName: string;\n    backendNodeId: BackendNodeId;\n  }\n\n  /**\n   * Pseudo element type.\n   */\n  export const enum PseudoType {\n    FirstLine = 'first-line',\n    FirstLetter = 'first-letter',\n    Checkmark = 'checkmark',\n    Before = 'before',\n    After = 'after',\n    PickerIcon = 'picker-icon',\n    InterestHint = 'interest-hint',\n    Marker = 'marker',\n    Backdrop = 'backdrop',\n    Column = 'column',\n    Selection = 'selection',\n    SearchText = 'search-text',\n    TargetText = 'target-text',\n    SpellingError = 'spelling-error',\n    GrammarError = 'grammar-error',\n    Highlight = 'highlight',\n    FirstLineInherited = 'first-line-inherited',\n    ScrollMarker = 'scroll-marker',\n    ScrollMarkerGroup = 'scroll-marker-group',\n    ScrollButton = 'scroll-button',\n    Scrollbar = 'scrollbar',\n    ScrollbarThumb = 'scrollbar-thumb',\n    ScrollbarButton = 'scrollbar-button',\n    ScrollbarTrack = 'scrollbar-track',\n    ScrollbarTrackPiece = 'scrollbar-track-piece',\n    ScrollbarCorner = 'scrollbar-corner',\n    Resizer = 'resizer',\n    InputListButton = 'input-list-button',\n    ViewTransition = 'view-transition',\n    ViewTransitionGroup = 'view-transition-group',\n    ViewTransitionImagePair = 'view-transition-image-pair',\n    ViewTransitionGroupChildren = 'view-transition-group-children',\n    ViewTransitionOld = 'view-transition-old',\n    ViewTransitionNew = 'view-transition-new',\n    Placeholder = 'placeholder',\n    FileSelectorButton = 'file-selector-button',\n    DetailsContent = 'details-content',\n    Picker = 'picker',\n    PermissionIcon = 'permission-icon',\n  }\n\n  /**\n   * Shadow root type.\n   */\n  export const enum ShadowRootType {\n    UserAgent = 'user-agent',\n    Open = 'open',\n    Closed = 'closed',\n  }\n\n  /**\n   * Document compatibility mode.\n   */\n  export const enum CompatibilityMode {\n    QuirksMode = 'QuirksMode',\n    LimitedQuirksMode = 'LimitedQuirksMode',\n    NoQuirksMode = 'NoQuirksMode',\n  }\n\n  /**\n   * ContainerSelector physical axes\n   */\n  export const enum PhysicalAxes {\n    Horizontal = 'Horizontal',\n    Vertical = 'Vertical',\n    Both = 'Both',\n  }\n\n  /**\n   * ContainerSelector logical axes\n   */\n  export const enum LogicalAxes {\n    Inline = 'Inline',\n    Block = 'Block',\n    Both = 'Both',\n  }\n\n  /**\n   * Physical scroll orientation\n   */\n  export const enum ScrollOrientation {\n    Horizontal = 'horizontal',\n    Vertical = 'vertical',\n  }\n\n  /**\n   * DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes.\n   * DOMNode is a base node mirror type.\n   */\n  export interface Node {\n    /**\n     * Node identifier that is passed into the rest of the DOM messages as the `nodeId`. Backend\n     * will only push node with given `id` once. It is aware of all requested nodes and will only\n     * fire DOM events for nodes known to the client.\n     */\n    nodeId: NodeId;\n    /**\n     * The id of the parent node if any.\n     */\n    parentId?: NodeId;\n    /**\n     * The BackendNodeId for this node.\n     */\n    backendNodeId: BackendNodeId;\n    /**\n     * `Node`'s nodeType.\n     */\n    nodeType: integer;\n    /**\n     * `Node`'s nodeName.\n     */\n    nodeName: string;\n    /**\n     * `Node`'s localName.\n     */\n    localName: string;\n    /**\n     * `Node`'s nodeValue.\n     */\n    nodeValue: string;\n    /**\n     * Child count for `Container` nodes.\n     */\n    childNodeCount?: integer;\n    /**\n     * Child nodes of this node when requested with children.\n     */\n    children?: Node[];\n    /**\n     * Attributes of the `Element` node in the form of flat array `[name1, value1, name2, value2]`.\n     */\n    attributes?: string[];\n    /**\n     * Document URL that `Document` or `FrameOwner` node points to.\n     */\n    documentURL?: string;\n    /**\n     * Base URL that `Document` or `FrameOwner` node uses for URL completion.\n     */\n    baseURL?: string;\n    /**\n     * `DocumentType`'s publicId.\n     */\n    publicId?: string;\n    /**\n     * `DocumentType`'s systemId.\n     */\n    systemId?: string;\n    /**\n     * `DocumentType`'s internalSubset.\n     */\n    internalSubset?: string;\n    /**\n     * `Document`'s XML version in case of XML documents.\n     */\n    xmlVersion?: string;\n    /**\n     * `Attr`'s name.\n     */\n    name?: string;\n    /**\n     * `Attr`'s value.\n     */\n    value?: string;\n    /**\n     * Pseudo element type for this node.\n     */\n    pseudoType?: PseudoType;\n    /**\n     * Pseudo element identifier for this node. Only present if there is a\n     * valid pseudoType.\n     */\n    pseudoIdentifier?: string;\n    /**\n     * Shadow root type.\n     */\n    shadowRootType?: ShadowRootType;\n    /**\n     * Frame ID for frame owner elements.\n     */\n    frameId?: Page.FrameId;\n    /**\n     * Content document for frame owner elements.\n     */\n    contentDocument?: Node;\n    /**\n     * Shadow root list for given element host.\n     */\n    shadowRoots?: Node[];\n    /**\n     * Content document fragment for template elements.\n     */\n    templateContent?: Node;\n    /**\n     * Pseudo elements associated with this node.\n     */\n    pseudoElements?: Node[];\n    /**\n     * Deprecated, as the HTML Imports API has been removed (crbug.com/937746).\n     * This property used to return the imported document for the HTMLImport links.\n     * The property is always undefined now.\n     * @deprecated\n     */\n    importedDocument?: Node;\n    /**\n     * Distributed nodes for given insertion point.\n     */\n    distributedNodes?: BackendNode[];\n    /**\n     * Whether the node is SVG.\n     */\n    isSVG?: boolean;\n    compatibilityMode?: CompatibilityMode;\n    assignedSlot?: BackendNode;\n    isScrollable?: boolean;\n    affectedByStartingStyles?: boolean;\n  }\n\n  /**\n   * A structure to hold the top-level node of a detached tree and an array of its retained descendants.\n   */\n  export interface DetachedElementInfo {\n    treeNode: Node;\n    retainedNodeIds: NodeId[];\n  }\n\n  /**\n   * A structure holding an RGBA color.\n   */\n  export interface RGBA {\n    /**\n     * The red component, in the [0-255] range.\n     */\n    r: integer;\n    /**\n     * The green component, in the [0-255] range.\n     */\n    g: integer;\n    /**\n     * The blue component, in the [0-255] range.\n     */\n    b: integer;\n    /**\n     * The alpha component, in the [0-1] range (default: 1).\n     */\n    a?: number;\n  }\n\n  /**\n   * An array of quad vertices, x immediately followed by y for each point, points clock-wise.\n   */\n  export type Quad = number[];\n\n  /**\n   * Box model.\n   */\n  export interface BoxModel {\n    /**\n     * Content box\n     */\n    content: Quad;\n    /**\n     * Padding box\n     */\n    padding: Quad;\n    /**\n     * Border box\n     */\n    border: Quad;\n    /**\n     * Margin box\n     */\n    margin: Quad;\n    /**\n     * Node width\n     */\n    width: integer;\n    /**\n     * Node height\n     */\n    height: integer;\n    /**\n     * Shape outside coordinates\n     */\n    shapeOutside?: ShapeOutsideInfo;\n  }\n\n  /**\n   * CSS Shape Outside details.\n   */\n  export interface ShapeOutsideInfo {\n    /**\n     * Shape bounds\n     */\n    bounds: Quad;\n    /**\n     * Shape coordinate details\n     */\n    shape: any[];\n    /**\n     * Margin shape bounds\n     */\n    marginShape: any[];\n  }\n\n  /**\n   * Rectangle.\n   */\n  export interface Rect {\n    /**\n     * X coordinate\n     */\n    x: number;\n    /**\n     * Y coordinate\n     */\n    y: number;\n    /**\n     * Rectangle width\n     */\n    width: number;\n    /**\n     * Rectangle height\n     */\n    height: number;\n  }\n\n  export interface CSSComputedStyleProperty {\n    /**\n     * Computed style property name.\n     */\n    name: string;\n    /**\n     * Computed style property value.\n     */\n    value: string;\n  }\n\n  export interface CollectClassNamesFromSubtreeRequest {\n    /**\n     * Id of the node to collect class names.\n     */\n    nodeId: NodeId;\n  }\n\n  export interface CollectClassNamesFromSubtreeResponse extends ProtocolResponseWithError {\n    /**\n     * Class name list.\n     */\n    classNames: string[];\n  }\n\n  export interface CopyToRequest {\n    /**\n     * Id of the node to copy.\n     */\n    nodeId: NodeId;\n    /**\n     * Id of the element to drop the copy into.\n     */\n    targetNodeId: NodeId;\n    /**\n     * Drop the copy before this node (if absent, the copy becomes the last child of\n     * `targetNodeId`).\n     */\n    insertBeforeNodeId?: NodeId;\n  }\n\n  export interface CopyToResponse extends ProtocolResponseWithError {\n    /**\n     * Id of the node clone.\n     */\n    nodeId: NodeId;\n  }\n\n  export interface DescribeNodeRequest {\n    /**\n     * Identifier of the node.\n     */\n    nodeId?: NodeId;\n    /**\n     * Identifier of the backend node.\n     */\n    backendNodeId?: BackendNodeId;\n    /**\n     * JavaScript object id of the node wrapper.\n     */\n    objectId?: Runtime.RemoteObjectId;\n    /**\n     * The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the\n     * entire subtree or provide an integer larger than 0.\n     */\n    depth?: integer;\n    /**\n     * Whether or not iframes and shadow roots should be traversed when returning the subtree\n     * (default is false).\n     */\n    pierce?: boolean;\n  }\n\n  export interface DescribeNodeResponse extends ProtocolResponseWithError {\n    /**\n     * Node description.\n     */\n    node: Node;\n  }\n\n  export interface ScrollIntoViewIfNeededRequest {\n    /**\n     * Identifier of the node.\n     */\n    nodeId?: NodeId;\n    /**\n     * Identifier of the backend node.\n     */\n    backendNodeId?: BackendNodeId;\n    /**\n     * JavaScript object id of the node wrapper.\n     */\n    objectId?: Runtime.RemoteObjectId;\n    /**\n     * The rect to be scrolled into view, relative to the node's border box, in CSS pixels.\n     * When omitted, center of the node will be used, similar to Element.scrollIntoView.\n     */\n    rect?: Rect;\n  }\n\n  export interface DiscardSearchResultsRequest {\n    /**\n     * Unique search session identifier.\n     */\n    searchId: string;\n  }\n\n  export const enum EnableRequestIncludeWhitespace {\n    None = 'none',\n    All = 'all',\n  }\n\n  export interface EnableRequest {\n    /**\n     * Whether to include whitespaces in the children array of returned Nodes.\n     */\n    includeWhitespace?: EnableRequestIncludeWhitespace;\n  }\n\n  export interface FocusRequest {\n    /**\n     * Identifier of the node.\n     */\n    nodeId?: NodeId;\n    /**\n     * Identifier of the backend node.\n     */\n    backendNodeId?: BackendNodeId;\n    /**\n     * JavaScript object id of the node wrapper.\n     */\n    objectId?: Runtime.RemoteObjectId;\n  }\n\n  export interface GetAttributesRequest {\n    /**\n     * Id of the node to retrieve attributes for.\n     */\n    nodeId: NodeId;\n  }\n\n  export interface GetAttributesResponse extends ProtocolResponseWithError {\n    /**\n     * An interleaved array of node attribute names and values.\n     */\n    attributes: string[];\n  }\n\n  export interface GetBoxModelRequest {\n    /**\n     * Identifier of the node.\n     */\n    nodeId?: NodeId;\n    /**\n     * Identifier of the backend node.\n     */\n    backendNodeId?: BackendNodeId;\n    /**\n     * JavaScript object id of the node wrapper.\n     */\n    objectId?: Runtime.RemoteObjectId;\n  }\n\n  export interface GetBoxModelResponse extends ProtocolResponseWithError {\n    /**\n     * Box model for the node.\n     */\n    model: BoxModel;\n  }\n\n  export interface GetContentQuadsRequest {\n    /**\n     * Identifier of the node.\n     */\n    nodeId?: NodeId;\n    /**\n     * Identifier of the backend node.\n     */\n    backendNodeId?: BackendNodeId;\n    /**\n     * JavaScript object id of the node wrapper.\n     */\n    objectId?: Runtime.RemoteObjectId;\n  }\n\n  export interface GetContentQuadsResponse extends ProtocolResponseWithError {\n    /**\n     * Quads that describe node layout relative to viewport.\n     */\n    quads: Quad[];\n  }\n\n  export interface GetDocumentRequest {\n    /**\n     * The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the\n     * entire subtree or provide an integer larger than 0.\n     */\n    depth?: integer;\n    /**\n     * Whether or not iframes and shadow roots should be traversed when returning the subtree\n     * (default is false).\n     */\n    pierce?: boolean;\n  }\n\n  export interface GetDocumentResponse extends ProtocolResponseWithError {\n    /**\n     * Resulting node.\n     */\n    root: Node;\n  }\n\n  export interface GetFlattenedDocumentRequest {\n    /**\n     * The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the\n     * entire subtree or provide an integer larger than 0.\n     */\n    depth?: integer;\n    /**\n     * Whether or not iframes and shadow roots should be traversed when returning the subtree\n     * (default is false).\n     */\n    pierce?: boolean;\n  }\n\n  export interface GetFlattenedDocumentResponse extends ProtocolResponseWithError {\n    /**\n     * Resulting node.\n     */\n    nodes: Node[];\n  }\n\n  export interface GetNodesForSubtreeByStyleRequest {\n    /**\n     * Node ID pointing to the root of a subtree.\n     */\n    nodeId: NodeId;\n    /**\n     * The style to filter nodes by (includes nodes if any of properties matches).\n     */\n    computedStyles: CSSComputedStyleProperty[];\n    /**\n     * Whether or not iframes and shadow roots in the same target should be traversed when returning the\n     * results (default is false).\n     */\n    pierce?: boolean;\n  }\n\n  export interface GetNodesForSubtreeByStyleResponse extends ProtocolResponseWithError {\n    /**\n     * Resulting nodes.\n     */\n    nodeIds: NodeId[];\n  }\n\n  export interface GetNodeForLocationRequest {\n    /**\n     * X coordinate.\n     */\n    x: integer;\n    /**\n     * Y coordinate.\n     */\n    y: integer;\n    /**\n     * False to skip to the nearest non-UA shadow root ancestor (default: false).\n     */\n    includeUserAgentShadowDOM?: boolean;\n    /**\n     * Whether to ignore pointer-events: none on elements and hit test them.\n     */\n    ignorePointerEventsNone?: boolean;\n  }\n\n  export interface GetNodeForLocationResponse extends ProtocolResponseWithError {\n    /**\n     * Resulting node.\n     */\n    backendNodeId: BackendNodeId;\n    /**\n     * Frame this node belongs to.\n     */\n    frameId: Page.FrameId;\n    /**\n     * Id of the node at given coordinates, only when enabled and requested document.\n     */\n    nodeId?: NodeId;\n  }\n\n  export interface GetOuterHTMLRequest {\n    /**\n     * Identifier of the node.\n     */\n    nodeId?: NodeId;\n    /**\n     * Identifier of the backend node.\n     */\n    backendNodeId?: BackendNodeId;\n    /**\n     * JavaScript object id of the node wrapper.\n     */\n    objectId?: Runtime.RemoteObjectId;\n    /**\n     * Include all shadow roots. Equals to false if not specified.\n     */\n    includeShadowDOM?: boolean;\n  }\n\n  export interface GetOuterHTMLResponse extends ProtocolResponseWithError {\n    /**\n     * Outer HTML markup.\n     */\n    outerHTML: string;\n  }\n\n  export interface GetRelayoutBoundaryRequest {\n    /**\n     * Id of the node.\n     */\n    nodeId: NodeId;\n  }\n\n  export interface GetRelayoutBoundaryResponse extends ProtocolResponseWithError {\n    /**\n     * Relayout boundary node id for the given node.\n     */\n    nodeId: NodeId;\n  }\n\n  export interface GetSearchResultsRequest {\n    /**\n     * Unique search session identifier.\n     */\n    searchId: string;\n    /**\n     * Start index of the search result to be returned.\n     */\n    fromIndex: integer;\n    /**\n     * End index of the search result to be returned.\n     */\n    toIndex: integer;\n  }\n\n  export interface GetSearchResultsResponse extends ProtocolResponseWithError {\n    /**\n     * Ids of the search result nodes.\n     */\n    nodeIds: NodeId[];\n  }\n\n  export interface MoveToRequest {\n    /**\n     * Id of the node to move.\n     */\n    nodeId: NodeId;\n    /**\n     * Id of the element to drop the moved node into.\n     */\n    targetNodeId: NodeId;\n    /**\n     * Drop node before this one (if absent, the moved node becomes the last child of\n     * `targetNodeId`).\n     */\n    insertBeforeNodeId?: NodeId;\n  }\n\n  export interface MoveToResponse extends ProtocolResponseWithError {\n    /**\n     * New id of the moved node.\n     */\n    nodeId: NodeId;\n  }\n\n  export interface PerformSearchRequest {\n    /**\n     * Plain text or query selector or XPath search query.\n     */\n    query: string;\n    /**\n     * True to search in user agent shadow DOM.\n     */\n    includeUserAgentShadowDOM?: boolean;\n  }\n\n  export interface PerformSearchResponse extends ProtocolResponseWithError {\n    /**\n     * Unique search session identifier.\n     */\n    searchId: string;\n    /**\n     * Number of search results.\n     */\n    resultCount: integer;\n  }\n\n  export interface PushNodeByPathToFrontendRequest {\n    /**\n     * Path to node in the proprietary format.\n     */\n    path: string;\n  }\n\n  export interface PushNodeByPathToFrontendResponse extends ProtocolResponseWithError {\n    /**\n     * Id of the node for given path.\n     */\n    nodeId: NodeId;\n  }\n\n  export interface PushNodesByBackendIdsToFrontendRequest {\n    /**\n     * The array of backend node ids.\n     */\n    backendNodeIds: BackendNodeId[];\n  }\n\n  export interface PushNodesByBackendIdsToFrontendResponse extends ProtocolResponseWithError {\n    /**\n     * The array of ids of pushed nodes that correspond to the backend ids specified in\n     * backendNodeIds.\n     */\n    nodeIds: NodeId[];\n  }\n\n  export interface QuerySelectorRequest {\n    /**\n     * Id of the node to query upon.\n     */\n    nodeId: NodeId;\n    /**\n     * Selector string.\n     */\n    selector: string;\n  }\n\n  export interface QuerySelectorResponse extends ProtocolResponseWithError {\n    /**\n     * Query selector result.\n     */\n    nodeId: NodeId;\n  }\n\n  export interface QuerySelectorAllRequest {\n    /**\n     * Id of the node to query upon.\n     */\n    nodeId: NodeId;\n    /**\n     * Selector string.\n     */\n    selector: string;\n  }\n\n  export interface QuerySelectorAllResponse extends ProtocolResponseWithError {\n    /**\n     * Query selector result.\n     */\n    nodeIds: NodeId[];\n  }\n\n  export interface GetTopLayerElementsResponse extends ProtocolResponseWithError {\n    /**\n     * NodeIds of top layer elements\n     */\n    nodeIds: NodeId[];\n  }\n\n  export const enum GetElementByRelationRequestRelation {\n    PopoverTarget = 'PopoverTarget',\n    InterestTarget = 'InterestTarget',\n    CommandFor = 'CommandFor',\n  }\n\n  export interface GetElementByRelationRequest {\n    /**\n     * Id of the node from which to query the relation.\n     */\n    nodeId: NodeId;\n    /**\n     * Type of relation to get.\n     */\n    relation: GetElementByRelationRequestRelation;\n  }\n\n  export interface GetElementByRelationResponse extends ProtocolResponseWithError {\n    /**\n     * NodeId of the element matching the queried relation.\n     */\n    nodeId: NodeId;\n  }\n\n  export interface RemoveAttributeRequest {\n    /**\n     * Id of the element to remove attribute from.\n     */\n    nodeId: NodeId;\n    /**\n     * Name of the attribute to remove.\n     */\n    name: string;\n  }\n\n  export interface RemoveNodeRequest {\n    /**\n     * Id of the node to remove.\n     */\n    nodeId: NodeId;\n  }\n\n  export interface RequestChildNodesRequest {\n    /**\n     * Id of the node to get children for.\n     */\n    nodeId: NodeId;\n    /**\n     * The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the\n     * entire subtree or provide an integer larger than 0.\n     */\n    depth?: integer;\n    /**\n     * Whether or not iframes and shadow roots should be traversed when returning the sub-tree\n     * (default is false).\n     */\n    pierce?: boolean;\n  }\n\n  export interface RequestNodeRequest {\n    /**\n     * JavaScript object id to convert into node.\n     */\n    objectId: Runtime.RemoteObjectId;\n  }\n\n  export interface RequestNodeResponse extends ProtocolResponseWithError {\n    /**\n     * Node id for given object.\n     */\n    nodeId: NodeId;\n  }\n\n  export interface ResolveNodeRequest {\n    /**\n     * Id of the node to resolve.\n     */\n    nodeId?: NodeId;\n    /**\n     * Backend identifier of the node to resolve.\n     */\n    backendNodeId?: DOM.BackendNodeId;\n    /**\n     * Symbolic group name that can be used to release multiple objects.\n     */\n    objectGroup?: string;\n    /**\n     * Execution context in which to resolve the node.\n     */\n    executionContextId?: Runtime.ExecutionContextId;\n  }\n\n  export interface ResolveNodeResponse extends ProtocolResponseWithError {\n    /**\n     * JavaScript object wrapper for given node.\n     */\n    object: Runtime.RemoteObject;\n  }\n\n  export interface SetAttributeValueRequest {\n    /**\n     * Id of the element to set attribute for.\n     */\n    nodeId: NodeId;\n    /**\n     * Attribute name.\n     */\n    name: string;\n    /**\n     * Attribute value.\n     */\n    value: string;\n  }\n\n  export interface SetAttributesAsTextRequest {\n    /**\n     * Id of the element to set attributes for.\n     */\n    nodeId: NodeId;\n    /**\n     * Text with a number of attributes. Will parse this text using HTML parser.\n     */\n    text: string;\n    /**\n     * Attribute name to replace with new attributes derived from text in case text parsed\n     * successfully.\n     */\n    name?: string;\n  }\n\n  export interface SetFileInputFilesRequest {\n    /**\n     * Array of file paths to set.\n     */\n    files: string[];\n    /**\n     * Identifier of the node.\n     */\n    nodeId?: NodeId;\n    /**\n     * Identifier of the backend node.\n     */\n    backendNodeId?: BackendNodeId;\n    /**\n     * JavaScript object id of the node wrapper.\n     */\n    objectId?: Runtime.RemoteObjectId;\n  }\n\n  export interface SetNodeStackTracesEnabledRequest {\n    /**\n     * Enable or disable.\n     */\n    enable: boolean;\n  }\n\n  export interface GetNodeStackTracesRequest {\n    /**\n     * Id of the node to get stack traces for.\n     */\n    nodeId: NodeId;\n  }\n\n  export interface GetNodeStackTracesResponse extends ProtocolResponseWithError {\n    /**\n     * Creation stack trace, if available.\n     */\n    creation?: Runtime.StackTrace;\n  }\n\n  export interface GetFileInfoRequest {\n    /**\n     * JavaScript object id of the node wrapper.\n     */\n    objectId: Runtime.RemoteObjectId;\n  }\n\n  export interface GetFileInfoResponse extends ProtocolResponseWithError {\n    path: string;\n  }\n\n  export interface GetDetachedDomNodesResponse extends ProtocolResponseWithError {\n    /**\n     * The list of detached nodes\n     */\n    detachedNodes: DetachedElementInfo[];\n  }\n\n  export interface SetInspectedNodeRequest {\n    /**\n     * DOM node id to be accessible by means of $x command line API.\n     */\n    nodeId: NodeId;\n  }\n\n  export interface SetNodeNameRequest {\n    /**\n     * Id of the node to set name for.\n     */\n    nodeId: NodeId;\n    /**\n     * New node's name.\n     */\n    name: string;\n  }\n\n  export interface SetNodeNameResponse extends ProtocolResponseWithError {\n    /**\n     * New node's id.\n     */\n    nodeId: NodeId;\n  }\n\n  export interface SetNodeValueRequest {\n    /**\n     * Id of the node to set value for.\n     */\n    nodeId: NodeId;\n    /**\n     * New node's value.\n     */\n    value: string;\n  }\n\n  export interface SetOuterHTMLRequest {\n    /**\n     * Id of the node to set markup for.\n     */\n    nodeId: NodeId;\n    /**\n     * Outer HTML markup to set.\n     */\n    outerHTML: string;\n  }\n\n  export interface GetFrameOwnerRequest {\n    frameId: Page.FrameId;\n  }\n\n  export interface GetFrameOwnerResponse extends ProtocolResponseWithError {\n    /**\n     * Resulting node.\n     */\n    backendNodeId: BackendNodeId;\n    /**\n     * Id of the node at given coordinates, only when enabled and requested document.\n     */\n    nodeId?: NodeId;\n  }\n\n  export interface GetContainerForNodeRequest {\n    nodeId: NodeId;\n    containerName?: string;\n    physicalAxes?: PhysicalAxes;\n    logicalAxes?: LogicalAxes;\n    queriesScrollState?: boolean;\n    queriesAnchored?: boolean;\n  }\n\n  export interface GetContainerForNodeResponse extends ProtocolResponseWithError {\n    /**\n     * The container node for the given node, or null if not found.\n     */\n    nodeId?: NodeId;\n  }\n\n  export interface GetQueryingDescendantsForContainerRequest {\n    /**\n     * Id of the container node to find querying descendants from.\n     */\n    nodeId: NodeId;\n  }\n\n  export interface GetQueryingDescendantsForContainerResponse extends ProtocolResponseWithError {\n    /**\n     * Descendant nodes with container queries against the given container.\n     */\n    nodeIds: NodeId[];\n  }\n\n  export interface GetAnchorElementRequest {\n    /**\n     * Id of the positioned element from which to find the anchor.\n     */\n    nodeId: NodeId;\n    /**\n     * An optional anchor specifier, as defined in\n     * https://www.w3.org/TR/css-anchor-position-1/#anchor-specifier.\n     * If not provided, it will return the implicit anchor element for\n     * the given positioned element.\n     */\n    anchorSpecifier?: string;\n  }\n\n  export interface GetAnchorElementResponse extends ProtocolResponseWithError {\n    /**\n     * The anchor element of the given anchor query.\n     */\n    nodeId: NodeId;\n  }\n\n  export interface ForceShowPopoverRequest {\n    /**\n     * Id of the popover HTMLElement\n     */\n    nodeId: NodeId;\n    /**\n     * If true, opens the popover and keeps it open. If false, closes the\n     * popover if it was previously force-opened.\n     */\n    enable: boolean;\n  }\n\n  export interface ForceShowPopoverResponse extends ProtocolResponseWithError {\n    /**\n     * List of popovers that were closed in order to respect popover stacking order.\n     */\n    nodeIds: NodeId[];\n  }\n\n  /**\n   * Fired when `Element`'s attribute is modified.\n   */\n  export interface AttributeModifiedEvent {\n    /**\n     * Id of the node that has changed.\n     */\n    nodeId: NodeId;\n    /**\n     * Attribute name.\n     */\n    name: string;\n    /**\n     * Attribute value.\n     */\n    value: string;\n  }\n\n  /**\n   * Fired when `Element`'s attribute is removed.\n   */\n  export interface AttributeRemovedEvent {\n    /**\n     * Id of the node that has changed.\n     */\n    nodeId: NodeId;\n    /**\n     * A ttribute name.\n     */\n    name: string;\n  }\n\n  /**\n   * Mirrors `DOMCharacterDataModified` event.\n   */\n  export interface CharacterDataModifiedEvent {\n    /**\n     * Id of the node that has changed.\n     */\n    nodeId: NodeId;\n    /**\n     * New text value.\n     */\n    characterData: string;\n  }\n\n  /**\n   * Fired when `Container`'s child node count has changed.\n   */\n  export interface ChildNodeCountUpdatedEvent {\n    /**\n     * Id of the node that has changed.\n     */\n    nodeId: NodeId;\n    /**\n     * New node count.\n     */\n    childNodeCount: integer;\n  }\n\n  /**\n   * Mirrors `DOMNodeInserted` event.\n   */\n  export interface ChildNodeInsertedEvent {\n    /**\n     * Id of the node that has changed.\n     */\n    parentNodeId: NodeId;\n    /**\n     * Id of the previous sibling.\n     */\n    previousNodeId: NodeId;\n    /**\n     * Inserted node data.\n     */\n    node: Node;\n  }\n\n  /**\n   * Mirrors `DOMNodeRemoved` event.\n   */\n  export interface ChildNodeRemovedEvent {\n    /**\n     * Parent id.\n     */\n    parentNodeId: NodeId;\n    /**\n     * Id of the node that has been removed.\n     */\n    nodeId: NodeId;\n  }\n\n  /**\n   * Called when distribution is changed.\n   */\n  export interface DistributedNodesUpdatedEvent {\n    /**\n     * Insertion point where distributed nodes were updated.\n     */\n    insertionPointId: NodeId;\n    /**\n     * Distributed nodes for given insertion point.\n     */\n    distributedNodes: BackendNode[];\n  }\n\n  /**\n   * Fired when `Element`'s inline style is modified via a CSS property modification.\n   */\n  export interface InlineStyleInvalidatedEvent {\n    /**\n     * Ids of the nodes for which the inline styles have been invalidated.\n     */\n    nodeIds: NodeId[];\n  }\n\n  /**\n   * Called when a pseudo element is added to an element.\n   */\n  export interface PseudoElementAddedEvent {\n    /**\n     * Pseudo element's parent element id.\n     */\n    parentId: NodeId;\n    /**\n     * The added pseudo element.\n     */\n    pseudoElement: Node;\n  }\n\n  /**\n   * Fired when a node's scrollability state changes.\n   */\n  export interface ScrollableFlagUpdatedEvent {\n    /**\n     * The id of the node.\n     */\n    nodeId: DOM.NodeId;\n    /**\n     * If the node is scrollable.\n     */\n    isScrollable: boolean;\n  }\n\n  /**\n   * Fired when a node's starting styles changes.\n   */\n  export interface AffectedByStartingStylesFlagUpdatedEvent {\n    /**\n     * The id of the node.\n     */\n    nodeId: DOM.NodeId;\n    /**\n     * If the node has starting styles.\n     */\n    affectedByStartingStyles: boolean;\n  }\n\n  /**\n   * Called when a pseudo element is removed from an element.\n   */\n  export interface PseudoElementRemovedEvent {\n    /**\n     * Pseudo element's parent element id.\n     */\n    parentId: NodeId;\n    /**\n     * The removed pseudo element id.\n     */\n    pseudoElementId: NodeId;\n  }\n\n  /**\n   * Fired when backend wants to provide client with the missing DOM structure. This happens upon\n   * most of the calls requesting node ids.\n   */\n  export interface SetChildNodesEvent {\n    /**\n     * Parent node id to populate with children.\n     */\n    parentId: NodeId;\n    /**\n     * Child nodes array.\n     */\n    nodes: Node[];\n  }\n\n  /**\n   * Called when shadow root is popped from the element.\n   */\n  export interface ShadowRootPoppedEvent {\n    /**\n     * Host element id.\n     */\n    hostId: NodeId;\n    /**\n     * Shadow root id.\n     */\n    rootId: NodeId;\n  }\n\n  /**\n   * Called when shadow root is pushed into the element.\n   */\n  export interface ShadowRootPushedEvent {\n    /**\n     * Host element id.\n     */\n    hostId: NodeId;\n    /**\n     * Shadow root.\n     */\n    root: Node;\n  }\n}\n\n/**\n * DOM debugging allows setting breakpoints on particular DOM operations and events. JavaScript\n * execution will stop on these operations as if there was a regular breakpoint set.\n */\nexport namespace DOMDebugger {\n\n  /**\n   * DOM breakpoint type.\n   */\n  export const enum DOMBreakpointType {\n    SubtreeModified = 'subtree-modified',\n    AttributeModified = 'attribute-modified',\n    NodeRemoved = 'node-removed',\n  }\n\n  /**\n   * CSP Violation type.\n   */\n  export const enum CSPViolationType {\n    TrustedtypeSinkViolation = 'trustedtype-sink-violation',\n    TrustedtypePolicyViolation = 'trustedtype-policy-violation',\n  }\n\n  /**\n   * Object event listener.\n   */\n  export interface EventListener {\n    /**\n     * `EventListener`'s type.\n     */\n    type: string;\n    /**\n     * `EventListener`'s useCapture.\n     */\n    useCapture: boolean;\n    /**\n     * `EventListener`'s passive flag.\n     */\n    passive: boolean;\n    /**\n     * `EventListener`'s once flag.\n     */\n    once: boolean;\n    /**\n     * Script id of the handler code.\n     */\n    scriptId: Runtime.ScriptId;\n    /**\n     * Line number in the script (0-based).\n     */\n    lineNumber: integer;\n    /**\n     * Column number in the script (0-based).\n     */\n    columnNumber: integer;\n    /**\n     * Event handler function value.\n     */\n    handler?: Runtime.RemoteObject;\n    /**\n     * Event original handler function value.\n     */\n    originalHandler?: Runtime.RemoteObject;\n    /**\n     * Node the listener is added to (if any).\n     */\n    backendNodeId?: DOM.BackendNodeId;\n  }\n\n  export interface GetEventListenersRequest {\n    /**\n     * Identifier of the object to return listeners for.\n     */\n    objectId: Runtime.RemoteObjectId;\n    /**\n     * The maximum depth at which Node children should be retrieved, defaults to 1. Use -1 for the\n     * entire subtree or provide an integer larger than 0.\n     */\n    depth?: integer;\n    /**\n     * Whether or not iframes and shadow roots should be traversed when returning the subtree\n     * (default is false). Reports listeners for all contexts if pierce is enabled.\n     */\n    pierce?: boolean;\n  }\n\n  export interface GetEventListenersResponse extends ProtocolResponseWithError {\n    /**\n     * Array of relevant listeners.\n     */\n    listeners: EventListener[];\n  }\n\n  export interface RemoveDOMBreakpointRequest {\n    /**\n     * Identifier of the node to remove breakpoint from.\n     */\n    nodeId: DOM.NodeId;\n    /**\n     * Type of the breakpoint to remove.\n     */\n    type: DOMBreakpointType;\n  }\n\n  export interface RemoveEventListenerBreakpointRequest {\n    /**\n     * Event name.\n     */\n    eventName: string;\n    /**\n     * EventTarget interface name.\n     */\n    targetName?: string;\n  }\n\n  export interface RemoveInstrumentationBreakpointRequest {\n    /**\n     * Instrumentation name to stop on.\n     */\n    eventName: string;\n  }\n\n  export interface RemoveXHRBreakpointRequest {\n    /**\n     * Resource URL substring.\n     */\n    url: string;\n  }\n\n  export interface SetBreakOnCSPViolationRequest {\n    /**\n     * CSP Violations to stop upon.\n     */\n    violationTypes: CSPViolationType[];\n  }\n\n  export interface SetDOMBreakpointRequest {\n    /**\n     * Identifier of the node to set breakpoint on.\n     */\n    nodeId: DOM.NodeId;\n    /**\n     * Type of the operation to stop upon.\n     */\n    type: DOMBreakpointType;\n  }\n\n  export interface SetEventListenerBreakpointRequest {\n    /**\n     * DOM Event name to stop on (any DOM event will do).\n     */\n    eventName: string;\n    /**\n     * EventTarget interface name to stop on. If equal to `\"*\"` or not provided, will stop on any\n     * EventTarget.\n     */\n    targetName?: string;\n  }\n\n  export interface SetInstrumentationBreakpointRequest {\n    /**\n     * Instrumentation name to stop on.\n     */\n    eventName: string;\n  }\n\n  export interface SetXHRBreakpointRequest {\n    /**\n     * Resource URL substring. All XHRs having this substring in the URL will get stopped upon.\n     */\n    url: string;\n  }\n}\n\n/**\n * This domain facilitates obtaining document snapshots with DOM, layout, and style information.\n */\nexport namespace DOMSnapshot {\n\n  /**\n   * A Node in the DOM tree.\n   */\n  export interface DOMNode {\n    /**\n     * `Node`'s nodeType.\n     */\n    nodeType: integer;\n    /**\n     * `Node`'s nodeName.\n     */\n    nodeName: string;\n    /**\n     * `Node`'s nodeValue.\n     */\n    nodeValue: string;\n    /**\n     * Only set for textarea elements, contains the text value.\n     */\n    textValue?: string;\n    /**\n     * Only set for input elements, contains the input's associated text value.\n     */\n    inputValue?: string;\n    /**\n     * Only set for radio and checkbox input elements, indicates if the element has been checked\n     */\n    inputChecked?: boolean;\n    /**\n     * Only set for option elements, indicates if the element has been selected\n     */\n    optionSelected?: boolean;\n    /**\n     * `Node`'s id, corresponds to DOM.Node.backendNodeId.\n     */\n    backendNodeId: DOM.BackendNodeId;\n    /**\n     * The indexes of the node's child nodes in the `domNodes` array returned by `getSnapshot`, if\n     * any.\n     */\n    childNodeIndexes?: integer[];\n    /**\n     * Attributes of an `Element` node.\n     */\n    attributes?: NameValue[];\n    /**\n     * Indexes of pseudo elements associated with this node in the `domNodes` array returned by\n     * `getSnapshot`, if any.\n     */\n    pseudoElementIndexes?: integer[];\n    /**\n     * The index of the node's related layout tree node in the `layoutTreeNodes` array returned by\n     * `getSnapshot`, if any.\n     */\n    layoutNodeIndex?: integer;\n    /**\n     * Document URL that `Document` or `FrameOwner` node points to.\n     */\n    documentURL?: string;\n    /**\n     * Base URL that `Document` or `FrameOwner` node uses for URL completion.\n     */\n    baseURL?: string;\n    /**\n     * Only set for documents, contains the document's content language.\n     */\n    contentLanguage?: string;\n    /**\n     * Only set for documents, contains the document's character set encoding.\n     */\n    documentEncoding?: string;\n    /**\n     * `DocumentType` node's publicId.\n     */\n    publicId?: string;\n    /**\n     * `DocumentType` node's systemId.\n     */\n    systemId?: string;\n    /**\n     * Frame ID for frame owner elements and also for the document node.\n     */\n    frameId?: Page.FrameId;\n    /**\n     * The index of a frame owner element's content document in the `domNodes` array returned by\n     * `getSnapshot`, if any.\n     */\n    contentDocumentIndex?: integer;\n    /**\n     * Type of a pseudo element node.\n     */\n    pseudoType?: DOM.PseudoType;\n    /**\n     * Shadow root type.\n     */\n    shadowRootType?: DOM.ShadowRootType;\n    /**\n     * Whether this DOM node responds to mouse clicks. This includes nodes that have had click\n     * event listeners attached via JavaScript as well as anchor tags that naturally navigate when\n     * clicked.\n     */\n    isClickable?: boolean;\n    /**\n     * Details of the node's event listeners, if any.\n     */\n    eventListeners?: DOMDebugger.EventListener[];\n    /**\n     * The selected url for nodes with a srcset attribute.\n     */\n    currentSourceURL?: string;\n    /**\n     * The url of the script (if any) that generates this node.\n     */\n    originURL?: string;\n    /**\n     * Scroll offsets, set when this node is a Document.\n     */\n    scrollOffsetX?: number;\n    scrollOffsetY?: number;\n  }\n\n  /**\n   * Details of post layout rendered text positions. The exact layout should not be regarded as\n   * stable and may change between versions.\n   */\n  export interface InlineTextBox {\n    /**\n     * The bounding box in document coordinates. Note that scroll offset of the document is ignored.\n     */\n    boundingBox: DOM.Rect;\n    /**\n     * The starting index in characters, for this post layout textbox substring. Characters that\n     * would be represented as a surrogate pair in UTF-16 have length 2.\n     */\n    startCharacterIndex: integer;\n    /**\n     * The number of characters in this post layout textbox substring. Characters that would be\n     * represented as a surrogate pair in UTF-16 have length 2.\n     */\n    numCharacters: integer;\n  }\n\n  /**\n   * Details of an element in the DOM tree with a LayoutObject.\n   */\n  export interface LayoutTreeNode {\n    /**\n     * The index of the related DOM node in the `domNodes` array returned by `getSnapshot`.\n     */\n    domNodeIndex: integer;\n    /**\n     * The bounding box in document coordinates. Note that scroll offset of the document is ignored.\n     */\n    boundingBox: DOM.Rect;\n    /**\n     * Contents of the LayoutText, if any.\n     */\n    layoutText?: string;\n    /**\n     * The post-layout inline text nodes, if any.\n     */\n    inlineTextNodes?: InlineTextBox[];\n    /**\n     * Index into the `computedStyles` array returned by `getSnapshot`.\n     */\n    styleIndex?: integer;\n    /**\n     * Global paint order index, which is determined by the stacking order of the nodes. Nodes\n     * that are painted together will have the same index. Only provided if includePaintOrder in\n     * getSnapshot was true.\n     */\n    paintOrder?: integer;\n    /**\n     * Set to true to indicate the element begins a new stacking context.\n     */\n    isStackingContext?: boolean;\n  }\n\n  /**\n   * A subset of the full ComputedStyle as defined by the request whitelist.\n   */\n  export interface ComputedStyle {\n    /**\n     * Name/value pairs of computed style properties.\n     */\n    properties: NameValue[];\n  }\n\n  /**\n   * A name/value pair.\n   */\n  export interface NameValue {\n    /**\n     * Attribute/property name.\n     */\n    name: string;\n    /**\n     * Attribute/property value.\n     */\n    value: string;\n  }\n\n  /**\n   * Index of the string in the strings table.\n   */\n  export type StringIndex = integer;\n\n  /**\n   * Index of the string in the strings table.\n   */\n  export type ArrayOfStrings = StringIndex[];\n\n  /**\n   * Data that is only present on rare nodes.\n   */\n  export interface RareStringData {\n    index: integer[];\n    value: StringIndex[];\n  }\n\n  export interface RareBooleanData {\n    index: integer[];\n  }\n\n  export interface RareIntegerData {\n    index: integer[];\n    value: integer[];\n  }\n\n  export type Rectangle = number[];\n\n  /**\n   * Document snapshot.\n   */\n  export interface DocumentSnapshot {\n    /**\n     * Document URL that `Document` or `FrameOwner` node points to.\n     */\n    documentURL: StringIndex;\n    /**\n     * Document title.\n     */\n    title: StringIndex;\n    /**\n     * Base URL that `Document` or `FrameOwner` node uses for URL completion.\n     */\n    baseURL: StringIndex;\n    /**\n     * Contains the document's content language.\n     */\n    contentLanguage: StringIndex;\n    /**\n     * Contains the document's character set encoding.\n     */\n    encodingName: StringIndex;\n    /**\n     * `DocumentType` node's publicId.\n     */\n    publicId: StringIndex;\n    /**\n     * `DocumentType` node's systemId.\n     */\n    systemId: StringIndex;\n    /**\n     * Frame ID for frame owner elements and also for the document node.\n     */\n    frameId: StringIndex;\n    /**\n     * A table with dom nodes.\n     */\n    nodes: NodeTreeSnapshot;\n    /**\n     * The nodes in the layout tree.\n     */\n    layout: LayoutTreeSnapshot;\n    /**\n     * The post-layout inline text nodes.\n     */\n    textBoxes: TextBoxSnapshot;\n    /**\n     * Horizontal scroll offset.\n     */\n    scrollOffsetX?: number;\n    /**\n     * Vertical scroll offset.\n     */\n    scrollOffsetY?: number;\n    /**\n     * Document content width.\n     */\n    contentWidth?: number;\n    /**\n     * Document content height.\n     */\n    contentHeight?: number;\n  }\n\n  /**\n   * Table containing nodes.\n   */\n  export interface NodeTreeSnapshot {\n    /**\n     * Parent node index.\n     */\n    parentIndex?: integer[];\n    /**\n     * `Node`'s nodeType.\n     */\n    nodeType?: integer[];\n    /**\n     * Type of the shadow root the `Node` is in. String values are equal to the `ShadowRootType` enum.\n     */\n    shadowRootType?: RareStringData;\n    /**\n     * `Node`'s nodeName.\n     */\n    nodeName?: StringIndex[];\n    /**\n     * `Node`'s nodeValue.\n     */\n    nodeValue?: StringIndex[];\n    /**\n     * `Node`'s id, corresponds to DOM.Node.backendNodeId.\n     */\n    backendNodeId?: DOM.BackendNodeId[];\n    /**\n     * Attributes of an `Element` node. Flatten name, value pairs.\n     */\n    attributes?: ArrayOfStrings[];\n    /**\n     * Only set for textarea elements, contains the text value.\n     */\n    textValue?: RareStringData;\n    /**\n     * Only set for input elements, contains the input's associated text value.\n     */\n    inputValue?: RareStringData;\n    /**\n     * Only set for radio and checkbox input elements, indicates if the element has been checked\n     */\n    inputChecked?: RareBooleanData;\n    /**\n     * Only set for option elements, indicates if the element has been selected\n     */\n    optionSelected?: RareBooleanData;\n    /**\n     * The index of the document in the list of the snapshot documents.\n     */\n    contentDocumentIndex?: RareIntegerData;\n    /**\n     * Type of a pseudo element node.\n     */\n    pseudoType?: RareStringData;\n    /**\n     * Pseudo element identifier for this node. Only present if there is a\n     * valid pseudoType.\n     */\n    pseudoIdentifier?: RareStringData;\n    /**\n     * Whether this DOM node responds to mouse clicks. This includes nodes that have had click\n     * event listeners attached via JavaScript as well as anchor tags that naturally navigate when\n     * clicked.\n     */\n    isClickable?: RareBooleanData;\n    /**\n     * The selected url for nodes with a srcset attribute.\n     */\n    currentSourceURL?: RareStringData;\n    /**\n     * The url of the script (if any) that generates this node.\n     */\n    originURL?: RareStringData;\n  }\n\n  /**\n   * Table of details of an element in the DOM tree with a LayoutObject.\n   */\n  export interface LayoutTreeSnapshot {\n    /**\n     * Index of the corresponding node in the `NodeTreeSnapshot` array returned by `captureSnapshot`.\n     */\n    nodeIndex: integer[];\n    /**\n     * Array of indexes specifying computed style strings, filtered according to the `computedStyles` parameter passed to `captureSnapshot`.\n     */\n    styles: ArrayOfStrings[];\n    /**\n     * The absolute position bounding box.\n     */\n    bounds: Rectangle[];\n    /**\n     * Contents of the LayoutText, if any.\n     */\n    text: StringIndex[];\n    /**\n     * Stacking context information.\n     */\n    stackingContexts: RareBooleanData;\n    /**\n     * Global paint order index, which is determined by the stacking order of the nodes. Nodes\n     * that are painted together will have the same index. Only provided if includePaintOrder in\n     * captureSnapshot was true.\n     */\n    paintOrders?: integer[];\n    /**\n     * The offset rect of nodes. Only available when includeDOMRects is set to true\n     */\n    offsetRects?: Rectangle[];\n    /**\n     * The scroll rect of nodes. Only available when includeDOMRects is set to true\n     */\n    scrollRects?: Rectangle[];\n    /**\n     * The client rect of nodes. Only available when includeDOMRects is set to true\n     */\n    clientRects?: Rectangle[];\n    /**\n     * The list of background colors that are blended with colors of overlapping elements.\n     */\n    blendedBackgroundColors?: StringIndex[];\n    /**\n     * The list of computed text opacities.\n     */\n    textColorOpacities?: number[];\n  }\n\n  /**\n   * Table of details of the post layout rendered text positions. The exact layout should not be regarded as\n   * stable and may change between versions.\n   */\n  export interface TextBoxSnapshot {\n    /**\n     * Index of the layout tree node that owns this box collection.\n     */\n    layoutIndex: integer[];\n    /**\n     * The absolute position bounding box.\n     */\n    bounds: Rectangle[];\n    /**\n     * The starting index in characters, for this post layout textbox substring. Characters that\n     * would be represented as a surrogate pair in UTF-16 have length 2.\n     */\n    start: integer[];\n    /**\n     * The number of characters in this post layout textbox substring. Characters that would be\n     * represented as a surrogate pair in UTF-16 have length 2.\n     */\n    length: integer[];\n  }\n\n  export interface GetSnapshotRequest {\n    /**\n     * Whitelist of computed styles to return.\n     */\n    computedStyleWhitelist: string[];\n    /**\n     * Whether or not to retrieve details of DOM listeners (default false).\n     */\n    includeEventListeners?: boolean;\n    /**\n     * Whether to determine and include the paint order index of LayoutTreeNodes (default false).\n     */\n    includePaintOrder?: boolean;\n    /**\n     * Whether to include UA shadow tree in the snapshot (default false).\n     */\n    includeUserAgentShadowTree?: boolean;\n  }\n\n  export interface GetSnapshotResponse extends ProtocolResponseWithError {\n    /**\n     * The nodes in the DOM tree. The DOMNode at index 0 corresponds to the root document.\n     */\n    domNodes: DOMNode[];\n    /**\n     * The nodes in the layout tree.\n     */\n    layoutTreeNodes: LayoutTreeNode[];\n    /**\n     * Whitelisted ComputedStyle properties for each node in the layout tree.\n     */\n    computedStyles: ComputedStyle[];\n  }\n\n  export interface CaptureSnapshotRequest {\n    /**\n     * Whitelist of computed styles to return.\n     */\n    computedStyles: string[];\n    /**\n     * Whether to include layout object paint orders into the snapshot.\n     */\n    includePaintOrder?: boolean;\n    /**\n     * Whether to include DOM rectangles (offsetRects, clientRects, scrollRects) into the snapshot\n     */\n    includeDOMRects?: boolean;\n    /**\n     * Whether to include blended background colors in the snapshot (default: false).\n     * Blended background color is achieved by blending background colors of all elements\n     * that overlap with the current element.\n     */\n    includeBlendedBackgroundColors?: boolean;\n    /**\n     * Whether to include text color opacity in the snapshot (default: false).\n     * An element might have the opacity property set that affects the text color of the element.\n     * The final text color opacity is computed based on the opacity of all overlapping elements.\n     */\n    includeTextColorOpacities?: boolean;\n  }\n\n  export interface CaptureSnapshotResponse extends ProtocolResponseWithError {\n    /**\n     * The nodes in the DOM tree. The DOMNode at index 0 corresponds to the root document.\n     */\n    documents: DocumentSnapshot[];\n    /**\n     * Shared string table that all string properties refer to with indexes.\n     */\n    strings: string[];\n  }\n}\n\n/**\n * Query and modify DOM storage.\n */\nexport namespace DOMStorage {\n\n  export type SerializedStorageKey = string;\n\n  /**\n   * DOM Storage identifier.\n   */\n  export interface StorageId {\n    /**\n     * Security origin for the storage.\n     */\n    securityOrigin?: string;\n    /**\n     * Represents a key by which DOM Storage keys its CachedStorageAreas\n     */\n    storageKey?: SerializedStorageKey;\n    /**\n     * Whether the storage is local storage (not session storage).\n     */\n    isLocalStorage: boolean;\n  }\n\n  /**\n   * DOM Storage item.\n   */\n  export type Item = string[];\n\n  export interface ClearRequest {\n    storageId: StorageId;\n  }\n\n  export interface GetDOMStorageItemsRequest {\n    storageId: StorageId;\n  }\n\n  export interface GetDOMStorageItemsResponse extends ProtocolResponseWithError {\n    entries: Item[];\n  }\n\n  export interface RemoveDOMStorageItemRequest {\n    storageId: StorageId;\n    key: string;\n  }\n\n  export interface SetDOMStorageItemRequest {\n    storageId: StorageId;\n    key: string;\n    value: string;\n  }\n\n  export interface DomStorageItemAddedEvent {\n    storageId: StorageId;\n    key: string;\n    newValue: string;\n  }\n\n  export interface DomStorageItemRemovedEvent {\n    storageId: StorageId;\n    key: string;\n  }\n\n  export interface DomStorageItemUpdatedEvent {\n    storageId: StorageId;\n    key: string;\n    oldValue: string;\n    newValue: string;\n  }\n\n  export interface DomStorageItemsClearedEvent {\n    storageId: StorageId;\n  }\n}\n\nexport namespace DeviceAccess {\n\n  /**\n   * Device request id.\n   */\n  export type RequestId = OpaqueIdentifier<string, 'Protocol.DeviceAccess.RequestId'>;\n\n  /**\n   * A device id.\n   */\n  export type DeviceId = OpaqueIdentifier<string, 'Protocol.DeviceAccess.DeviceId'>;\n\n  /**\n   * Device information displayed in a user prompt to select a device.\n   */\n  export interface PromptDevice {\n    id: DeviceId;\n    /**\n     * Display name as it appears in a device request user prompt.\n     */\n    name: string;\n  }\n\n  export interface SelectPromptRequest {\n    id: RequestId;\n    deviceId: DeviceId;\n  }\n\n  export interface CancelPromptRequest {\n    id: RequestId;\n  }\n\n  /**\n   * A device request opened a user prompt to select a device. Respond with the\n   * selectPrompt or cancelPrompt command.\n   */\n  export interface DeviceRequestPromptedEvent {\n    id: RequestId;\n    devices: PromptDevice[];\n  }\n}\n\nexport namespace DeviceOrientation {\n\n  export interface SetDeviceOrientationOverrideRequest {\n    /**\n     * Mock alpha\n     */\n    alpha: number;\n    /**\n     * Mock beta\n     */\n    beta: number;\n    /**\n     * Mock gamma\n     */\n    gamma: number;\n  }\n}\n\n/**\n * This domain emulates different environments for the page.\n */\nexport namespace Emulation {\n\n  export interface SafeAreaInsets {\n    /**\n     * Overrides safe-area-inset-top.\n     */\n    top?: integer;\n    /**\n     * Overrides safe-area-max-inset-top.\n     */\n    topMax?: integer;\n    /**\n     * Overrides safe-area-inset-left.\n     */\n    left?: integer;\n    /**\n     * Overrides safe-area-max-inset-left.\n     */\n    leftMax?: integer;\n    /**\n     * Overrides safe-area-inset-bottom.\n     */\n    bottom?: integer;\n    /**\n     * Overrides safe-area-max-inset-bottom.\n     */\n    bottomMax?: integer;\n    /**\n     * Overrides safe-area-inset-right.\n     */\n    right?: integer;\n    /**\n     * Overrides safe-area-max-inset-right.\n     */\n    rightMax?: integer;\n  }\n\n  export const enum ScreenOrientationType {\n    PortraitPrimary = 'portraitPrimary',\n    PortraitSecondary = 'portraitSecondary',\n    LandscapePrimary = 'landscapePrimary',\n    LandscapeSecondary = 'landscapeSecondary',\n  }\n\n  /**\n   * Screen orientation.\n   */\n  export interface ScreenOrientation {\n    /**\n     * Orientation type.\n     */\n    type: ScreenOrientationType;\n    /**\n     * Orientation angle.\n     */\n    angle: integer;\n  }\n\n  export const enum DisplayFeatureOrientation {\n    Vertical = 'vertical',\n    Horizontal = 'horizontal',\n  }\n\n  export interface DisplayFeature {\n    /**\n     * Orientation of a display feature in relation to screen\n     */\n    orientation: DisplayFeatureOrientation;\n    /**\n     * The offset from the screen origin in either the x (for vertical\n     * orientation) or y (for horizontal orientation) direction.\n     */\n    offset: integer;\n    /**\n     * A display feature may mask content such that it is not physically\n     * displayed - this length along with the offset describes this area.\n     * A display feature that only splits content will have a 0 mask_length.\n     */\n    maskLength: integer;\n  }\n\n  export const enum DevicePostureType {\n    Continuous = 'continuous',\n    Folded = 'folded',\n  }\n\n  export interface DevicePosture {\n    /**\n     * Current posture of the device\n     */\n    type: DevicePostureType;\n  }\n\n  export interface MediaFeature {\n    name: string;\n    value: string;\n  }\n\n  /**\n   * advance: If the scheduler runs out of immediate work, the virtual time base may fast forward to\n   * allow the next delayed task (if any) to run; pause: The virtual time base may not advance;\n   * pauseIfNetworkFetchesPending: The virtual time base may not advance if there are any pending\n   * resource fetches.\n   */\n  export const enum VirtualTimePolicy {\n    Advance = 'advance',\n    Pause = 'pause',\n    PauseIfNetworkFetchesPending = 'pauseIfNetworkFetchesPending',\n  }\n\n  /**\n   * Used to specify User Agent Client Hints to emulate. See https://wicg.github.io/ua-client-hints\n   */\n  export interface UserAgentBrandVersion {\n    brand: string;\n    version: string;\n  }\n\n  /**\n   * Used to specify User Agent Client Hints to emulate. See https://wicg.github.io/ua-client-hints\n   * Missing optional values will be filled in by the target with what it would normally use.\n   */\n  export interface UserAgentMetadata {\n    /**\n     * Brands appearing in Sec-CH-UA.\n     */\n    brands?: UserAgentBrandVersion[];\n    /**\n     * Brands appearing in Sec-CH-UA-Full-Version-List.\n     */\n    fullVersionList?: UserAgentBrandVersion[];\n    /**\n     * @deprecated\n     */\n    fullVersion?: string;\n    platform: string;\n    platformVersion: string;\n    architecture: string;\n    model: string;\n    mobile: boolean;\n    bitness?: string;\n    wow64?: boolean;\n    /**\n     * Used to specify User Agent form-factor values.\n     * See https://wicg.github.io/ua-client-hints/#sec-ch-ua-form-factors\n     */\n    formFactors?: string[];\n  }\n\n  /**\n   * Used to specify sensor types to emulate.\n   * See https://w3c.github.io/sensors/#automation for more information.\n   */\n  export const enum SensorType {\n    AbsoluteOrientation = 'absolute-orientation',\n    Accelerometer = 'accelerometer',\n    AmbientLight = 'ambient-light',\n    Gravity = 'gravity',\n    Gyroscope = 'gyroscope',\n    LinearAcceleration = 'linear-acceleration',\n    Magnetometer = 'magnetometer',\n    RelativeOrientation = 'relative-orientation',\n  }\n\n  export interface SensorMetadata {\n    available?: boolean;\n    minimumFrequency?: number;\n    maximumFrequency?: number;\n  }\n\n  export interface SensorReadingSingle {\n    value: number;\n  }\n\n  export interface SensorReadingXYZ {\n    x: number;\n    y: number;\n    z: number;\n  }\n\n  export interface SensorReadingQuaternion {\n    x: number;\n    y: number;\n    z: number;\n    w: number;\n  }\n\n  export interface SensorReading {\n    single?: SensorReadingSingle;\n    xyz?: SensorReadingXYZ;\n    quaternion?: SensorReadingQuaternion;\n  }\n\n  export const enum PressureSource {\n    Cpu = 'cpu',\n  }\n\n  export const enum PressureState {\n    Nominal = 'nominal',\n    Fair = 'fair',\n    Serious = 'serious',\n    Critical = 'critical',\n  }\n\n  export interface PressureMetadata {\n    available?: boolean;\n  }\n\n  export interface WorkAreaInsets {\n    /**\n     * Work area top inset in pixels. Default is 0;\n     */\n    top?: integer;\n    /**\n     * Work area left inset in pixels. Default is 0;\n     */\n    left?: integer;\n    /**\n     * Work area bottom inset in pixels. Default is 0;\n     */\n    bottom?: integer;\n    /**\n     * Work area right inset in pixels. Default is 0;\n     */\n    right?: integer;\n  }\n\n  export type ScreenId = OpaqueIdentifier<string, 'Protocol.Emulation.ScreenId'>;\n\n  /**\n   * Screen information similar to the one returned by window.getScreenDetails() method,\n   * see https://w3c.github.io/window-management/#screendetailed.\n   */\n  export interface ScreenInfo {\n    /**\n     * Offset of the left edge of the screen.\n     */\n    left: integer;\n    /**\n     * Offset of the top edge of the screen.\n     */\n    top: integer;\n    /**\n     * Width of the screen.\n     */\n    width: integer;\n    /**\n     * Height of the screen.\n     */\n    height: integer;\n    /**\n     * Offset of the left edge of the available screen area.\n     */\n    availLeft: integer;\n    /**\n     * Offset of the top edge of the available screen area.\n     */\n    availTop: integer;\n    /**\n     * Width of the available screen area.\n     */\n    availWidth: integer;\n    /**\n     * Height of the available screen area.\n     */\n    availHeight: integer;\n    /**\n     * Specifies the screen's device pixel ratio.\n     */\n    devicePixelRatio: number;\n    /**\n     * Specifies the screen's orientation.\n     */\n    orientation: ScreenOrientation;\n    /**\n     * Specifies the screen's color depth in bits.\n     */\n    colorDepth: integer;\n    /**\n     * Indicates whether the device has multiple screens.\n     */\n    isExtended: boolean;\n    /**\n     * Indicates whether the screen is internal to the device or external, attached to the device.\n     */\n    isInternal: boolean;\n    /**\n     * Indicates whether the screen is set as the the operating system primary screen.\n     */\n    isPrimary: boolean;\n    /**\n     * Specifies the descriptive label for the screen.\n     */\n    label: string;\n    /**\n     * Specifies the unique identifier of the screen.\n     */\n    id: ScreenId;\n  }\n\n  /**\n   * Enum of image types that can be disabled.\n   */\n  export const enum DisabledImageType {\n    Avif = 'avif',\n    Webp = 'webp',\n  }\n\n  export interface CanEmulateResponse extends ProtocolResponseWithError {\n    /**\n     * True if emulation is supported.\n     */\n    result: boolean;\n  }\n\n  export interface SetFocusEmulationEnabledRequest {\n    /**\n     * Whether to enable to disable focus emulation.\n     */\n    enabled: boolean;\n  }\n\n  export interface SetAutoDarkModeOverrideRequest {\n    /**\n     * Whether to enable or disable automatic dark mode.\n     * If not specified, any existing override will be cleared.\n     */\n    enabled?: boolean;\n  }\n\n  export interface SetCPUThrottlingRateRequest {\n    /**\n     * Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).\n     */\n    rate: number;\n  }\n\n  export interface SetDefaultBackgroundColorOverrideRequest {\n    /**\n     * RGBA of the default background color. If not specified, any existing override will be\n     * cleared.\n     */\n    color?: DOM.RGBA;\n  }\n\n  export interface SetSafeAreaInsetsOverrideRequest {\n    insets: SafeAreaInsets;\n  }\n\n  export interface SetDeviceMetricsOverrideRequest {\n    /**\n     * Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.\n     */\n    width: integer;\n    /**\n     * Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.\n     */\n    height: integer;\n    /**\n     * Overriding device scale factor value. 0 disables the override.\n     */\n    deviceScaleFactor: number;\n    /**\n     * Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text\n     * autosizing and more.\n     */\n    mobile: boolean;\n    /**\n     * Scale to apply to resulting view image.\n     */\n    scale?: number;\n    /**\n     * Overriding screen width value in pixels (minimum 0, maximum 10000000).\n     */\n    screenWidth?: integer;\n    /**\n     * Overriding screen height value in pixels (minimum 0, maximum 10000000).\n     */\n    screenHeight?: integer;\n    /**\n     * Overriding view X position on screen in pixels (minimum 0, maximum 10000000).\n     */\n    positionX?: integer;\n    /**\n     * Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).\n     */\n    positionY?: integer;\n    /**\n     * Do not set visible view size, rely upon explicit setVisibleSize call.\n     */\n    dontSetVisibleSize?: boolean;\n    /**\n     * Screen orientation override.\n     */\n    screenOrientation?: ScreenOrientation;\n    /**\n     * If set, the visible area of the page will be overridden to this viewport. This viewport\n     * change is not observed by the page, e.g. viewport-relative elements do not change positions.\n     */\n    viewport?: Page.Viewport;\n    /**\n     * If set, the display feature of a multi-segment screen. If not set, multi-segment support\n     * is turned-off.\n     * Deprecated, use Emulation.setDisplayFeaturesOverride.\n     * @deprecated\n     */\n    displayFeature?: DisplayFeature;\n    /**\n     * If set, the posture of a foldable device. If not set the posture is set\n     * to continuous.\n     * Deprecated, use Emulation.setDevicePostureOverride.\n     * @deprecated\n     */\n    devicePosture?: DevicePosture;\n  }\n\n  export interface SetDevicePostureOverrideRequest {\n    posture: DevicePosture;\n  }\n\n  export interface SetDisplayFeaturesOverrideRequest {\n    features: DisplayFeature[];\n  }\n\n  export interface SetScrollbarsHiddenRequest {\n    /**\n     * Whether scrollbars should be always hidden.\n     */\n    hidden: boolean;\n  }\n\n  export interface SetDocumentCookieDisabledRequest {\n    /**\n     * Whether document.coookie API should be disabled.\n     */\n    disabled: boolean;\n  }\n\n  export const enum SetEmitTouchEventsForMouseRequestConfiguration {\n    Mobile = 'mobile',\n    Desktop = 'desktop',\n  }\n\n  export interface SetEmitTouchEventsForMouseRequest {\n    /**\n     * Whether touch emulation based on mouse input should be enabled.\n     */\n    enabled: boolean;\n    /**\n     * Touch/gesture events configuration. Default: current platform.\n     */\n    configuration?: SetEmitTouchEventsForMouseRequestConfiguration;\n  }\n\n  export interface SetEmulatedMediaRequest {\n    /**\n     * Media type to emulate. Empty string disables the override.\n     */\n    media?: string;\n    /**\n     * Media features to emulate.\n     */\n    features?: MediaFeature[];\n  }\n\n  export const enum SetEmulatedVisionDeficiencyRequestType {\n    None = 'none',\n    BlurredVision = 'blurredVision',\n    ReducedContrast = 'reducedContrast',\n    Achromatopsia = 'achromatopsia',\n    Deuteranopia = 'deuteranopia',\n    Protanopia = 'protanopia',\n    Tritanopia = 'tritanopia',\n  }\n\n  export interface SetEmulatedVisionDeficiencyRequest {\n    /**\n     * Vision deficiency to emulate. Order: best-effort emulations come first, followed by any\n     * physiologically accurate emulations for medically recognized color vision deficiencies.\n     */\n    type: SetEmulatedVisionDeficiencyRequestType;\n  }\n\n  export interface SetEmulatedOSTextScaleRequest {\n    scale?: number;\n  }\n\n  export interface SetGeolocationOverrideRequest {\n    /**\n     * Mock latitude\n     */\n    latitude?: number;\n    /**\n     * Mock longitude\n     */\n    longitude?: number;\n    /**\n     * Mock accuracy\n     */\n    accuracy?: number;\n    /**\n     * Mock altitude\n     */\n    altitude?: number;\n    /**\n     * Mock altitudeAccuracy\n     */\n    altitudeAccuracy?: number;\n    /**\n     * Mock heading\n     */\n    heading?: number;\n    /**\n     * Mock speed\n     */\n    speed?: number;\n  }\n\n  export interface GetOverriddenSensorInformationRequest {\n    type: SensorType;\n  }\n\n  export interface GetOverriddenSensorInformationResponse extends ProtocolResponseWithError {\n    requestedSamplingFrequency: number;\n  }\n\n  export interface SetSensorOverrideEnabledRequest {\n    enabled: boolean;\n    type: SensorType;\n    metadata?: SensorMetadata;\n  }\n\n  export interface SetSensorOverrideReadingsRequest {\n    type: SensorType;\n    reading: SensorReading;\n  }\n\n  export interface SetPressureSourceOverrideEnabledRequest {\n    enabled: boolean;\n    source: PressureSource;\n    metadata?: PressureMetadata;\n  }\n\n  export interface SetPressureStateOverrideRequest {\n    source: PressureSource;\n    state: PressureState;\n  }\n\n  export interface SetPressureDataOverrideRequest {\n    source: PressureSource;\n    state: PressureState;\n    ownContributionEstimate?: number;\n  }\n\n  export interface SetIdleOverrideRequest {\n    /**\n     * Mock isUserActive\n     */\n    isUserActive: boolean;\n    /**\n     * Mock isScreenUnlocked\n     */\n    isScreenUnlocked: boolean;\n  }\n\n  export interface SetNavigatorOverridesRequest {\n    /**\n     * The platform navigator.platform should return.\n     */\n    platform: string;\n  }\n\n  export interface SetPageScaleFactorRequest {\n    /**\n     * Page scale factor.\n     */\n    pageScaleFactor: number;\n  }\n\n  export interface SetScriptExecutionDisabledRequest {\n    /**\n     * Whether script execution should be disabled in the page.\n     */\n    value: boolean;\n  }\n\n  export interface SetTouchEmulationEnabledRequest {\n    /**\n     * Whether the touch event emulation should be enabled.\n     */\n    enabled: boolean;\n    /**\n     * Maximum touch points supported. Defaults to one.\n     */\n    maxTouchPoints?: integer;\n  }\n\n  export interface SetVirtualTimePolicyRequest {\n    policy: VirtualTimePolicy;\n    /**\n     * If set, after this many virtual milliseconds have elapsed virtual time will be paused and a\n     * virtualTimeBudgetExpired event is sent.\n     */\n    budget?: number;\n    /**\n     * If set this specifies the maximum number of tasks that can be run before virtual is forced\n     * forwards to prevent deadlock.\n     */\n    maxVirtualTimeTaskStarvationCount?: integer;\n    /**\n     * If set, base::Time::Now will be overridden to initially return this value.\n     */\n    initialVirtualTime?: Network.TimeSinceEpoch;\n  }\n\n  export interface SetVirtualTimePolicyResponse extends ProtocolResponseWithError {\n    /**\n     * Absolute timestamp at which virtual time was first enabled (up time in milliseconds).\n     */\n    virtualTimeTicksBase: number;\n  }\n\n  export interface SetLocaleOverrideRequest {\n    /**\n     * ICU style C locale (e.g. \"en_US\"). If not specified or empty, disables the override and\n     * restores default host system locale.\n     */\n    locale?: string;\n  }\n\n  export interface SetTimezoneOverrideRequest {\n    /**\n     * The timezone identifier. List of supported timezones:\n     * https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt\n     * If empty, disables the override and restores default host system timezone.\n     */\n    timezoneId: string;\n  }\n\n  export interface SetVisibleSizeRequest {\n    /**\n     * Frame width (DIP).\n     */\n    width: integer;\n    /**\n     * Frame height (DIP).\n     */\n    height: integer;\n  }\n\n  export interface SetDisabledImageTypesRequest {\n    /**\n     * Image types to disable.\n     */\n    imageTypes: DisabledImageType[];\n  }\n\n  export interface SetDataSaverOverrideRequest {\n    /**\n     * Override value. Omitting the parameter disables the override.\n     */\n    dataSaverEnabled?: boolean;\n  }\n\n  export interface SetHardwareConcurrencyOverrideRequest {\n    /**\n     * Hardware concurrency to report\n     */\n    hardwareConcurrency: integer;\n  }\n\n  export interface SetUserAgentOverrideRequest {\n    /**\n     * User agent to use.\n     */\n    userAgent: string;\n    /**\n     * Browser language to emulate.\n     */\n    acceptLanguage?: string;\n    /**\n     * The platform navigator.platform should return.\n     */\n    platform?: string;\n    /**\n     * To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData\n     */\n    userAgentMetadata?: UserAgentMetadata;\n  }\n\n  export interface SetAutomationOverrideRequest {\n    /**\n     * Whether the override should be enabled.\n     */\n    enabled: boolean;\n  }\n\n  export interface SetSmallViewportHeightDifferenceOverrideRequest {\n    /**\n     * This will cause an element of size 100svh to be `difference` pixels smaller than an element\n     * of size 100lvh.\n     */\n    difference: integer;\n  }\n\n  export interface GetScreenInfosResponse extends ProtocolResponseWithError {\n    screenInfos: ScreenInfo[];\n  }\n\n  export interface AddScreenRequest {\n    /**\n     * Offset of the left edge of the screen in pixels.\n     */\n    left: integer;\n    /**\n     * Offset of the top edge of the screen in pixels.\n     */\n    top: integer;\n    /**\n     * The width of the screen in pixels.\n     */\n    width: integer;\n    /**\n     * The height of the screen in pixels.\n     */\n    height: integer;\n    /**\n     * Specifies the screen's work area. Default is entire screen.\n     */\n    workAreaInsets?: WorkAreaInsets;\n    /**\n     * Specifies the screen's device pixel ratio. Default is 1.\n     */\n    devicePixelRatio?: number;\n    /**\n     * Specifies the screen's rotation angle. Available values are 0, 90, 180 and 270. Default is 0.\n     */\n    rotation?: integer;\n    /**\n     * Specifies the screen's color depth in bits. Default is 24.\n     */\n    colorDepth?: integer;\n    /**\n     * Specifies the descriptive label for the screen. Default is none.\n     */\n    label?: string;\n    /**\n     * Indicates whether the screen is internal to the device or external, attached to the device. Default is false.\n     */\n    isInternal?: boolean;\n  }\n\n  export interface AddScreenResponse extends ProtocolResponseWithError {\n    screenInfo: ScreenInfo;\n  }\n\n  export interface RemoveScreenRequest {\n    screenId: ScreenId;\n  }\n}\n\n/**\n * EventBreakpoints permits setting JavaScript breakpoints on operations and events\n * occurring in native code invoked from JavaScript. Once breakpoint is hit, it is\n * reported through Debugger domain, similarly to regular breakpoints being hit.\n */\nexport namespace EventBreakpoints {\n\n  export interface SetInstrumentationBreakpointRequest {\n    /**\n     * Instrumentation name to stop on.\n     */\n    eventName: string;\n  }\n\n  export interface RemoveInstrumentationBreakpointRequest {\n    /**\n     * Instrumentation name to stop on.\n     */\n    eventName: string;\n  }\n}\n\n/**\n * Defines commands and events for browser extensions.\n */\nexport namespace Extensions {\n\n  /**\n   * Storage areas.\n   */\n  export const enum StorageArea {\n    Session = 'session',\n    Local = 'local',\n    Sync = 'sync',\n    Managed = 'managed',\n  }\n\n  export interface LoadUnpackedRequest {\n    /**\n     * Absolute file path.\n     */\n    path: string;\n  }\n\n  export interface LoadUnpackedResponse extends ProtocolResponseWithError {\n    /**\n     * Extension id.\n     */\n    id: string;\n  }\n\n  export interface UninstallRequest {\n    /**\n     * Extension id.\n     */\n    id: string;\n  }\n\n  export interface GetStorageItemsRequest {\n    /**\n     * ID of extension.\n     */\n    id: string;\n    /**\n     * StorageArea to retrieve data from.\n     */\n    storageArea: StorageArea;\n    /**\n     * Keys to retrieve.\n     */\n    keys?: string[];\n  }\n\n  export interface GetStorageItemsResponse extends ProtocolResponseWithError {\n    data: any;\n  }\n\n  export interface RemoveStorageItemsRequest {\n    /**\n     * ID of extension.\n     */\n    id: string;\n    /**\n     * StorageArea to remove data from.\n     */\n    storageArea: StorageArea;\n    /**\n     * Keys to remove.\n     */\n    keys: string[];\n  }\n\n  export interface ClearStorageItemsRequest {\n    /**\n     * ID of extension.\n     */\n    id: string;\n    /**\n     * StorageArea to remove data from.\n     */\n    storageArea: StorageArea;\n  }\n\n  export interface SetStorageItemsRequest {\n    /**\n     * ID of extension.\n     */\n    id: string;\n    /**\n     * StorageArea to set data in.\n     */\n    storageArea: StorageArea;\n    /**\n     * Values to set.\n     */\n    values: any;\n  }\n}\n\n/**\n * This domain allows interacting with the FedCM dialog.\n */\nexport namespace FedCm {\n\n  /**\n   * Whether this is a sign-up or sign-in action for this account, i.e.\n   * whether this account has ever been used to sign in to this RP before.\n   */\n  export const enum LoginState {\n    SignIn = 'SignIn',\n    SignUp = 'SignUp',\n  }\n\n  /**\n   * The types of FedCM dialogs.\n   */\n  export const enum DialogType {\n    AccountChooser = 'AccountChooser',\n    AutoReauthn = 'AutoReauthn',\n    ConfirmIdpLogin = 'ConfirmIdpLogin',\n    Error = 'Error',\n  }\n\n  /**\n   * The buttons on the FedCM dialog.\n   */\n  export const enum DialogButton {\n    ConfirmIdpLoginContinue = 'ConfirmIdpLoginContinue',\n    ErrorGotIt = 'ErrorGotIt',\n    ErrorMoreDetails = 'ErrorMoreDetails',\n  }\n\n  /**\n   * The URLs that each account has\n   */\n  export const enum AccountUrlType {\n    TermsOfService = 'TermsOfService',\n    PrivacyPolicy = 'PrivacyPolicy',\n  }\n\n  /**\n   * Corresponds to IdentityRequestAccount\n   */\n  export interface Account {\n    accountId: string;\n    email: string;\n    name: string;\n    givenName: string;\n    pictureUrl: string;\n    idpConfigUrl: string;\n    idpLoginUrl: string;\n    loginState: LoginState;\n    /**\n     * These two are only set if the loginState is signUp\n     */\n    termsOfServiceUrl?: string;\n    privacyPolicyUrl?: string;\n  }\n\n  export interface EnableRequest {\n    /**\n     * Allows callers to disable the promise rejection delay that would\n     * normally happen, if this is unimportant to what's being tested.\n     * (step 4 of https://fedidcg.github.io/FedCM/#browser-api-rp-sign-in)\n     */\n    disableRejectionDelay?: boolean;\n  }\n\n  export interface SelectAccountRequest {\n    dialogId: string;\n    accountIndex: integer;\n  }\n\n  export interface ClickDialogButtonRequest {\n    dialogId: string;\n    dialogButton: DialogButton;\n  }\n\n  export interface OpenUrlRequest {\n    dialogId: string;\n    accountIndex: integer;\n    accountUrlType: AccountUrlType;\n  }\n\n  export interface DismissDialogRequest {\n    dialogId: string;\n    triggerCooldown?: boolean;\n  }\n\n  export interface DialogShownEvent {\n    dialogId: string;\n    dialogType: DialogType;\n    accounts: Account[];\n    /**\n     * These exist primarily so that the caller can verify the\n     * RP context was used appropriately.\n     */\n    title: string;\n    subtitle?: string;\n  }\n\n  /**\n   * Triggered when a dialog is closed, either by user action, JS abort,\n   * or a command below.\n   */\n  export interface DialogClosedEvent {\n    dialogId: string;\n  }\n}\n\n/**\n * A domain for letting clients substitute browser's network layer with client code.\n */\nexport namespace Fetch {\n\n  /**\n   * Unique request identifier.\n   * Note that this does not identify individual HTTP requests that are part of\n   * a network request.\n   */\n  export type RequestId = OpaqueIdentifier<string, 'Protocol.Fetch.RequestId'>;\n\n  /**\n   * Stages of the request to handle. Request will intercept before the request is\n   * sent. Response will intercept after the response is received (but before response\n   * body is received).\n   */\n  export const enum RequestStage {\n    Request = 'Request',\n    Response = 'Response',\n  }\n\n  export interface RequestPattern {\n    /**\n     * Wildcards (`'*'` -> zero or more, `'?'` -> exactly one) are allowed. Escape character is\n     * backslash. Omitting is equivalent to `\"*\"`.\n     */\n    urlPattern?: string;\n    /**\n     * If set, only requests for matching resource types will be intercepted.\n     */\n    resourceType?: Network.ResourceType;\n    /**\n     * Stage at which to begin intercepting requests. Default is Request.\n     */\n    requestStage?: RequestStage;\n  }\n\n  /**\n   * Response HTTP header entry\n   */\n  export interface HeaderEntry {\n    name: string;\n    value: string;\n  }\n\n  export const enum AuthChallengeSource {\n    Server = 'Server',\n    Proxy = 'Proxy',\n  }\n\n  /**\n   * Authorization challenge for HTTP status code 401 or 407.\n   */\n  export interface AuthChallenge {\n    /**\n     * Source of the authentication challenge.\n     */\n    source?: AuthChallengeSource;\n    /**\n     * Origin of the challenger.\n     */\n    origin: string;\n    /**\n     * The authentication scheme used, such as basic or digest\n     */\n    scheme: string;\n    /**\n     * The realm of the challenge. May be empty.\n     */\n    realm: string;\n  }\n\n  export const enum AuthChallengeResponseResponse {\n    Default = 'Default',\n    CancelAuth = 'CancelAuth',\n    ProvideCredentials = 'ProvideCredentials',\n  }\n\n  /**\n   * Response to an AuthChallenge.\n   */\n  export interface AuthChallengeResponse {\n    /**\n     * The decision on what to do in response to the authorization challenge.  Default means\n     * deferring to the default behavior of the net stack, which will likely either the Cancel\n     * authentication or display a popup dialog box.\n     */\n    response: AuthChallengeResponseResponse;\n    /**\n     * The username to provide, possibly empty. Should only be set if response is\n     * ProvideCredentials.\n     */\n    username?: string;\n    /**\n     * The password to provide, possibly empty. Should only be set if response is\n     * ProvideCredentials.\n     */\n    password?: string;\n  }\n\n  export interface EnableRequest {\n    /**\n     * If specified, only requests matching any of these patterns will produce\n     * fetchRequested event and will be paused until clients response. If not set,\n     * all requests will be affected.\n     */\n    patterns?: RequestPattern[];\n    /**\n     * If true, authRequired events will be issued and requests will be paused\n     * expecting a call to continueWithAuth.\n     */\n    handleAuthRequests?: boolean;\n  }\n\n  export interface FailRequestRequest {\n    /**\n     * An id the client received in requestPaused event.\n     */\n    requestId: RequestId;\n    /**\n     * Causes the request to fail with the given reason.\n     */\n    errorReason: Network.ErrorReason;\n  }\n\n  export interface FulfillRequestRequest {\n    /**\n     * An id the client received in requestPaused event.\n     */\n    requestId: RequestId;\n    /**\n     * An HTTP response code.\n     */\n    responseCode: integer;\n    /**\n     * Response headers.\n     */\n    responseHeaders?: HeaderEntry[];\n    /**\n     * Alternative way of specifying response headers as a \\0-separated\n     * series of name: value pairs. Prefer the above method unless you\n     * need to represent some non-UTF8 values that can't be transmitted\n     * over the protocol as text.\n     */\n    binaryResponseHeaders?: binary;\n    /**\n     * A response body. If absent, original response body will be used if\n     * the request is intercepted at the response stage and empty body\n     * will be used if the request is intercepted at the request stage.\n     */\n    body?: binary;\n    /**\n     * A textual representation of responseCode.\n     * If absent, a standard phrase matching responseCode is used.\n     */\n    responsePhrase?: string;\n  }\n\n  export interface ContinueRequestRequest {\n    /**\n     * An id the client received in requestPaused event.\n     */\n    requestId: RequestId;\n    /**\n     * If set, the request url will be modified in a way that's not observable by page.\n     */\n    url?: string;\n    /**\n     * If set, the request method is overridden.\n     */\n    method?: string;\n    /**\n     * If set, overrides the post data in the request.\n     */\n    postData?: binary;\n    /**\n     * If set, overrides the request headers. Note that the overrides do not\n     * extend to subsequent redirect hops, if a redirect happens. Another override\n     * may be applied to a different request produced by a redirect.\n     */\n    headers?: HeaderEntry[];\n    /**\n     * If set, overrides response interception behavior for this request.\n     */\n    interceptResponse?: boolean;\n  }\n\n  export interface ContinueWithAuthRequest {\n    /**\n     * An id the client received in authRequired event.\n     */\n    requestId: RequestId;\n    /**\n     * Response to  with an authChallenge.\n     */\n    authChallengeResponse: AuthChallengeResponse;\n  }\n\n  export interface ContinueResponseRequest {\n    /**\n     * An id the client received in requestPaused event.\n     */\n    requestId: RequestId;\n    /**\n     * An HTTP response code. If absent, original response code will be used.\n     */\n    responseCode?: integer;\n    /**\n     * A textual representation of responseCode.\n     * If absent, a standard phrase matching responseCode is used.\n     */\n    responsePhrase?: string;\n    /**\n     * Response headers. If absent, original response headers will be used.\n     */\n    responseHeaders?: HeaderEntry[];\n    /**\n     * Alternative way of specifying response headers as a \\0-separated\n     * series of name: value pairs. Prefer the above method unless you\n     * need to represent some non-UTF8 values that can't be transmitted\n     * over the protocol as text.\n     */\n    binaryResponseHeaders?: binary;\n  }\n\n  export interface GetResponseBodyRequest {\n    /**\n     * Identifier for the intercepted request to get body for.\n     */\n    requestId: RequestId;\n  }\n\n  export interface GetResponseBodyResponse extends ProtocolResponseWithError {\n    /**\n     * Response body.\n     */\n    body: string;\n    /**\n     * True, if content was sent as base64.\n     */\n    base64Encoded: boolean;\n  }\n\n  export interface TakeResponseBodyAsStreamRequest {\n    requestId: RequestId;\n  }\n\n  export interface TakeResponseBodyAsStreamResponse extends ProtocolResponseWithError {\n    stream: IO.StreamHandle;\n  }\n\n  /**\n   * Issued when the domain is enabled and the request URL matches the\n   * specified filter. The request is paused until the client responds\n   * with one of continueRequest, failRequest or fulfillRequest.\n   * The stage of the request can be determined by presence of responseErrorReason\n   * and responseStatusCode -- the request is at the response stage if either\n   * of these fields is present and in the request stage otherwise.\n   * Redirect responses and subsequent requests are reported similarly to regular\n   * responses and requests. Redirect responses may be distinguished by the value\n   * of `responseStatusCode` (which is one of 301, 302, 303, 307, 308) along with\n   * presence of the `location` header. Requests resulting from a redirect will\n   * have `redirectedRequestId` field set.\n   */\n  export interface RequestPausedEvent {\n    /**\n     * Each request the page makes will have a unique id.\n     */\n    requestId: RequestId;\n    /**\n     * The details of the request.\n     */\n    request: Network.Request;\n    /**\n     * The id of the frame that initiated the request.\n     */\n    frameId: Page.FrameId;\n    /**\n     * How the requested resource will be used.\n     */\n    resourceType: Network.ResourceType;\n    /**\n     * Response error if intercepted at response stage.\n     */\n    responseErrorReason?: Network.ErrorReason;\n    /**\n     * Response code if intercepted at response stage.\n     */\n    responseStatusCode?: integer;\n    /**\n     * Response status text if intercepted at response stage.\n     */\n    responseStatusText?: string;\n    /**\n     * Response headers if intercepted at the response stage.\n     */\n    responseHeaders?: HeaderEntry[];\n    /**\n     * If the intercepted request had a corresponding Network.requestWillBeSent event fired for it,\n     * then this networkId will be the same as the requestId present in the requestWillBeSent event.\n     */\n    networkId?: Network.RequestId;\n    /**\n     * If the request is due to a redirect response from the server, the id of the request that\n     * has caused the redirect.\n     */\n    redirectedRequestId?: RequestId;\n  }\n\n  /**\n   * Issued when the domain is enabled with handleAuthRequests set to true.\n   * The request is paused until client responds with continueWithAuth.\n   */\n  export interface AuthRequiredEvent {\n    /**\n     * Each request the page makes will have a unique id.\n     */\n    requestId: RequestId;\n    /**\n     * The details of the request.\n     */\n    request: Network.Request;\n    /**\n     * The id of the frame that initiated the request.\n     */\n    frameId: Page.FrameId;\n    /**\n     * How the requested resource will be used.\n     */\n    resourceType: Network.ResourceType;\n    /**\n     * Details of the Authorization Challenge encountered.\n     * If this is set, client should respond with continueRequest that\n     * contains AuthChallengeResponse.\n     */\n    authChallenge: AuthChallenge;\n  }\n}\n\nexport namespace FileSystem {\n\n  export interface File {\n    name: string;\n    /**\n     * Timestamp\n     */\n    lastModified: Network.TimeSinceEpoch;\n    /**\n     * Size in bytes\n     */\n    size: number;\n    type: string;\n  }\n\n  export interface Directory {\n    name: string;\n    nestedDirectories: string[];\n    /**\n     * Files that are directly nested under this directory.\n     */\n    nestedFiles: File[];\n  }\n\n  export interface BucketFileSystemLocator {\n    /**\n     * Storage key\n     */\n    storageKey: Storage.SerializedStorageKey;\n    /**\n     * Bucket name. Not passing a `bucketName` will retrieve the default Bucket. (https://developer.mozilla.org/en-US/docs/Web/API/Storage_API#storage_buckets)\n     */\n    bucketName?: string;\n    /**\n     * Path to the directory using each path component as an array item.\n     */\n    pathComponents: string[];\n  }\n\n  export interface GetDirectoryRequest {\n    bucketFileSystemLocator: BucketFileSystemLocator;\n  }\n\n  export interface GetDirectoryResponse extends ProtocolResponseWithError {\n    /**\n     * Returns the directory object at the path.\n     */\n    directory: Directory;\n  }\n}\n\n/**\n * This domain provides experimental commands only supported in headless mode.\n */\nexport namespace HeadlessExperimental {\n\n  export const enum ScreenshotParamsFormat {\n    Jpeg = 'jpeg',\n    Png = 'png',\n    Webp = 'webp',\n  }\n\n  /**\n   * Encoding options for a screenshot.\n   */\n  export interface ScreenshotParams {\n    /**\n     * Image compression format (defaults to png).\n     */\n    format?: ScreenshotParamsFormat;\n    /**\n     * Compression quality from range [0..100] (jpeg and webp only).\n     */\n    quality?: integer;\n    /**\n     * Optimize image encoding for speed, not for resulting size (defaults to false)\n     */\n    optimizeForSpeed?: boolean;\n  }\n\n  export interface BeginFrameRequest {\n    /**\n     * Timestamp of this BeginFrame in Renderer TimeTicks (milliseconds of uptime). If not set,\n     * the current time will be used.\n     */\n    frameTimeTicks?: number;\n    /**\n     * The interval between BeginFrames that is reported to the compositor, in milliseconds.\n     * Defaults to a 60 frames/second interval, i.e. about 16.666 milliseconds.\n     */\n    interval?: number;\n    /**\n     * Whether updates should not be committed and drawn onto the display. False by default. If\n     * true, only side effects of the BeginFrame will be run, such as layout and animations, but\n     * any visual updates may not be visible on the display or in screenshots.\n     */\n    noDisplayUpdates?: boolean;\n    /**\n     * If set, a screenshot of the frame will be captured and returned in the response. Otherwise,\n     * no screenshot will be captured. Note that capturing a screenshot can fail, for example,\n     * during renderer initialization. In such a case, no screenshot data will be returned.\n     */\n    screenshot?: ScreenshotParams;\n  }\n\n  export interface BeginFrameResponse extends ProtocolResponseWithError {\n    /**\n     * Whether the BeginFrame resulted in damage and, thus, a new frame was committed to the\n     * display. Reported for diagnostic uses, may be removed in the future.\n     */\n    hasDamage: boolean;\n    /**\n     * Base64-encoded image data of the screenshot, if one was requested and successfully taken.\n     */\n    screenshotData?: binary;\n  }\n}\n\n/**\n * Input/Output operations for streams produced by DevTools.\n */\nexport namespace IO {\n\n  /**\n   * This is either obtained from another method or specified as `blob:<uuid>` where\n   * `<uuid>` is an UUID of a Blob.\n   */\n  export type StreamHandle = OpaqueIdentifier<string, 'Protocol.IO.StreamHandle'>;\n\n  export interface CloseRequest {\n    /**\n     * Handle of the stream to close.\n     */\n    handle: StreamHandle;\n  }\n\n  export interface ReadRequest {\n    /**\n     * Handle of the stream to read.\n     */\n    handle: StreamHandle;\n    /**\n     * Seek to the specified offset before reading (if not specified, proceed with offset\n     * following the last read). Some types of streams may only support sequential reads.\n     */\n    offset?: integer;\n    /**\n     * Maximum number of bytes to read (left upon the agent discretion if not specified).\n     */\n    size?: integer;\n  }\n\n  export interface ReadResponse extends ProtocolResponseWithError {\n    /**\n     * Set if the data is base64-encoded\n     */\n    base64Encoded?: boolean;\n    /**\n     * Data that were read.\n     */\n    data: string;\n    /**\n     * Set if the end-of-file condition occurred while reading.\n     */\n    eof: boolean;\n  }\n\n  export interface ResolveBlobRequest {\n    /**\n     * Object id of a Blob object wrapper.\n     */\n    objectId: Runtime.RemoteObjectId;\n  }\n\n  export interface ResolveBlobResponse extends ProtocolResponseWithError {\n    /**\n     * UUID of the specified Blob.\n     */\n    uuid: string;\n  }\n}\n\nexport namespace IndexedDB {\n\n  /**\n   * Database with an array of object stores.\n   */\n  export interface DatabaseWithObjectStores {\n    /**\n     * Database name.\n     */\n    name: string;\n    /**\n     * Database version (type is not 'integer', as the standard\n     * requires the version number to be 'unsigned long long')\n     */\n    version: number;\n    /**\n     * Object stores in this database.\n     */\n    objectStores: ObjectStore[];\n  }\n\n  /**\n   * Object store.\n   */\n  export interface ObjectStore {\n    /**\n     * Object store name.\n     */\n    name: string;\n    /**\n     * Object store key path.\n     */\n    keyPath: KeyPath;\n    /**\n     * If true, object store has auto increment flag set.\n     */\n    autoIncrement: boolean;\n    /**\n     * Indexes in this object store.\n     */\n    indexes: ObjectStoreIndex[];\n  }\n\n  /**\n   * Object store index.\n   */\n  export interface ObjectStoreIndex {\n    /**\n     * Index name.\n     */\n    name: string;\n    /**\n     * Index key path.\n     */\n    keyPath: KeyPath;\n    /**\n     * If true, index is unique.\n     */\n    unique: boolean;\n    /**\n     * If true, index allows multiple entries for a key.\n     */\n    multiEntry: boolean;\n  }\n\n  export const enum KeyType {\n    Number = 'number',\n    String = 'string',\n    Date = 'date',\n    Array = 'array',\n  }\n\n  /**\n   * Key.\n   */\n  export interface Key {\n    /**\n     * Key type.\n     */\n    type: KeyType;\n    /**\n     * Number value.\n     */\n    number?: number;\n    /**\n     * String value.\n     */\n    string?: string;\n    /**\n     * Date value.\n     */\n    date?: number;\n    /**\n     * Array value.\n     */\n    array?: Key[];\n  }\n\n  /**\n   * Key range.\n   */\n  export interface KeyRange {\n    /**\n     * Lower bound.\n     */\n    lower?: Key;\n    /**\n     * Upper bound.\n     */\n    upper?: Key;\n    /**\n     * If true lower bound is open.\n     */\n    lowerOpen: boolean;\n    /**\n     * If true upper bound is open.\n     */\n    upperOpen: boolean;\n  }\n\n  /**\n   * Data entry.\n   */\n  export interface DataEntry {\n    /**\n     * Key object.\n     */\n    key: Runtime.RemoteObject;\n    /**\n     * Primary key object.\n     */\n    primaryKey: Runtime.RemoteObject;\n    /**\n     * Value object.\n     */\n    value: Runtime.RemoteObject;\n  }\n\n  export const enum KeyPathType {\n    Null = 'null',\n    String = 'string',\n    Array = 'array',\n  }\n\n  /**\n   * Key path.\n   */\n  export interface KeyPath {\n    /**\n     * Key path type.\n     */\n    type: KeyPathType;\n    /**\n     * String value.\n     */\n    string?: string;\n    /**\n     * Array value.\n     */\n    array?: string[];\n  }\n\n  export interface ClearObjectStoreRequest {\n    /**\n     * At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.\n     * Security origin.\n     */\n    securityOrigin?: string;\n    /**\n     * Storage key.\n     */\n    storageKey?: string;\n    /**\n     * Storage bucket. If not specified, it uses the default bucket.\n     */\n    storageBucket?: Storage.StorageBucket;\n    /**\n     * Database name.\n     */\n    databaseName: string;\n    /**\n     * Object store name.\n     */\n    objectStoreName: string;\n  }\n\n  export interface DeleteDatabaseRequest {\n    /**\n     * At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.\n     * Security origin.\n     */\n    securityOrigin?: string;\n    /**\n     * Storage key.\n     */\n    storageKey?: string;\n    /**\n     * Storage bucket. If not specified, it uses the default bucket.\n     */\n    storageBucket?: Storage.StorageBucket;\n    /**\n     * Database name.\n     */\n    databaseName: string;\n  }\n\n  export interface DeleteObjectStoreEntriesRequest {\n    /**\n     * At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.\n     * Security origin.\n     */\n    securityOrigin?: string;\n    /**\n     * Storage key.\n     */\n    storageKey?: string;\n    /**\n     * Storage bucket. If not specified, it uses the default bucket.\n     */\n    storageBucket?: Storage.StorageBucket;\n    databaseName: string;\n    objectStoreName: string;\n    /**\n     * Range of entry keys to delete\n     */\n    keyRange: KeyRange;\n  }\n\n  export interface RequestDataRequest {\n    /**\n     * At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.\n     * Security origin.\n     */\n    securityOrigin?: string;\n    /**\n     * Storage key.\n     */\n    storageKey?: string;\n    /**\n     * Storage bucket. If not specified, it uses the default bucket.\n     */\n    storageBucket?: Storage.StorageBucket;\n    /**\n     * Database name.\n     */\n    databaseName: string;\n    /**\n     * Object store name.\n     */\n    objectStoreName: string;\n    /**\n     * Index name. If not specified, it performs an object store data request.\n     */\n    indexName?: string;\n    /**\n     * Number of records to skip.\n     */\n    skipCount: integer;\n    /**\n     * Number of records to fetch.\n     */\n    pageSize: integer;\n    /**\n     * Key range.\n     */\n    keyRange?: KeyRange;\n  }\n\n  export interface RequestDataResponse extends ProtocolResponseWithError {\n    /**\n     * Array of object store data entries.\n     */\n    objectStoreDataEntries: DataEntry[];\n    /**\n     * If true, there are more entries to fetch in the given range.\n     */\n    hasMore: boolean;\n  }\n\n  export interface GetMetadataRequest {\n    /**\n     * At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.\n     * Security origin.\n     */\n    securityOrigin?: string;\n    /**\n     * Storage key.\n     */\n    storageKey?: string;\n    /**\n     * Storage bucket. If not specified, it uses the default bucket.\n     */\n    storageBucket?: Storage.StorageBucket;\n    /**\n     * Database name.\n     */\n    databaseName: string;\n    /**\n     * Object store name.\n     */\n    objectStoreName: string;\n  }\n\n  export interface GetMetadataResponse extends ProtocolResponseWithError {\n    /**\n     * the entries count\n     */\n    entriesCount: number;\n    /**\n     * the current value of key generator, to become the next inserted\n     * key into the object store. Valid if objectStore.autoIncrement\n     * is true.\n     */\n    keyGeneratorValue: number;\n  }\n\n  export interface RequestDatabaseRequest {\n    /**\n     * At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.\n     * Security origin.\n     */\n    securityOrigin?: string;\n    /**\n     * Storage key.\n     */\n    storageKey?: string;\n    /**\n     * Storage bucket. If not specified, it uses the default bucket.\n     */\n    storageBucket?: Storage.StorageBucket;\n    /**\n     * Database name.\n     */\n    databaseName: string;\n  }\n\n  export interface RequestDatabaseResponse extends ProtocolResponseWithError {\n    /**\n     * Database with an array of object stores.\n     */\n    databaseWithObjectStores: DatabaseWithObjectStores;\n  }\n\n  export interface RequestDatabaseNamesRequest {\n    /**\n     * At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.\n     * Security origin.\n     */\n    securityOrigin?: string;\n    /**\n     * Storage key.\n     */\n    storageKey?: string;\n    /**\n     * Storage bucket. If not specified, it uses the default bucket.\n     */\n    storageBucket?: Storage.StorageBucket;\n  }\n\n  export interface RequestDatabaseNamesResponse extends ProtocolResponseWithError {\n    /**\n     * Database names for origin.\n     */\n    databaseNames: string[];\n  }\n}\n\nexport namespace Input {\n\n  export interface TouchPoint {\n    /**\n     * X coordinate of the event relative to the main frame's viewport in CSS pixels.\n     */\n    x: number;\n    /**\n     * Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to\n     * the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.\n     */\n    y: number;\n    /**\n     * X radius of the touch area (default: 1.0).\n     */\n    radiusX?: number;\n    /**\n     * Y radius of the touch area (default: 1.0).\n     */\n    radiusY?: number;\n    /**\n     * Rotation angle (default: 0.0).\n     */\n    rotationAngle?: number;\n    /**\n     * Force (default: 1.0).\n     */\n    force?: number;\n    /**\n     * The normalized tangential pressure, which has a range of [-1,1] (default: 0).\n     */\n    tangentialPressure?: number;\n    /**\n     * The plane angle between the Y-Z plane and the plane containing both the stylus axis and the Y axis, in degrees of the range [-90,90], a positive tiltX is to the right (default: 0)\n     */\n    tiltX?: number;\n    /**\n     * The plane angle between the X-Z plane and the plane containing both the stylus axis and the X axis, in degrees of the range [-90,90], a positive tiltY is towards the user (default: 0).\n     */\n    tiltY?: number;\n    /**\n     * The clockwise rotation of a pen stylus around its own major axis, in degrees in the range [0,359] (default: 0).\n     */\n    twist?: integer;\n    /**\n     * Identifier used to track touch sources between events, must be unique within an event.\n     */\n    id?: number;\n  }\n\n  export const enum GestureSourceType {\n    Default = 'default',\n    Touch = 'touch',\n    Mouse = 'mouse',\n  }\n\n  export const enum MouseButton {\n    None = 'none',\n    Left = 'left',\n    Middle = 'middle',\n    Right = 'right',\n    Back = 'back',\n    Forward = 'forward',\n  }\n\n  /**\n   * UTC time in seconds, counted from January 1, 1970.\n   */\n  export type TimeSinceEpoch = number;\n\n  export interface DragDataItem {\n    /**\n     * Mime type of the dragged data.\n     */\n    mimeType: string;\n    /**\n     * Depending of the value of `mimeType`, it contains the dragged link,\n     * text, HTML markup or any other data.\n     */\n    data: string;\n    /**\n     * Title associated with a link. Only valid when `mimeType` == \"text/uri-list\".\n     */\n    title?: string;\n    /**\n     * Stores the base URL for the contained markup. Only valid when `mimeType`\n     * == \"text/html\".\n     */\n    baseURL?: string;\n  }\n\n  export interface DragData {\n    items: DragDataItem[];\n    /**\n     * List of filenames that should be included when dropping\n     */\n    files?: string[];\n    /**\n     * Bit field representing allowed drag operations. Copy = 1, Link = 2, Move = 16\n     */\n    dragOperationsMask: integer;\n  }\n\n  export const enum DispatchDragEventRequestType {\n    DragEnter = 'dragEnter',\n    DragOver = 'dragOver',\n    Drop = 'drop',\n    DragCancel = 'dragCancel',\n  }\n\n  export interface DispatchDragEventRequest {\n    /**\n     * Type of the drag event.\n     */\n    type: DispatchDragEventRequestType;\n    /**\n     * X coordinate of the event relative to the main frame's viewport in CSS pixels.\n     */\n    x: number;\n    /**\n     * Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to\n     * the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.\n     */\n    y: number;\n    data: DragData;\n    /**\n     * Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8\n     * (default: 0).\n     */\n    modifiers?: integer;\n  }\n\n  export const enum DispatchKeyEventRequestType {\n    KeyDown = 'keyDown',\n    KeyUp = 'keyUp',\n    RawKeyDown = 'rawKeyDown',\n    Char = 'char',\n  }\n\n  export interface DispatchKeyEventRequest {\n    /**\n     * Type of the key event.\n     */\n    type: DispatchKeyEventRequestType;\n    /**\n     * Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8\n     * (default: 0).\n     */\n    modifiers?: integer;\n    /**\n     * Time at which the event occurred.\n     */\n    timestamp?: TimeSinceEpoch;\n    /**\n     * Text as generated by processing a virtual key code with a keyboard layout. Not needed for\n     * for `keyUp` and `rawKeyDown` events (default: \"\")\n     */\n    text?: string;\n    /**\n     * Text that would have been generated by the keyboard if no modifiers were pressed (except for\n     * shift). Useful for shortcut (accelerator) key handling (default: \"\").\n     */\n    unmodifiedText?: string;\n    /**\n     * Unique key identifier (e.g., 'U+0041') (default: \"\").\n     */\n    keyIdentifier?: string;\n    /**\n     * Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: \"\").\n     */\n    code?: string;\n    /**\n     * Unique DOM defined string value describing the meaning of the key in the context of active\n     * modifiers, keyboard layout, etc (e.g., 'AltGr') (default: \"\").\n     */\n    key?: string;\n    /**\n     * Windows virtual key code (default: 0).\n     */\n    windowsVirtualKeyCode?: integer;\n    /**\n     * Native virtual key code (default: 0).\n     */\n    nativeVirtualKeyCode?: integer;\n    /**\n     * Whether the event was generated from auto repeat (default: false).\n     */\n    autoRepeat?: boolean;\n    /**\n     * Whether the event was generated from the keypad (default: false).\n     */\n    isKeypad?: boolean;\n    /**\n     * Whether the event was a system key event (default: false).\n     */\n    isSystemKey?: boolean;\n    /**\n     * Whether the event was from the left or right side of the keyboard. 1=Left, 2=Right (default:\n     * 0).\n     */\n    location?: integer;\n    /**\n     * Editing commands to send with the key event (e.g., 'selectAll') (default: []).\n     * These are related to but not equal the command names used in `document.execCommand` and NSStandardKeyBindingResponding.\n     * See https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h for valid command names.\n     */\n    commands?: string[];\n  }\n\n  export interface InsertTextRequest {\n    /**\n     * The text to insert.\n     */\n    text: string;\n  }\n\n  export interface ImeSetCompositionRequest {\n    /**\n     * The text to insert\n     */\n    text: string;\n    /**\n     * selection start\n     */\n    selectionStart: integer;\n    /**\n     * selection end\n     */\n    selectionEnd: integer;\n    /**\n     * replacement start\n     */\n    replacementStart?: integer;\n    /**\n     * replacement end\n     */\n    replacementEnd?: integer;\n  }\n\n  export const enum DispatchMouseEventRequestType {\n    MousePressed = 'mousePressed',\n    MouseReleased = 'mouseReleased',\n    MouseMoved = 'mouseMoved',\n    MouseWheel = 'mouseWheel',\n  }\n\n  export const enum DispatchMouseEventRequestPointerType {\n    Mouse = 'mouse',\n    Pen = 'pen',\n  }\n\n  export interface DispatchMouseEventRequest {\n    /**\n     * Type of the mouse event.\n     */\n    type: DispatchMouseEventRequestType;\n    /**\n     * X coordinate of the event relative to the main frame's viewport in CSS pixels.\n     */\n    x: number;\n    /**\n     * Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to\n     * the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.\n     */\n    y: number;\n    /**\n     * Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8\n     * (default: 0).\n     */\n    modifiers?: integer;\n    /**\n     * Time at which the event occurred.\n     */\n    timestamp?: TimeSinceEpoch;\n    /**\n     * Mouse button (default: \"none\").\n     */\n    button?: MouseButton;\n    /**\n     * A number indicating which buttons are pressed on the mouse when a mouse event is triggered.\n     * Left=1, Right=2, Middle=4, Back=8, Forward=16, None=0.\n     */\n    buttons?: integer;\n    /**\n     * Number of times the mouse button was clicked (default: 0).\n     */\n    clickCount?: integer;\n    /**\n     * The normalized pressure, which has a range of [0,1] (default: 0).\n     */\n    force?: number;\n    /**\n     * The normalized tangential pressure, which has a range of [-1,1] (default: 0).\n     */\n    tangentialPressure?: number;\n    /**\n     * The plane angle between the Y-Z plane and the plane containing both the stylus axis and the Y axis, in degrees of the range [-90,90], a positive tiltX is to the right (default: 0).\n     */\n    tiltX?: number;\n    /**\n     * The plane angle between the X-Z plane and the plane containing both the stylus axis and the X axis, in degrees of the range [-90,90], a positive tiltY is towards the user (default: 0).\n     */\n    tiltY?: number;\n    /**\n     * The clockwise rotation of a pen stylus around its own major axis, in degrees in the range [0,359] (default: 0).\n     */\n    twist?: integer;\n    /**\n     * X delta in CSS pixels for mouse wheel event (default: 0).\n     */\n    deltaX?: number;\n    /**\n     * Y delta in CSS pixels for mouse wheel event (default: 0).\n     */\n    deltaY?: number;\n    /**\n     * Pointer type (default: \"mouse\").\n     */\n    pointerType?: DispatchMouseEventRequestPointerType;\n  }\n\n  export const enum DispatchTouchEventRequestType {\n    TouchStart = 'touchStart',\n    TouchEnd = 'touchEnd',\n    TouchMove = 'touchMove',\n    TouchCancel = 'touchCancel',\n  }\n\n  export interface DispatchTouchEventRequest {\n    /**\n     * Type of the touch event. TouchEnd and TouchCancel must not contain any touch points, while\n     * TouchStart and TouchMove must contains at least one.\n     */\n    type: DispatchTouchEventRequestType;\n    /**\n     * Active touch points on the touch device. One event per any changed point (compared to\n     * previous touch event in a sequence) is generated, emulating pressing/moving/releasing points\n     * one by one.\n     */\n    touchPoints: TouchPoint[];\n    /**\n     * Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8\n     * (default: 0).\n     */\n    modifiers?: integer;\n    /**\n     * Time at which the event occurred.\n     */\n    timestamp?: TimeSinceEpoch;\n  }\n\n  export const enum EmulateTouchFromMouseEventRequestType {\n    MousePressed = 'mousePressed',\n    MouseReleased = 'mouseReleased',\n    MouseMoved = 'mouseMoved',\n    MouseWheel = 'mouseWheel',\n  }\n\n  export interface EmulateTouchFromMouseEventRequest {\n    /**\n     * Type of the mouse event.\n     */\n    type: EmulateTouchFromMouseEventRequestType;\n    /**\n     * X coordinate of the mouse pointer in DIP.\n     */\n    x: integer;\n    /**\n     * Y coordinate of the mouse pointer in DIP.\n     */\n    y: integer;\n    /**\n     * Mouse button. Only \"none\", \"left\", \"right\" are supported.\n     */\n    button: MouseButton;\n    /**\n     * Time at which the event occurred (default: current time).\n     */\n    timestamp?: TimeSinceEpoch;\n    /**\n     * X delta in DIP for mouse wheel event (default: 0).\n     */\n    deltaX?: number;\n    /**\n     * Y delta in DIP for mouse wheel event (default: 0).\n     */\n    deltaY?: number;\n    /**\n     * Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8\n     * (default: 0).\n     */\n    modifiers?: integer;\n    /**\n     * Number of times the mouse button was clicked (default: 0).\n     */\n    clickCount?: integer;\n  }\n\n  export interface SetIgnoreInputEventsRequest {\n    /**\n     * Ignores input events processing when set to true.\n     */\n    ignore: boolean;\n  }\n\n  export interface SetInterceptDragsRequest {\n    enabled: boolean;\n  }\n\n  export interface SynthesizePinchGestureRequest {\n    /**\n     * X coordinate of the start of the gesture in CSS pixels.\n     */\n    x: number;\n    /**\n     * Y coordinate of the start of the gesture in CSS pixels.\n     */\n    y: number;\n    /**\n     * Relative scale factor after zooming (>1.0 zooms in, <1.0 zooms out).\n     */\n    scaleFactor: number;\n    /**\n     * Relative pointer speed in pixels per second (default: 800).\n     */\n    relativeSpeed?: integer;\n    /**\n     * Which type of input events to be generated (default: 'default', which queries the platform\n     * for the preferred input type).\n     */\n    gestureSourceType?: GestureSourceType;\n  }\n\n  export interface SynthesizeScrollGestureRequest {\n    /**\n     * X coordinate of the start of the gesture in CSS pixels.\n     */\n    x: number;\n    /**\n     * Y coordinate of the start of the gesture in CSS pixels.\n     */\n    y: number;\n    /**\n     * The distance to scroll along the X axis (positive to scroll left).\n     */\n    xDistance?: number;\n    /**\n     * The distance to scroll along the Y axis (positive to scroll up).\n     */\n    yDistance?: number;\n    /**\n     * The number of additional pixels to scroll back along the X axis, in addition to the given\n     * distance.\n     */\n    xOverscroll?: number;\n    /**\n     * The number of additional pixels to scroll back along the Y axis, in addition to the given\n     * distance.\n     */\n    yOverscroll?: number;\n    /**\n     * Prevent fling (default: true).\n     */\n    preventFling?: boolean;\n    /**\n     * Swipe speed in pixels per second (default: 800).\n     */\n    speed?: integer;\n    /**\n     * Which type of input events to be generated (default: 'default', which queries the platform\n     * for the preferred input type).\n     */\n    gestureSourceType?: GestureSourceType;\n    /**\n     * The number of times to repeat the gesture (default: 0).\n     */\n    repeatCount?: integer;\n    /**\n     * The number of milliseconds delay between each repeat. (default: 250).\n     */\n    repeatDelayMs?: integer;\n    /**\n     * The name of the interaction markers to generate, if not empty (default: \"\").\n     */\n    interactionMarkerName?: string;\n  }\n\n  export interface SynthesizeTapGestureRequest {\n    /**\n     * X coordinate of the start of the gesture in CSS pixels.\n     */\n    x: number;\n    /**\n     * Y coordinate of the start of the gesture in CSS pixels.\n     */\n    y: number;\n    /**\n     * Duration between touchdown and touchup events in ms (default: 50).\n     */\n    duration?: integer;\n    /**\n     * Number of times to perform the tap (e.g. 2 for double tap, default: 1).\n     */\n    tapCount?: integer;\n    /**\n     * Which type of input events to be generated (default: 'default', which queries the platform\n     * for the preferred input type).\n     */\n    gestureSourceType?: GestureSourceType;\n  }\n\n  /**\n   * Emitted only when `Input.setInterceptDrags` is enabled. Use this data with `Input.dispatchDragEvent` to\n   * restore normal drag and drop behavior.\n   */\n  export interface DragInterceptedEvent {\n    data: DragData;\n  }\n}\n\nexport namespace Inspector {\n\n  /**\n   * Fired when remote debugging connection is about to be terminated. Contains detach reason.\n   */\n  export interface DetachedEvent {\n    /**\n     * The reason why connection has been terminated.\n     */\n    reason: string;\n  }\n}\n\nexport namespace LayerTree {\n\n  /**\n   * Unique Layer identifier.\n   */\n  export type LayerId = OpaqueIdentifier<string, 'Protocol.LayerTree.LayerId'>;\n\n  /**\n   * Unique snapshot identifier.\n   */\n  export type SnapshotId = OpaqueIdentifier<string, 'Protocol.LayerTree.SnapshotId'>;\n\n  export const enum ScrollRectType {\n    RepaintsOnScroll = 'RepaintsOnScroll',\n    TouchEventHandler = 'TouchEventHandler',\n    WheelEventHandler = 'WheelEventHandler',\n  }\n\n  /**\n   * Rectangle where scrolling happens on the main thread.\n   */\n  export interface ScrollRect {\n    /**\n     * Rectangle itself.\n     */\n    rect: DOM.Rect;\n    /**\n     * Reason for rectangle to force scrolling on the main thread\n     */\n    type: ScrollRectType;\n  }\n\n  /**\n   * Sticky position constraints.\n   */\n  export interface StickyPositionConstraint {\n    /**\n     * Layout rectangle of the sticky element before being shifted\n     */\n    stickyBoxRect: DOM.Rect;\n    /**\n     * Layout rectangle of the containing block of the sticky element\n     */\n    containingBlockRect: DOM.Rect;\n    /**\n     * The nearest sticky layer that shifts the sticky box\n     */\n    nearestLayerShiftingStickyBox?: LayerId;\n    /**\n     * The nearest sticky layer that shifts the containing block\n     */\n    nearestLayerShiftingContainingBlock?: LayerId;\n  }\n\n  /**\n   * Serialized fragment of layer picture along with its offset within the layer.\n   */\n  export interface PictureTile {\n    /**\n     * Offset from owning layer left boundary\n     */\n    x: number;\n    /**\n     * Offset from owning layer top boundary\n     */\n    y: number;\n    /**\n     * Base64-encoded snapshot data.\n     */\n    picture: binary;\n  }\n\n  /**\n   * Information about a compositing layer.\n   */\n  export interface Layer {\n    /**\n     * The unique id for this layer.\n     */\n    layerId: LayerId;\n    /**\n     * The id of parent (not present for root).\n     */\n    parentLayerId?: LayerId;\n    /**\n     * The backend id for the node associated with this layer.\n     */\n    backendNodeId?: DOM.BackendNodeId;\n    /**\n     * Offset from parent layer, X coordinate.\n     */\n    offsetX: number;\n    /**\n     * Offset from parent layer, Y coordinate.\n     */\n    offsetY: number;\n    /**\n     * Layer width.\n     */\n    width: number;\n    /**\n     * Layer height.\n     */\n    height: number;\n    /**\n     * Transformation matrix for layer, default is identity matrix\n     */\n    transform?: number[];\n    /**\n     * Transform anchor point X, absent if no transform specified\n     */\n    anchorX?: number;\n    /**\n     * Transform anchor point Y, absent if no transform specified\n     */\n    anchorY?: number;\n    /**\n     * Transform anchor point Z, absent if no transform specified\n     */\n    anchorZ?: number;\n    /**\n     * Indicates how many time this layer has painted.\n     */\n    paintCount: integer;\n    /**\n     * Indicates whether this layer hosts any content, rather than being used for\n     * transform/scrolling purposes only.\n     */\n    drawsContent: boolean;\n    /**\n     * Set if layer is not visible.\n     */\n    invisible?: boolean;\n    /**\n     * Rectangles scrolling on main thread only.\n     */\n    scrollRects?: ScrollRect[];\n    /**\n     * Sticky position constraint information\n     */\n    stickyPositionConstraint?: StickyPositionConstraint;\n  }\n\n  /**\n   * Array of timings, one per paint step.\n   */\n  export type PaintProfile = number[];\n\n  export interface CompositingReasonsRequest {\n    /**\n     * The id of the layer for which we want to get the reasons it was composited.\n     */\n    layerId: LayerId;\n  }\n\n  export interface CompositingReasonsResponse extends ProtocolResponseWithError {\n    /**\n     * A list of strings specifying reasons for the given layer to become composited.\n     */\n    compositingReasons: string[];\n    /**\n     * A list of strings specifying reason IDs for the given layer to become composited.\n     */\n    compositingReasonIds: string[];\n  }\n\n  export interface LoadSnapshotRequest {\n    /**\n     * An array of tiles composing the snapshot.\n     */\n    tiles: PictureTile[];\n  }\n\n  export interface LoadSnapshotResponse extends ProtocolResponseWithError {\n    /**\n     * The id of the snapshot.\n     */\n    snapshotId: SnapshotId;\n  }\n\n  export interface MakeSnapshotRequest {\n    /**\n     * The id of the layer.\n     */\n    layerId: LayerId;\n  }\n\n  export interface MakeSnapshotResponse extends ProtocolResponseWithError {\n    /**\n     * The id of the layer snapshot.\n     */\n    snapshotId: SnapshotId;\n  }\n\n  export interface ProfileSnapshotRequest {\n    /**\n     * The id of the layer snapshot.\n     */\n    snapshotId: SnapshotId;\n    /**\n     * The maximum number of times to replay the snapshot (1, if not specified).\n     */\n    minRepeatCount?: integer;\n    /**\n     * The minimum duration (in seconds) to replay the snapshot.\n     */\n    minDuration?: number;\n    /**\n     * The clip rectangle to apply when replaying the snapshot.\n     */\n    clipRect?: DOM.Rect;\n  }\n\n  export interface ProfileSnapshotResponse extends ProtocolResponseWithError {\n    /**\n     * The array of paint profiles, one per run.\n     */\n    timings: PaintProfile[];\n  }\n\n  export interface ReleaseSnapshotRequest {\n    /**\n     * The id of the layer snapshot.\n     */\n    snapshotId: SnapshotId;\n  }\n\n  export interface ReplaySnapshotRequest {\n    /**\n     * The id of the layer snapshot.\n     */\n    snapshotId: SnapshotId;\n    /**\n     * The first step to replay from (replay from the very start if not specified).\n     */\n    fromStep?: integer;\n    /**\n     * The last step to replay to (replay till the end if not specified).\n     */\n    toStep?: integer;\n    /**\n     * The scale to apply while replaying (defaults to 1).\n     */\n    scale?: number;\n  }\n\n  export interface ReplaySnapshotResponse extends ProtocolResponseWithError {\n    /**\n     * A data: URL for resulting image.\n     */\n    dataURL: string;\n  }\n\n  export interface SnapshotCommandLogRequest {\n    /**\n     * The id of the layer snapshot.\n     */\n    snapshotId: SnapshotId;\n  }\n\n  export interface SnapshotCommandLogResponse extends ProtocolResponseWithError {\n    /**\n     * The array of canvas function calls.\n     */\n    commandLog: any[];\n  }\n\n  export interface LayerPaintedEvent {\n    /**\n     * The id of the painted layer.\n     */\n    layerId: LayerId;\n    /**\n     * Clip rectangle.\n     */\n    clip: DOM.Rect;\n  }\n\n  export interface LayerTreeDidChangeEvent {\n    /**\n     * Layer tree, absent if not in the compositing mode.\n     */\n    layers?: Layer[];\n  }\n}\n\n/**\n * Provides access to log entries.\n */\nexport namespace Log {\n\n  export const enum LogEntrySource {\n    XML = 'xml',\n    Javascript = 'javascript',\n    Network = 'network',\n    Storage = 'storage',\n    Appcache = 'appcache',\n    Rendering = 'rendering',\n    Security = 'security',\n    Deprecation = 'deprecation',\n    Worker = 'worker',\n    Violation = 'violation',\n    Intervention = 'intervention',\n    Recommendation = 'recommendation',\n    Other = 'other',\n  }\n\n  export const enum LogEntryLevel {\n    Verbose = 'verbose',\n    Info = 'info',\n    Warning = 'warning',\n    Error = 'error',\n  }\n\n  export const enum LogEntryCategory {\n    Cors = 'cors',\n  }\n\n  /**\n   * Log entry.\n   */\n  export interface LogEntry {\n    /**\n     * Log entry source.\n     */\n    source: LogEntrySource;\n    /**\n     * Log entry severity.\n     */\n    level: LogEntryLevel;\n    /**\n     * Logged text.\n     */\n    text: string;\n    category?: LogEntryCategory;\n    /**\n     * Timestamp when this entry was added.\n     */\n    timestamp: Runtime.Timestamp;\n    /**\n     * URL of the resource if known.\n     */\n    url?: string;\n    /**\n     * Line number in the resource.\n     */\n    lineNumber?: integer;\n    /**\n     * JavaScript stack trace.\n     */\n    stackTrace?: Runtime.StackTrace;\n    /**\n     * Identifier of the network request associated with this entry.\n     */\n    networkRequestId?: Network.RequestId;\n    /**\n     * Identifier of the worker associated with this entry.\n     */\n    workerId?: string;\n    /**\n     * Call arguments.\n     */\n    args?: Runtime.RemoteObject[];\n  }\n\n  export const enum ViolationSettingName {\n    LongTask = 'longTask',\n    LongLayout = 'longLayout',\n    BlockedEvent = 'blockedEvent',\n    BlockedParser = 'blockedParser',\n    DiscouragedAPIUse = 'discouragedAPIUse',\n    Handler = 'handler',\n    RecurringHandler = 'recurringHandler',\n  }\n\n  /**\n   * Violation configuration setting.\n   */\n  export interface ViolationSetting {\n    /**\n     * Violation type.\n     */\n    name: ViolationSettingName;\n    /**\n     * Time threshold to trigger upon.\n     */\n    threshold: number;\n  }\n\n  export interface StartViolationsReportRequest {\n    /**\n     * Configuration for violations.\n     */\n    config: ViolationSetting[];\n  }\n\n  /**\n   * Issued when new message was logged.\n   */\n  export interface EntryAddedEvent {\n    /**\n     * The entry.\n     */\n    entry: LogEntry;\n  }\n}\n\n/**\n * This domain allows detailed inspection of media elements.\n */\nexport namespace Media {\n\n  /**\n   * Players will get an ID that is unique within the agent context.\n   */\n  export type PlayerId = OpaqueIdentifier<string, 'Protocol.Media.PlayerId'>;\n\n  export type Timestamp = number;\n\n  export const enum PlayerMessageLevel {\n    Error = 'error',\n    Warning = 'warning',\n    Info = 'info',\n    Debug = 'debug',\n  }\n\n  /**\n   * Have one type per entry in MediaLogRecord::Type\n   * Corresponds to kMessage\n   */\n  export interface PlayerMessage {\n    /**\n     * Keep in sync with MediaLogMessageLevel\n     * We are currently keeping the message level 'error' separate from the\n     * PlayerError type because right now they represent different things,\n     * this one being a DVLOG(ERROR) style log message that gets printed\n     * based on what log level is selected in the UI, and the other is a\n     * representation of a media::PipelineStatus object. Soon however we're\n     * going to be moving away from using PipelineStatus for errors and\n     * introducing a new error type which should hopefully let us integrate\n     * the error log level into the PlayerError type.\n     */\n    level: PlayerMessageLevel;\n    message: string;\n  }\n\n  /**\n   * Corresponds to kMediaPropertyChange\n   */\n  export interface PlayerProperty {\n    name: string;\n    value: string;\n  }\n\n  /**\n   * Corresponds to kMediaEventTriggered\n   */\n  export interface PlayerEvent {\n    timestamp: Timestamp;\n    value: string;\n  }\n\n  /**\n   * Represents logged source line numbers reported in an error.\n   * NOTE: file and line are from chromium c++ implementation code, not js.\n   */\n  export interface PlayerErrorSourceLocation {\n    file: string;\n    line: integer;\n  }\n\n  /**\n   * Corresponds to kMediaError\n   */\n  export interface PlayerError {\n    errorType: string;\n    /**\n     * Code is the numeric enum entry for a specific set of error codes, such\n     * as PipelineStatusCodes in media/base/pipeline_status.h\n     */\n    code: integer;\n    /**\n     * A trace of where this error was caused / where it passed through.\n     */\n    stack: PlayerErrorSourceLocation[];\n    /**\n     * Errors potentially have a root cause error, ie, a DecoderError might be\n     * caused by an WindowsError\n     */\n    cause: PlayerError[];\n    /**\n     * Extra data attached to an error, such as an HRESULT, Video Codec, etc.\n     */\n    data: any;\n  }\n\n  export interface Player {\n    playerId: PlayerId;\n    domNodeId?: DOM.BackendNodeId;\n  }\n\n  /**\n   * This can be called multiple times, and can be used to set / override /\n   * remove player properties. A null propValue indicates removal.\n   */\n  export interface PlayerPropertiesChangedEvent {\n    playerId: PlayerId;\n    properties: PlayerProperty[];\n  }\n\n  /**\n   * Send events as a list, allowing them to be batched on the browser for less\n   * congestion. If batched, events must ALWAYS be in chronological order.\n   */\n  export interface PlayerEventsAddedEvent {\n    playerId: PlayerId;\n    events: PlayerEvent[];\n  }\n\n  /**\n   * Send a list of any messages that need to be delivered.\n   */\n  export interface PlayerMessagesLoggedEvent {\n    playerId: PlayerId;\n    messages: PlayerMessage[];\n  }\n\n  /**\n   * Send a list of any errors that need to be delivered.\n   */\n  export interface PlayerErrorsRaisedEvent {\n    playerId: PlayerId;\n    errors: PlayerError[];\n  }\n\n  /**\n   * Called whenever a player is created, or when a new agent joins and receives\n   * a list of active players. If an agent is restored, it will receive one\n   * event for each active player.\n   */\n  export interface PlayerCreatedEvent {\n    player: Player;\n  }\n}\n\nexport namespace Memory {\n\n  /**\n   * Memory pressure level.\n   */\n  export const enum PressureLevel {\n    Moderate = 'moderate',\n    Critical = 'critical',\n  }\n\n  /**\n   * Heap profile sample.\n   */\n  export interface SamplingProfileNode {\n    /**\n     * Size of the sampled allocation.\n     */\n    size: number;\n    /**\n     * Total bytes attributed to this sample.\n     */\n    total: number;\n    /**\n     * Execution stack at the point of allocation.\n     */\n    stack: string[];\n  }\n\n  /**\n   * Array of heap profile samples.\n   */\n  export interface SamplingProfile {\n    samples: SamplingProfileNode[];\n    modules: Module[];\n  }\n\n  /**\n   * Executable module information\n   */\n  export interface Module {\n    /**\n     * Name of the module.\n     */\n    name: string;\n    /**\n     * UUID of the module.\n     */\n    uuid: string;\n    /**\n     * Base address where the module is loaded into memory. Encoded as a decimal\n     * or hexadecimal (0x prefixed) string.\n     */\n    baseAddress: string;\n    /**\n     * Size of the module in bytes.\n     */\n    size: number;\n  }\n\n  /**\n   * DOM object counter data.\n   */\n  export interface DOMCounter {\n    /**\n     * Object name. Note: object names should be presumed volatile and clients should not expect\n     * the returned names to be consistent across runs.\n     */\n    name: string;\n    /**\n     * Object count.\n     */\n    count: integer;\n  }\n\n  export interface GetDOMCountersResponse extends ProtocolResponseWithError {\n    documents: integer;\n    nodes: integer;\n    jsEventListeners: integer;\n  }\n\n  export interface GetDOMCountersForLeakDetectionResponse extends ProtocolResponseWithError {\n    /**\n     * DOM object counters.\n     */\n    counters: DOMCounter[];\n  }\n\n  export interface SetPressureNotificationsSuppressedRequest {\n    /**\n     * If true, memory pressure notifications will be suppressed.\n     */\n    suppressed: boolean;\n  }\n\n  export interface SimulatePressureNotificationRequest {\n    /**\n     * Memory pressure level of the notification.\n     */\n    level: PressureLevel;\n  }\n\n  export interface StartSamplingRequest {\n    /**\n     * Average number of bytes between samples.\n     */\n    samplingInterval?: integer;\n    /**\n     * Do not randomize intervals between samples.\n     */\n    suppressRandomness?: boolean;\n  }\n\n  export interface GetAllTimeSamplingProfileResponse extends ProtocolResponseWithError {\n    profile: SamplingProfile;\n  }\n\n  export interface GetBrowserSamplingProfileResponse extends ProtocolResponseWithError {\n    profile: SamplingProfile;\n  }\n\n  export interface GetSamplingProfileResponse extends ProtocolResponseWithError {\n    profile: SamplingProfile;\n  }\n}\n\n/**\n * Network domain allows tracking network activities of the page. It exposes information about http,\n * file, data and other requests and responses, their headers, bodies, timing, etc.\n */\nexport namespace Network {\n\n  /**\n   * Resource type as it was perceived by the rendering engine.\n   */\n  export const enum ResourceType {\n    Document = 'Document',\n    Stylesheet = 'Stylesheet',\n    Image = 'Image',\n    Media = 'Media',\n    Font = 'Font',\n    Script = 'Script',\n    TextTrack = 'TextTrack',\n    XHR = 'XHR',\n    Fetch = 'Fetch',\n    Prefetch = 'Prefetch',\n    EventSource = 'EventSource',\n    WebSocket = 'WebSocket',\n    Manifest = 'Manifest',\n    SignedExchange = 'SignedExchange',\n    Ping = 'Ping',\n    CSPViolationReport = 'CSPViolationReport',\n    Preflight = 'Preflight',\n    FedCM = 'FedCM',\n    Other = 'Other',\n  }\n\n  /**\n   * Unique loader identifier.\n   */\n  export type LoaderId = OpaqueIdentifier<string, 'Protocol.Network.LoaderId'>;\n\n  /**\n   * Unique network request identifier.\n   * Note that this does not identify individual HTTP requests that are part of\n   * a network request.\n   */\n  export type RequestId = OpaqueIdentifier<string, 'Protocol.Network.RequestId'>;\n\n  /**\n   * Unique intercepted request identifier.\n   */\n  export type InterceptionId = OpaqueIdentifier<string, 'Protocol.Network.InterceptionId'>;\n\n  /**\n   * Network level fetch failure reason.\n   */\n  export const enum ErrorReason {\n    Failed = 'Failed',\n    Aborted = 'Aborted',\n    TimedOut = 'TimedOut',\n    AccessDenied = 'AccessDenied',\n    ConnectionClosed = 'ConnectionClosed',\n    ConnectionReset = 'ConnectionReset',\n    ConnectionRefused = 'ConnectionRefused',\n    ConnectionAborted = 'ConnectionAborted',\n    ConnectionFailed = 'ConnectionFailed',\n    NameNotResolved = 'NameNotResolved',\n    InternetDisconnected = 'InternetDisconnected',\n    AddressUnreachable = 'AddressUnreachable',\n    BlockedByClient = 'BlockedByClient',\n    BlockedByResponse = 'BlockedByResponse',\n  }\n\n  /**\n   * UTC time in seconds, counted from January 1, 1970.\n   */\n  export type TimeSinceEpoch = number;\n\n  /**\n   * Monotonically increasing time in seconds since an arbitrary point in the past.\n   */\n  export type MonotonicTime = number;\n\n  /**\n   * Request / response headers as keys / values of JSON object.\n   */\n  export interface Headers {\n    [key: string]: string;\n  }\n\n  /**\n   * The underlying connection technology that the browser is supposedly using.\n   */\n  export const enum ConnectionType {\n    None = 'none',\n    Cellular2g = 'cellular2g',\n    Cellular3g = 'cellular3g',\n    Cellular4g = 'cellular4g',\n    Bluetooth = 'bluetooth',\n    Ethernet = 'ethernet',\n    Wifi = 'wifi',\n    Wimax = 'wimax',\n    Other = 'other',\n  }\n\n  /**\n   * Represents the cookie's 'SameSite' status:\n   * https://tools.ietf.org/html/draft-west-first-party-cookies\n   */\n  export const enum CookieSameSite {\n    Strict = 'Strict',\n    Lax = 'Lax',\n    None = 'None',\n  }\n\n  /**\n   * Represents the cookie's 'Priority' status:\n   * https://tools.ietf.org/html/draft-west-cookie-priority-00\n   */\n  export const enum CookiePriority {\n    Low = 'Low',\n    Medium = 'Medium',\n    High = 'High',\n  }\n\n  /**\n   * Represents the source scheme of the origin that originally set the cookie.\n   * A value of \"Unset\" allows protocol clients to emulate legacy cookie scope for the scheme.\n   * This is a temporary ability and it will be removed in the future.\n   */\n  export const enum CookieSourceScheme {\n    Unset = 'Unset',\n    NonSecure = 'NonSecure',\n    Secure = 'Secure',\n  }\n\n  /**\n   * Timing information for the request.\n   */\n  export interface ResourceTiming {\n    /**\n     * Timing's requestTime is a baseline in seconds, while the other numbers are ticks in\n     * milliseconds relatively to this requestTime.\n     */\n    requestTime: number;\n    /**\n     * Started resolving proxy.\n     */\n    proxyStart: number;\n    /**\n     * Finished resolving proxy.\n     */\n    proxyEnd: number;\n    /**\n     * Started DNS address resolve.\n     */\n    dnsStart: number;\n    /**\n     * Finished DNS address resolve.\n     */\n    dnsEnd: number;\n    /**\n     * Started connecting to the remote host.\n     */\n    connectStart: number;\n    /**\n     * Connected to the remote host.\n     */\n    connectEnd: number;\n    /**\n     * Started SSL handshake.\n     */\n    sslStart: number;\n    /**\n     * Finished SSL handshake.\n     */\n    sslEnd: number;\n    /**\n     * Started running ServiceWorker.\n     */\n    workerStart: number;\n    /**\n     * Finished Starting ServiceWorker.\n     */\n    workerReady: number;\n    /**\n     * Started fetch event.\n     */\n    workerFetchStart: number;\n    /**\n     * Settled fetch event respondWith promise.\n     */\n    workerRespondWithSettled: number;\n    /**\n     * Started ServiceWorker static routing source evaluation.\n     */\n    workerRouterEvaluationStart?: number;\n    /**\n     * Started cache lookup when the source was evaluated to `cache`.\n     */\n    workerCacheLookupStart?: number;\n    /**\n     * Started sending request.\n     */\n    sendStart: number;\n    /**\n     * Finished sending request.\n     */\n    sendEnd: number;\n    /**\n     * Time the server started pushing request.\n     */\n    pushStart: number;\n    /**\n     * Time the server finished pushing request.\n     */\n    pushEnd: number;\n    /**\n     * Started receiving response headers.\n     */\n    receiveHeadersStart: number;\n    /**\n     * Finished receiving response headers.\n     */\n    receiveHeadersEnd: number;\n  }\n\n  /**\n   * Loading priority of a resource request.\n   */\n  export const enum ResourcePriority {\n    VeryLow = 'VeryLow',\n    Low = 'Low',\n    Medium = 'Medium',\n    High = 'High',\n    VeryHigh = 'VeryHigh',\n  }\n\n  /**\n   * Post data entry for HTTP request\n   */\n  export interface PostDataEntry {\n    bytes?: binary;\n  }\n\n  export const enum RequestReferrerPolicy {\n    UnsafeUrl = 'unsafe-url',\n    NoReferrerWhenDowngrade = 'no-referrer-when-downgrade',\n    NoReferrer = 'no-referrer',\n    Origin = 'origin',\n    OriginWhenCrossOrigin = 'origin-when-cross-origin',\n    SameOrigin = 'same-origin',\n    StrictOrigin = 'strict-origin',\n    StrictOriginWhenCrossOrigin = 'strict-origin-when-cross-origin',\n  }\n\n  /**\n   * HTTP request data.\n   */\n  export interface Request {\n    /**\n     * Request URL (without fragment).\n     */\n    url: string;\n    /**\n     * Fragment of the requested URL starting with hash, if present.\n     */\n    urlFragment?: string;\n    /**\n     * HTTP request method.\n     */\n    method: string;\n    /**\n     * HTTP request headers.\n     */\n    headers: Headers;\n    /**\n     * HTTP POST request data.\n     * Use postDataEntries instead.\n     * @deprecated\n     */\n    postData?: string;\n    /**\n     * True when the request has POST data. Note that postData might still be omitted when this flag is true when the data is too long.\n     */\n    hasPostData?: boolean;\n    /**\n     * Request body elements (post data broken into individual entries).\n     */\n    postDataEntries?: PostDataEntry[];\n    /**\n     * The mixed content type of the request.\n     */\n    mixedContentType?: Security.MixedContentType;\n    /**\n     * Priority of the resource request at the time request is sent.\n     */\n    initialPriority: ResourcePriority;\n    /**\n     * The referrer policy of the request, as defined in https://www.w3.org/TR/referrer-policy/\n     */\n    referrerPolicy: RequestReferrerPolicy;\n    /**\n     * Whether is loaded via link preload.\n     */\n    isLinkPreload?: boolean;\n    /**\n     * Set for requests when the TrustToken API is used. Contains the parameters\n     * passed by the developer (e.g. via \"fetch\") as understood by the backend.\n     */\n    trustTokenParams?: TrustTokenParams;\n    /**\n     * True if this resource request is considered to be the 'same site' as the\n     * request corresponding to the main frame.\n     */\n    isSameSite?: boolean;\n    /**\n     * True when the resource request is ad-related.\n     */\n    isAdRelated?: boolean;\n  }\n\n  /**\n   * Details of a signed certificate timestamp (SCT).\n   */\n  export interface SignedCertificateTimestamp {\n    /**\n     * Validation status.\n     */\n    status: string;\n    /**\n     * Origin.\n     */\n    origin: string;\n    /**\n     * Log name / description.\n     */\n    logDescription: string;\n    /**\n     * Log ID.\n     */\n    logId: string;\n    /**\n     * Issuance date. Unlike TimeSinceEpoch, this contains the number of\n     * milliseconds since January 1, 1970, UTC, not the number of seconds.\n     */\n    timestamp: number;\n    /**\n     * Hash algorithm.\n     */\n    hashAlgorithm: string;\n    /**\n     * Signature algorithm.\n     */\n    signatureAlgorithm: string;\n    /**\n     * Signature data.\n     */\n    signatureData: string;\n  }\n\n  /**\n   * Security details about a request.\n   */\n  export interface SecurityDetails {\n    /**\n     * Protocol name (e.g. \"TLS 1.2\" or \"QUIC\").\n     */\n    protocol: string;\n    /**\n     * Key Exchange used by the connection, or the empty string if not applicable.\n     */\n    keyExchange: string;\n    /**\n     * (EC)DH group used by the connection, if applicable.\n     */\n    keyExchangeGroup?: string;\n    /**\n     * Cipher name.\n     */\n    cipher: string;\n    /**\n     * TLS MAC. Note that AEAD ciphers do not have separate MACs.\n     */\n    mac?: string;\n    /**\n     * Certificate ID value.\n     */\n    certificateId: Security.CertificateId;\n    /**\n     * Certificate subject name.\n     */\n    subjectName: string;\n    /**\n     * Subject Alternative Name (SAN) DNS names and IP addresses.\n     */\n    sanList: string[];\n    /**\n     * Name of the issuing CA.\n     */\n    issuer: string;\n    /**\n     * Certificate valid from date.\n     */\n    validFrom: TimeSinceEpoch;\n    /**\n     * Certificate valid to (expiration) date\n     */\n    validTo: TimeSinceEpoch;\n    /**\n     * List of signed certificate timestamps (SCTs).\n     */\n    signedCertificateTimestampList: SignedCertificateTimestamp[];\n    /**\n     * Whether the request complied with Certificate Transparency policy\n     */\n    certificateTransparencyCompliance: CertificateTransparencyCompliance;\n    /**\n     * The signature algorithm used by the server in the TLS server signature,\n     * represented as a TLS SignatureScheme code point. Omitted if not\n     * applicable or not known.\n     */\n    serverSignatureAlgorithm?: integer;\n    /**\n     * Whether the connection used Encrypted ClientHello\n     */\n    encryptedClientHello: boolean;\n  }\n\n  /**\n   * Whether the request complied with Certificate Transparency policy.\n   */\n  export const enum CertificateTransparencyCompliance {\n    Unknown = 'unknown',\n    NotCompliant = 'not-compliant',\n    Compliant = 'compliant',\n  }\n\n  /**\n   * The reason why request was blocked.\n   */\n  export const enum BlockedReason {\n    Other = 'other',\n    Csp = 'csp',\n    MixedContent = 'mixed-content',\n    Origin = 'origin',\n    Inspector = 'inspector',\n    Integrity = 'integrity',\n    SubresourceFilter = 'subresource-filter',\n    ContentType = 'content-type',\n    CoepFrameResourceNeedsCoepHeader = 'coep-frame-resource-needs-coep-header',\n    CoopSandboxedIframeCannotNavigateToCoopPage = 'coop-sandboxed-iframe-cannot-navigate-to-coop-page',\n    CorpNotSameOrigin = 'corp-not-same-origin',\n    CorpNotSameOriginAfterDefaultedToSameOriginByCoep = 'corp-not-same-origin-after-defaulted-to-same-origin-by-coep',\n    CorpNotSameOriginAfterDefaultedToSameOriginByDip = 'corp-not-same-origin-after-defaulted-to-same-origin-by-dip',\n    CorpNotSameOriginAfterDefaultedToSameOriginByCoepAndDip = 'corp-not-same-origin-after-defaulted-to-same-origin-by-coep-and-dip',\n    CorpNotSameSite = 'corp-not-same-site',\n    SriMessageSignatureMismatch = 'sri-message-signature-mismatch',\n  }\n\n  /**\n   * Sets Controls for IP Proxy of requests.\n   * Page reload is required before the new behavior will be observed.\n   */\n  export const enum IpProxyStatus {\n    Available = 'Available',\n    FeatureNotEnabled = 'FeatureNotEnabled',\n    MaskedDomainListNotEnabled = 'MaskedDomainListNotEnabled',\n    MaskedDomainListNotPopulated = 'MaskedDomainListNotPopulated',\n    AuthTokensUnavailable = 'AuthTokensUnavailable',\n    Unavailable = 'Unavailable',\n    BypassedByDevTools = 'BypassedByDevTools',\n  }\n\n  /**\n   * The reason why request was blocked.\n   */\n  export const enum CorsError {\n    DisallowedByMode = 'DisallowedByMode',\n    InvalidResponse = 'InvalidResponse',\n    WildcardOriginNotAllowed = 'WildcardOriginNotAllowed',\n    MissingAllowOriginHeader = 'MissingAllowOriginHeader',\n    MultipleAllowOriginValues = 'MultipleAllowOriginValues',\n    InvalidAllowOriginValue = 'InvalidAllowOriginValue',\n    AllowOriginMismatch = 'AllowOriginMismatch',\n    InvalidAllowCredentials = 'InvalidAllowCredentials',\n    CorsDisabledScheme = 'CorsDisabledScheme',\n    PreflightInvalidStatus = 'PreflightInvalidStatus',\n    PreflightDisallowedRedirect = 'PreflightDisallowedRedirect',\n    PreflightWildcardOriginNotAllowed = 'PreflightWildcardOriginNotAllowed',\n    PreflightMissingAllowOriginHeader = 'PreflightMissingAllowOriginHeader',\n    PreflightMultipleAllowOriginValues = 'PreflightMultipleAllowOriginValues',\n    PreflightInvalidAllowOriginValue = 'PreflightInvalidAllowOriginValue',\n    PreflightAllowOriginMismatch = 'PreflightAllowOriginMismatch',\n    PreflightInvalidAllowCredentials = 'PreflightInvalidAllowCredentials',\n    PreflightMissingAllowExternal = 'PreflightMissingAllowExternal',\n    PreflightInvalidAllowExternal = 'PreflightInvalidAllowExternal',\n    PreflightMissingAllowPrivateNetwork = 'PreflightMissingAllowPrivateNetwork',\n    PreflightInvalidAllowPrivateNetwork = 'PreflightInvalidAllowPrivateNetwork',\n    InvalidAllowMethodsPreflightResponse = 'InvalidAllowMethodsPreflightResponse',\n    InvalidAllowHeadersPreflightResponse = 'InvalidAllowHeadersPreflightResponse',\n    MethodDisallowedByPreflightResponse = 'MethodDisallowedByPreflightResponse',\n    HeaderDisallowedByPreflightResponse = 'HeaderDisallowedByPreflightResponse',\n    RedirectContainsCredentials = 'RedirectContainsCredentials',\n    InsecurePrivateNetwork = 'InsecurePrivateNetwork',\n    InvalidPrivateNetworkAccess = 'InvalidPrivateNetworkAccess',\n    UnexpectedPrivateNetworkAccess = 'UnexpectedPrivateNetworkAccess',\n    NoCorsRedirectModeNotFollow = 'NoCorsRedirectModeNotFollow',\n    PreflightMissingPrivateNetworkAccessId = 'PreflightMissingPrivateNetworkAccessId',\n    PreflightMissingPrivateNetworkAccessName = 'PreflightMissingPrivateNetworkAccessName',\n    PrivateNetworkAccessPermissionUnavailable = 'PrivateNetworkAccessPermissionUnavailable',\n    PrivateNetworkAccessPermissionDenied = 'PrivateNetworkAccessPermissionDenied',\n    LocalNetworkAccessPermissionDenied = 'LocalNetworkAccessPermissionDenied',\n  }\n\n  export interface CorsErrorStatus {\n    corsError: CorsError;\n    failedParameter: string;\n  }\n\n  /**\n   * Source of serviceworker response.\n   */\n  export const enum ServiceWorkerResponseSource {\n    CacheStorage = 'cache-storage',\n    HttpCache = 'http-cache',\n    FallbackCode = 'fallback-code',\n    Network = 'network',\n  }\n\n  export const enum TrustTokenParamsRefreshPolicy {\n    UseCached = 'UseCached',\n    Refresh = 'Refresh',\n  }\n\n  /**\n   * Determines what type of Trust Token operation is executed and\n   * depending on the type, some additional parameters. The values\n   * are specified in third_party/blink/renderer/core/fetch/trust_token.idl.\n   */\n  export interface TrustTokenParams {\n    operation: TrustTokenOperationType;\n    /**\n     * Only set for \"token-redemption\" operation and determine whether\n     * to request a fresh SRR or use a still valid cached SRR.\n     */\n    refreshPolicy: TrustTokenParamsRefreshPolicy;\n    /**\n     * Origins of issuers from whom to request tokens or redemption\n     * records.\n     */\n    issuers?: string[];\n  }\n\n  export const enum TrustTokenOperationType {\n    Issuance = 'Issuance',\n    Redemption = 'Redemption',\n    Signing = 'Signing',\n  }\n\n  /**\n   * The reason why Chrome uses a specific transport protocol for HTTP semantics.\n   */\n  export const enum AlternateProtocolUsage {\n    AlternativeJobWonWithoutRace = 'alternativeJobWonWithoutRace',\n    AlternativeJobWonRace = 'alternativeJobWonRace',\n    MainJobWonRace = 'mainJobWonRace',\n    MappingMissing = 'mappingMissing',\n    Broken = 'broken',\n    DnsAlpnH3JobWonWithoutRace = 'dnsAlpnH3JobWonWithoutRace',\n    DnsAlpnH3JobWonRace = 'dnsAlpnH3JobWonRace',\n    UnspecifiedReason = 'unspecifiedReason',\n  }\n\n  /**\n   * Source of service worker router.\n   */\n  export const enum ServiceWorkerRouterSource {\n    Network = 'network',\n    Cache = 'cache',\n    FetchEvent = 'fetch-event',\n    RaceNetworkAndFetchHandler = 'race-network-and-fetch-handler',\n    RaceNetworkAndCache = 'race-network-and-cache',\n  }\n\n  export interface ServiceWorkerRouterInfo {\n    /**\n     * ID of the rule matched. If there is a matched rule, this field will\n     * be set, otherwiser no value will be set.\n     */\n    ruleIdMatched?: integer;\n    /**\n     * The router source of the matched rule. If there is a matched rule, this\n     * field will be set, otherwise no value will be set.\n     */\n    matchedSourceType?: ServiceWorkerRouterSource;\n    /**\n     * The actual router source used.\n     */\n    actualSourceType?: ServiceWorkerRouterSource;\n  }\n\n  /**\n   * HTTP response data.\n   */\n  export interface Response {\n    /**\n     * Response URL. This URL can be different from CachedResource.url in case of redirect.\n     */\n    url: string;\n    /**\n     * HTTP response status code.\n     */\n    status: integer;\n    /**\n     * HTTP response status text.\n     */\n    statusText: string;\n    /**\n     * HTTP response headers.\n     */\n    headers: Headers;\n    /**\n     * HTTP response headers text. This has been replaced by the headers in Network.responseReceivedExtraInfo.\n     * @deprecated\n     */\n    headersText?: string;\n    /**\n     * Resource mimeType as determined by the browser.\n     */\n    mimeType: string;\n    /**\n     * Resource charset as determined by the browser (if applicable).\n     */\n    charset: string;\n    /**\n     * Refined HTTP request headers that were actually transmitted over the network.\n     */\n    requestHeaders?: Headers;\n    /**\n     * HTTP request headers text. This has been replaced by the headers in Network.requestWillBeSentExtraInfo.\n     * @deprecated\n     */\n    requestHeadersText?: string;\n    /**\n     * Specifies whether physical connection was actually reused for this request.\n     */\n    connectionReused: boolean;\n    /**\n     * Physical connection id that was actually used for this request.\n     */\n    connectionId: number;\n    /**\n     * Remote IP address.\n     */\n    remoteIPAddress?: string;\n    /**\n     * Remote port.\n     */\n    remotePort?: integer;\n    /**\n     * Specifies that the request was served from the disk cache.\n     */\n    fromDiskCache?: boolean;\n    /**\n     * Specifies that the request was served from the ServiceWorker.\n     */\n    fromServiceWorker?: boolean;\n    /**\n     * Specifies that the request was served from the prefetch cache.\n     */\n    fromPrefetchCache?: boolean;\n    /**\n     * Specifies that the request was served from the prefetch cache.\n     */\n    fromEarlyHints?: boolean;\n    /**\n     * Information about how ServiceWorker Static Router API was used. If this\n     * field is set with `matchedSourceType` field, a matching rule is found.\n     * If this field is set without `matchedSource`, no matching rule is found.\n     * Otherwise, the API is not used.\n     */\n    serviceWorkerRouterInfo?: ServiceWorkerRouterInfo;\n    /**\n     * Total number of bytes received for this request so far.\n     */\n    encodedDataLength: number;\n    /**\n     * Timing information for the given request.\n     */\n    timing?: ResourceTiming;\n    /**\n     * Response source of response from ServiceWorker.\n     */\n    serviceWorkerResponseSource?: ServiceWorkerResponseSource;\n    /**\n     * The time at which the returned response was generated.\n     */\n    responseTime?: TimeSinceEpoch;\n    /**\n     * Cache Storage Cache Name.\n     */\n    cacheStorageCacheName?: string;\n    /**\n     * Protocol used to fetch this request.\n     */\n    protocol?: string;\n    /**\n     * The reason why Chrome uses a specific transport protocol for HTTP semantics.\n     */\n    alternateProtocolUsage?: AlternateProtocolUsage;\n    /**\n     * Security state of the request resource.\n     */\n    securityState: Security.SecurityState;\n    /**\n     * Security details for the request.\n     */\n    securityDetails?: SecurityDetails;\n    /**\n     * Indicates whether the request was sent through IP Protection proxies. If\n     * set to true, the request used the IP Protection privacy feature.\n     */\n    isIpProtectionUsed?: boolean;\n  }\n\n  /**\n   * WebSocket request data.\n   */\n  export interface WebSocketRequest {\n    /**\n     * HTTP request headers.\n     */\n    headers: Headers;\n  }\n\n  /**\n   * WebSocket response data.\n   */\n  export interface WebSocketResponse {\n    /**\n     * HTTP response status code.\n     */\n    status: integer;\n    /**\n     * HTTP response status text.\n     */\n    statusText: string;\n    /**\n     * HTTP response headers.\n     */\n    headers: Headers;\n    /**\n     * HTTP response headers text.\n     */\n    headersText?: string;\n    /**\n     * HTTP request headers.\n     */\n    requestHeaders?: Headers;\n    /**\n     * HTTP request headers text.\n     */\n    requestHeadersText?: string;\n  }\n\n  /**\n   * WebSocket message data. This represents an entire WebSocket message, not just a fragmented frame as the name suggests.\n   */\n  export interface WebSocketFrame {\n    /**\n     * WebSocket message opcode.\n     */\n    opcode: number;\n    /**\n     * WebSocket message mask.\n     */\n    mask: boolean;\n    /**\n     * WebSocket message payload data.\n     * If the opcode is 1, this is a text message and payloadData is a UTF-8 string.\n     * If the opcode isn't 1, then payloadData is a base64 encoded string representing binary data.\n     */\n    payloadData: string;\n  }\n\n  /**\n   * Information about the cached resource.\n   */\n  export interface CachedResource {\n    /**\n     * Resource URL. This is the url of the original network request.\n     */\n    url: string;\n    /**\n     * Type of this resource.\n     */\n    type: ResourceType;\n    /**\n     * Cached response data.\n     */\n    response?: Response;\n    /**\n     * Cached response body size.\n     */\n    bodySize: number;\n  }\n\n  export const enum InitiatorType {\n    Parser = 'parser',\n    Script = 'script',\n    Preload = 'preload',\n    SignedExchange = 'SignedExchange',\n    Preflight = 'preflight',\n    FedCM = 'FedCM',\n    Other = 'other',\n  }\n\n  /**\n   * Information about the request initiator.\n   */\n  export interface Initiator {\n    /**\n     * Type of this initiator.\n     */\n    type: InitiatorType;\n    /**\n     * Initiator JavaScript stack trace, set for Script only.\n     * Requires the Debugger domain to be enabled.\n     */\n    stack?: Runtime.StackTrace;\n    /**\n     * Initiator URL, set for Parser type or for Script type (when script is importing module) or for SignedExchange type.\n     */\n    url?: string;\n    /**\n     * Initiator line number, set for Parser type or for Script type (when script is importing\n     * module) (0-based).\n     */\n    lineNumber?: number;\n    /**\n     * Initiator column number, set for Parser type or for Script type (when script is importing\n     * module) (0-based).\n     */\n    columnNumber?: number;\n    /**\n     * Set if another request triggered this request (e.g. preflight).\n     */\n    requestId?: RequestId;\n  }\n\n  /**\n   * cookiePartitionKey object\n   * The representation of the components of the key that are created by the cookiePartitionKey class contained in net/cookies/cookie_partition_key.h.\n   */\n  export interface CookiePartitionKey {\n    /**\n     * The site of the top-level URL the browser was visiting at the start\n     * of the request to the endpoint that set the cookie.\n     */\n    topLevelSite: string;\n    /**\n     * Indicates if the cookie has any ancestors that are cross-site to the topLevelSite.\n     */\n    hasCrossSiteAncestor: boolean;\n  }\n\n  /**\n   * Cookie object\n   */\n  export interface Cookie {\n    /**\n     * Cookie name.\n     */\n    name: string;\n    /**\n     * Cookie value.\n     */\n    value: string;\n    /**\n     * Cookie domain.\n     */\n    domain: string;\n    /**\n     * Cookie path.\n     */\n    path: string;\n    /**\n     * Cookie expiration date as the number of seconds since the UNIX epoch.\n     * The value is set to -1 if the expiry date is not set.\n     * The value can be null for values that cannot be represented in\n     * JSON (±Inf).\n     */\n    expires: number;\n    /**\n     * Cookie size.\n     */\n    size: integer;\n    /**\n     * True if cookie is http-only.\n     */\n    httpOnly: boolean;\n    /**\n     * True if cookie is secure.\n     */\n    secure: boolean;\n    /**\n     * True in case of session cookie.\n     */\n    session: boolean;\n    /**\n     * Cookie SameSite type.\n     */\n    sameSite?: CookieSameSite;\n    /**\n     * Cookie Priority\n     */\n    priority: CookiePriority;\n    /**\n     * True if cookie is SameParty.\n     * @deprecated\n     */\n    sameParty: boolean;\n    /**\n     * Cookie source scheme type.\n     */\n    sourceScheme: CookieSourceScheme;\n    /**\n     * Cookie source port. Valid values are {-1, [1, 65535]}, -1 indicates an unspecified port.\n     * An unspecified port value allows protocol clients to emulate legacy cookie scope for the port.\n     * This is a temporary ability and it will be removed in the future.\n     */\n    sourcePort: integer;\n    /**\n     * Cookie partition key.\n     */\n    partitionKey?: CookiePartitionKey;\n    /**\n     * True if cookie partition key is opaque.\n     */\n    partitionKeyOpaque?: boolean;\n  }\n\n  /**\n   * Types of reasons why a cookie may not be stored from a response.\n   */\n  export const enum SetCookieBlockedReason {\n    SecureOnly = 'SecureOnly',\n    SameSiteStrict = 'SameSiteStrict',\n    SameSiteLax = 'SameSiteLax',\n    SameSiteUnspecifiedTreatedAsLax = 'SameSiteUnspecifiedTreatedAsLax',\n    SameSiteNoneInsecure = 'SameSiteNoneInsecure',\n    UserPreferences = 'UserPreferences',\n    ThirdPartyPhaseout = 'ThirdPartyPhaseout',\n    ThirdPartyBlockedInFirstPartySet = 'ThirdPartyBlockedInFirstPartySet',\n    SyntaxError = 'SyntaxError',\n    SchemeNotSupported = 'SchemeNotSupported',\n    OverwriteSecure = 'OverwriteSecure',\n    InvalidDomain = 'InvalidDomain',\n    InvalidPrefix = 'InvalidPrefix',\n    UnknownError = 'UnknownError',\n    SchemefulSameSiteStrict = 'SchemefulSameSiteStrict',\n    SchemefulSameSiteLax = 'SchemefulSameSiteLax',\n    SchemefulSameSiteUnspecifiedTreatedAsLax = 'SchemefulSameSiteUnspecifiedTreatedAsLax',\n    SamePartyFromCrossPartyContext = 'SamePartyFromCrossPartyContext',\n    SamePartyConflictsWithOtherAttributes = 'SamePartyConflictsWithOtherAttributes',\n    NameValuePairExceedsMaxSize = 'NameValuePairExceedsMaxSize',\n    DisallowedCharacter = 'DisallowedCharacter',\n    NoCookieContent = 'NoCookieContent',\n  }\n\n  /**\n   * Types of reasons why a cookie may not be sent with a request.\n   */\n  export const enum CookieBlockedReason {\n    SecureOnly = 'SecureOnly',\n    NotOnPath = 'NotOnPath',\n    DomainMismatch = 'DomainMismatch',\n    SameSiteStrict = 'SameSiteStrict',\n    SameSiteLax = 'SameSiteLax',\n    SameSiteUnspecifiedTreatedAsLax = 'SameSiteUnspecifiedTreatedAsLax',\n    SameSiteNoneInsecure = 'SameSiteNoneInsecure',\n    UserPreferences = 'UserPreferences',\n    ThirdPartyPhaseout = 'ThirdPartyPhaseout',\n    ThirdPartyBlockedInFirstPartySet = 'ThirdPartyBlockedInFirstPartySet',\n    UnknownError = 'UnknownError',\n    SchemefulSameSiteStrict = 'SchemefulSameSiteStrict',\n    SchemefulSameSiteLax = 'SchemefulSameSiteLax',\n    SchemefulSameSiteUnspecifiedTreatedAsLax = 'SchemefulSameSiteUnspecifiedTreatedAsLax',\n    SamePartyFromCrossPartyContext = 'SamePartyFromCrossPartyContext',\n    NameValuePairExceedsMaxSize = 'NameValuePairExceedsMaxSize',\n    PortMismatch = 'PortMismatch',\n    SchemeMismatch = 'SchemeMismatch',\n    AnonymousContext = 'AnonymousContext',\n  }\n\n  /**\n   * Types of reasons why a cookie should have been blocked by 3PCD but is exempted for the request.\n   */\n  export const enum CookieExemptionReason {\n    None = 'None',\n    UserSetting = 'UserSetting',\n    TPCDMetadata = 'TPCDMetadata',\n    TPCDDeprecationTrial = 'TPCDDeprecationTrial',\n    TopLevelTPCDDeprecationTrial = 'TopLevelTPCDDeprecationTrial',\n    TPCDHeuristics = 'TPCDHeuristics',\n    EnterprisePolicy = 'EnterprisePolicy',\n    StorageAccess = 'StorageAccess',\n    TopLevelStorageAccess = 'TopLevelStorageAccess',\n    Scheme = 'Scheme',\n    SameSiteNoneCookiesInSandbox = 'SameSiteNoneCookiesInSandbox',\n  }\n\n  /**\n   * A cookie which was not stored from a response with the corresponding reason.\n   */\n  export interface BlockedSetCookieWithReason {\n    /**\n     * The reason(s) this cookie was blocked.\n     */\n    blockedReasons: SetCookieBlockedReason[];\n    /**\n     * The string representing this individual cookie as it would appear in the header.\n     * This is not the entire \"cookie\" or \"set-cookie\" header which could have multiple cookies.\n     */\n    cookieLine: string;\n    /**\n     * The cookie object which represents the cookie which was not stored. It is optional because\n     * sometimes complete cookie information is not available, such as in the case of parsing\n     * errors.\n     */\n    cookie?: Cookie;\n  }\n\n  /**\n   * A cookie should have been blocked by 3PCD but is exempted and stored from a response with the\n   * corresponding reason. A cookie could only have at most one exemption reason.\n   */\n  export interface ExemptedSetCookieWithReason {\n    /**\n     * The reason the cookie was exempted.\n     */\n    exemptionReason: CookieExemptionReason;\n    /**\n     * The string representing this individual cookie as it would appear in the header.\n     */\n    cookieLine: string;\n    /**\n     * The cookie object representing the cookie.\n     */\n    cookie: Cookie;\n  }\n\n  /**\n   * A cookie associated with the request which may or may not be sent with it.\n   * Includes the cookies itself and reasons for blocking or exemption.\n   */\n  export interface AssociatedCookie {\n    /**\n     * The cookie object representing the cookie which was not sent.\n     */\n    cookie: Cookie;\n    /**\n     * The reason(s) the cookie was blocked. If empty means the cookie is included.\n     */\n    blockedReasons: CookieBlockedReason[];\n    /**\n     * The reason the cookie should have been blocked by 3PCD but is exempted. A cookie could\n     * only have at most one exemption reason.\n     */\n    exemptionReason?: CookieExemptionReason;\n  }\n\n  /**\n   * Cookie parameter object\n   */\n  export interface CookieParam {\n    /**\n     * Cookie name.\n     */\n    name: string;\n    /**\n     * Cookie value.\n     */\n    value: string;\n    /**\n     * The request-URI to associate with the setting of the cookie. This value can affect the\n     * default domain, path, source port, and source scheme values of the created cookie.\n     */\n    url?: string;\n    /**\n     * Cookie domain.\n     */\n    domain?: string;\n    /**\n     * Cookie path.\n     */\n    path?: string;\n    /**\n     * True if cookie is secure.\n     */\n    secure?: boolean;\n    /**\n     * True if cookie is http-only.\n     */\n    httpOnly?: boolean;\n    /**\n     * Cookie SameSite type.\n     */\n    sameSite?: CookieSameSite;\n    /**\n     * Cookie expiration date, session cookie if not set\n     */\n    expires?: TimeSinceEpoch;\n    /**\n     * Cookie Priority.\n     */\n    priority?: CookiePriority;\n    /**\n     * True if cookie is SameParty.\n     */\n    sameParty?: boolean;\n    /**\n     * Cookie source scheme type.\n     */\n    sourceScheme?: CookieSourceScheme;\n    /**\n     * Cookie source port. Valid values are {-1, [1, 65535]}, -1 indicates an unspecified port.\n     * An unspecified port value allows protocol clients to emulate legacy cookie scope for the port.\n     * This is a temporary ability and it will be removed in the future.\n     */\n    sourcePort?: integer;\n    /**\n     * Cookie partition key. If not set, the cookie will be set as not partitioned.\n     */\n    partitionKey?: CookiePartitionKey;\n  }\n\n  export const enum AuthChallengeSource {\n    Server = 'Server',\n    Proxy = 'Proxy',\n  }\n\n  /**\n   * Authorization challenge for HTTP status code 401 or 407.\n   */\n  export interface AuthChallenge {\n    /**\n     * Source of the authentication challenge.\n     */\n    source?: AuthChallengeSource;\n    /**\n     * Origin of the challenger.\n     */\n    origin: string;\n    /**\n     * The authentication scheme used, such as basic or digest\n     */\n    scheme: string;\n    /**\n     * The realm of the challenge. May be empty.\n     */\n    realm: string;\n  }\n\n  export const enum AuthChallengeResponseResponse {\n    Default = 'Default',\n    CancelAuth = 'CancelAuth',\n    ProvideCredentials = 'ProvideCredentials',\n  }\n\n  /**\n   * Response to an AuthChallenge.\n   */\n  export interface AuthChallengeResponse {\n    /**\n     * The decision on what to do in response to the authorization challenge.  Default means\n     * deferring to the default behavior of the net stack, which will likely either the Cancel\n     * authentication or display a popup dialog box.\n     */\n    response: AuthChallengeResponseResponse;\n    /**\n     * The username to provide, possibly empty. Should only be set if response is\n     * ProvideCredentials.\n     */\n    username?: string;\n    /**\n     * The password to provide, possibly empty. Should only be set if response is\n     * ProvideCredentials.\n     */\n    password?: string;\n  }\n\n  /**\n   * Stages of the interception to begin intercepting. Request will intercept before the request is\n   * sent. Response will intercept after the response is received.\n   */\n  export const enum InterceptionStage {\n    Request = 'Request',\n    HeadersReceived = 'HeadersReceived',\n  }\n\n  /**\n   * Request pattern for interception.\n   */\n  export interface RequestPattern {\n    /**\n     * Wildcards (`'*'` -> zero or more, `'?'` -> exactly one) are allowed. Escape character is\n     * backslash. Omitting is equivalent to `\"*\"`.\n     */\n    urlPattern?: string;\n    /**\n     * If set, only requests for matching resource types will be intercepted.\n     */\n    resourceType?: ResourceType;\n    /**\n     * Stage at which to begin intercepting requests. Default is Request.\n     */\n    interceptionStage?: InterceptionStage;\n  }\n\n  /**\n   * Information about a signed exchange signature.\n   * https://wicg.github.io/webpackage/draft-yasskin-httpbis-origin-signed-exchanges-impl.html#rfc.section.3.1\n   */\n  export interface SignedExchangeSignature {\n    /**\n     * Signed exchange signature label.\n     */\n    label: string;\n    /**\n     * The hex string of signed exchange signature.\n     */\n    signature: string;\n    /**\n     * Signed exchange signature integrity.\n     */\n    integrity: string;\n    /**\n     * Signed exchange signature cert Url.\n     */\n    certUrl?: string;\n    /**\n     * The hex string of signed exchange signature cert sha256.\n     */\n    certSha256?: string;\n    /**\n     * Signed exchange signature validity Url.\n     */\n    validityUrl: string;\n    /**\n     * Signed exchange signature date.\n     */\n    date: integer;\n    /**\n     * Signed exchange signature expires.\n     */\n    expires: integer;\n    /**\n     * The encoded certificates.\n     */\n    certificates?: string[];\n  }\n\n  /**\n   * Information about a signed exchange header.\n   * https://wicg.github.io/webpackage/draft-yasskin-httpbis-origin-signed-exchanges-impl.html#cbor-representation\n   */\n  export interface SignedExchangeHeader {\n    /**\n     * Signed exchange request URL.\n     */\n    requestUrl: string;\n    /**\n     * Signed exchange response code.\n     */\n    responseCode: integer;\n    /**\n     * Signed exchange response headers.\n     */\n    responseHeaders: Headers;\n    /**\n     * Signed exchange response signature.\n     */\n    signatures: SignedExchangeSignature[];\n    /**\n     * Signed exchange header integrity hash in the form of `sha256-<base64-hash-value>`.\n     */\n    headerIntegrity: string;\n  }\n\n  /**\n   * Field type for a signed exchange related error.\n   */\n  export const enum SignedExchangeErrorField {\n    SignatureSig = 'signatureSig',\n    SignatureIntegrity = 'signatureIntegrity',\n    SignatureCertUrl = 'signatureCertUrl',\n    SignatureCertSha256 = 'signatureCertSha256',\n    SignatureValidityUrl = 'signatureValidityUrl',\n    SignatureTimestamps = 'signatureTimestamps',\n  }\n\n  /**\n   * Information about a signed exchange response.\n   */\n  export interface SignedExchangeError {\n    /**\n     * Error message.\n     */\n    message: string;\n    /**\n     * The index of the signature which caused the error.\n     */\n    signatureIndex?: integer;\n    /**\n     * The field which caused the error.\n     */\n    errorField?: SignedExchangeErrorField;\n  }\n\n  /**\n   * Information about a signed exchange response.\n   */\n  export interface SignedExchangeInfo {\n    /**\n     * The outer response of signed HTTP exchange which was received from network.\n     */\n    outerResponse: Response;\n    /**\n     * Whether network response for the signed exchange was accompanied by\n     * extra headers.\n     */\n    hasExtraInfo: boolean;\n    /**\n     * Information about the signed exchange header.\n     */\n    header?: SignedExchangeHeader;\n    /**\n     * Security details for the signed exchange header.\n     */\n    securityDetails?: SecurityDetails;\n    /**\n     * Errors occurred while handling the signed exchange.\n     */\n    errors?: SignedExchangeError[];\n  }\n\n  /**\n   * List of content encodings supported by the backend.\n   */\n  export const enum ContentEncoding {\n    Deflate = 'deflate',\n    Gzip = 'gzip',\n    Br = 'br',\n    Zstd = 'zstd',\n  }\n\n  export interface NetworkConditions {\n    /**\n     * Only matching requests will be affected by these conditions. Patterns use the URLPattern constructor string\n     * syntax (https://urlpattern.spec.whatwg.org/) and must be absolute. If the pattern is empty, all requests are\n     * matched (including p2p connections).\n     */\n    urlPattern: string;\n    /**\n     * Minimum latency from request sent to response headers received (ms).\n     */\n    latency: number;\n    /**\n     * Maximal aggregated download throughput (bytes/sec). -1 disables download throttling.\n     */\n    downloadThroughput: number;\n    /**\n     * Maximal aggregated upload throughput (bytes/sec).  -1 disables upload throttling.\n     */\n    uploadThroughput: number;\n    /**\n     * Connection type if known.\n     */\n    connectionType?: ConnectionType;\n    /**\n     * WebRTC packet loss (percent, 0-100). 0 disables packet loss emulation, 100 drops all the packets.\n     */\n    packetLoss?: number;\n    /**\n     * WebRTC packet queue length (packet). 0 removes any queue length limitations.\n     */\n    packetQueueLength?: integer;\n    /**\n     * WebRTC packetReordering feature.\n     */\n    packetReordering?: boolean;\n  }\n\n  export interface BlockPattern {\n    /**\n     * URL pattern to match. Patterns use the URLPattern constructor string syntax\n     * (https://urlpattern.spec.whatwg.org/) and must be absolute. Example: `*://*:*\\/*.css`.\n     */\n    urlPattern: string;\n    /**\n     * Whether or not to block the pattern. If false, a matching request will not be blocked even if it matches a later\n     * `BlockPattern`.\n     */\n    block: boolean;\n  }\n\n  export const enum DirectSocketDnsQueryType {\n    Ipv4 = 'ipv4',\n    Ipv6 = 'ipv6',\n  }\n\n  export interface DirectTCPSocketOptions {\n    /**\n     * TCP_NODELAY option\n     */\n    noDelay: boolean;\n    /**\n     * Expected to be unsigned integer.\n     */\n    keepAliveDelay?: number;\n    /**\n     * Expected to be unsigned integer.\n     */\n    sendBufferSize?: number;\n    /**\n     * Expected to be unsigned integer.\n     */\n    receiveBufferSize?: number;\n    dnsQueryType?: DirectSocketDnsQueryType;\n  }\n\n  export interface DirectUDPSocketOptions {\n    remoteAddr?: string;\n    /**\n     * Unsigned int 16.\n     */\n    remotePort?: integer;\n    localAddr?: string;\n    /**\n     * Unsigned int 16.\n     */\n    localPort?: integer;\n    dnsQueryType?: DirectSocketDnsQueryType;\n    /**\n     * Expected to be unsigned integer.\n     */\n    sendBufferSize?: number;\n    /**\n     * Expected to be unsigned integer.\n     */\n    receiveBufferSize?: number;\n  }\n\n  export interface DirectUDPMessage {\n    data: binary;\n    /**\n     * Null for connected mode.\n     */\n    remoteAddr?: string;\n    /**\n     * Null for connected mode.\n     * Expected to be unsigned integer.\n     */\n    remotePort?: integer;\n  }\n\n  export const enum PrivateNetworkRequestPolicy {\n    Allow = 'Allow',\n    BlockFromInsecureToMorePrivate = 'BlockFromInsecureToMorePrivate',\n    WarnFromInsecureToMorePrivate = 'WarnFromInsecureToMorePrivate',\n    PreflightBlock = 'PreflightBlock',\n    PreflightWarn = 'PreflightWarn',\n    PermissionBlock = 'PermissionBlock',\n    PermissionWarn = 'PermissionWarn',\n  }\n\n  export const enum IPAddressSpace {\n    Loopback = 'Loopback',\n    Local = 'Local',\n    Public = 'Public',\n    Unknown = 'Unknown',\n  }\n\n  export interface ConnectTiming {\n    /**\n     * Timing's requestTime is a baseline in seconds, while the other numbers are ticks in\n     * milliseconds relatively to this requestTime. Matches ResourceTiming's requestTime for\n     * the same request (but not for redirected requests).\n     */\n    requestTime: number;\n  }\n\n  export interface ClientSecurityState {\n    initiatorIsSecureContext: boolean;\n    initiatorIPAddressSpace: IPAddressSpace;\n    privateNetworkRequestPolicy: PrivateNetworkRequestPolicy;\n  }\n\n  export const enum CrossOriginOpenerPolicyValue {\n    SameOrigin = 'SameOrigin',\n    SameOriginAllowPopups = 'SameOriginAllowPopups',\n    RestrictProperties = 'RestrictProperties',\n    UnsafeNone = 'UnsafeNone',\n    SameOriginPlusCoep = 'SameOriginPlusCoep',\n    RestrictPropertiesPlusCoep = 'RestrictPropertiesPlusCoep',\n    NoopenerAllowPopups = 'NoopenerAllowPopups',\n  }\n\n  export interface CrossOriginOpenerPolicyStatus {\n    value: CrossOriginOpenerPolicyValue;\n    reportOnlyValue: CrossOriginOpenerPolicyValue;\n    reportingEndpoint?: string;\n    reportOnlyReportingEndpoint?: string;\n  }\n\n  export const enum CrossOriginEmbedderPolicyValue {\n    None = 'None',\n    Credentialless = 'Credentialless',\n    RequireCorp = 'RequireCorp',\n  }\n\n  export interface CrossOriginEmbedderPolicyStatus {\n    value: CrossOriginEmbedderPolicyValue;\n    reportOnlyValue: CrossOriginEmbedderPolicyValue;\n    reportingEndpoint?: string;\n    reportOnlyReportingEndpoint?: string;\n  }\n\n  export const enum ContentSecurityPolicySource {\n    HTTP = 'HTTP',\n    Meta = 'Meta',\n  }\n\n  export interface ContentSecurityPolicyStatus {\n    effectiveDirectives: string;\n    isEnforced: boolean;\n    source: ContentSecurityPolicySource;\n  }\n\n  export interface SecurityIsolationStatus {\n    coop?: CrossOriginOpenerPolicyStatus;\n    coep?: CrossOriginEmbedderPolicyStatus;\n    csp?: ContentSecurityPolicyStatus[];\n  }\n\n  /**\n   * The status of a Reporting API report.\n   */\n  export const enum ReportStatus {\n    Queued = 'Queued',\n    Pending = 'Pending',\n    MarkedForRemoval = 'MarkedForRemoval',\n    Success = 'Success',\n  }\n\n  export type ReportId = OpaqueIdentifier<string, 'Protocol.Network.ReportId'>;\n\n  /**\n   * An object representing a report generated by the Reporting API.\n   */\n  export interface ReportingApiReport {\n    id: ReportId;\n    /**\n     * The URL of the document that triggered the report.\n     */\n    initiatorUrl: string;\n    /**\n     * The name of the endpoint group that should be used to deliver the report.\n     */\n    destination: string;\n    /**\n     * The type of the report (specifies the set of data that is contained in the report body).\n     */\n    type: string;\n    /**\n     * When the report was generated.\n     */\n    timestamp: Network.TimeSinceEpoch;\n    /**\n     * How many uploads deep the related request was.\n     */\n    depth: integer;\n    /**\n     * The number of delivery attempts made so far, not including an active attempt.\n     */\n    completedAttempts: integer;\n    body: any;\n    status: ReportStatus;\n  }\n\n  export interface ReportingApiEndpoint {\n    /**\n     * The URL of the endpoint to which reports may be delivered.\n     */\n    url: string;\n    /**\n     * Name of the endpoint group.\n     */\n    groupName: string;\n  }\n\n  /**\n   * An object providing the result of a network resource load.\n   */\n  export interface LoadNetworkResourcePageResult {\n    success: boolean;\n    /**\n     * Optional values used for error reporting.\n     */\n    netError?: number;\n    netErrorName?: string;\n    httpStatusCode?: number;\n    /**\n     * If successful, one of the following two fields holds the result.\n     */\n    stream?: IO.StreamHandle;\n    /**\n     * Response headers.\n     */\n    headers?: Network.Headers;\n  }\n\n  /**\n   * An options object that may be extended later to better support CORS,\n   * CORB and streaming.\n   */\n  export interface LoadNetworkResourceOptions {\n    disableCache: boolean;\n    includeCredentials: boolean;\n  }\n\n  export interface GetIPProtectionProxyStatusResponse extends ProtocolResponseWithError {\n    /**\n     * Whether IP proxy is available\n     */\n    status: IpProxyStatus;\n  }\n\n  export interface SetIPProtectionProxyBypassEnabledRequest {\n    /**\n     * Whether IP Proxy is being bypassed by devtools; false by default.\n     */\n    enabled: boolean;\n  }\n\n  export interface SetAcceptedEncodingsRequest {\n    /**\n     * List of accepted content encodings.\n     */\n    encodings: ContentEncoding[];\n  }\n\n  export interface CanClearBrowserCacheResponse extends ProtocolResponseWithError {\n    /**\n     * True if browser cache can be cleared.\n     */\n    result: boolean;\n  }\n\n  export interface CanClearBrowserCookiesResponse extends ProtocolResponseWithError {\n    /**\n     * True if browser cookies can be cleared.\n     */\n    result: boolean;\n  }\n\n  export interface CanEmulateNetworkConditionsResponse extends ProtocolResponseWithError {\n    /**\n     * True if emulation of network conditions is supported.\n     */\n    result: boolean;\n  }\n\n  export interface ContinueInterceptedRequestRequest {\n    interceptionId: InterceptionId;\n    /**\n     * If set this causes the request to fail with the given reason. Passing `Aborted` for requests\n     * marked with `isNavigationRequest` also cancels the navigation. Must not be set in response\n     * to an authChallenge.\n     */\n    errorReason?: ErrorReason;\n    /**\n     * If set the requests completes using with the provided base64 encoded raw response, including\n     * HTTP status line and headers etc... Must not be set in response to an authChallenge.\n     */\n    rawResponse?: binary;\n    /**\n     * If set the request url will be modified in a way that's not observable by page. Must not be\n     * set in response to an authChallenge.\n     */\n    url?: string;\n    /**\n     * If set this allows the request method to be overridden. Must not be set in response to an\n     * authChallenge.\n     */\n    method?: string;\n    /**\n     * If set this allows postData to be set. Must not be set in response to an authChallenge.\n     */\n    postData?: string;\n    /**\n     * If set this allows the request headers to be changed. Must not be set in response to an\n     * authChallenge.\n     */\n    headers?: Headers;\n    /**\n     * Response to a requestIntercepted with an authChallenge. Must not be set otherwise.\n     */\n    authChallengeResponse?: AuthChallengeResponse;\n  }\n\n  export interface DeleteCookiesRequest {\n    /**\n     * Name of the cookies to remove.\n     */\n    name: string;\n    /**\n     * If specified, deletes all the cookies with the given name where domain and path match\n     * provided URL.\n     */\n    url?: string;\n    /**\n     * If specified, deletes only cookies with the exact domain.\n     */\n    domain?: string;\n    /**\n     * If specified, deletes only cookies with the exact path.\n     */\n    path?: string;\n    /**\n     * If specified, deletes only cookies with the the given name and partitionKey where\n     * all partition key attributes match the cookie partition key attribute.\n     */\n    partitionKey?: CookiePartitionKey;\n  }\n\n  export interface EmulateNetworkConditionsRequest {\n    /**\n     * True to emulate internet disconnection.\n     */\n    offline: boolean;\n    /**\n     * Minimum latency from request sent to response headers received (ms).\n     */\n    latency: number;\n    /**\n     * Maximal aggregated download throughput (bytes/sec). -1 disables download throttling.\n     */\n    downloadThroughput: number;\n    /**\n     * Maximal aggregated upload throughput (bytes/sec).  -1 disables upload throttling.\n     */\n    uploadThroughput: number;\n    /**\n     * Connection type if known.\n     */\n    connectionType?: ConnectionType;\n    /**\n     * WebRTC packet loss (percent, 0-100). 0 disables packet loss emulation, 100 drops all the packets.\n     */\n    packetLoss?: number;\n    /**\n     * WebRTC packet queue length (packet). 0 removes any queue length limitations.\n     */\n    packetQueueLength?: integer;\n    /**\n     * WebRTC packetReordering feature.\n     */\n    packetReordering?: boolean;\n  }\n\n  export interface EmulateNetworkConditionsByRuleRequest {\n    /**\n     * True to emulate internet disconnection.\n     */\n    offline: boolean;\n    /**\n     * Configure conditions for matching requests. If multiple entries match a request, the first entry wins.  Global\n     * conditions can be configured by leaving the urlPattern for the conditions empty. These global conditions are\n     * also applied for throttling of p2p connections.\n     */\n    matchedNetworkConditions: NetworkConditions[];\n  }\n\n  export interface EmulateNetworkConditionsByRuleResponse extends ProtocolResponseWithError {\n    /**\n     * An id for each entry in matchedNetworkConditions. The id will be included in the requestWillBeSentExtraInfo for\n     * requests affected by a rule.\n     */\n    ruleIds: string[];\n  }\n\n  export interface OverrideNetworkStateRequest {\n    /**\n     * True to emulate internet disconnection.\n     */\n    offline: boolean;\n    /**\n     * Minimum latency from request sent to response headers received (ms).\n     */\n    latency: number;\n    /**\n     * Maximal aggregated download throughput (bytes/sec). -1 disables download throttling.\n     */\n    downloadThroughput: number;\n    /**\n     * Maximal aggregated upload throughput (bytes/sec).  -1 disables upload throttling.\n     */\n    uploadThroughput: number;\n    /**\n     * Connection type if known.\n     */\n    connectionType?: ConnectionType;\n  }\n\n  export interface EnableRequest {\n    /**\n     * Buffer size in bytes to use when preserving network payloads (XHRs, etc).\n     */\n    maxTotalBufferSize?: integer;\n    /**\n     * Per-resource buffer size in bytes to use when preserving network payloads (XHRs, etc).\n     */\n    maxResourceBufferSize?: integer;\n    /**\n     * Longest post body size (in bytes) that would be included in requestWillBeSent notification\n     */\n    maxPostDataSize?: integer;\n    /**\n     * Whether DirectSocket chunk send/receive events should be reported.\n     */\n    reportDirectSocketTraffic?: boolean;\n    /**\n     * Enable storing response bodies outside of renderer, so that these survive\n     * a cross-process navigation. Requires maxTotalBufferSize to be set.\n     * Currently defaults to false.\n     */\n    enableDurableMessages?: boolean;\n  }\n\n  export interface GetAllCookiesResponse extends ProtocolResponseWithError {\n    /**\n     * Array of cookie objects.\n     */\n    cookies: Cookie[];\n  }\n\n  export interface GetCertificateRequest {\n    /**\n     * Origin to get certificate for.\n     */\n    origin: string;\n  }\n\n  export interface GetCertificateResponse extends ProtocolResponseWithError {\n    tableNames: string[];\n  }\n\n  export interface GetCookiesRequest {\n    /**\n     * The list of URLs for which applicable cookies will be fetched.\n     * If not specified, it's assumed to be set to the list containing\n     * the URLs of the page and all of its subframes.\n     */\n    urls?: string[];\n  }\n\n  export interface GetCookiesResponse extends ProtocolResponseWithError {\n    /**\n     * Array of cookie objects.\n     */\n    cookies: Cookie[];\n  }\n\n  export interface GetResponseBodyRequest {\n    /**\n     * Identifier of the network request to get content for.\n     */\n    requestId: RequestId;\n  }\n\n  export interface GetResponseBodyResponse extends ProtocolResponseWithError {\n    /**\n     * Response body.\n     */\n    body: string;\n    /**\n     * True, if content was sent as base64.\n     */\n    base64Encoded: boolean;\n  }\n\n  export interface GetRequestPostDataRequest {\n    /**\n     * Identifier of the network request to get content for.\n     */\n    requestId: RequestId;\n  }\n\n  export interface GetRequestPostDataResponse extends ProtocolResponseWithError {\n    /**\n     * Request body string, omitting files from multipart requests\n     */\n    postData: string;\n  }\n\n  export interface GetResponseBodyForInterceptionRequest {\n    /**\n     * Identifier for the intercepted request to get body for.\n     */\n    interceptionId: InterceptionId;\n  }\n\n  export interface GetResponseBodyForInterceptionResponse extends ProtocolResponseWithError {\n    /**\n     * Response body.\n     */\n    body: string;\n    /**\n     * True, if content was sent as base64.\n     */\n    base64Encoded: boolean;\n  }\n\n  export interface TakeResponseBodyForInterceptionAsStreamRequest {\n    interceptionId: InterceptionId;\n  }\n\n  export interface TakeResponseBodyForInterceptionAsStreamResponse extends ProtocolResponseWithError {\n    stream: IO.StreamHandle;\n  }\n\n  export interface ReplayXHRRequest {\n    /**\n     * Identifier of XHR to replay.\n     */\n    requestId: RequestId;\n  }\n\n  export interface SearchInResponseBodyRequest {\n    /**\n     * Identifier of the network response to search.\n     */\n    requestId: RequestId;\n    /**\n     * String to search for.\n     */\n    query: string;\n    /**\n     * If true, search is case sensitive.\n     */\n    caseSensitive?: boolean;\n    /**\n     * If true, treats string parameter as regex.\n     */\n    isRegex?: boolean;\n  }\n\n  export interface SearchInResponseBodyResponse extends ProtocolResponseWithError {\n    /**\n     * List of search matches.\n     */\n    result: Debugger.SearchMatch[];\n  }\n\n  export interface SetBlockedURLsRequest {\n    /**\n     * Patterns to match in the order in which they are given. These patterns\n     * also take precedence over any wildcard patterns defined in `urls`.\n     */\n    urlPatterns?: BlockPattern[];\n    /**\n     * URL patterns to block. Wildcards ('*') are allowed.\n     * @deprecated\n     */\n    urls?: string[];\n  }\n\n  export interface SetBypassServiceWorkerRequest {\n    /**\n     * Bypass service worker and load from network.\n     */\n    bypass: boolean;\n  }\n\n  export interface SetCacheDisabledRequest {\n    /**\n     * Cache disabled state.\n     */\n    cacheDisabled: boolean;\n  }\n\n  export interface SetCookieRequest {\n    /**\n     * Cookie name.\n     */\n    name: string;\n    /**\n     * Cookie value.\n     */\n    value: string;\n    /**\n     * The request-URI to associate with the setting of the cookie. This value can affect the\n     * default domain, path, source port, and source scheme values of the created cookie.\n     */\n    url?: string;\n    /**\n     * Cookie domain.\n     */\n    domain?: string;\n    /**\n     * Cookie path.\n     */\n    path?: string;\n    /**\n     * True if cookie is secure.\n     */\n    secure?: boolean;\n    /**\n     * True if cookie is http-only.\n     */\n    httpOnly?: boolean;\n    /**\n     * Cookie SameSite type.\n     */\n    sameSite?: CookieSameSite;\n    /**\n     * Cookie expiration date, session cookie if not set\n     */\n    expires?: TimeSinceEpoch;\n    /**\n     * Cookie Priority type.\n     */\n    priority?: CookiePriority;\n    /**\n     * True if cookie is SameParty.\n     */\n    sameParty?: boolean;\n    /**\n     * Cookie source scheme type.\n     */\n    sourceScheme?: CookieSourceScheme;\n    /**\n     * Cookie source port. Valid values are {-1, [1, 65535]}, -1 indicates an unspecified port.\n     * An unspecified port value allows protocol clients to emulate legacy cookie scope for the port.\n     * This is a temporary ability and it will be removed in the future.\n     */\n    sourcePort?: integer;\n    /**\n     * Cookie partition key. If not set, the cookie will be set as not partitioned.\n     */\n    partitionKey?: CookiePartitionKey;\n  }\n\n  export interface SetCookieResponse extends ProtocolResponseWithError {\n    /**\n     * Always set to true. If an error occurs, the response indicates protocol error.\n     * @deprecated\n     */\n    success: boolean;\n  }\n\n  export interface SetCookiesRequest {\n    /**\n     * Cookies to be set.\n     */\n    cookies: CookieParam[];\n  }\n\n  export interface SetExtraHTTPHeadersRequest {\n    /**\n     * Map with extra HTTP headers.\n     */\n    headers: Headers;\n  }\n\n  export interface SetAttachDebugStackRequest {\n    /**\n     * Whether to attach a page script stack for debugging purpose.\n     */\n    enabled: boolean;\n  }\n\n  export interface SetRequestInterceptionRequest {\n    /**\n     * Requests matching any of these patterns will be forwarded and wait for the corresponding\n     * continueInterceptedRequest call.\n     */\n    patterns: RequestPattern[];\n  }\n\n  export interface SetUserAgentOverrideRequest {\n    /**\n     * User agent to use.\n     */\n    userAgent: string;\n    /**\n     * Browser language to emulate.\n     */\n    acceptLanguage?: string;\n    /**\n     * The platform navigator.platform should return.\n     */\n    platform?: string;\n    /**\n     * To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData\n     */\n    userAgentMetadata?: Emulation.UserAgentMetadata;\n  }\n\n  export interface StreamResourceContentRequest {\n    /**\n     * Identifier of the request to stream.\n     */\n    requestId: RequestId;\n  }\n\n  export interface StreamResourceContentResponse extends ProtocolResponseWithError {\n    /**\n     * Data that has been buffered until streaming is enabled.\n     */\n    bufferedData: binary;\n  }\n\n  export interface GetSecurityIsolationStatusRequest {\n    /**\n     * If no frameId is provided, the status of the target is provided.\n     */\n    frameId?: Page.FrameId;\n  }\n\n  export interface GetSecurityIsolationStatusResponse extends ProtocolResponseWithError {\n    status: SecurityIsolationStatus;\n  }\n\n  export interface EnableReportingApiRequest {\n    /**\n     * Whether to enable or disable events for the Reporting API\n     */\n    enable: boolean;\n  }\n\n  export interface LoadNetworkResourceRequest {\n    /**\n     * Frame id to get the resource for. Mandatory for frame targets, and\n     * should be omitted for worker targets.\n     */\n    frameId?: Page.FrameId;\n    /**\n     * URL of the resource to get content for.\n     */\n    url: string;\n    /**\n     * Options for the request.\n     */\n    options: LoadNetworkResourceOptions;\n  }\n\n  export interface LoadNetworkResourceResponse extends ProtocolResponseWithError {\n    resource: LoadNetworkResourcePageResult;\n  }\n\n  export interface SetCookieControlsRequest {\n    /**\n     * Whether 3pc restriction is enabled.\n     */\n    enableThirdPartyCookieRestriction: boolean;\n    /**\n     * Whether 3pc grace period exception should be enabled; false by default.\n     */\n    disableThirdPartyCookieMetadata: boolean;\n    /**\n     * Whether 3pc heuristics exceptions should be enabled; false by default.\n     */\n    disableThirdPartyCookieHeuristics: boolean;\n  }\n\n  /**\n   * Fired when data chunk was received over the network.\n   */\n  export interface DataReceivedEvent {\n    /**\n     * Request identifier.\n     */\n    requestId: RequestId;\n    /**\n     * Timestamp.\n     */\n    timestamp: MonotonicTime;\n    /**\n     * Data chunk length.\n     */\n    dataLength: integer;\n    /**\n     * Actual bytes received (might be less than dataLength for compressed encodings).\n     */\n    encodedDataLength: integer;\n    /**\n     * Data that was received.\n     */\n    data?: binary;\n  }\n\n  /**\n   * Fired when EventSource message is received.\n   */\n  export interface EventSourceMessageReceivedEvent {\n    /**\n     * Request identifier.\n     */\n    requestId: RequestId;\n    /**\n     * Timestamp.\n     */\n    timestamp: MonotonicTime;\n    /**\n     * Message type.\n     */\n    eventName: string;\n    /**\n     * Message identifier.\n     */\n    eventId: string;\n    /**\n     * Message content.\n     */\n    data: string;\n  }\n\n  /**\n   * Fired when HTTP request has failed to load.\n   */\n  export interface LoadingFailedEvent {\n    /**\n     * Request identifier.\n     */\n    requestId: RequestId;\n    /**\n     * Timestamp.\n     */\n    timestamp: MonotonicTime;\n    /**\n     * Resource type.\n     */\n    type: ResourceType;\n    /**\n     * Error message. List of network errors: https://cs.chromium.org/chromium/src/net/base/net_error_list.h\n     */\n    errorText: string;\n    /**\n     * True if loading was canceled.\n     */\n    canceled?: boolean;\n    /**\n     * The reason why loading was blocked, if any.\n     */\n    blockedReason?: BlockedReason;\n    /**\n     * The reason why loading was blocked by CORS, if any.\n     */\n    corsErrorStatus?: CorsErrorStatus;\n  }\n\n  /**\n   * Fired when HTTP request has finished loading.\n   */\n  export interface LoadingFinishedEvent {\n    /**\n     * Request identifier.\n     */\n    requestId: RequestId;\n    /**\n     * Timestamp.\n     */\n    timestamp: MonotonicTime;\n    /**\n     * Total number of bytes received for this request.\n     */\n    encodedDataLength: number;\n  }\n\n  /**\n   * Details of an intercepted HTTP request, which must be either allowed, blocked, modified or\n   * mocked.\n   * Deprecated, use Fetch.requestPaused instead.\n   * @deprecated\n   */\n  export interface RequestInterceptedEvent {\n    /**\n     * Each request the page makes will have a unique id, however if any redirects are encountered\n     * while processing that fetch, they will be reported with the same id as the original fetch.\n     * Likewise if HTTP authentication is needed then the same fetch id will be used.\n     */\n    interceptionId: InterceptionId;\n    request: Request;\n    /**\n     * The id of the frame that initiated the request.\n     */\n    frameId: Page.FrameId;\n    /**\n     * How the requested resource will be used.\n     */\n    resourceType: ResourceType;\n    /**\n     * Whether this is a navigation request, which can abort the navigation completely.\n     */\n    isNavigationRequest: boolean;\n    /**\n     * Set if the request is a navigation that will result in a download.\n     * Only present after response is received from the server (i.e. HeadersReceived stage).\n     */\n    isDownload?: boolean;\n    /**\n     * Redirect location, only sent if a redirect was intercepted.\n     */\n    redirectUrl?: string;\n    /**\n     * Details of the Authorization Challenge encountered. If this is set then\n     * continueInterceptedRequest must contain an authChallengeResponse.\n     */\n    authChallenge?: AuthChallenge;\n    /**\n     * Response error if intercepted at response stage or if redirect occurred while intercepting\n     * request.\n     */\n    responseErrorReason?: ErrorReason;\n    /**\n     * Response code if intercepted at response stage or if redirect occurred while intercepting\n     * request or auth retry occurred.\n     */\n    responseStatusCode?: integer;\n    /**\n     * Response headers if intercepted at the response stage or if redirect occurred while\n     * intercepting request or auth retry occurred.\n     */\n    responseHeaders?: Headers;\n    /**\n     * If the intercepted request had a corresponding requestWillBeSent event fired for it, then\n     * this requestId will be the same as the requestId present in the requestWillBeSent event.\n     */\n    requestId?: RequestId;\n  }\n\n  /**\n   * Fired if request ended up loading from cache.\n   */\n  export interface RequestServedFromCacheEvent {\n    /**\n     * Request identifier.\n     */\n    requestId: RequestId;\n  }\n\n  /**\n   * Fired when page is about to send HTTP request.\n   */\n  export interface RequestWillBeSentEvent {\n    /**\n     * Request identifier.\n     */\n    requestId: RequestId;\n    /**\n     * Loader identifier. Empty string if the request is fetched from worker.\n     */\n    loaderId: LoaderId;\n    /**\n     * URL of the document this request is loaded for.\n     */\n    documentURL: string;\n    /**\n     * Request data.\n     */\n    request: Request;\n    /**\n     * Timestamp.\n     */\n    timestamp: MonotonicTime;\n    /**\n     * Timestamp.\n     */\n    wallTime: TimeSinceEpoch;\n    /**\n     * Request initiator.\n     */\n    initiator: Initiator;\n    /**\n     * In the case that redirectResponse is populated, this flag indicates whether\n     * requestWillBeSentExtraInfo and responseReceivedExtraInfo events will be or were emitted\n     * for the request which was just redirected.\n     */\n    redirectHasExtraInfo: boolean;\n    /**\n     * Redirect response data.\n     */\n    redirectResponse?: Response;\n    /**\n     * Type of this resource.\n     */\n    type?: ResourceType;\n    /**\n     * Frame identifier.\n     */\n    frameId?: Page.FrameId;\n    /**\n     * Whether the request is initiated by a user gesture. Defaults to false.\n     */\n    hasUserGesture?: boolean;\n  }\n\n  /**\n   * Fired when resource loading priority is changed\n   */\n  export interface ResourceChangedPriorityEvent {\n    /**\n     * Request identifier.\n     */\n    requestId: RequestId;\n    /**\n     * New priority\n     */\n    newPriority: ResourcePriority;\n    /**\n     * Timestamp.\n     */\n    timestamp: MonotonicTime;\n  }\n\n  /**\n   * Fired when a signed exchange was received over the network\n   */\n  export interface SignedExchangeReceivedEvent {\n    /**\n     * Request identifier.\n     */\n    requestId: RequestId;\n    /**\n     * Information about the signed exchange response.\n     */\n    info: SignedExchangeInfo;\n  }\n\n  /**\n   * Fired when HTTP response is available.\n   */\n  export interface ResponseReceivedEvent {\n    /**\n     * Request identifier.\n     */\n    requestId: RequestId;\n    /**\n     * Loader identifier. Empty string if the request is fetched from worker.\n     */\n    loaderId: LoaderId;\n    /**\n     * Timestamp.\n     */\n    timestamp: MonotonicTime;\n    /**\n     * Resource type.\n     */\n    type: ResourceType;\n    /**\n     * Response data.\n     */\n    response: Response;\n    /**\n     * Indicates whether requestWillBeSentExtraInfo and responseReceivedExtraInfo events will be\n     * or were emitted for this request.\n     */\n    hasExtraInfo: boolean;\n    /**\n     * Frame identifier.\n     */\n    frameId?: Page.FrameId;\n  }\n\n  /**\n   * Fired when WebSocket is closed.\n   */\n  export interface WebSocketClosedEvent {\n    /**\n     * Request identifier.\n     */\n    requestId: RequestId;\n    /**\n     * Timestamp.\n     */\n    timestamp: MonotonicTime;\n  }\n\n  /**\n   * Fired upon WebSocket creation.\n   */\n  export interface WebSocketCreatedEvent {\n    /**\n     * Request identifier.\n     */\n    requestId: RequestId;\n    /**\n     * WebSocket request URL.\n     */\n    url: string;\n    /**\n     * Request initiator.\n     */\n    initiator?: Initiator;\n  }\n\n  /**\n   * Fired when WebSocket message error occurs.\n   */\n  export interface WebSocketFrameErrorEvent {\n    /**\n     * Request identifier.\n     */\n    requestId: RequestId;\n    /**\n     * Timestamp.\n     */\n    timestamp: MonotonicTime;\n    /**\n     * WebSocket error message.\n     */\n    errorMessage: string;\n  }\n\n  /**\n   * Fired when WebSocket message is received.\n   */\n  export interface WebSocketFrameReceivedEvent {\n    /**\n     * Request identifier.\n     */\n    requestId: RequestId;\n    /**\n     * Timestamp.\n     */\n    timestamp: MonotonicTime;\n    /**\n     * WebSocket response data.\n     */\n    response: WebSocketFrame;\n  }\n\n  /**\n   * Fired when WebSocket message is sent.\n   */\n  export interface WebSocketFrameSentEvent {\n    /**\n     * Request identifier.\n     */\n    requestId: RequestId;\n    /**\n     * Timestamp.\n     */\n    timestamp: MonotonicTime;\n    /**\n     * WebSocket response data.\n     */\n    response: WebSocketFrame;\n  }\n\n  /**\n   * Fired when WebSocket handshake response becomes available.\n   */\n  export interface WebSocketHandshakeResponseReceivedEvent {\n    /**\n     * Request identifier.\n     */\n    requestId: RequestId;\n    /**\n     * Timestamp.\n     */\n    timestamp: MonotonicTime;\n    /**\n     * WebSocket response data.\n     */\n    response: WebSocketResponse;\n  }\n\n  /**\n   * Fired when WebSocket is about to initiate handshake.\n   */\n  export interface WebSocketWillSendHandshakeRequestEvent {\n    /**\n     * Request identifier.\n     */\n    requestId: RequestId;\n    /**\n     * Timestamp.\n     */\n    timestamp: MonotonicTime;\n    /**\n     * UTC Timestamp.\n     */\n    wallTime: TimeSinceEpoch;\n    /**\n     * WebSocket request data.\n     */\n    request: WebSocketRequest;\n  }\n\n  /**\n   * Fired upon WebTransport creation.\n   */\n  export interface WebTransportCreatedEvent {\n    /**\n     * WebTransport identifier.\n     */\n    transportId: RequestId;\n    /**\n     * WebTransport request URL.\n     */\n    url: string;\n    /**\n     * Timestamp.\n     */\n    timestamp: MonotonicTime;\n    /**\n     * Request initiator.\n     */\n    initiator?: Initiator;\n  }\n\n  /**\n   * Fired when WebTransport handshake is finished.\n   */\n  export interface WebTransportConnectionEstablishedEvent {\n    /**\n     * WebTransport identifier.\n     */\n    transportId: RequestId;\n    /**\n     * Timestamp.\n     */\n    timestamp: MonotonicTime;\n  }\n\n  /**\n   * Fired when WebTransport is disposed.\n   */\n  export interface WebTransportClosedEvent {\n    /**\n     * WebTransport identifier.\n     */\n    transportId: RequestId;\n    /**\n     * Timestamp.\n     */\n    timestamp: MonotonicTime;\n  }\n\n  /**\n   * Fired upon direct_socket.TCPSocket creation.\n   */\n  export interface DirectTCPSocketCreatedEvent {\n    identifier: RequestId;\n    remoteAddr: string;\n    /**\n     * Unsigned int 16.\n     */\n    remotePort: integer;\n    options: DirectTCPSocketOptions;\n    timestamp: MonotonicTime;\n    initiator?: Initiator;\n  }\n\n  /**\n   * Fired when direct_socket.TCPSocket connection is opened.\n   */\n  export interface DirectTCPSocketOpenedEvent {\n    identifier: RequestId;\n    remoteAddr: string;\n    /**\n     * Expected to be unsigned integer.\n     */\n    remotePort: integer;\n    timestamp: MonotonicTime;\n    localAddr?: string;\n    /**\n     * Expected to be unsigned integer.\n     */\n    localPort?: integer;\n  }\n\n  /**\n   * Fired when direct_socket.TCPSocket is aborted.\n   */\n  export interface DirectTCPSocketAbortedEvent {\n    identifier: RequestId;\n    errorMessage: string;\n    timestamp: MonotonicTime;\n  }\n\n  /**\n   * Fired when direct_socket.TCPSocket is closed.\n   */\n  export interface DirectTCPSocketClosedEvent {\n    identifier: RequestId;\n    timestamp: MonotonicTime;\n  }\n\n  /**\n   * Fired when data is sent to tcp direct socket stream.\n   */\n  export interface DirectTCPSocketChunkSentEvent {\n    identifier: RequestId;\n    data: binary;\n    timestamp: MonotonicTime;\n  }\n\n  /**\n   * Fired when data is received from tcp direct socket stream.\n   */\n  export interface DirectTCPSocketChunkReceivedEvent {\n    identifier: RequestId;\n    data: binary;\n    timestamp: MonotonicTime;\n  }\n\n  /**\n   * Fired upon direct_socket.UDPSocket creation.\n   */\n  export interface DirectUDPSocketCreatedEvent {\n    identifier: RequestId;\n    options: DirectUDPSocketOptions;\n    timestamp: MonotonicTime;\n    initiator?: Initiator;\n  }\n\n  /**\n   * Fired when direct_socket.UDPSocket connection is opened.\n   */\n  export interface DirectUDPSocketOpenedEvent {\n    identifier: RequestId;\n    localAddr: string;\n    /**\n     * Expected to be unsigned integer.\n     */\n    localPort: integer;\n    timestamp: MonotonicTime;\n    remoteAddr?: string;\n    /**\n     * Expected to be unsigned integer.\n     */\n    remotePort?: integer;\n  }\n\n  /**\n   * Fired when direct_socket.UDPSocket is aborted.\n   */\n  export interface DirectUDPSocketAbortedEvent {\n    identifier: RequestId;\n    errorMessage: string;\n    timestamp: MonotonicTime;\n  }\n\n  /**\n   * Fired when direct_socket.UDPSocket is closed.\n   */\n  export interface DirectUDPSocketClosedEvent {\n    identifier: RequestId;\n    timestamp: MonotonicTime;\n  }\n\n  /**\n   * Fired when message is sent to udp direct socket stream.\n   */\n  export interface DirectUDPSocketChunkSentEvent {\n    identifier: RequestId;\n    message: DirectUDPMessage;\n    timestamp: MonotonicTime;\n  }\n\n  /**\n   * Fired when message is received from udp direct socket stream.\n   */\n  export interface DirectUDPSocketChunkReceivedEvent {\n    identifier: RequestId;\n    message: DirectUDPMessage;\n    timestamp: MonotonicTime;\n  }\n\n  /**\n   * Fired when additional information about a requestWillBeSent event is available from the\n   * network stack. Not every requestWillBeSent event will have an additional\n   * requestWillBeSentExtraInfo fired for it, and there is no guarantee whether requestWillBeSent\n   * or requestWillBeSentExtraInfo will be fired first for the same request.\n   */\n  export interface RequestWillBeSentExtraInfoEvent {\n    /**\n     * Request identifier. Used to match this information to an existing requestWillBeSent event.\n     */\n    requestId: RequestId;\n    /**\n     * A list of cookies potentially associated to the requested URL. This includes both cookies sent with\n     * the request and the ones not sent; the latter are distinguished by having blockedReasons field set.\n     */\n    associatedCookies: AssociatedCookie[];\n    /**\n     * Raw request headers as they will be sent over the wire.\n     */\n    headers: Headers;\n    /**\n     * Connection timing information for the request.\n     */\n    connectTiming: ConnectTiming;\n    /**\n     * The client security state set for the request.\n     */\n    clientSecurityState?: ClientSecurityState;\n    /**\n     * Whether the site has partitioned cookies stored in a partition different than the current one.\n     */\n    siteHasCookieInOtherPartition?: boolean;\n    /**\n     * The network conditions id if this request was affected by network conditions configured via\n     * emulateNetworkConditionsByRule.\n     */\n    appliedNetworkConditionsId?: string;\n  }\n\n  /**\n   * Fired when additional information about a responseReceived event is available from the network\n   * stack. Not every responseReceived event will have an additional responseReceivedExtraInfo for\n   * it, and responseReceivedExtraInfo may be fired before or after responseReceived.\n   */\n  export interface ResponseReceivedExtraInfoEvent {\n    /**\n     * Request identifier. Used to match this information to another responseReceived event.\n     */\n    requestId: RequestId;\n    /**\n     * A list of cookies which were not stored from the response along with the corresponding\n     * reasons for blocking. The cookies here may not be valid due to syntax errors, which\n     * are represented by the invalid cookie line string instead of a proper cookie.\n     */\n    blockedCookies: BlockedSetCookieWithReason[];\n    /**\n     * Raw response headers as they were received over the wire.\n     * Duplicate headers in the response are represented as a single key with their values\n     * concatentated using `\\n` as the separator.\n     * See also `headersText` that contains verbatim text for HTTP/1.*.\n     */\n    headers: Headers;\n    /**\n     * The IP address space of the resource. The address space can only be determined once the transport\n     * established the connection, so we can't send it in `requestWillBeSentExtraInfo`.\n     */\n    resourceIPAddressSpace: IPAddressSpace;\n    /**\n     * The status code of the response. This is useful in cases the request failed and no responseReceived\n     * event is triggered, which is the case for, e.g., CORS errors. This is also the correct status code\n     * for cached requests, where the status in responseReceived is a 200 and this will be 304.\n     */\n    statusCode: integer;\n    /**\n     * Raw response header text as it was received over the wire. The raw text may not always be\n     * available, such as in the case of HTTP/2 or QUIC.\n     */\n    headersText?: string;\n    /**\n     * The cookie partition key that will be used to store partitioned cookies set in this response.\n     * Only sent when partitioned cookies are enabled.\n     */\n    cookiePartitionKey?: CookiePartitionKey;\n    /**\n     * True if partitioned cookies are enabled, but the partition key is not serializable to string.\n     */\n    cookiePartitionKeyOpaque?: boolean;\n    /**\n     * A list of cookies which should have been blocked by 3PCD but are exempted and stored from\n     * the response with the corresponding reason.\n     */\n    exemptedCookies?: ExemptedSetCookieWithReason[];\n  }\n\n  /**\n   * Fired when 103 Early Hints headers is received in addition to the common response.\n   * Not every responseReceived event will have an responseReceivedEarlyHints fired.\n   * Only one responseReceivedEarlyHints may be fired for eached responseReceived event.\n   */\n  export interface ResponseReceivedEarlyHintsEvent {\n    /**\n     * Request identifier. Used to match this information to another responseReceived event.\n     */\n    requestId: RequestId;\n    /**\n     * Raw response headers as they were received over the wire.\n     * Duplicate headers in the response are represented as a single key with their values\n     * concatentated using `\\n` as the separator.\n     * See also `headersText` that contains verbatim text for HTTP/1.*.\n     */\n    headers: Headers;\n  }\n\n  export const enum TrustTokenOperationDoneEventStatus {\n    Ok = 'Ok',\n    InvalidArgument = 'InvalidArgument',\n    MissingIssuerKeys = 'MissingIssuerKeys',\n    FailedPrecondition = 'FailedPrecondition',\n    ResourceExhausted = 'ResourceExhausted',\n    AlreadyExists = 'AlreadyExists',\n    ResourceLimited = 'ResourceLimited',\n    Unauthorized = 'Unauthorized',\n    BadResponse = 'BadResponse',\n    InternalError = 'InternalError',\n    UnknownError = 'UnknownError',\n    FulfilledLocally = 'FulfilledLocally',\n    SiteIssuerLimit = 'SiteIssuerLimit',\n  }\n\n  /**\n   * Fired exactly once for each Trust Token operation. Depending on\n   * the type of the operation and whether the operation succeeded or\n   * failed, the event is fired before the corresponding request was sent\n   * or after the response was received.\n   */\n  export interface TrustTokenOperationDoneEvent {\n    /**\n     * Detailed success or error status of the operation.\n     * 'AlreadyExists' also signifies a successful operation, as the result\n     * of the operation already exists und thus, the operation was abort\n     * preemptively (e.g. a cache hit).\n     */\n    status: TrustTokenOperationDoneEventStatus;\n    type: TrustTokenOperationType;\n    requestId: RequestId;\n    /**\n     * Top level origin. The context in which the operation was attempted.\n     */\n    topLevelOrigin?: string;\n    /**\n     * Origin of the issuer in case of a \"Issuance\" or \"Redemption\" operation.\n     */\n    issuerOrigin?: string;\n    /**\n     * The number of obtained Trust Tokens on a successful \"Issuance\" operation.\n     */\n    issuedTokenCount?: integer;\n  }\n\n  /**\n   * Is sent whenever a new report is added.\n   * And after 'enableReportingApi' for all existing reports.\n   */\n  export interface ReportingApiReportAddedEvent {\n    report: ReportingApiReport;\n  }\n\n  export interface ReportingApiReportUpdatedEvent {\n    report: ReportingApiReport;\n  }\n\n  export interface ReportingApiEndpointsChangedForOriginEvent {\n    /**\n     * Origin of the document(s) which configured the endpoints.\n     */\n    origin: string;\n    endpoints: ReportingApiEndpoint[];\n  }\n}\n\n/**\n * This domain provides various functionality related to drawing atop the inspected page.\n */\nexport namespace Overlay {\n\n  /**\n   * Configuration data for drawing the source order of an elements children.\n   */\n  export interface SourceOrderConfig {\n    /**\n     * the color to outline the given element in.\n     */\n    parentOutlineColor: DOM.RGBA;\n    /**\n     * the color to outline the child elements in.\n     */\n    childOutlineColor: DOM.RGBA;\n  }\n\n  /**\n   * Configuration data for the highlighting of Grid elements.\n   */\n  export interface GridHighlightConfig {\n    /**\n     * Whether the extension lines from grid cells to the rulers should be shown (default: false).\n     */\n    showGridExtensionLines?: boolean;\n    /**\n     * Show Positive line number labels (default: false).\n     */\n    showPositiveLineNumbers?: boolean;\n    /**\n     * Show Negative line number labels (default: false).\n     */\n    showNegativeLineNumbers?: boolean;\n    /**\n     * Show area name labels (default: false).\n     */\n    showAreaNames?: boolean;\n    /**\n     * Show line name labels (default: false).\n     */\n    showLineNames?: boolean;\n    /**\n     * Show track size labels (default: false).\n     */\n    showTrackSizes?: boolean;\n    /**\n     * The grid container border highlight color (default: transparent).\n     */\n    gridBorderColor?: DOM.RGBA;\n    /**\n     * The cell border color (default: transparent). Deprecated, please use rowLineColor and columnLineColor instead.\n     * @deprecated\n     */\n    cellBorderColor?: DOM.RGBA;\n    /**\n     * The row line color (default: transparent).\n     */\n    rowLineColor?: DOM.RGBA;\n    /**\n     * The column line color (default: transparent).\n     */\n    columnLineColor?: DOM.RGBA;\n    /**\n     * Whether the grid border is dashed (default: false).\n     */\n    gridBorderDash?: boolean;\n    /**\n     * Whether the cell border is dashed (default: false). Deprecated, please us rowLineDash and columnLineDash instead.\n     * @deprecated\n     */\n    cellBorderDash?: boolean;\n    /**\n     * Whether row lines are dashed (default: false).\n     */\n    rowLineDash?: boolean;\n    /**\n     * Whether column lines are dashed (default: false).\n     */\n    columnLineDash?: boolean;\n    /**\n     * The row gap highlight fill color (default: transparent).\n     */\n    rowGapColor?: DOM.RGBA;\n    /**\n     * The row gap hatching fill color (default: transparent).\n     */\n    rowHatchColor?: DOM.RGBA;\n    /**\n     * The column gap highlight fill color (default: transparent).\n     */\n    columnGapColor?: DOM.RGBA;\n    /**\n     * The column gap hatching fill color (default: transparent).\n     */\n    columnHatchColor?: DOM.RGBA;\n    /**\n     * The named grid areas border color (Default: transparent).\n     */\n    areaBorderColor?: DOM.RGBA;\n    /**\n     * The grid container background color (Default: transparent).\n     */\n    gridBackgroundColor?: DOM.RGBA;\n  }\n\n  /**\n   * Configuration data for the highlighting of Flex container elements.\n   */\n  export interface FlexContainerHighlightConfig {\n    /**\n     * The style of the container border\n     */\n    containerBorder?: LineStyle;\n    /**\n     * The style of the separator between lines\n     */\n    lineSeparator?: LineStyle;\n    /**\n     * The style of the separator between items\n     */\n    itemSeparator?: LineStyle;\n    /**\n     * Style of content-distribution space on the main axis (justify-content).\n     */\n    mainDistributedSpace?: BoxStyle;\n    /**\n     * Style of content-distribution space on the cross axis (align-content).\n     */\n    crossDistributedSpace?: BoxStyle;\n    /**\n     * Style of empty space caused by row gaps (gap/row-gap).\n     */\n    rowGapSpace?: BoxStyle;\n    /**\n     * Style of empty space caused by columns gaps (gap/column-gap).\n     */\n    columnGapSpace?: BoxStyle;\n    /**\n     * Style of the self-alignment line (align-items).\n     */\n    crossAlignment?: LineStyle;\n  }\n\n  /**\n   * Configuration data for the highlighting of Flex item elements.\n   */\n  export interface FlexItemHighlightConfig {\n    /**\n     * Style of the box representing the item's base size\n     */\n    baseSizeBox?: BoxStyle;\n    /**\n     * Style of the border around the box representing the item's base size\n     */\n    baseSizeBorder?: LineStyle;\n    /**\n     * Style of the arrow representing if the item grew or shrank\n     */\n    flexibilityArrow?: LineStyle;\n  }\n\n  export const enum LineStylePattern {\n    Dashed = 'dashed',\n    Dotted = 'dotted',\n  }\n\n  /**\n   * Style information for drawing a line.\n   */\n  export interface LineStyle {\n    /**\n     * The color of the line (default: transparent)\n     */\n    color?: DOM.RGBA;\n    /**\n     * The line pattern (default: solid)\n     */\n    pattern?: LineStylePattern;\n  }\n\n  /**\n   * Style information for drawing a box.\n   */\n  export interface BoxStyle {\n    /**\n     * The background color for the box (default: transparent)\n     */\n    fillColor?: DOM.RGBA;\n    /**\n     * The hatching color for the box (default: transparent)\n     */\n    hatchColor?: DOM.RGBA;\n  }\n\n  export const enum ContrastAlgorithm {\n    Aa = 'aa',\n    Aaa = 'aaa',\n    Apca = 'apca',\n  }\n\n  /**\n   * Configuration data for the highlighting of page elements.\n   */\n  export interface HighlightConfig {\n    /**\n     * Whether the node info tooltip should be shown (default: false).\n     */\n    showInfo?: boolean;\n    /**\n     * Whether the node styles in the tooltip (default: false).\n     */\n    showStyles?: boolean;\n    /**\n     * Whether the rulers should be shown (default: false).\n     */\n    showRulers?: boolean;\n    /**\n     * Whether the a11y info should be shown (default: true).\n     */\n    showAccessibilityInfo?: boolean;\n    /**\n     * Whether the extension lines from node to the rulers should be shown (default: false).\n     */\n    showExtensionLines?: boolean;\n    /**\n     * The content box highlight fill color (default: transparent).\n     */\n    contentColor?: DOM.RGBA;\n    /**\n     * The padding highlight fill color (default: transparent).\n     */\n    paddingColor?: DOM.RGBA;\n    /**\n     * The border highlight fill color (default: transparent).\n     */\n    borderColor?: DOM.RGBA;\n    /**\n     * The margin highlight fill color (default: transparent).\n     */\n    marginColor?: DOM.RGBA;\n    /**\n     * The event target element highlight fill color (default: transparent).\n     */\n    eventTargetColor?: DOM.RGBA;\n    /**\n     * The shape outside fill color (default: transparent).\n     */\n    shapeColor?: DOM.RGBA;\n    /**\n     * The shape margin fill color (default: transparent).\n     */\n    shapeMarginColor?: DOM.RGBA;\n    /**\n     * The grid layout color (default: transparent).\n     */\n    cssGridColor?: DOM.RGBA;\n    /**\n     * The color format used to format color styles (default: hex).\n     */\n    colorFormat?: ColorFormat;\n    /**\n     * The grid layout highlight configuration (default: all transparent).\n     */\n    gridHighlightConfig?: GridHighlightConfig;\n    /**\n     * The flex container highlight configuration (default: all transparent).\n     */\n    flexContainerHighlightConfig?: FlexContainerHighlightConfig;\n    /**\n     * The flex item highlight configuration (default: all transparent).\n     */\n    flexItemHighlightConfig?: FlexItemHighlightConfig;\n    /**\n     * The contrast algorithm to use for the contrast ratio (default: aa).\n     */\n    contrastAlgorithm?: ContrastAlgorithm;\n    /**\n     * The container query container highlight configuration (default: all transparent).\n     */\n    containerQueryContainerHighlightConfig?: ContainerQueryContainerHighlightConfig;\n  }\n\n  export const enum ColorFormat {\n    Rgb = 'rgb',\n    Hsl = 'hsl',\n    Hwb = 'hwb',\n    Hex = 'hex',\n  }\n\n  /**\n   * Configurations for Persistent Grid Highlight\n   */\n  export interface GridNodeHighlightConfig {\n    /**\n     * A descriptor for the highlight appearance.\n     */\n    gridHighlightConfig: GridHighlightConfig;\n    /**\n     * Identifier of the node to highlight.\n     */\n    nodeId: DOM.NodeId;\n  }\n\n  export interface FlexNodeHighlightConfig {\n    /**\n     * A descriptor for the highlight appearance of flex containers.\n     */\n    flexContainerHighlightConfig: FlexContainerHighlightConfig;\n    /**\n     * Identifier of the node to highlight.\n     */\n    nodeId: DOM.NodeId;\n  }\n\n  export interface ScrollSnapContainerHighlightConfig {\n    /**\n     * The style of the snapport border (default: transparent)\n     */\n    snapportBorder?: LineStyle;\n    /**\n     * The style of the snap area border (default: transparent)\n     */\n    snapAreaBorder?: LineStyle;\n    /**\n     * The margin highlight fill color (default: transparent).\n     */\n    scrollMarginColor?: DOM.RGBA;\n    /**\n     * The padding highlight fill color (default: transparent).\n     */\n    scrollPaddingColor?: DOM.RGBA;\n  }\n\n  export interface ScrollSnapHighlightConfig {\n    /**\n     * A descriptor for the highlight appearance of scroll snap containers.\n     */\n    scrollSnapContainerHighlightConfig: ScrollSnapContainerHighlightConfig;\n    /**\n     * Identifier of the node to highlight.\n     */\n    nodeId: DOM.NodeId;\n  }\n\n  /**\n   * Configuration for dual screen hinge\n   */\n  export interface HingeConfig {\n    /**\n     * A rectangle represent hinge\n     */\n    rect: DOM.Rect;\n    /**\n     * The content box highlight fill color (default: a dark color).\n     */\n    contentColor?: DOM.RGBA;\n    /**\n     * The content box highlight outline color (default: transparent).\n     */\n    outlineColor?: DOM.RGBA;\n  }\n\n  /**\n   * Configuration for Window Controls Overlay\n   */\n  export interface WindowControlsOverlayConfig {\n    /**\n     * Whether the title bar CSS should be shown when emulating the Window Controls Overlay.\n     */\n    showCSS: boolean;\n    /**\n     * Selected platforms to show the overlay.\n     */\n    selectedPlatform: string;\n    /**\n     * The theme color defined in app manifest.\n     */\n    themeColor: string;\n  }\n\n  export interface ContainerQueryHighlightConfig {\n    /**\n     * A descriptor for the highlight appearance of container query containers.\n     */\n    containerQueryContainerHighlightConfig: ContainerQueryContainerHighlightConfig;\n    /**\n     * Identifier of the container node to highlight.\n     */\n    nodeId: DOM.NodeId;\n  }\n\n  export interface ContainerQueryContainerHighlightConfig {\n    /**\n     * The style of the container border.\n     */\n    containerBorder?: LineStyle;\n    /**\n     * The style of the descendants' borders.\n     */\n    descendantBorder?: LineStyle;\n  }\n\n  export interface IsolatedElementHighlightConfig {\n    /**\n     * A descriptor for the highlight appearance of an element in isolation mode.\n     */\n    isolationModeHighlightConfig: IsolationModeHighlightConfig;\n    /**\n     * Identifier of the isolated element to highlight.\n     */\n    nodeId: DOM.NodeId;\n  }\n\n  export interface IsolationModeHighlightConfig {\n    /**\n     * The fill color of the resizers (default: transparent).\n     */\n    resizerColor?: DOM.RGBA;\n    /**\n     * The fill color for resizer handles (default: transparent).\n     */\n    resizerHandleColor?: DOM.RGBA;\n    /**\n     * The fill color for the mask covering non-isolated elements (default: transparent).\n     */\n    maskColor?: DOM.RGBA;\n  }\n\n  export const enum InspectMode {\n    SearchForNode = 'searchForNode',\n    SearchForUAShadowDOM = 'searchForUAShadowDOM',\n    CaptureAreaScreenshot = 'captureAreaScreenshot',\n    None = 'none',\n  }\n\n  export interface GetHighlightObjectForTestRequest {\n    /**\n     * Id of the node to get highlight object for.\n     */\n    nodeId: DOM.NodeId;\n    /**\n     * Whether to include distance info.\n     */\n    includeDistance?: boolean;\n    /**\n     * Whether to include style info.\n     */\n    includeStyle?: boolean;\n    /**\n     * The color format to get config with (default: hex).\n     */\n    colorFormat?: ColorFormat;\n    /**\n     * Whether to show accessibility info (default: true).\n     */\n    showAccessibilityInfo?: boolean;\n  }\n\n  export interface GetHighlightObjectForTestResponse extends ProtocolResponseWithError {\n    /**\n     * Highlight data for the node.\n     */\n    highlight: any;\n  }\n\n  export interface GetGridHighlightObjectsForTestRequest {\n    /**\n     * Ids of the node to get highlight object for.\n     */\n    nodeIds: DOM.NodeId[];\n  }\n\n  export interface GetGridHighlightObjectsForTestResponse extends ProtocolResponseWithError {\n    /**\n     * Grid Highlight data for the node ids provided.\n     */\n    highlights: any;\n  }\n\n  export interface GetSourceOrderHighlightObjectForTestRequest {\n    /**\n     * Id of the node to highlight.\n     */\n    nodeId: DOM.NodeId;\n  }\n\n  export interface GetSourceOrderHighlightObjectForTestResponse extends ProtocolResponseWithError {\n    /**\n     * Source order highlight data for the node id provided.\n     */\n    highlight: any;\n  }\n\n  export interface HighlightFrameRequest {\n    /**\n     * Identifier of the frame to highlight.\n     */\n    frameId: Page.FrameId;\n    /**\n     * The content box highlight fill color (default: transparent).\n     */\n    contentColor?: DOM.RGBA;\n    /**\n     * The content box highlight outline color (default: transparent).\n     */\n    contentOutlineColor?: DOM.RGBA;\n  }\n\n  export interface HighlightNodeRequest {\n    /**\n     * A descriptor for the highlight appearance.\n     */\n    highlightConfig: HighlightConfig;\n    /**\n     * Identifier of the node to highlight.\n     */\n    nodeId?: DOM.NodeId;\n    /**\n     * Identifier of the backend node to highlight.\n     */\n    backendNodeId?: DOM.BackendNodeId;\n    /**\n     * JavaScript object id of the node to be highlighted.\n     */\n    objectId?: Runtime.RemoteObjectId;\n    /**\n     * Selectors to highlight relevant nodes.\n     */\n    selector?: string;\n  }\n\n  export interface HighlightQuadRequest {\n    /**\n     * Quad to highlight\n     */\n    quad: DOM.Quad;\n    /**\n     * The highlight fill color (default: transparent).\n     */\n    color?: DOM.RGBA;\n    /**\n     * The highlight outline color (default: transparent).\n     */\n    outlineColor?: DOM.RGBA;\n  }\n\n  export interface HighlightRectRequest {\n    /**\n     * X coordinate\n     */\n    x: integer;\n    /**\n     * Y coordinate\n     */\n    y: integer;\n    /**\n     * Rectangle width\n     */\n    width: integer;\n    /**\n     * Rectangle height\n     */\n    height: integer;\n    /**\n     * The highlight fill color (default: transparent).\n     */\n    color?: DOM.RGBA;\n    /**\n     * The highlight outline color (default: transparent).\n     */\n    outlineColor?: DOM.RGBA;\n  }\n\n  export interface HighlightSourceOrderRequest {\n    /**\n     * A descriptor for the appearance of the overlay drawing.\n     */\n    sourceOrderConfig: SourceOrderConfig;\n    /**\n     * Identifier of the node to highlight.\n     */\n    nodeId?: DOM.NodeId;\n    /**\n     * Identifier of the backend node to highlight.\n     */\n    backendNodeId?: DOM.BackendNodeId;\n    /**\n     * JavaScript object id of the node to be highlighted.\n     */\n    objectId?: Runtime.RemoteObjectId;\n  }\n\n  export interface SetInspectModeRequest {\n    /**\n     * Set an inspection mode.\n     */\n    mode: InspectMode;\n    /**\n     * A descriptor for the highlight appearance of hovered-over nodes. May be omitted if `enabled\n     * == false`.\n     */\n    highlightConfig?: HighlightConfig;\n  }\n\n  export interface SetShowAdHighlightsRequest {\n    /**\n     * True for showing ad highlights\n     */\n    show: boolean;\n  }\n\n  export interface SetPausedInDebuggerMessageRequest {\n    /**\n     * The message to display, also triggers resume and step over controls.\n     */\n    message?: string;\n  }\n\n  export interface SetShowDebugBordersRequest {\n    /**\n     * True for showing debug borders\n     */\n    show: boolean;\n  }\n\n  export interface SetShowFPSCounterRequest {\n    /**\n     * True for showing the FPS counter\n     */\n    show: boolean;\n  }\n\n  export interface SetShowGridOverlaysRequest {\n    /**\n     * An array of node identifiers and descriptors for the highlight appearance.\n     */\n    gridNodeHighlightConfigs: GridNodeHighlightConfig[];\n  }\n\n  export interface SetShowFlexOverlaysRequest {\n    /**\n     * An array of node identifiers and descriptors for the highlight appearance.\n     */\n    flexNodeHighlightConfigs: FlexNodeHighlightConfig[];\n  }\n\n  export interface SetShowScrollSnapOverlaysRequest {\n    /**\n     * An array of node identifiers and descriptors for the highlight appearance.\n     */\n    scrollSnapHighlightConfigs: ScrollSnapHighlightConfig[];\n  }\n\n  export interface SetShowContainerQueryOverlaysRequest {\n    /**\n     * An array of node identifiers and descriptors for the highlight appearance.\n     */\n    containerQueryHighlightConfigs: ContainerQueryHighlightConfig[];\n  }\n\n  export interface SetShowPaintRectsRequest {\n    /**\n     * True for showing paint rectangles\n     */\n    result: boolean;\n  }\n\n  export interface SetShowLayoutShiftRegionsRequest {\n    /**\n     * True for showing layout shift regions\n     */\n    result: boolean;\n  }\n\n  export interface SetShowScrollBottleneckRectsRequest {\n    /**\n     * True for showing scroll bottleneck rects\n     */\n    show: boolean;\n  }\n\n  export interface SetShowHitTestBordersRequest {\n    /**\n     * True for showing hit-test borders\n     */\n    show: boolean;\n  }\n\n  export interface SetShowWebVitalsRequest {\n    show: boolean;\n  }\n\n  export interface SetShowViewportSizeOnResizeRequest {\n    /**\n     * Whether to paint size or not.\n     */\n    show: boolean;\n  }\n\n  export interface SetShowHingeRequest {\n    /**\n     * hinge data, null means hideHinge\n     */\n    hingeConfig?: HingeConfig;\n  }\n\n  export interface SetShowIsolatedElementsRequest {\n    /**\n     * An array of node identifiers and descriptors for the highlight appearance.\n     */\n    isolatedElementHighlightConfigs: IsolatedElementHighlightConfig[];\n  }\n\n  export interface SetShowWindowControlsOverlayRequest {\n    /**\n     * Window Controls Overlay data, null means hide Window Controls Overlay\n     */\n    windowControlsOverlayConfig?: WindowControlsOverlayConfig;\n  }\n\n  /**\n   * Fired when the node should be inspected. This happens after call to `setInspectMode` or when\n   * user manually inspects an element.\n   */\n  export interface InspectNodeRequestedEvent {\n    /**\n     * Id of the node to inspect.\n     */\n    backendNodeId: DOM.BackendNodeId;\n  }\n\n  /**\n   * Fired when the node should be highlighted. This happens after call to `setInspectMode`.\n   */\n  export interface NodeHighlightRequestedEvent {\n    nodeId: DOM.NodeId;\n  }\n\n  /**\n   * Fired when user asks to capture screenshot of some area on the page.\n   */\n  export interface ScreenshotRequestedEvent {\n    /**\n     * Viewport to capture, in device independent pixels (dip).\n     */\n    viewport: Page.Viewport;\n  }\n}\n\n/**\n * This domain allows interacting with the browser to control PWAs.\n */\nexport namespace PWA {\n\n  /**\n   * The following types are the replica of\n   * https://crsrc.org/c/chrome/browser/web_applications/proto/web_app_os_integration_state.proto;drc=9910d3be894c8f142c977ba1023f30a656bc13fc;l=67\n   */\n  export interface FileHandlerAccept {\n    /**\n     * New name of the mimetype according to\n     * https://www.iana.org/assignments/media-types/media-types.xhtml\n     */\n    mediaType: string;\n    fileExtensions: string[];\n  }\n\n  export interface FileHandler {\n    action: string;\n    accepts: FileHandlerAccept[];\n    displayName: string;\n  }\n\n  /**\n   * If user prefers opening the app in browser or an app window.\n   */\n  export const enum DisplayMode {\n    Standalone = 'standalone',\n    Browser = 'browser',\n  }\n\n  export interface GetOsAppStateRequest {\n    /**\n     * The id from the webapp's manifest file, commonly it's the url of the\n     * site installing the webapp. See\n     * https://web.dev/learn/pwa/web-app-manifest.\n     */\n    manifestId: string;\n  }\n\n  export interface GetOsAppStateResponse extends ProtocolResponseWithError {\n    badgeCount: integer;\n    fileHandlers: FileHandler[];\n  }\n\n  export interface InstallRequest {\n    manifestId: string;\n    /**\n     * The location of the app or bundle overriding the one derived from the\n     * manifestId.\n     */\n    installUrlOrBundleUrl?: string;\n  }\n\n  export interface UninstallRequest {\n    manifestId: string;\n  }\n\n  export interface LaunchRequest {\n    manifestId: string;\n    url?: string;\n  }\n\n  export interface LaunchResponse extends ProtocolResponseWithError {\n    /**\n     * ID of the tab target created as a result.\n     */\n    targetId: Target.TargetID;\n  }\n\n  export interface LaunchFilesInAppRequest {\n    manifestId: string;\n    files: string[];\n  }\n\n  export interface LaunchFilesInAppResponse extends ProtocolResponseWithError {\n    /**\n     * IDs of the tab targets created as the result.\n     */\n    targetIds: Target.TargetID[];\n  }\n\n  export interface OpenCurrentPageInAppRequest {\n    manifestId: string;\n  }\n\n  export interface ChangeAppUserSettingsRequest {\n    manifestId: string;\n    /**\n     * If user allows the links clicked on by the user in the app's scope, or\n     * extended scope if the manifest has scope extensions and the flags\n     * `DesktopPWAsLinkCapturingWithScopeExtensions` and\n     * `WebAppEnableScopeExtensions` are enabled.\n     *\n     * Note, the API does not support resetting the linkCapturing to the\n     * initial value, uninstalling and installing the web app again will reset\n     * it.\n     *\n     * TODO(crbug.com/339453269): Setting this value on ChromeOS is not\n     * supported yet.\n     */\n    linkCapturing?: boolean;\n    displayMode?: DisplayMode;\n  }\n}\n\n/**\n * Actions and events related to the inspected page belong to the page domain.\n */\nexport namespace Page {\n\n  /**\n   * Unique frame identifier.\n   */\n  export type FrameId = OpaqueIdentifier<string, 'Protocol.Page.FrameId'>;\n\n  /**\n   * Indicates whether a frame has been identified as an ad.\n   */\n  export const enum AdFrameType {\n    None = 'none',\n    Child = 'child',\n    Root = 'root',\n  }\n\n  export const enum AdFrameExplanation {\n    ParentIsAd = 'ParentIsAd',\n    CreatedByAdScript = 'CreatedByAdScript',\n    MatchedBlockingRule = 'MatchedBlockingRule',\n  }\n\n  /**\n   * Indicates whether a frame has been identified as an ad and why.\n   */\n  export interface AdFrameStatus {\n    adFrameType: AdFrameType;\n    explanations?: AdFrameExplanation[];\n  }\n\n  /**\n   * Identifies the script which caused a script or frame to be labelled as an\n   * ad.\n   */\n  export interface AdScriptId {\n    /**\n     * Script Id of the script which caused a script or frame to be labelled as\n     * an ad.\n     */\n    scriptId: Runtime.ScriptId;\n    /**\n     * Id of scriptId's debugger.\n     */\n    debuggerId: Runtime.UniqueDebuggerId;\n  }\n\n  /**\n   * Encapsulates the script ancestry and the root script filterlist rule that\n   * caused the frame to be labelled as an ad. Only created when `ancestryChain`\n   * is not empty.\n   */\n  export interface AdScriptAncestry {\n    /**\n     * A chain of `AdScriptId`s representing the ancestry of an ad script that\n     * led to the creation of a frame. The chain is ordered from the script\n     * itself (lower level) up to its root ancestor that was flagged by\n     * filterlist.\n     */\n    ancestryChain: AdScriptId[];\n    /**\n     * The filterlist rule that caused the root (last) script in\n     * `ancestryChain` to be ad-tagged. Only populated if the rule is\n     * available.\n     */\n    rootScriptFilterlistRule?: string;\n  }\n\n  /**\n   * Indicates whether the frame is a secure context and why it is the case.\n   */\n  export const enum SecureContextType {\n    Secure = 'Secure',\n    SecureLocalhost = 'SecureLocalhost',\n    InsecureScheme = 'InsecureScheme',\n    InsecureAncestor = 'InsecureAncestor',\n  }\n\n  /**\n   * Indicates whether the frame is cross-origin isolated and why it is the case.\n   */\n  export const enum CrossOriginIsolatedContextType {\n    Isolated = 'Isolated',\n    NotIsolated = 'NotIsolated',\n    NotIsolatedFeatureDisabled = 'NotIsolatedFeatureDisabled',\n  }\n\n  export const enum GatedAPIFeatures {\n    SharedArrayBuffers = 'SharedArrayBuffers',\n    SharedArrayBuffersTransferAllowed = 'SharedArrayBuffersTransferAllowed',\n    PerformanceMeasureMemory = 'PerformanceMeasureMemory',\n    PerformanceProfile = 'PerformanceProfile',\n  }\n\n  /**\n   * All Permissions Policy features. This enum should match the one defined\n   * in services/network/public/cpp/permissions_policy/permissions_policy_features.json5.\n   * LINT_SKIP.IfChange(PermissionsPolicyFeature)\n   */\n  export const enum PermissionsPolicyFeature {\n    Accelerometer = 'accelerometer',\n    AllScreensCapture = 'all-screens-capture',\n    AmbientLightSensor = 'ambient-light-sensor',\n    AriaNotify = 'aria-notify',\n    AttributionReporting = 'attribution-reporting',\n    Autoplay = 'autoplay',\n    Bluetooth = 'bluetooth',\n    BrowsingTopics = 'browsing-topics',\n    Camera = 'camera',\n    CapturedSurfaceControl = 'captured-surface-control',\n    ChDpr = 'ch-dpr',\n    ChDeviceMemory = 'ch-device-memory',\n    ChDownlink = 'ch-downlink',\n    ChEct = 'ch-ect',\n    ChPrefersColorScheme = 'ch-prefers-color-scheme',\n    ChPrefersReducedMotion = 'ch-prefers-reduced-motion',\n    ChPrefersReducedTransparency = 'ch-prefers-reduced-transparency',\n    ChRtt = 'ch-rtt',\n    ChSaveData = 'ch-save-data',\n    ChUa = 'ch-ua',\n    ChUaArch = 'ch-ua-arch',\n    ChUaBitness = 'ch-ua-bitness',\n    ChUaHighEntropyValues = 'ch-ua-high-entropy-values',\n    ChUaPlatform = 'ch-ua-platform',\n    ChUaModel = 'ch-ua-model',\n    ChUaMobile = 'ch-ua-mobile',\n    ChUaFormFactors = 'ch-ua-form-factors',\n    ChUaFullVersion = 'ch-ua-full-version',\n    ChUaFullVersionList = 'ch-ua-full-version-list',\n    ChUaPlatformVersion = 'ch-ua-platform-version',\n    ChUaWow64 = 'ch-ua-wow64',\n    ChViewportHeight = 'ch-viewport-height',\n    ChViewportWidth = 'ch-viewport-width',\n    ChWidth = 'ch-width',\n    ClipboardRead = 'clipboard-read',\n    ClipboardWrite = 'clipboard-write',\n    ComputePressure = 'compute-pressure',\n    ControlledFrame = 'controlled-frame',\n    CrossOriginIsolated = 'cross-origin-isolated',\n    DeferredFetch = 'deferred-fetch',\n    DeferredFetchMinimal = 'deferred-fetch-minimal',\n    DeviceAttributes = 'device-attributes',\n    DigitalCredentialsCreate = 'digital-credentials-create',\n    DigitalCredentialsGet = 'digital-credentials-get',\n    DirectSockets = 'direct-sockets',\n    DirectSocketsMulticast = 'direct-sockets-multicast',\n    DirectSocketsPrivate = 'direct-sockets-private',\n    DisplayCapture = 'display-capture',\n    DocumentDomain = 'document-domain',\n    EncryptedMedia = 'encrypted-media',\n    ExecutionWhileOutOfViewport = 'execution-while-out-of-viewport',\n    ExecutionWhileNotRendered = 'execution-while-not-rendered',\n    FencedUnpartitionedStorageRead = 'fenced-unpartitioned-storage-read',\n    FocusWithoutUserActivation = 'focus-without-user-activation',\n    Fullscreen = 'fullscreen',\n    Frobulate = 'frobulate',\n    Gamepad = 'gamepad',\n    Geolocation = 'geolocation',\n    Gyroscope = 'gyroscope',\n    Hid = 'hid',\n    IdentityCredentialsGet = 'identity-credentials-get',\n    IdleDetection = 'idle-detection',\n    InterestCohort = 'interest-cohort',\n    JoinAdInterestGroup = 'join-ad-interest-group',\n    KeyboardMap = 'keyboard-map',\n    LanguageDetector = 'language-detector',\n    LanguageModel = 'language-model',\n    LocalFonts = 'local-fonts',\n    LocalNetworkAccess = 'local-network-access',\n    Magnetometer = 'magnetometer',\n    MediaPlaybackWhileNotVisible = 'media-playback-while-not-visible',\n    Microphone = 'microphone',\n    Midi = 'midi',\n    OnDeviceSpeechRecognition = 'on-device-speech-recognition',\n    OtpCredentials = 'otp-credentials',\n    Payment = 'payment',\n    PictureInPicture = 'picture-in-picture',\n    Popins = 'popins',\n    PrivateAggregation = 'private-aggregation',\n    PrivateStateTokenIssuance = 'private-state-token-issuance',\n    PrivateStateTokenRedemption = 'private-state-token-redemption',\n    PublickeyCredentialsCreate = 'publickey-credentials-create',\n    PublickeyCredentialsGet = 'publickey-credentials-get',\n    RecordAdAuctionEvents = 'record-ad-auction-events',\n    Rewriter = 'rewriter',\n    RunAdAuction = 'run-ad-auction',\n    ScreenWakeLock = 'screen-wake-lock',\n    Serial = 'serial',\n    SharedAutofill = 'shared-autofill',\n    SharedStorage = 'shared-storage',\n    SharedStorageSelectUrl = 'shared-storage-select-url',\n    SmartCard = 'smart-card',\n    SpeakerSelection = 'speaker-selection',\n    StorageAccess = 'storage-access',\n    SubApps = 'sub-apps',\n    Summarizer = 'summarizer',\n    SyncXhr = 'sync-xhr',\n    Translator = 'translator',\n    Unload = 'unload',\n    Usb = 'usb',\n    UsbUnrestricted = 'usb-unrestricted',\n    VerticalScroll = 'vertical-scroll',\n    WebAppInstallation = 'web-app-installation',\n    WebPrinting = 'web-printing',\n    WebShare = 'web-share',\n    WindowManagement = 'window-management',\n    Writer = 'writer',\n    XrSpatialTracking = 'xr-spatial-tracking',\n  }\n\n  /**\n   * Reason for a permissions policy feature to be disabled.\n   */\n  export const enum PermissionsPolicyBlockReason {\n    Header = 'Header',\n    IframeAttribute = 'IframeAttribute',\n    InFencedFrameTree = 'InFencedFrameTree',\n    InIsolatedApp = 'InIsolatedApp',\n  }\n\n  export interface PermissionsPolicyBlockLocator {\n    frameId: FrameId;\n    blockReason: PermissionsPolicyBlockReason;\n  }\n\n  export interface PermissionsPolicyFeatureState {\n    feature: PermissionsPolicyFeature;\n    allowed: boolean;\n    locator?: PermissionsPolicyBlockLocator;\n  }\n\n  /**\n   * Origin Trial(https://www.chromium.org/blink/origin-trials) support.\n   * Status for an Origin Trial token.\n   */\n  export const enum OriginTrialTokenStatus {\n    Success = 'Success',\n    NotSupported = 'NotSupported',\n    Insecure = 'Insecure',\n    Expired = 'Expired',\n    WrongOrigin = 'WrongOrigin',\n    InvalidSignature = 'InvalidSignature',\n    Malformed = 'Malformed',\n    WrongVersion = 'WrongVersion',\n    FeatureDisabled = 'FeatureDisabled',\n    TokenDisabled = 'TokenDisabled',\n    FeatureDisabledForUser = 'FeatureDisabledForUser',\n    UnknownTrial = 'UnknownTrial',\n  }\n\n  /**\n   * Status for an Origin Trial.\n   */\n  export const enum OriginTrialStatus {\n    Enabled = 'Enabled',\n    ValidTokenNotProvided = 'ValidTokenNotProvided',\n    OSNotSupported = 'OSNotSupported',\n    TrialNotAllowed = 'TrialNotAllowed',\n  }\n\n  export const enum OriginTrialUsageRestriction {\n    None = 'None',\n    Subset = 'Subset',\n  }\n\n  export interface OriginTrialToken {\n    origin: string;\n    matchSubDomains: boolean;\n    trialName: string;\n    expiryTime: Network.TimeSinceEpoch;\n    isThirdParty: boolean;\n    usageRestriction: OriginTrialUsageRestriction;\n  }\n\n  export interface OriginTrialTokenWithStatus {\n    rawTokenText: string;\n    /**\n     * `parsedToken` is present only when the token is extractable and\n     * parsable.\n     */\n    parsedToken?: OriginTrialToken;\n    status: OriginTrialTokenStatus;\n  }\n\n  export interface OriginTrial {\n    trialName: string;\n    status: OriginTrialStatus;\n    tokensWithStatus: OriginTrialTokenWithStatus[];\n  }\n\n  /**\n   * Additional information about the frame document's security origin.\n   */\n  export interface SecurityOriginDetails {\n    /**\n     * Indicates whether the frame document's security origin is one\n     * of the local hostnames (e.g. \"localhost\") or IP addresses (IPv4\n     * 127.0.0.0/8 or IPv6 ::1).\n     */\n    isLocalhost: boolean;\n  }\n\n  /**\n   * Information about the Frame on the page.\n   */\n  export interface Frame {\n    /**\n     * Frame unique identifier.\n     */\n    id: FrameId;\n    /**\n     * Parent frame identifier.\n     */\n    parentId?: FrameId;\n    /**\n     * Identifier of the loader associated with this frame.\n     */\n    loaderId: Network.LoaderId;\n    /**\n     * Frame's name as specified in the tag.\n     */\n    name?: string;\n    /**\n     * Frame document's URL without fragment.\n     */\n    url: string;\n    /**\n     * Frame document's URL fragment including the '#'.\n     */\n    urlFragment?: string;\n    /**\n     * Frame document's registered domain, taking the public suffixes list into account.\n     * Extracted from the Frame's url.\n     * Example URLs: http://www.google.com/file.html -> \"google.com\"\n     *               http://a.b.co.uk/file.html      -> \"b.co.uk\"\n     */\n    domainAndRegistry: string;\n    /**\n     * Frame document's security origin.\n     */\n    securityOrigin: string;\n    /**\n     * Additional details about the frame document's security origin.\n     */\n    securityOriginDetails?: SecurityOriginDetails;\n    /**\n     * Frame document's mimeType as determined by the browser.\n     */\n    mimeType: string;\n    /**\n     * If the frame failed to load, this contains the URL that could not be loaded. Note that unlike url above, this URL may contain a fragment.\n     */\n    unreachableUrl?: string;\n    /**\n     * Indicates whether this frame was tagged as an ad and why.\n     */\n    adFrameStatus?: AdFrameStatus;\n    /**\n     * Indicates whether the main document is a secure context and explains why that is the case.\n     */\n    secureContextType: SecureContextType;\n    /**\n     * Indicates whether this is a cross origin isolated context.\n     */\n    crossOriginIsolatedContextType: CrossOriginIsolatedContextType;\n    /**\n     * Indicated which gated APIs / features are available.\n     */\n    gatedAPIFeatures: GatedAPIFeatures[];\n  }\n\n  /**\n   * Information about the Resource on the page.\n   */\n  export interface FrameResource {\n    /**\n     * Resource URL.\n     */\n    url: string;\n    /**\n     * Type of this resource.\n     */\n    type: Network.ResourceType;\n    /**\n     * Resource mimeType as determined by the browser.\n     */\n    mimeType: string;\n    /**\n     * last-modified timestamp as reported by server.\n     */\n    lastModified?: Network.TimeSinceEpoch;\n    /**\n     * Resource content size.\n     */\n    contentSize?: number;\n    /**\n     * True if the resource failed to load.\n     */\n    failed?: boolean;\n    /**\n     * True if the resource was canceled during loading.\n     */\n    canceled?: boolean;\n  }\n\n  /**\n   * Information about the Frame hierarchy along with their cached resources.\n   */\n  export interface FrameResourceTree {\n    /**\n     * Frame information for this tree item.\n     */\n    frame: Frame;\n    /**\n     * Child frames.\n     */\n    childFrames?: FrameResourceTree[];\n    /**\n     * Information about frame resources.\n     */\n    resources: FrameResource[];\n  }\n\n  /**\n   * Information about the Frame hierarchy.\n   */\n  export interface FrameTree {\n    /**\n     * Frame information for this tree item.\n     */\n    frame: Frame;\n    /**\n     * Child frames.\n     */\n    childFrames?: FrameTree[];\n  }\n\n  /**\n   * Unique script identifier.\n   */\n  export type ScriptIdentifier = OpaqueIdentifier<string, 'Protocol.Page.ScriptIdentifier'>;\n\n  /**\n   * Transition type.\n   */\n  export const enum TransitionType {\n    Link = 'link',\n    Typed = 'typed',\n    Address_bar = 'address_bar',\n    Auto_bookmark = 'auto_bookmark',\n    Auto_subframe = 'auto_subframe',\n    Manual_subframe = 'manual_subframe',\n    Generated = 'generated',\n    Auto_toplevel = 'auto_toplevel',\n    Form_submit = 'form_submit',\n    Reload = 'reload',\n    Keyword = 'keyword',\n    Keyword_generated = 'keyword_generated',\n    Other = 'other',\n  }\n\n  /**\n   * Navigation history entry.\n   */\n  export interface NavigationEntry {\n    /**\n     * Unique id of the navigation history entry.\n     */\n    id: integer;\n    /**\n     * URL of the navigation history entry.\n     */\n    url: string;\n    /**\n     * URL that the user typed in the url bar.\n     */\n    userTypedURL: string;\n    /**\n     * Title of the navigation history entry.\n     */\n    title: string;\n    /**\n     * Transition type.\n     */\n    transitionType: TransitionType;\n  }\n\n  /**\n   * Screencast frame metadata.\n   */\n  export interface ScreencastFrameMetadata {\n    /**\n     * Top offset in DIP.\n     */\n    offsetTop: number;\n    /**\n     * Page scale factor.\n     */\n    pageScaleFactor: number;\n    /**\n     * Device screen width in DIP.\n     */\n    deviceWidth: number;\n    /**\n     * Device screen height in DIP.\n     */\n    deviceHeight: number;\n    /**\n     * Position of horizontal scroll in CSS pixels.\n     */\n    scrollOffsetX: number;\n    /**\n     * Position of vertical scroll in CSS pixels.\n     */\n    scrollOffsetY: number;\n    /**\n     * Frame swap timestamp.\n     */\n    timestamp?: Network.TimeSinceEpoch;\n  }\n\n  /**\n   * Javascript dialog type.\n   */\n  export const enum DialogType {\n    Alert = 'alert',\n    Confirm = 'confirm',\n    Prompt = 'prompt',\n    Beforeunload = 'beforeunload',\n  }\n\n  /**\n   * Error while paring app manifest.\n   */\n  export interface AppManifestError {\n    /**\n     * Error message.\n     */\n    message: string;\n    /**\n     * If critical, this is a non-recoverable parse error.\n     */\n    critical: integer;\n    /**\n     * Error line.\n     */\n    line: integer;\n    /**\n     * Error column.\n     */\n    column: integer;\n  }\n\n  /**\n   * Parsed app manifest properties.\n   */\n  export interface AppManifestParsedProperties {\n    /**\n     * Computed scope value\n     */\n    scope: string;\n  }\n\n  /**\n   * Layout viewport position and dimensions.\n   */\n  export interface LayoutViewport {\n    /**\n     * Horizontal offset relative to the document (CSS pixels).\n     */\n    pageX: integer;\n    /**\n     * Vertical offset relative to the document (CSS pixels).\n     */\n    pageY: integer;\n    /**\n     * Width (CSS pixels), excludes scrollbar if present.\n     */\n    clientWidth: integer;\n    /**\n     * Height (CSS pixels), excludes scrollbar if present.\n     */\n    clientHeight: integer;\n  }\n\n  /**\n   * Visual viewport position, dimensions, and scale.\n   */\n  export interface VisualViewport {\n    /**\n     * Horizontal offset relative to the layout viewport (CSS pixels).\n     */\n    offsetX: number;\n    /**\n     * Vertical offset relative to the layout viewport (CSS pixels).\n     */\n    offsetY: number;\n    /**\n     * Horizontal offset relative to the document (CSS pixels).\n     */\n    pageX: number;\n    /**\n     * Vertical offset relative to the document (CSS pixels).\n     */\n    pageY: number;\n    /**\n     * Width (CSS pixels), excludes scrollbar if present.\n     */\n    clientWidth: number;\n    /**\n     * Height (CSS pixels), excludes scrollbar if present.\n     */\n    clientHeight: number;\n    /**\n     * Scale relative to the ideal viewport (size at width=device-width).\n     */\n    scale: number;\n    /**\n     * Page zoom factor (CSS to device independent pixels ratio).\n     */\n    zoom?: number;\n  }\n\n  /**\n   * Viewport for capturing screenshot.\n   */\n  export interface Viewport {\n    /**\n     * X offset in device independent pixels (dip).\n     */\n    x: number;\n    /**\n     * Y offset in device independent pixels (dip).\n     */\n    y: number;\n    /**\n     * Rectangle width in device independent pixels (dip).\n     */\n    width: number;\n    /**\n     * Rectangle height in device independent pixels (dip).\n     */\n    height: number;\n    /**\n     * Page scale factor.\n     */\n    scale: number;\n  }\n\n  /**\n   * Generic font families collection.\n   */\n  export interface FontFamilies {\n    /**\n     * The standard font-family.\n     */\n    standard?: string;\n    /**\n     * The fixed font-family.\n     */\n    fixed?: string;\n    /**\n     * The serif font-family.\n     */\n    serif?: string;\n    /**\n     * The sansSerif font-family.\n     */\n    sansSerif?: string;\n    /**\n     * The cursive font-family.\n     */\n    cursive?: string;\n    /**\n     * The fantasy font-family.\n     */\n    fantasy?: string;\n    /**\n     * The math font-family.\n     */\n    math?: string;\n  }\n\n  /**\n   * Font families collection for a script.\n   */\n  export interface ScriptFontFamilies {\n    /**\n     * Name of the script which these font families are defined for.\n     */\n    script: string;\n    /**\n     * Generic font families collection for the script.\n     */\n    fontFamilies: FontFamilies;\n  }\n\n  /**\n   * Default font sizes.\n   */\n  export interface FontSizes {\n    /**\n     * Default standard font size.\n     */\n    standard?: integer;\n    /**\n     * Default fixed font size.\n     */\n    fixed?: integer;\n  }\n\n  export const enum ClientNavigationReason {\n    AnchorClick = 'anchorClick',\n    FormSubmissionGet = 'formSubmissionGet',\n    FormSubmissionPost = 'formSubmissionPost',\n    HttpHeaderRefresh = 'httpHeaderRefresh',\n    InitialFrameNavigation = 'initialFrameNavigation',\n    MetaTagRefresh = 'metaTagRefresh',\n    Other = 'other',\n    PageBlockInterstitial = 'pageBlockInterstitial',\n    Reload = 'reload',\n    ScriptInitiated = 'scriptInitiated',\n  }\n\n  export const enum ClientNavigationDisposition {\n    CurrentTab = 'currentTab',\n    NewTab = 'newTab',\n    NewWindow = 'newWindow',\n    Download = 'download',\n  }\n\n  export interface InstallabilityErrorArgument {\n    /**\n     * Argument name (e.g. name:'minimum-icon-size-in-pixels').\n     */\n    name: string;\n    /**\n     * Argument value (e.g. value:'64').\n     */\n    value: string;\n  }\n\n  /**\n   * The installability error\n   */\n  export interface InstallabilityError {\n    /**\n     * The error id (e.g. 'manifest-missing-suitable-icon').\n     */\n    errorId: string;\n    /**\n     * The list of error arguments (e.g. {name:'minimum-icon-size-in-pixels', value:'64'}).\n     */\n    errorArguments: InstallabilityErrorArgument[];\n  }\n\n  /**\n   * The referring-policy used for the navigation.\n   */\n  export const enum ReferrerPolicy {\n    NoReferrer = 'noReferrer',\n    NoReferrerWhenDowngrade = 'noReferrerWhenDowngrade',\n    Origin = 'origin',\n    OriginWhenCrossOrigin = 'originWhenCrossOrigin',\n    SameOrigin = 'sameOrigin',\n    StrictOrigin = 'strictOrigin',\n    StrictOriginWhenCrossOrigin = 'strictOriginWhenCrossOrigin',\n    UnsafeUrl = 'unsafeUrl',\n  }\n\n  /**\n   * Per-script compilation cache parameters for `Page.produceCompilationCache`\n   */\n  export interface CompilationCacheParams {\n    /**\n     * The URL of the script to produce a compilation cache entry for.\n     */\n    url: string;\n    /**\n     * A hint to the backend whether eager compilation is recommended.\n     * (the actual compilation mode used is upon backend discretion).\n     */\n    eager?: boolean;\n  }\n\n  export interface FileFilter {\n    name?: string;\n    accepts?: string[];\n  }\n\n  export interface FileHandler {\n    action: string;\n    name: string;\n    icons?: ImageResource[];\n    /**\n     * Mimic a map, name is the key, accepts is the value.\n     */\n    accepts?: FileFilter[];\n    /**\n     * Won't repeat the enums, using string for easy comparison. Same as the\n     * other enums below.\n     */\n    launchType: string;\n  }\n\n  /**\n   * The image definition used in both icon and screenshot.\n   */\n  export interface ImageResource {\n    /**\n     * The src field in the definition, but changing to url in favor of\n     * consistency.\n     */\n    url: string;\n    sizes?: string;\n    type?: string;\n  }\n\n  export interface LaunchHandler {\n    clientMode: string;\n  }\n\n  export interface ProtocolHandler {\n    protocol: string;\n    url: string;\n  }\n\n  export interface RelatedApplication {\n    id?: string;\n    url: string;\n  }\n\n  export interface ScopeExtension {\n    /**\n     * Instead of using tuple, this field always returns the serialized string\n     * for easy understanding and comparison.\n     */\n    origin: string;\n    hasOriginWildcard: boolean;\n  }\n\n  export interface Screenshot {\n    image: ImageResource;\n    formFactor: string;\n    label?: string;\n  }\n\n  export interface ShareTarget {\n    action: string;\n    method: string;\n    enctype: string;\n    /**\n     * Embed the ShareTargetParams\n     */\n    title?: string;\n    text?: string;\n    url?: string;\n    files?: FileFilter[];\n  }\n\n  export interface Shortcut {\n    name: string;\n    url: string;\n  }\n\n  export interface WebAppManifest {\n    backgroundColor?: string;\n    /**\n     * The extra description provided by the manifest.\n     */\n    description?: string;\n    dir?: string;\n    display?: string;\n    /**\n     * The overrided display mode controlled by the user.\n     */\n    displayOverrides?: string[];\n    /**\n     * The handlers to open files.\n     */\n    fileHandlers?: FileHandler[];\n    icons?: ImageResource[];\n    id?: string;\n    lang?: string;\n    /**\n     * TODO(crbug.com/1231886): This field is non-standard and part of a Chrome\n     * experiment. See:\n     * https://github.com/WICG/web-app-launch/blob/main/launch_handler.md\n     */\n    launchHandler?: LaunchHandler;\n    name?: string;\n    orientation?: string;\n    preferRelatedApplications?: boolean;\n    /**\n     * The handlers to open protocols.\n     */\n    protocolHandlers?: ProtocolHandler[];\n    relatedApplications?: RelatedApplication[];\n    scope?: string;\n    /**\n     * Non-standard, see\n     * https://github.com/WICG/manifest-incubations/blob/gh-pages/scope_extensions-explainer.md\n     */\n    scopeExtensions?: ScopeExtension[];\n    /**\n     * The screenshots used by chromium.\n     */\n    screenshots?: Screenshot[];\n    shareTarget?: ShareTarget;\n    shortName?: string;\n    shortcuts?: Shortcut[];\n    startUrl?: string;\n    themeColor?: string;\n  }\n\n  /**\n   * The type of a frameNavigated event.\n   */\n  export const enum NavigationType {\n    Navigation = 'Navigation',\n    BackForwardCacheRestore = 'BackForwardCacheRestore',\n  }\n\n  /**\n   * List of not restored reasons for back-forward cache.\n   */\n  export const enum BackForwardCacheNotRestoredReason {\n    NotPrimaryMainFrame = 'NotPrimaryMainFrame',\n    BackForwardCacheDisabled = 'BackForwardCacheDisabled',\n    RelatedActiveContentsExist = 'RelatedActiveContentsExist',\n    HTTPStatusNotOK = 'HTTPStatusNotOK',\n    SchemeNotHTTPOrHTTPS = 'SchemeNotHTTPOrHTTPS',\n    Loading = 'Loading',\n    WasGrantedMediaAccess = 'WasGrantedMediaAccess',\n    DisableForRenderFrameHostCalled = 'DisableForRenderFrameHostCalled',\n    DomainNotAllowed = 'DomainNotAllowed',\n    HTTPMethodNotGET = 'HTTPMethodNotGET',\n    SubframeIsNavigating = 'SubframeIsNavigating',\n    Timeout = 'Timeout',\n    CacheLimit = 'CacheLimit',\n    JavaScriptExecution = 'JavaScriptExecution',\n    RendererProcessKilled = 'RendererProcessKilled',\n    RendererProcessCrashed = 'RendererProcessCrashed',\n    SchedulerTrackedFeatureUsed = 'SchedulerTrackedFeatureUsed',\n    ConflictingBrowsingInstance = 'ConflictingBrowsingInstance',\n    CacheFlushed = 'CacheFlushed',\n    ServiceWorkerVersionActivation = 'ServiceWorkerVersionActivation',\n    SessionRestored = 'SessionRestored',\n    ServiceWorkerPostMessage = 'ServiceWorkerPostMessage',\n    EnteredBackForwardCacheBeforeServiceWorkerHostAdded = 'EnteredBackForwardCacheBeforeServiceWorkerHostAdded',\n    RenderFrameHostReused_SameSite = 'RenderFrameHostReused_SameSite',\n    RenderFrameHostReused_CrossSite = 'RenderFrameHostReused_CrossSite',\n    ServiceWorkerClaim = 'ServiceWorkerClaim',\n    IgnoreEventAndEvict = 'IgnoreEventAndEvict',\n    HaveInnerContents = 'HaveInnerContents',\n    TimeoutPuttingInCache = 'TimeoutPuttingInCache',\n    BackForwardCacheDisabledByLowMemory = 'BackForwardCacheDisabledByLowMemory',\n    BackForwardCacheDisabledByCommandLine = 'BackForwardCacheDisabledByCommandLine',\n    NetworkRequestDatAPIpeDrainedAsBytesConsumer = 'NetworkRequestDatapipeDrainedAsBytesConsumer',\n    NetworkRequestRedirected = 'NetworkRequestRedirected',\n    NetworkRequestTimeout = 'NetworkRequestTimeout',\n    NetworkExceedsBufferLimit = 'NetworkExceedsBufferLimit',\n    NavigationCancelledWhileRestoring = 'NavigationCancelledWhileRestoring',\n    NotMostRecentNavigationEntry = 'NotMostRecentNavigationEntry',\n    BackForwardCacheDisabledForPrerender = 'BackForwardCacheDisabledForPrerender',\n    UserAgentOverrideDiffers = 'UserAgentOverrideDiffers',\n    ForegroundCacheLimit = 'ForegroundCacheLimit',\n    BrowsingInstanceNotSwapped = 'BrowsingInstanceNotSwapped',\n    BackForwardCacheDisabledForDelegate = 'BackForwardCacheDisabledForDelegate',\n    UnloadHandlerExistsInMainFrame = 'UnloadHandlerExistsInMainFrame',\n    UnloadHandlerExistsInSubFrame = 'UnloadHandlerExistsInSubFrame',\n    ServiceWorkerUnregistration = 'ServiceWorkerUnregistration',\n    CacheControlNoStore = 'CacheControlNoStore',\n    CacheControlNoStoreCookieModified = 'CacheControlNoStoreCookieModified',\n    CacheControlNoStoreHTTPOnlyCookieModified = 'CacheControlNoStoreHTTPOnlyCookieModified',\n    NoResponseHead = 'NoResponseHead',\n    Unknown = 'Unknown',\n    ActivationNavigationsDisallowedForBug1234857 = 'ActivationNavigationsDisallowedForBug1234857',\n    ErrorDocument = 'ErrorDocument',\n    FencedFramesEmbedder = 'FencedFramesEmbedder',\n    CookieDisabled = 'CookieDisabled',\n    HTTPAuthRequired = 'HTTPAuthRequired',\n    CookieFlushed = 'CookieFlushed',\n    BroadcastChannelOnMessage = 'BroadcastChannelOnMessage',\n    WebViewSettingsChanged = 'WebViewSettingsChanged',\n    WebViewJavaScriptObjectChanged = 'WebViewJavaScriptObjectChanged',\n    WebViewMessageListenerInjected = 'WebViewMessageListenerInjected',\n    WebViewSafeBrowsingAllowlistChanged = 'WebViewSafeBrowsingAllowlistChanged',\n    WebViewDocumentStartJavascriptChanged = 'WebViewDocumentStartJavascriptChanged',\n    WebSocket = 'WebSocket',\n    WebTransport = 'WebTransport',\n    WebRTC = 'WebRTC',\n    MainResourceHasCacheControlNoStore = 'MainResourceHasCacheControlNoStore',\n    MainResourceHasCacheControlNoCache = 'MainResourceHasCacheControlNoCache',\n    SubresourceHasCacheControlNoStore = 'SubresourceHasCacheControlNoStore',\n    SubresourceHasCacheControlNoCache = 'SubresourceHasCacheControlNoCache',\n    ContainsPlugins = 'ContainsPlugins',\n    DocumentLoaded = 'DocumentLoaded',\n    OutstandingNetworkRequestOthers = 'OutstandingNetworkRequestOthers',\n    RequestedMIDIPermission = 'RequestedMIDIPermission',\n    RequestedAudioCapturePermission = 'RequestedAudioCapturePermission',\n    RequestedVideoCapturePermission = 'RequestedVideoCapturePermission',\n    RequestedBackForwardCacheBlockedSensors = 'RequestedBackForwardCacheBlockedSensors',\n    RequestedBackgroundWorkPermission = 'RequestedBackgroundWorkPermission',\n    BroadcastChannel = 'BroadcastChannel',\n    WebXR = 'WebXR',\n    SharedWorker = 'SharedWorker',\n    SharedWorkerMessage = 'SharedWorkerMessage',\n    SharedWorkerWithNoActiveClient = 'SharedWorkerWithNoActiveClient',\n    WebLocks = 'WebLocks',\n    WebHID = 'WebHID',\n    WebBluetooth = 'WebBluetooth',\n    WebShare = 'WebShare',\n    RequestedStorageAccessGrant = 'RequestedStorageAccessGrant',\n    WebNfc = 'WebNfc',\n    OutstandingNetworkRequestFetch = 'OutstandingNetworkRequestFetch',\n    OutstandingNetworkRequestXHR = 'OutstandingNetworkRequestXHR',\n    AppBanner = 'AppBanner',\n    Printing = 'Printing',\n    WebDatabase = 'WebDatabase',\n    PictureInPicture = 'PictureInPicture',\n    SpeechRecognizer = 'SpeechRecognizer',\n    IdleManager = 'IdleManager',\n    PaymentManager = 'PaymentManager',\n    SpeechSynthesis = 'SpeechSynthesis',\n    KeyboardLock = 'KeyboardLock',\n    WebOTPService = 'WebOTPService',\n    OutstandingNetworkRequestDirectSocket = 'OutstandingNetworkRequestDirectSocket',\n    InjectedJavascript = 'InjectedJavascript',\n    InjectedStyleSheet = 'InjectedStyleSheet',\n    KeepaliveRequest = 'KeepaliveRequest',\n    IndexedDBEvent = 'IndexedDBEvent',\n    Dummy = 'Dummy',\n    JsNetworkRequestReceivedCacheControlNoStoreResource = 'JsNetworkRequestReceivedCacheControlNoStoreResource',\n    WebRTCUsedWithCCNS = 'WebRTCUsedWithCCNS',\n    WebTransportUsedWithCCNS = 'WebTransportUsedWithCCNS',\n    WebSocketUsedWithCCNS = 'WebSocketUsedWithCCNS',\n    SmartCard = 'SmartCard',\n    LiveMediaStreamTrack = 'LiveMediaStreamTrack',\n    UnloadHandler = 'UnloadHandler',\n    ParserAborted = 'ParserAborted',\n    ContentSecurityHandler = 'ContentSecurityHandler',\n    ContentWebAuthenticationAPI = 'ContentWebAuthenticationAPI',\n    ContentFileChooser = 'ContentFileChooser',\n    ContentSerial = 'ContentSerial',\n    ContentFileSystemAccess = 'ContentFileSystemAccess',\n    ContentMediaDevicesDispatcherHost = 'ContentMediaDevicesDispatcherHost',\n    ContentWebBluetooth = 'ContentWebBluetooth',\n    ContentWebUSB = 'ContentWebUSB',\n    ContentMediaSessionService = 'ContentMediaSessionService',\n    ContentScreenReader = 'ContentScreenReader',\n    ContentDiscarded = 'ContentDiscarded',\n    EmbedderPopupBlockerTabHelper = 'EmbedderPopupBlockerTabHelper',\n    EmbedderSafeBrowsingTriggeredPopupBlocker = 'EmbedderSafeBrowsingTriggeredPopupBlocker',\n    EmbedderSafeBrowsingThreatDetails = 'EmbedderSafeBrowsingThreatDetails',\n    EmbedderAppBannerManager = 'EmbedderAppBannerManager',\n    EmbedderDomDistillerViewerSource = 'EmbedderDomDistillerViewerSource',\n    EmbedderDomDistillerSelfDeletingRequestDelegate = 'EmbedderDomDistillerSelfDeletingRequestDelegate',\n    EmbedderOomInterventionTabHelper = 'EmbedderOomInterventionTabHelper',\n    EmbedderOfflinePage = 'EmbedderOfflinePage',\n    EmbedderChromePasswordManagerClientBindCredentialManager = 'EmbedderChromePasswordManagerClientBindCredentialManager',\n    EmbedderPermissionRequestManager = 'EmbedderPermissionRequestManager',\n    EmbedderModalDialog = 'EmbedderModalDialog',\n    EmbedderExtensions = 'EmbedderExtensions',\n    EmbedderExtensionMessaging = 'EmbedderExtensionMessaging',\n    EmbedderExtensionMessagingForOpenPort = 'EmbedderExtensionMessagingForOpenPort',\n    EmbedderExtensionSentMessageToCachedFrame = 'EmbedderExtensionSentMessageToCachedFrame',\n    RequestedByWebViewClient = 'RequestedByWebViewClient',\n    PostMessageByWebViewClient = 'PostMessageByWebViewClient',\n    CacheControlNoStoreDeviceBoundSessionTerminated = 'CacheControlNoStoreDeviceBoundSessionTerminated',\n    CacheLimitPrunedOnModerateMemoryPressure = 'CacheLimitPrunedOnModerateMemoryPressure',\n    CacheLimitPrunedOnCriticalMemoryPressure = 'CacheLimitPrunedOnCriticalMemoryPressure',\n  }\n\n  /**\n   * Types of not restored reasons for back-forward cache.\n   */\n  export const enum BackForwardCacheNotRestoredReasonType {\n    SupportPending = 'SupportPending',\n    PageSupportNeeded = 'PageSupportNeeded',\n    Circumstantial = 'Circumstantial',\n  }\n\n  export interface BackForwardCacheBlockingDetails {\n    /**\n     * Url of the file where blockage happened. Optional because of tests.\n     */\n    url?: string;\n    /**\n     * Function name where blockage happened. Optional because of anonymous functions and tests.\n     */\n    function?: string;\n    /**\n     * Line number in the script (0-based).\n     */\n    lineNumber: integer;\n    /**\n     * Column number in the script (0-based).\n     */\n    columnNumber: integer;\n  }\n\n  export interface BackForwardCacheNotRestoredExplanation {\n    /**\n     * Type of the reason\n     */\n    type: BackForwardCacheNotRestoredReasonType;\n    /**\n     * Not restored reason\n     */\n    reason: BackForwardCacheNotRestoredReason;\n    /**\n     * Context associated with the reason. The meaning of this context is\n     * dependent on the reason:\n     * - EmbedderExtensionSentMessageToCachedFrame: the extension ID.\n     */\n    context?: string;\n    details?: BackForwardCacheBlockingDetails[];\n  }\n\n  export interface BackForwardCacheNotRestoredExplanationTree {\n    /**\n     * URL of each frame\n     */\n    url: string;\n    /**\n     * Not restored reasons of each frame\n     */\n    explanations: BackForwardCacheNotRestoredExplanation[];\n    /**\n     * Array of children frame\n     */\n    children: BackForwardCacheNotRestoredExplanationTree[];\n  }\n\n  export interface AddScriptToEvaluateOnLoadRequest {\n    scriptSource: string;\n  }\n\n  export interface AddScriptToEvaluateOnLoadResponse extends ProtocolResponseWithError {\n    /**\n     * Identifier of the added script.\n     */\n    identifier: ScriptIdentifier;\n  }\n\n  export interface AddScriptToEvaluateOnNewDocumentRequest {\n    source: string;\n    /**\n     * If specified, creates an isolated world with the given name and evaluates given script in it.\n     * This world name will be used as the ExecutionContextDescription::name when the corresponding\n     * event is emitted.\n     */\n    worldName?: string;\n    /**\n     * Specifies whether command line API should be available to the script, defaults\n     * to false.\n     */\n    includeCommandLineAPI?: boolean;\n    /**\n     * If true, runs the script immediately on existing execution contexts or worlds.\n     * Default: false.\n     */\n    runImmediately?: boolean;\n  }\n\n  export interface AddScriptToEvaluateOnNewDocumentResponse extends ProtocolResponseWithError {\n    /**\n     * Identifier of the added script.\n     */\n    identifier: ScriptIdentifier;\n  }\n\n  export const enum CaptureScreenshotRequestFormat {\n    Jpeg = 'jpeg',\n    Png = 'png',\n    Webp = 'webp',\n  }\n\n  export interface CaptureScreenshotRequest {\n    /**\n     * Image compression format (defaults to png).\n     */\n    format?: CaptureScreenshotRequestFormat;\n    /**\n     * Compression quality from range [0..100] (jpeg only).\n     */\n    quality?: integer;\n    /**\n     * Capture the screenshot of a given region only.\n     */\n    clip?: Viewport;\n    /**\n     * Capture the screenshot from the surface, rather than the view. Defaults to true.\n     */\n    fromSurface?: boolean;\n    /**\n     * Capture the screenshot beyond the viewport. Defaults to false.\n     */\n    captureBeyondViewport?: boolean;\n    /**\n     * Optimize image encoding for speed, not for resulting size (defaults to false)\n     */\n    optimizeForSpeed?: boolean;\n  }\n\n  export interface CaptureScreenshotResponse extends ProtocolResponseWithError {\n    /**\n     * Base64-encoded image data.\n     */\n    data: binary;\n  }\n\n  export const enum CaptureSnapshotRequestFormat {\n    MHTML = 'mhtml',\n  }\n\n  export interface CaptureSnapshotRequest {\n    /**\n     * Format (defaults to mhtml).\n     */\n    format?: CaptureSnapshotRequestFormat;\n  }\n\n  export interface CaptureSnapshotResponse extends ProtocolResponseWithError {\n    /**\n     * Serialized page data.\n     */\n    data: string;\n  }\n\n  export interface CreateIsolatedWorldRequest {\n    /**\n     * Id of the frame in which the isolated world should be created.\n     */\n    frameId: FrameId;\n    /**\n     * An optional name which is reported in the Execution Context.\n     */\n    worldName?: string;\n    /**\n     * Whether or not universal access should be granted to the isolated world. This is a powerful\n     * option, use with caution.\n     */\n    grantUniveralAccess?: boolean;\n  }\n\n  export interface CreateIsolatedWorldResponse extends ProtocolResponseWithError {\n    /**\n     * Execution context of the isolated world.\n     */\n    executionContextId: Runtime.ExecutionContextId;\n  }\n\n  export interface DeleteCookieRequest {\n    /**\n     * Name of the cookie to remove.\n     */\n    cookieName: string;\n    /**\n     * URL to match cooke domain and path.\n     */\n    url: string;\n  }\n\n  export interface EnableRequest {\n    /**\n     * If true, the `Page.fileChooserOpened` event will be emitted regardless of the state set by\n     * `Page.setInterceptFileChooserDialog` command (default: false).\n     */\n    enableFileChooserOpenedEvent?: boolean;\n  }\n\n  export interface GetAppManifestRequest {\n    manifestId?: string;\n  }\n\n  export interface GetAppManifestResponse extends ProtocolResponseWithError {\n    /**\n     * Manifest location.\n     */\n    url: string;\n    errors: AppManifestError[];\n    /**\n     * Manifest content.\n     */\n    data?: string;\n    /**\n     * Parsed manifest properties. Deprecated, use manifest instead.\n     * @deprecated\n     */\n    parsed?: AppManifestParsedProperties;\n    manifest: WebAppManifest;\n  }\n\n  export interface GetInstallabilityErrorsResponse extends ProtocolResponseWithError {\n    installabilityErrors: InstallabilityError[];\n  }\n\n  export interface GetManifestIconsResponse extends ProtocolResponseWithError {\n    primaryIcon?: binary;\n  }\n\n  export interface GetAppIdResponse extends ProtocolResponseWithError {\n    /**\n     * App id, either from manifest's id attribute or computed from start_url\n     */\n    appId?: string;\n    /**\n     * Recommendation for manifest's id attribute to match current id computed from start_url\n     */\n    recommendedId?: string;\n  }\n\n  export interface GetAdScriptAncestryRequest {\n    frameId: FrameId;\n  }\n\n  export interface GetAdScriptAncestryResponse extends ProtocolResponseWithError {\n    /**\n     * The ancestry chain of ad script identifiers leading to this frame's\n     * creation, along with the root script's filterlist rule. The ancestry\n     * chain is ordered from the most immediate script (in the frame creation\n     * stack) to more distant ancestors (that created the immediately preceding\n     * script). Only sent if frame is labelled as an ad and ids are available.\n     */\n    adScriptAncestry?: AdScriptAncestry;\n  }\n\n  export interface GetFrameTreeResponse extends ProtocolResponseWithError {\n    /**\n     * Present frame tree structure.\n     */\n    frameTree: FrameTree;\n  }\n\n  export interface GetLayoutMetricsResponse extends ProtocolResponseWithError {\n    /**\n     * Deprecated metrics relating to the layout viewport. Is in device pixels. Use `cssLayoutViewport` instead.\n     * @deprecated\n     */\n    layoutViewport: LayoutViewport;\n    /**\n     * Deprecated metrics relating to the visual viewport. Is in device pixels. Use `cssVisualViewport` instead.\n     * @deprecated\n     */\n    visualViewport: VisualViewport;\n    /**\n     * Deprecated size of scrollable area. Is in DP. Use `cssContentSize` instead.\n     * @deprecated\n     */\n    contentSize: DOM.Rect;\n    /**\n     * Metrics relating to the layout viewport in CSS pixels.\n     */\n    cssLayoutViewport: LayoutViewport;\n    /**\n     * Metrics relating to the visual viewport in CSS pixels.\n     */\n    cssVisualViewport: VisualViewport;\n    /**\n     * Size of scrollable area in CSS pixels.\n     */\n    cssContentSize: DOM.Rect;\n  }\n\n  export interface GetNavigationHistoryResponse extends ProtocolResponseWithError {\n    /**\n     * Index of the current navigation history entry.\n     */\n    currentIndex: integer;\n    /**\n     * Array of navigation history entries.\n     */\n    entries: NavigationEntry[];\n  }\n\n  export interface GetResourceContentRequest {\n    /**\n     * Frame id to get resource for.\n     */\n    frameId: FrameId;\n    /**\n     * URL of the resource to get content for.\n     */\n    url: string;\n  }\n\n  export interface GetResourceContentResponse extends ProtocolResponseWithError {\n    /**\n     * Resource content.\n     */\n    content: string;\n    /**\n     * True, if content was served as base64.\n     */\n    base64Encoded: boolean;\n  }\n\n  export interface GetResourceTreeResponse extends ProtocolResponseWithError {\n    /**\n     * Present frame / resource tree structure.\n     */\n    frameTree: FrameResourceTree;\n  }\n\n  export interface HandleJavaScriptDialogRequest {\n    /**\n     * Whether to accept or dismiss the dialog.\n     */\n    accept: boolean;\n    /**\n     * The text to enter into the dialog prompt before accepting. Used only if this is a prompt\n     * dialog.\n     */\n    promptText?: string;\n  }\n\n  export interface NavigateRequest {\n    /**\n     * URL to navigate the page to.\n     */\n    url: string;\n    /**\n     * Referrer URL.\n     */\n    referrer?: string;\n    /**\n     * Intended transition type.\n     */\n    transitionType?: TransitionType;\n    /**\n     * Frame id to navigate, if not specified navigates the top frame.\n     */\n    frameId?: FrameId;\n    /**\n     * Referrer-policy used for the navigation.\n     */\n    referrerPolicy?: ReferrerPolicy;\n  }\n\n  export interface NavigateResponse extends ProtocolResponseWithError {\n    /**\n     * Frame id that has navigated (or failed to navigate)\n     */\n    frameId: FrameId;\n    /**\n     * Loader identifier. This is omitted in case of same-document navigation,\n     * as the previously committed loaderId would not change.\n     */\n    loaderId?: Network.LoaderId;\n    /**\n     * User friendly error message, present if and only if navigation has failed.\n     */\n    errorText?: string;\n    /**\n     * Whether the navigation resulted in a download.\n     */\n    isDownload?: boolean;\n  }\n\n  export interface NavigateToHistoryEntryRequest {\n    /**\n     * Unique id of the entry to navigate to.\n     */\n    entryId: integer;\n  }\n\n  export const enum PrintToPDFRequestTransferMode {\n    ReturnAsBase64 = 'ReturnAsBase64',\n    ReturnAsStream = 'ReturnAsStream',\n  }\n\n  export interface PrintToPDFRequest {\n    /**\n     * Paper orientation. Defaults to false.\n     */\n    landscape?: boolean;\n    /**\n     * Display header and footer. Defaults to false.\n     */\n    displayHeaderFooter?: boolean;\n    /**\n     * Print background graphics. Defaults to false.\n     */\n    printBackground?: boolean;\n    /**\n     * Scale of the webpage rendering. Defaults to 1.\n     */\n    scale?: number;\n    /**\n     * Paper width in inches. Defaults to 8.5 inches.\n     */\n    paperWidth?: number;\n    /**\n     * Paper height in inches. Defaults to 11 inches.\n     */\n    paperHeight?: number;\n    /**\n     * Top margin in inches. Defaults to 1cm (~0.4 inches).\n     */\n    marginTop?: number;\n    /**\n     * Bottom margin in inches. Defaults to 1cm (~0.4 inches).\n     */\n    marginBottom?: number;\n    /**\n     * Left margin in inches. Defaults to 1cm (~0.4 inches).\n     */\n    marginLeft?: number;\n    /**\n     * Right margin in inches. Defaults to 1cm (~0.4 inches).\n     */\n    marginRight?: number;\n    /**\n     * Paper ranges to print, one based, e.g., '1-5, 8, 11-13'. Pages are\n     * printed in the document order, not in the order specified, and no\n     * more than once.\n     * Defaults to empty string, which implies the entire document is printed.\n     * The page numbers are quietly capped to actual page count of the\n     * document, and ranges beyond the end of the document are ignored.\n     * If this results in no pages to print, an error is reported.\n     * It is an error to specify a range with start greater than end.\n     */\n    pageRanges?: string;\n    /**\n     * HTML template for the print header. Should be valid HTML markup with following\n     * classes used to inject printing values into them:\n     * - `date`: formatted print date\n     * - `title`: document title\n     * - `url`: document location\n     * - `pageNumber`: current page number\n     * - `totalPages`: total pages in the document\n     *\n     * For example, `<span class=title></span>` would generate span containing the title.\n     */\n    headerTemplate?: string;\n    /**\n     * HTML template for the print footer. Should use the same format as the `headerTemplate`.\n     */\n    footerTemplate?: string;\n    /**\n     * Whether or not to prefer page size as defined by css. Defaults to false,\n     * in which case the content will be scaled to fit the paper size.\n     */\n    preferCSSPageSize?: boolean;\n    /**\n     * return as stream\n     */\n    transferMode?: PrintToPDFRequestTransferMode;\n    /**\n     * Whether or not to generate tagged (accessible) PDF. Defaults to embedder choice.\n     */\n    generateTaggedPDF?: boolean;\n    /**\n     * Whether or not to embed the document outline into the PDF.\n     */\n    generateDocumentOutline?: boolean;\n  }\n\n  export interface PrintToPDFResponse extends ProtocolResponseWithError {\n    /**\n     * Base64-encoded pdf data. Empty if |returnAsStream| is specified.\n     */\n    data: binary;\n    /**\n     * A handle of the stream that holds resulting PDF data.\n     */\n    stream?: IO.StreamHandle;\n  }\n\n  export interface ReloadRequest {\n    /**\n     * If true, browser cache is ignored (as if the user pressed Shift+refresh).\n     */\n    ignoreCache?: boolean;\n    /**\n     * If set, the script will be injected into all frames of the inspected page after reload.\n     * Argument will be ignored if reloading dataURL origin.\n     */\n    scriptToEvaluateOnLoad?: string;\n    /**\n     * If set, an error will be thrown if the target page's main frame's\n     * loader id does not match the provided id. This prevents accidentally\n     * reloading an unintended target in case there's a racing navigation.\n     */\n    loaderId?: Network.LoaderId;\n  }\n\n  export interface RemoveScriptToEvaluateOnLoadRequest {\n    identifier: ScriptIdentifier;\n  }\n\n  export interface RemoveScriptToEvaluateOnNewDocumentRequest {\n    identifier: ScriptIdentifier;\n  }\n\n  export interface ScreencastFrameAckRequest {\n    /**\n     * Frame number.\n     */\n    sessionId: integer;\n  }\n\n  export interface SearchInResourceRequest {\n    /**\n     * Frame id for resource to search in.\n     */\n    frameId: FrameId;\n    /**\n     * URL of the resource to search in.\n     */\n    url: string;\n    /**\n     * String to search for.\n     */\n    query: string;\n    /**\n     * If true, search is case sensitive.\n     */\n    caseSensitive?: boolean;\n    /**\n     * If true, treats string parameter as regex.\n     */\n    isRegex?: boolean;\n  }\n\n  export interface SearchInResourceResponse extends ProtocolResponseWithError {\n    /**\n     * List of search matches.\n     */\n    result: Debugger.SearchMatch[];\n  }\n\n  export interface SetAdBlockingEnabledRequest {\n    /**\n     * Whether to block ads.\n     */\n    enabled: boolean;\n  }\n\n  export interface SetBypassCSPRequest {\n    /**\n     * Whether to bypass page CSP.\n     */\n    enabled: boolean;\n  }\n\n  export interface GetPermissionsPolicyStateRequest {\n    frameId: FrameId;\n  }\n\n  export interface GetPermissionsPolicyStateResponse extends ProtocolResponseWithError {\n    states: PermissionsPolicyFeatureState[];\n  }\n\n  export interface GetOriginTrialsRequest {\n    frameId: FrameId;\n  }\n\n  export interface GetOriginTrialsResponse extends ProtocolResponseWithError {\n    originTrials: OriginTrial[];\n  }\n\n  export interface SetDeviceMetricsOverrideRequest {\n    /**\n     * Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.\n     */\n    width: integer;\n    /**\n     * Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.\n     */\n    height: integer;\n    /**\n     * Overriding device scale factor value. 0 disables the override.\n     */\n    deviceScaleFactor: number;\n    /**\n     * Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text\n     * autosizing and more.\n     */\n    mobile: boolean;\n    /**\n     * Scale to apply to resulting view image.\n     */\n    scale?: number;\n    /**\n     * Overriding screen width value in pixels (minimum 0, maximum 10000000).\n     */\n    screenWidth?: integer;\n    /**\n     * Overriding screen height value in pixels (minimum 0, maximum 10000000).\n     */\n    screenHeight?: integer;\n    /**\n     * Overriding view X position on screen in pixels (minimum 0, maximum 10000000).\n     */\n    positionX?: integer;\n    /**\n     * Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).\n     */\n    positionY?: integer;\n    /**\n     * Do not set visible view size, rely upon explicit setVisibleSize call.\n     */\n    dontSetVisibleSize?: boolean;\n    /**\n     * Screen orientation override.\n     */\n    screenOrientation?: Emulation.ScreenOrientation;\n    /**\n     * The viewport dimensions and scale. If not set, the override is cleared.\n     */\n    viewport?: Viewport;\n  }\n\n  export interface SetDeviceOrientationOverrideRequest {\n    /**\n     * Mock alpha\n     */\n    alpha: number;\n    /**\n     * Mock beta\n     */\n    beta: number;\n    /**\n     * Mock gamma\n     */\n    gamma: number;\n  }\n\n  export interface SetFontFamiliesRequest {\n    /**\n     * Specifies font families to set. If a font family is not specified, it won't be changed.\n     */\n    fontFamilies: FontFamilies;\n    /**\n     * Specifies font families to set for individual scripts.\n     */\n    forScripts?: ScriptFontFamilies[];\n  }\n\n  export interface SetFontSizesRequest {\n    /**\n     * Specifies font sizes to set. If a font size is not specified, it won't be changed.\n     */\n    fontSizes: FontSizes;\n  }\n\n  export interface SetDocumentContentRequest {\n    /**\n     * Frame id to set HTML for.\n     */\n    frameId: FrameId;\n    /**\n     * HTML content to set.\n     */\n    html: string;\n  }\n\n  export const enum SetDownloadBehaviorRequestBehavior {\n    Deny = 'deny',\n    Allow = 'allow',\n    Default = 'default',\n  }\n\n  export interface SetDownloadBehaviorRequest {\n    /**\n     * Whether to allow all or deny all download requests, or use default Chrome behavior if\n     * available (otherwise deny).\n     */\n    behavior: SetDownloadBehaviorRequestBehavior;\n    /**\n     * The default path to save downloaded files to. This is required if behavior is set to 'allow'\n     */\n    downloadPath?: string;\n  }\n\n  export interface SetGeolocationOverrideRequest {\n    /**\n     * Mock latitude\n     */\n    latitude?: number;\n    /**\n     * Mock longitude\n     */\n    longitude?: number;\n    /**\n     * Mock accuracy\n     */\n    accuracy?: number;\n  }\n\n  export interface SetLifecycleEventsEnabledRequest {\n    /**\n     * If true, starts emitting lifecycle events.\n     */\n    enabled: boolean;\n  }\n\n  export const enum SetTouchEmulationEnabledRequestConfiguration {\n    Mobile = 'mobile',\n    Desktop = 'desktop',\n  }\n\n  export interface SetTouchEmulationEnabledRequest {\n    /**\n     * Whether the touch event emulation should be enabled.\n     */\n    enabled: boolean;\n    /**\n     * Touch/gesture events configuration. Default: current platform.\n     */\n    configuration?: SetTouchEmulationEnabledRequestConfiguration;\n  }\n\n  export const enum StartScreencastRequestFormat {\n    Jpeg = 'jpeg',\n    Png = 'png',\n  }\n\n  export interface StartScreencastRequest {\n    /**\n     * Image compression format.\n     */\n    format?: StartScreencastRequestFormat;\n    /**\n     * Compression quality from range [0..100].\n     */\n    quality?: integer;\n    /**\n     * Maximum screenshot width.\n     */\n    maxWidth?: integer;\n    /**\n     * Maximum screenshot height.\n     */\n    maxHeight?: integer;\n    /**\n     * Send every n-th frame.\n     */\n    everyNthFrame?: integer;\n  }\n\n  export const enum SetWebLifecycleStateRequestState {\n    Frozen = 'frozen',\n    Active = 'active',\n  }\n\n  export interface SetWebLifecycleStateRequest {\n    /**\n     * Target lifecycle state\n     */\n    state: SetWebLifecycleStateRequestState;\n  }\n\n  export interface ProduceCompilationCacheRequest {\n    scripts: CompilationCacheParams[];\n  }\n\n  export interface AddCompilationCacheRequest {\n    url: string;\n    /**\n     * Base64-encoded data\n     */\n    data: binary;\n  }\n\n  export const enum SetSPCTransactionModeRequestMode {\n    None = 'none',\n    AutoAccept = 'autoAccept',\n    AutoChooseToAuthAnotherWay = 'autoChooseToAuthAnotherWay',\n    AutoReject = 'autoReject',\n    AutoOptOut = 'autoOptOut',\n  }\n\n  export interface SetSPCTransactionModeRequest {\n    mode: SetSPCTransactionModeRequestMode;\n  }\n\n  export const enum SetRPHRegistrationModeRequestMode {\n    None = 'none',\n    AutoAccept = 'autoAccept',\n    AutoReject = 'autoReject',\n  }\n\n  export interface SetRPHRegistrationModeRequest {\n    mode: SetRPHRegistrationModeRequestMode;\n  }\n\n  export interface GenerateTestReportRequest {\n    /**\n     * Message to be displayed in the report.\n     */\n    message: string;\n    /**\n     * Specifies the endpoint group to deliver the report to.\n     */\n    group?: string;\n  }\n\n  export interface SetInterceptFileChooserDialogRequest {\n    enabled: boolean;\n    /**\n     * If true, cancels the dialog by emitting relevant events (if any)\n     * in addition to not showing it if the interception is enabled\n     * (default: false).\n     */\n    cancel?: boolean;\n  }\n\n  export interface SetPrerenderingAllowedRequest {\n    isAllowed: boolean;\n  }\n\n  export interface DomContentEventFiredEvent {\n    timestamp: Network.MonotonicTime;\n  }\n\n  export const enum FileChooserOpenedEventMode {\n    SelectSingle = 'selectSingle',\n    SelectMultiple = 'selectMultiple',\n  }\n\n  /**\n   * Emitted only when `page.interceptFileChooser` is enabled.\n   */\n  export interface FileChooserOpenedEvent {\n    /**\n     * Id of the frame containing input node.\n     */\n    frameId: FrameId;\n    /**\n     * Input mode.\n     */\n    mode: FileChooserOpenedEventMode;\n    /**\n     * Input node id. Only present for file choosers opened via an `<input type=\"file\">` element.\n     */\n    backendNodeId?: DOM.BackendNodeId;\n  }\n\n  /**\n   * Fired when frame has been attached to its parent.\n   */\n  export interface FrameAttachedEvent {\n    /**\n     * Id of the frame that has been attached.\n     */\n    frameId: FrameId;\n    /**\n     * Parent frame identifier.\n     */\n    parentFrameId: FrameId;\n    /**\n     * JavaScript stack trace of when frame was attached, only set if frame initiated from script.\n     */\n    stack?: Runtime.StackTrace;\n  }\n\n  /**\n   * Fired when frame no longer has a scheduled navigation.\n   * @deprecated\n   */\n  export interface FrameClearedScheduledNavigationEvent {\n    /**\n     * Id of the frame that has cleared its scheduled navigation.\n     */\n    frameId: FrameId;\n  }\n\n  export const enum FrameDetachedEventReason {\n    Remove = 'remove',\n    Swap = 'swap',\n  }\n\n  /**\n   * Fired when frame has been detached from its parent.\n   */\n  export interface FrameDetachedEvent {\n    /**\n     * Id of the frame that has been detached.\n     */\n    frameId: FrameId;\n    reason: FrameDetachedEventReason;\n  }\n\n  /**\n   * Fired before frame subtree is detached. Emitted before any frame of the\n   * subtree is actually detached.\n   */\n  export interface FrameSubtreeWillBeDetachedEvent {\n    /**\n     * Id of the frame that is the root of the subtree that will be detached.\n     */\n    frameId: FrameId;\n  }\n\n  /**\n   * Fired once navigation of the frame has completed. Frame is now associated with the new loader.\n   */\n  export interface FrameNavigatedEvent {\n    /**\n     * Frame object.\n     */\n    frame: Frame;\n    type: NavigationType;\n  }\n\n  /**\n   * Fired when opening document to write to.\n   */\n  export interface DocumentOpenedEvent {\n    /**\n     * Frame object.\n     */\n    frame: Frame;\n  }\n\n  export const enum FrameStartedNavigatingEventNavigationType {\n    Reload = 'reload',\n    ReloadBypassingCache = 'reloadBypassingCache',\n    Restore = 'restore',\n    RestoreWithPost = 'restoreWithPost',\n    HistorySameDocument = 'historySameDocument',\n    HistoryDifferentDocument = 'historyDifferentDocument',\n    SameDocument = 'sameDocument',\n    DifferentDocument = 'differentDocument',\n  }\n\n  /**\n   * Fired when a navigation starts. This event is fired for both\n   * renderer-initiated and browser-initiated navigations. For renderer-initiated\n   * navigations, the event is fired after `frameRequestedNavigation`.\n   * Navigation may still be cancelled after the event is issued. Multiple events\n   * can be fired for a single navigation, for example, when a same-document\n   * navigation becomes a cross-document navigation (such as in the case of a\n   * frameset).\n   */\n  export interface FrameStartedNavigatingEvent {\n    /**\n     * ID of the frame that is being navigated.\n     */\n    frameId: FrameId;\n    /**\n     * The URL the navigation started with. The final URL can be different.\n     */\n    url: string;\n    /**\n     * Loader identifier. Even though it is present in case of same-document\n     * navigation, the previously committed loaderId would not change unless\n     * the navigation changes from a same-document to a cross-document\n     * navigation.\n     */\n    loaderId: Network.LoaderId;\n    navigationType: FrameStartedNavigatingEventNavigationType;\n  }\n\n  /**\n   * Fired when a renderer-initiated navigation is requested.\n   * Navigation may still be cancelled after the event is issued.\n   */\n  export interface FrameRequestedNavigationEvent {\n    /**\n     * Id of the frame that is being navigated.\n     */\n    frameId: FrameId;\n    /**\n     * The reason for the navigation.\n     */\n    reason: ClientNavigationReason;\n    /**\n     * The destination URL for the requested navigation.\n     */\n    url: string;\n    /**\n     * The disposition for the navigation.\n     */\n    disposition: ClientNavigationDisposition;\n  }\n\n  /**\n   * Fired when frame schedules a potential navigation.\n   * @deprecated\n   */\n  export interface FrameScheduledNavigationEvent {\n    /**\n     * Id of the frame that has scheduled a navigation.\n     */\n    frameId: FrameId;\n    /**\n     * Delay (in seconds) until the navigation is scheduled to begin. The navigation is not\n     * guaranteed to start.\n     */\n    delay: number;\n    /**\n     * The reason for the navigation.\n     */\n    reason: ClientNavigationReason;\n    /**\n     * The destination URL for the scheduled navigation.\n     */\n    url: string;\n  }\n\n  /**\n   * Fired when frame has started loading.\n   */\n  export interface FrameStartedLoadingEvent {\n    /**\n     * Id of the frame that has started loading.\n     */\n    frameId: FrameId;\n  }\n\n  /**\n   * Fired when frame has stopped loading.\n   */\n  export interface FrameStoppedLoadingEvent {\n    /**\n     * Id of the frame that has stopped loading.\n     */\n    frameId: FrameId;\n  }\n\n  /**\n   * Fired when page is about to start a download.\n   * Deprecated. Use Browser.downloadWillBegin instead.\n   * @deprecated\n   */\n  export interface DownloadWillBeginEvent {\n    /**\n     * Id of the frame that caused download to begin.\n     */\n    frameId: FrameId;\n    /**\n     * Global unique identifier of the download.\n     */\n    guid: string;\n    /**\n     * URL of the resource being downloaded.\n     */\n    url: string;\n    /**\n     * Suggested file name of the resource (the actual name of the file saved on disk may differ).\n     */\n    suggestedFilename: string;\n  }\n\n  export const enum DownloadProgressEventState {\n    InProgress = 'inProgress',\n    Completed = 'completed',\n    Canceled = 'canceled',\n  }\n\n  /**\n   * Fired when download makes progress. Last call has |done| == true.\n   * Deprecated. Use Browser.downloadProgress instead.\n   * @deprecated\n   */\n  export interface DownloadProgressEvent {\n    /**\n     * Global unique identifier of the download.\n     */\n    guid: string;\n    /**\n     * Total expected bytes to download.\n     */\n    totalBytes: number;\n    /**\n     * Total bytes received.\n     */\n    receivedBytes: number;\n    /**\n     * Download status.\n     */\n    state: DownloadProgressEventState;\n  }\n\n  /**\n   * Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) has been\n   * closed.\n   */\n  export interface JavascriptDialogClosedEvent {\n    /**\n     * Frame id.\n     */\n    frameId: FrameId;\n    /**\n     * Whether dialog was confirmed.\n     */\n    result: boolean;\n    /**\n     * User input in case of prompt.\n     */\n    userInput: string;\n  }\n\n  /**\n   * Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to\n   * open.\n   */\n  export interface JavascriptDialogOpeningEvent {\n    /**\n     * Frame url.\n     */\n    url: string;\n    /**\n     * Frame id.\n     */\n    frameId: FrameId;\n    /**\n     * Message that will be displayed by the dialog.\n     */\n    message: string;\n    /**\n     * Dialog type.\n     */\n    type: DialogType;\n    /**\n     * True iff browser is capable showing or acting on the given dialog. When browser has no\n     * dialog handler for given target, calling alert while Page domain is engaged will stall\n     * the page execution. Execution can be resumed via calling Page.handleJavaScriptDialog.\n     */\n    hasBrowserHandler: boolean;\n    /**\n     * Default dialog prompt.\n     */\n    defaultPrompt?: string;\n  }\n\n  /**\n   * Fired for lifecycle events (navigation, load, paint, etc) in the current\n   * target (including local frames).\n   */\n  export interface LifecycleEventEvent {\n    /**\n     * Id of the frame.\n     */\n    frameId: FrameId;\n    /**\n     * Loader identifier. Empty string if the request is fetched from worker.\n     */\n    loaderId: Network.LoaderId;\n    name: string;\n    timestamp: Network.MonotonicTime;\n  }\n\n  /**\n   * Fired for failed bfcache history navigations if BackForwardCache feature is enabled. Do\n   * not assume any ordering with the Page.frameNavigated event. This event is fired only for\n   * main-frame history navigation where the document changes (non-same-document navigations),\n   * when bfcache navigation fails.\n   */\n  export interface BackForwardCacheNotUsedEvent {\n    /**\n     * The loader id for the associated navigation.\n     */\n    loaderId: Network.LoaderId;\n    /**\n     * The frame id of the associated frame.\n     */\n    frameId: FrameId;\n    /**\n     * Array of reasons why the page could not be cached. This must not be empty.\n     */\n    notRestoredExplanations: BackForwardCacheNotRestoredExplanation[];\n    /**\n     * Tree structure of reasons why the page could not be cached for each frame.\n     */\n    notRestoredExplanationsTree?: BackForwardCacheNotRestoredExplanationTree;\n  }\n\n  export interface LoadEventFiredEvent {\n    timestamp: Network.MonotonicTime;\n  }\n\n  export const enum NavigatedWithinDocumentEventNavigationType {\n    Fragment = 'fragment',\n    HistoryAPI = 'historyApi',\n    Other = 'other',\n  }\n\n  /**\n   * Fired when same-document navigation happens, e.g. due to history API usage or anchor navigation.\n   */\n  export interface NavigatedWithinDocumentEvent {\n    /**\n     * Id of the frame.\n     */\n    frameId: FrameId;\n    /**\n     * Frame's new url.\n     */\n    url: string;\n    /**\n     * Navigation type\n     */\n    navigationType: NavigatedWithinDocumentEventNavigationType;\n  }\n\n  /**\n   * Compressed image data requested by the `startScreencast`.\n   */\n  export interface ScreencastFrameEvent {\n    /**\n     * Base64-encoded compressed image.\n     */\n    data: binary;\n    /**\n     * Screencast frame metadata.\n     */\n    metadata: ScreencastFrameMetadata;\n    /**\n     * Frame number.\n     */\n    sessionId: integer;\n  }\n\n  /**\n   * Fired when the page with currently enabled screencast was shown or hidden `.\n   */\n  export interface ScreencastVisibilityChangedEvent {\n    /**\n     * True if the page is visible.\n     */\n    visible: boolean;\n  }\n\n  /**\n   * Fired when a new window is going to be opened, via window.open(), link click, form submission,\n   * etc.\n   */\n  export interface WindowOpenEvent {\n    /**\n     * The URL for the new window.\n     */\n    url: string;\n    /**\n     * Window name.\n     */\n    windowName: string;\n    /**\n     * An array of enabled window features.\n     */\n    windowFeatures: string[];\n    /**\n     * Whether or not it was triggered by user gesture.\n     */\n    userGesture: boolean;\n  }\n\n  /**\n   * Issued for every compilation cache generated.\n   */\n  export interface CompilationCacheProducedEvent {\n    url: string;\n    /**\n     * Base64-encoded data\n     */\n    data: binary;\n  }\n}\n\nexport namespace Performance {\n\n  /**\n   * Run-time execution metric.\n   */\n  export interface Metric {\n    /**\n     * Metric name.\n     */\n    name: string;\n    /**\n     * Metric value.\n     */\n    value: number;\n  }\n\n  export const enum EnableRequestTimeDomain {\n    TimeTicks = 'timeTicks',\n    ThreadTicks = 'threadTicks',\n  }\n\n  export interface EnableRequest {\n    /**\n     * Time domain to use for collecting and reporting duration metrics.\n     */\n    timeDomain?: EnableRequestTimeDomain;\n  }\n\n  export const enum SetTimeDomainRequestTimeDomain {\n    TimeTicks = 'timeTicks',\n    ThreadTicks = 'threadTicks',\n  }\n\n  export interface SetTimeDomainRequest {\n    /**\n     * Time domain\n     */\n    timeDomain: SetTimeDomainRequestTimeDomain;\n  }\n\n  export interface GetMetricsResponse extends ProtocolResponseWithError {\n    /**\n     * Current values for run-time metrics.\n     */\n    metrics: Metric[];\n  }\n\n  /**\n   * Current values of the metrics.\n   */\n  export interface MetricsEvent {\n    /**\n     * Current values of the metrics.\n     */\n    metrics: Metric[];\n    /**\n     * Timestamp title.\n     */\n    title: string;\n  }\n}\n\n/**\n * Reporting of performance timeline events, as specified in\n * https://w3c.github.io/performance-timeline/#dom-performanceobserver.\n */\nexport namespace PerformanceTimeline {\n\n  /**\n   * See https://github.com/WICG/LargestContentfulPaint and largest_contentful_paint.idl\n   */\n  export interface LargestContentfulPaint {\n    renderTime: Network.TimeSinceEpoch;\n    loadTime: Network.TimeSinceEpoch;\n    /**\n     * The number of pixels being painted.\n     */\n    size: number;\n    /**\n     * The id attribute of the element, if available.\n     */\n    elementId?: string;\n    /**\n     * The URL of the image (may be trimmed).\n     */\n    url?: string;\n    nodeId?: DOM.BackendNodeId;\n  }\n\n  export interface LayoutShiftAttribution {\n    previousRect: DOM.Rect;\n    currentRect: DOM.Rect;\n    nodeId?: DOM.BackendNodeId;\n  }\n\n  /**\n   * See https://wicg.github.io/layout-instability/#sec-layout-shift and layout_shift.idl\n   */\n  export interface LayoutShift {\n    /**\n     * Score increment produced by this event.\n     */\n    value: number;\n    hadRecentInput: boolean;\n    lastInputTime: Network.TimeSinceEpoch;\n    sources: LayoutShiftAttribution[];\n  }\n\n  export interface TimelineEvent {\n    /**\n     * Identifies the frame that this event is related to. Empty for non-frame targets.\n     */\n    frameId: Page.FrameId;\n    /**\n     * The event type, as specified in https://w3c.github.io/performance-timeline/#dom-performanceentry-entrytype\n     * This determines which of the optional \"details\" fields is present.\n     */\n    type: string;\n    /**\n     * Name may be empty depending on the type.\n     */\n    name: string;\n    /**\n     * Time in seconds since Epoch, monotonically increasing within document lifetime.\n     */\n    time: Network.TimeSinceEpoch;\n    /**\n     * Event duration, if applicable.\n     */\n    duration?: number;\n    lcpDetails?: LargestContentfulPaint;\n    layoutShiftDetails?: LayoutShift;\n  }\n\n  export interface EnableRequest {\n    /**\n     * The types of event to report, as specified in\n     * https://w3c.github.io/performance-timeline/#dom-performanceentry-entrytype\n     * The specified filter overrides any previous filters, passing empty\n     * filter disables recording.\n     * Note that not all types exposed to the web platform are currently supported.\n     */\n    eventTypes: string[];\n  }\n\n  /**\n   * Sent when a performance timeline event is added. See reportPerformanceTimeline method.\n   */\n  export interface TimelineEventAddedEvent {\n    event: TimelineEvent;\n  }\n}\n\nexport namespace Preload {\n\n  /**\n   * Unique id\n   */\n  export type RuleSetId = OpaqueIdentifier<string, 'Protocol.Preload.RuleSetId'>;\n\n  /**\n   * Corresponds to SpeculationRuleSet\n   */\n  export interface RuleSet {\n    id: RuleSetId;\n    /**\n     * Identifies a document which the rule set is associated with.\n     */\n    loaderId: Network.LoaderId;\n    /**\n     * Source text of JSON representing the rule set. If it comes from\n     * `<script>` tag, it is the textContent of the node. Note that it is\n     * a JSON for valid case.\n     *\n     * See also:\n     * - https://wicg.github.io/nav-speculation/speculation-rules.html\n     * - https://github.com/WICG/nav-speculation/blob/main/triggers.md\n     */\n    sourceText: string;\n    /**\n     * A speculation rule set is either added through an inline\n     * `<script>` tag or through an external resource via the\n     * 'Speculation-Rules' HTTP header. For the first case, we include\n     * the BackendNodeId of the relevant `<script>` tag. For the second\n     * case, we include the external URL where the rule set was loaded\n     * from, and also RequestId if Network domain is enabled.\n     *\n     * See also:\n     * - https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-script\n     * - https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-header\n     */\n    backendNodeId?: DOM.BackendNodeId;\n    url?: string;\n    requestId?: Network.RequestId;\n    /**\n     * Error information\n     * `errorMessage` is null iff `errorType` is null.\n     */\n    errorType?: RuleSetErrorType;\n    /**\n     * TODO(https://crbug.com/1425354): Replace this property with structured error.\n     * @deprecated\n     */\n    errorMessage?: string;\n    /**\n     * For more details, see:\n     * https://github.com/WICG/nav-speculation/blob/main/speculation-rules-tags.md\n     */\n    tag?: string;\n  }\n\n  export const enum RuleSetErrorType {\n    SourceIsNotJsonObject = 'SourceIsNotJsonObject',\n    InvalidRulesSkipped = 'InvalidRulesSkipped',\n    InvalidRulesetLevelTag = 'InvalidRulesetLevelTag',\n  }\n\n  /**\n   * The type of preloading attempted. It corresponds to\n   * mojom::SpeculationAction (although PrefetchWithSubresources is omitted as it\n   * isn't being used by clients).\n   */\n  export const enum SpeculationAction {\n    Prefetch = 'Prefetch',\n    Prerender = 'Prerender',\n    PrerenderUntilScript = 'PrerenderUntilScript',\n  }\n\n  /**\n   * Corresponds to mojom::SpeculationTargetHint.\n   * See https://github.com/WICG/nav-speculation/blob/main/triggers.md#window-name-targeting-hints\n   */\n  export const enum SpeculationTargetHint {\n    Blank = 'Blank',\n    Self = 'Self',\n  }\n\n  /**\n   * A key that identifies a preloading attempt.\n   *\n   * The url used is the url specified by the trigger (i.e. the initial URL), and\n   * not the final url that is navigated to. For example, prerendering allows\n   * same-origin main frame navigations during the attempt, but the attempt is\n   * still keyed with the initial URL.\n   */\n  export interface PreloadingAttemptKey {\n    loaderId: Network.LoaderId;\n    action: SpeculationAction;\n    url: string;\n    targetHint?: SpeculationTargetHint;\n  }\n\n  /**\n   * Lists sources for a preloading attempt, specifically the ids of rule sets\n   * that had a speculation rule that triggered the attempt, and the\n   * BackendNodeIds of <a href> or <area href> elements that triggered the\n   * attempt (in the case of attempts triggered by a document rule). It is\n   * possible for multiple rule sets and links to trigger a single attempt.\n   */\n  export interface PreloadingAttemptSource {\n    key: PreloadingAttemptKey;\n    ruleSetIds: RuleSetId[];\n    nodeIds: DOM.BackendNodeId[];\n  }\n\n  /**\n   * Chrome manages different types of preloads together using a\n   * concept of preloading pipeline. For example, if a site uses a\n   * SpeculationRules for prerender, Chrome first starts a prefetch and\n   * then upgrades it to prerender.\n   *\n   * CDP events for them are emitted separately but they share\n   * `PreloadPipelineId`.\n   */\n  export type PreloadPipelineId = OpaqueIdentifier<string, 'Protocol.Preload.PreloadPipelineId'>;\n\n  /**\n   * List of FinalStatus reasons for Prerender2.\n   */\n  export const enum PrerenderFinalStatus {\n    Activated = 'Activated',\n    Destroyed = 'Destroyed',\n    LowEndDevice = 'LowEndDevice',\n    InvalidSchemeRedirect = 'InvalidSchemeRedirect',\n    InvalidSchemeNavigation = 'InvalidSchemeNavigation',\n    NavigationRequestBlockedByCsp = 'NavigationRequestBlockedByCsp',\n    MojoBinderPolicy = 'MojoBinderPolicy',\n    RendererProcessCrashed = 'RendererProcessCrashed',\n    RendererProcessKilled = 'RendererProcessKilled',\n    Download = 'Download',\n    TriggerDestroyed = 'TriggerDestroyed',\n    NavigationNotCommitted = 'NavigationNotCommitted',\n    NavigationBadHttpStatus = 'NavigationBadHttpStatus',\n    ClientCertRequested = 'ClientCertRequested',\n    NavigationRequestNetworkError = 'NavigationRequestNetworkError',\n    CancelAllHostsForTesting = 'CancelAllHostsForTesting',\n    DidFailLoad = 'DidFailLoad',\n    Stop = 'Stop',\n    SslCertificateError = 'SslCertificateError',\n    LoginAuthRequested = 'LoginAuthRequested',\n    UaChangeRequiresReload = 'UaChangeRequiresReload',\n    BlockedByClient = 'BlockedByClient',\n    AudioOutputDeviceRequested = 'AudioOutputDeviceRequested',\n    MixedContent = 'MixedContent',\n    TriggerBackgrounded = 'TriggerBackgrounded',\n    MemoryLimitExceeded = 'MemoryLimitExceeded',\n    DataSaverEnabled = 'DataSaverEnabled',\n    TriggerUrlHasEffectiveUrl = 'TriggerUrlHasEffectiveUrl',\n    ActivatedBeforeStarted = 'ActivatedBeforeStarted',\n    InactivePageRestriction = 'InactivePageRestriction',\n    StartFailed = 'StartFailed',\n    TimeoutBackgrounded = 'TimeoutBackgrounded',\n    CrossSiteRedirectInInitialNavigation = 'CrossSiteRedirectInInitialNavigation',\n    CrossSiteNavigationInInitialNavigation = 'CrossSiteNavigationInInitialNavigation',\n    SameSiteCrossOriginRedirectNotOptInInInitialNavigation = 'SameSiteCrossOriginRedirectNotOptInInInitialNavigation',\n    SameSiteCrossOriginNavigationNotOptInInInitialNavigation = 'SameSiteCrossOriginNavigationNotOptInInInitialNavigation',\n    ActivationNavigationParameterMismatch = 'ActivationNavigationParameterMismatch',\n    ActivatedInBackground = 'ActivatedInBackground',\n    EmbedderHostDisallowed = 'EmbedderHostDisallowed',\n    ActivationNavigationDestroyedBeforeSuccess = 'ActivationNavigationDestroyedBeforeSuccess',\n    TabClosedByUserGesture = 'TabClosedByUserGesture',\n    TabClosedWithoutUserGesture = 'TabClosedWithoutUserGesture',\n    PrimaryMainFrameRendererProcessCrashed = 'PrimaryMainFrameRendererProcessCrashed',\n    PrimaryMainFrameRendererProcessKilled = 'PrimaryMainFrameRendererProcessKilled',\n    ActivationFramePolicyNotCompatible = 'ActivationFramePolicyNotCompatible',\n    PreloadingDisabled = 'PreloadingDisabled',\n    BatterySaverEnabled = 'BatterySaverEnabled',\n    ActivatedDuringMainFrameNavigation = 'ActivatedDuringMainFrameNavigation',\n    PreloadingUnsupportedByWebContents = 'PreloadingUnsupportedByWebContents',\n    CrossSiteRedirectInMainFrameNavigation = 'CrossSiteRedirectInMainFrameNavigation',\n    CrossSiteNavigationInMainFrameNavigation = 'CrossSiteNavigationInMainFrameNavigation',\n    SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation = 'SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation',\n    SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation = 'SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation',\n    MemoryPressureOnTrigger = 'MemoryPressureOnTrigger',\n    MemoryPressureAfterTriggered = 'MemoryPressureAfterTriggered',\n    PrerenderingDisabledByDevTools = 'PrerenderingDisabledByDevTools',\n    SpeculationRuleRemoved = 'SpeculationRuleRemoved',\n    ActivatedWithAuxiliaryBrowsingContexts = 'ActivatedWithAuxiliaryBrowsingContexts',\n    MaxNumOfRunningEagerPrerendersExceeded = 'MaxNumOfRunningEagerPrerendersExceeded',\n    MaxNumOfRunningNonEagerPrerendersExceeded = 'MaxNumOfRunningNonEagerPrerendersExceeded',\n    MaxNumOfRunningEmbedderPrerendersExceeded = 'MaxNumOfRunningEmbedderPrerendersExceeded',\n    PrerenderingUrlHasEffectiveUrl = 'PrerenderingUrlHasEffectiveUrl',\n    RedirectedPrerenderingUrlHasEffectiveUrl = 'RedirectedPrerenderingUrlHasEffectiveUrl',\n    ActivationUrlHasEffectiveUrl = 'ActivationUrlHasEffectiveUrl',\n    JavaScriptInterfaceAdded = 'JavaScriptInterfaceAdded',\n    JavaScriptInterfaceRemoved = 'JavaScriptInterfaceRemoved',\n    AllPrerenderingCanceled = 'AllPrerenderingCanceled',\n    WindowClosed = 'WindowClosed',\n    SlowNetwork = 'SlowNetwork',\n    OtherPrerenderedPageActivated = 'OtherPrerenderedPageActivated',\n    V8OptimizerDisabled = 'V8OptimizerDisabled',\n    PrerenderFailedDuringPrefetch = 'PrerenderFailedDuringPrefetch',\n    BrowsingDataRemoved = 'BrowsingDataRemoved',\n    PrerenderHostReused = 'PrerenderHostReused',\n  }\n\n  /**\n   * Preloading status values, see also PreloadingTriggeringOutcome. This\n   * status is shared by prefetchStatusUpdated and prerenderStatusUpdated.\n   */\n  export const enum PreloadingStatus {\n    Pending = 'Pending',\n    Running = 'Running',\n    Ready = 'Ready',\n    Success = 'Success',\n    Failure = 'Failure',\n    NotSupported = 'NotSupported',\n  }\n\n  /**\n   * TODO(https://crbug.com/1384419): revisit the list of PrefetchStatus and\n   * filter out the ones that aren't necessary to the developers.\n   */\n  export const enum PrefetchStatus {\n    PrefetchAllowed = 'PrefetchAllowed',\n    PrefetchFailedIneligibleRedirect = 'PrefetchFailedIneligibleRedirect',\n    PrefetchFailedInvalidRedirect = 'PrefetchFailedInvalidRedirect',\n    PrefetchFailedMIMENotSupported = 'PrefetchFailedMIMENotSupported',\n    PrefetchFailedNetError = 'PrefetchFailedNetError',\n    PrefetchFailedNon2XX = 'PrefetchFailedNon2XX',\n    PrefetchEvictedAfterBrowsingDataRemoved = 'PrefetchEvictedAfterBrowsingDataRemoved',\n    PrefetchEvictedAfterCandidateRemoved = 'PrefetchEvictedAfterCandidateRemoved',\n    PrefetchEvictedForNewerPrefetch = 'PrefetchEvictedForNewerPrefetch',\n    PrefetchHeldback = 'PrefetchHeldback',\n    PrefetchIneligibleRetryAfter = 'PrefetchIneligibleRetryAfter',\n    PrefetchIsPrivacyDecoy = 'PrefetchIsPrivacyDecoy',\n    PrefetchIsStale = 'PrefetchIsStale',\n    PrefetchNotEligibleBrowserContextOffTheRecord = 'PrefetchNotEligibleBrowserContextOffTheRecord',\n    PrefetchNotEligibleDataSaverEnabled = 'PrefetchNotEligibleDataSaverEnabled',\n    PrefetchNotEligibleExistingProxy = 'PrefetchNotEligibleExistingProxy',\n    PrefetchNotEligibleHostIsNonUnique = 'PrefetchNotEligibleHostIsNonUnique',\n    PrefetchNotEligibleNonDefaultStoragePartition = 'PrefetchNotEligibleNonDefaultStoragePartition',\n    PrefetchNotEligibleSameSiteCrossOriginPrefetchRequiredProxy = 'PrefetchNotEligibleSameSiteCrossOriginPrefetchRequiredProxy',\n    PrefetchNotEligibleSchemeIsNotHttps = 'PrefetchNotEligibleSchemeIsNotHttps',\n    PrefetchNotEligibleUserHasCookies = 'PrefetchNotEligibleUserHasCookies',\n    PrefetchNotEligibleUserHasServiceWorker = 'PrefetchNotEligibleUserHasServiceWorker',\n    PrefetchNotEligibleUserHasServiceWorkerNoFetchHandler = 'PrefetchNotEligibleUserHasServiceWorkerNoFetchHandler',\n    PrefetchNotEligibleRedirectFromServiceWorker = 'PrefetchNotEligibleRedirectFromServiceWorker',\n    PrefetchNotEligibleRedirectToServiceWorker = 'PrefetchNotEligibleRedirectToServiceWorker',\n    PrefetchNotEligibleBatterySaverEnabled = 'PrefetchNotEligibleBatterySaverEnabled',\n    PrefetchNotEligiblePreloadingDisabled = 'PrefetchNotEligiblePreloadingDisabled',\n    PrefetchNotFinishedInTime = 'PrefetchNotFinishedInTime',\n    PrefetchNotStarted = 'PrefetchNotStarted',\n    PrefetchNotUsedCookiesChanged = 'PrefetchNotUsedCookiesChanged',\n    PrefetchProxyNotAvailable = 'PrefetchProxyNotAvailable',\n    PrefetchResponseUsed = 'PrefetchResponseUsed',\n    PrefetchSuccessfulButNotUsed = 'PrefetchSuccessfulButNotUsed',\n    PrefetchNotUsedProbeFailed = 'PrefetchNotUsedProbeFailed',\n  }\n\n  /**\n   * Information of headers to be displayed when the header mismatch occurred.\n   */\n  export interface PrerenderMismatchedHeaders {\n    headerName: string;\n    initialValue?: string;\n    activationValue?: string;\n  }\n\n  /**\n   * Upsert. Currently, it is only emitted when a rule set added.\n   */\n  export interface RuleSetUpdatedEvent {\n    ruleSet: RuleSet;\n  }\n\n  export interface RuleSetRemovedEvent {\n    id: RuleSetId;\n  }\n\n  /**\n   * Fired when a preload enabled state is updated.\n   */\n  export interface PreloadEnabledStateUpdatedEvent {\n    disabledByPreference: boolean;\n    disabledByDataSaver: boolean;\n    disabledByBatterySaver: boolean;\n    disabledByHoldbackPrefetchSpeculationRules: boolean;\n    disabledByHoldbackPrerenderSpeculationRules: boolean;\n  }\n\n  /**\n   * Fired when a prefetch attempt is updated.\n   */\n  export interface PrefetchStatusUpdatedEvent {\n    key: PreloadingAttemptKey;\n    pipelineId: PreloadPipelineId;\n    /**\n     * The frame id of the frame initiating prefetch.\n     */\n    initiatingFrameId: Page.FrameId;\n    prefetchUrl: string;\n    status: PreloadingStatus;\n    prefetchStatus: PrefetchStatus;\n    requestId: Network.RequestId;\n  }\n\n  /**\n   * Fired when a prerender attempt is updated.\n   */\n  export interface PrerenderStatusUpdatedEvent {\n    key: PreloadingAttemptKey;\n    pipelineId: PreloadPipelineId;\n    status: PreloadingStatus;\n    prerenderStatus?: PrerenderFinalStatus;\n    /**\n     * This is used to give users more information about the name of Mojo interface\n     * that is incompatible with prerender and has caused the cancellation of the attempt.\n     */\n    disallowedMojoInterface?: string;\n    mismatchedHeaders?: PrerenderMismatchedHeaders[];\n  }\n\n  /**\n   * Send a list of sources for all preloading attempts in a document.\n   */\n  export interface PreloadingAttemptSourcesUpdatedEvent {\n    loaderId: Network.LoaderId;\n    preloadingAttemptSources: PreloadingAttemptSource[];\n  }\n}\n\nexport namespace Security {\n\n  /**\n   * An internal certificate ID value.\n   */\n  export type CertificateId = OpaqueIdentifier<integer, 'Protocol.Security.CertificateId'>;\n\n  /**\n   * A description of mixed content (HTTP resources on HTTPS pages), as defined by\n   * https://www.w3.org/TR/mixed-content/#categories\n   */\n  export const enum MixedContentType {\n    Blockable = 'blockable',\n    OptionallyBlockable = 'optionally-blockable',\n    None = 'none',\n  }\n\n  /**\n   * The security level of a page or resource.\n   */\n  export const enum SecurityState {\n    Unknown = 'unknown',\n    Neutral = 'neutral',\n    Insecure = 'insecure',\n    Secure = 'secure',\n    Info = 'info',\n    InsecureBroken = 'insecure-broken',\n  }\n\n  /**\n   * Details about the security state of the page certificate.\n   */\n  export interface CertificateSecurityState {\n    /**\n     * Protocol name (e.g. \"TLS 1.2\" or \"QUIC\").\n     */\n    protocol: string;\n    /**\n     * Key Exchange used by the connection, or the empty string if not applicable.\n     */\n    keyExchange: string;\n    /**\n     * (EC)DH group used by the connection, if applicable.\n     */\n    keyExchangeGroup?: string;\n    /**\n     * Cipher name.\n     */\n    cipher: string;\n    /**\n     * TLS MAC. Note that AEAD ciphers do not have separate MACs.\n     */\n    mac?: string;\n    /**\n     * Page certificate.\n     */\n    certificate: string[];\n    /**\n     * Certificate subject name.\n     */\n    subjectName: string;\n    /**\n     * Name of the issuing CA.\n     */\n    issuer: string;\n    /**\n     * Certificate valid from date.\n     */\n    validFrom: Network.TimeSinceEpoch;\n    /**\n     * Certificate valid to (expiration) date\n     */\n    validTo: Network.TimeSinceEpoch;\n    /**\n     * The highest priority network error code, if the certificate has an error.\n     */\n    certificateNetworkError?: string;\n    /**\n     * True if the certificate uses a weak signature algorithm.\n     */\n    certificateHasWeakSignature: boolean;\n    /**\n     * True if the certificate has a SHA1 signature in the chain.\n     */\n    certificateHasSha1Signature: boolean;\n    /**\n     * True if modern SSL\n     */\n    modernSSL: boolean;\n    /**\n     * True if the connection is using an obsolete SSL protocol.\n     */\n    obsoleteSslProtocol: boolean;\n    /**\n     * True if the connection is using an obsolete SSL key exchange.\n     */\n    obsoleteSslKeyExchange: boolean;\n    /**\n     * True if the connection is using an obsolete SSL cipher.\n     */\n    obsoleteSslCipher: boolean;\n    /**\n     * True if the connection is using an obsolete SSL signature.\n     */\n    obsoleteSslSignature: boolean;\n  }\n\n  export const enum SafetyTipStatus {\n    BadReputation = 'badReputation',\n    Lookalike = 'lookalike',\n  }\n\n  export interface SafetyTipInfo {\n    /**\n     * Describes whether the page triggers any safety tips or reputation warnings. Default is unknown.\n     */\n    safetyTipStatus: SafetyTipStatus;\n    /**\n     * The URL the safety tip suggested (\"Did you mean?\"). Only filled in for lookalike matches.\n     */\n    safeUrl?: string;\n  }\n\n  /**\n   * Security state information about the page.\n   */\n  export interface VisibleSecurityState {\n    /**\n     * The security level of the page.\n     */\n    securityState: SecurityState;\n    /**\n     * Security state details about the page certificate.\n     */\n    certificateSecurityState?: CertificateSecurityState;\n    /**\n     * The type of Safety Tip triggered on the page. Note that this field will be set even if the Safety Tip UI was not actually shown.\n     */\n    safetyTipInfo?: SafetyTipInfo;\n    /**\n     * Array of security state issues ids.\n     */\n    securityStateIssueIds: string[];\n  }\n\n  /**\n   * An explanation of an factor contributing to the security state.\n   */\n  export interface SecurityStateExplanation {\n    /**\n     * Security state representing the severity of the factor being explained.\n     */\n    securityState: SecurityState;\n    /**\n     * Title describing the type of factor.\n     */\n    title: string;\n    /**\n     * Short phrase describing the type of factor.\n     */\n    summary: string;\n    /**\n     * Full text explanation of the factor.\n     */\n    description: string;\n    /**\n     * The type of mixed content described by the explanation.\n     */\n    mixedContentType: MixedContentType;\n    /**\n     * Page certificate.\n     */\n    certificate: string[];\n    /**\n     * Recommendations to fix any issues.\n     */\n    recommendations?: string[];\n  }\n\n  /**\n   * Information about insecure content on the page.\n   * @deprecated\n   */\n  export interface InsecureContentStatus {\n    /**\n     * Always false.\n     */\n    ranMixedContent: boolean;\n    /**\n     * Always false.\n     */\n    displayedMixedContent: boolean;\n    /**\n     * Always false.\n     */\n    containedMixedForm: boolean;\n    /**\n     * Always false.\n     */\n    ranContentWithCertErrors: boolean;\n    /**\n     * Always false.\n     */\n    displayedContentWithCertErrors: boolean;\n    /**\n     * Always set to unknown.\n     */\n    ranInsecureContentStyle: SecurityState;\n    /**\n     * Always set to unknown.\n     */\n    displayedInsecureContentStyle: SecurityState;\n  }\n\n  /**\n   * The action to take when a certificate error occurs. continue will continue processing the\n   * request and cancel will cancel the request.\n   */\n  export const enum CertificateErrorAction {\n    Continue = 'continue',\n    Cancel = 'cancel',\n  }\n\n  export interface SetIgnoreCertificateErrorsRequest {\n    /**\n     * If true, all certificate errors will be ignored.\n     */\n    ignore: boolean;\n  }\n\n  export interface HandleCertificateErrorRequest {\n    /**\n     * The ID of the event.\n     */\n    eventId: integer;\n    /**\n     * The action to take on the certificate error.\n     */\n    action: CertificateErrorAction;\n  }\n\n  export interface SetOverrideCertificateErrorsRequest {\n    /**\n     * If true, certificate errors will be overridden.\n     */\n    override: boolean;\n  }\n\n  /**\n   * There is a certificate error. If overriding certificate errors is enabled, then it should be\n   * handled with the `handleCertificateError` command. Note: this event does not fire if the\n   * certificate error has been allowed internally. Only one client per target should override\n   * certificate errors at the same time.\n   * @deprecated\n   */\n  export interface CertificateErrorEvent {\n    /**\n     * The ID of the event.\n     */\n    eventId: integer;\n    /**\n     * The type of the error.\n     */\n    errorType: string;\n    /**\n     * The url that was requested.\n     */\n    requestURL: string;\n  }\n\n  /**\n   * The security state of the page changed.\n   */\n  export interface VisibleSecurityStateChangedEvent {\n    /**\n     * Security state information about the page.\n     */\n    visibleSecurityState: VisibleSecurityState;\n  }\n\n  /**\n   * The security state of the page changed. No longer being sent.\n   * @deprecated\n   */\n  export interface SecurityStateChangedEvent {\n    /**\n     * Security state.\n     */\n    securityState: SecurityState;\n    /**\n     * True if the page was loaded over cryptographic transport such as HTTPS.\n     * @deprecated\n     */\n    schemeIsCryptographic: boolean;\n    /**\n     * Previously a list of explanations for the security state. Now always\n     * empty.\n     * @deprecated\n     */\n    explanations: SecurityStateExplanation[];\n    /**\n     * Information about insecure content on the page.\n     * @deprecated\n     */\n    insecureContentStatus: InsecureContentStatus;\n    /**\n     * Overrides user-visible description of the state. Always omitted.\n     * @deprecated\n     */\n    summary?: string;\n  }\n}\n\nexport namespace ServiceWorker {\n\n  export type RegistrationID = OpaqueIdentifier<string, 'Protocol.ServiceWorker.RegistrationID'>;\n\n  /**\n   * ServiceWorker registration.\n   */\n  export interface ServiceWorkerRegistration {\n    registrationId: RegistrationID;\n    scopeURL: string;\n    isDeleted: boolean;\n  }\n\n  export const enum ServiceWorkerVersionRunningStatus {\n    Stopped = 'stopped',\n    Starting = 'starting',\n    Running = 'running',\n    Stopping = 'stopping',\n  }\n\n  export const enum ServiceWorkerVersionStatus {\n    New = 'new',\n    Installing = 'installing',\n    Installed = 'installed',\n    Activating = 'activating',\n    Activated = 'activated',\n    Redundant = 'redundant',\n  }\n\n  /**\n   * ServiceWorker version.\n   */\n  export interface ServiceWorkerVersion {\n    versionId: string;\n    registrationId: RegistrationID;\n    scriptURL: string;\n    runningStatus: ServiceWorkerVersionRunningStatus;\n    status: ServiceWorkerVersionStatus;\n    /**\n     * The Last-Modified header value of the main script.\n     */\n    scriptLastModified?: number;\n    /**\n     * The time at which the response headers of the main script were received from the server.\n     * For cached script it is the last time the cache entry was validated.\n     */\n    scriptResponseTime?: number;\n    controlledClients?: Target.TargetID[];\n    targetId?: Target.TargetID;\n    routerRules?: string;\n  }\n\n  /**\n   * ServiceWorker error message.\n   */\n  export interface ServiceWorkerErrorMessage {\n    errorMessage: string;\n    registrationId: RegistrationID;\n    versionId: string;\n    sourceURL: string;\n    lineNumber: integer;\n    columnNumber: integer;\n  }\n\n  export interface DeliverPushMessageRequest {\n    origin: string;\n    registrationId: RegistrationID;\n    data: string;\n  }\n\n  export interface DispatchSyncEventRequest {\n    origin: string;\n    registrationId: RegistrationID;\n    tag: string;\n    lastChance: boolean;\n  }\n\n  export interface DispatchPeriodicSyncEventRequest {\n    origin: string;\n    registrationId: RegistrationID;\n    tag: string;\n  }\n\n  export interface SetForceUpdateOnPageLoadRequest {\n    forceUpdateOnPageLoad: boolean;\n  }\n\n  export interface SkipWaitingRequest {\n    scopeURL: string;\n  }\n\n  export interface StartWorkerRequest {\n    scopeURL: string;\n  }\n\n  export interface StopWorkerRequest {\n    versionId: string;\n  }\n\n  export interface UnregisterRequest {\n    scopeURL: string;\n  }\n\n  export interface UpdateRegistrationRequest {\n    scopeURL: string;\n  }\n\n  export interface WorkerErrorReportedEvent {\n    errorMessage: ServiceWorkerErrorMessage;\n  }\n\n  export interface WorkerRegistrationUpdatedEvent {\n    registrations: ServiceWorkerRegistration[];\n  }\n\n  export interface WorkerVersionUpdatedEvent {\n    versions: ServiceWorkerVersion[];\n  }\n}\n\nexport namespace Storage {\n\n  export type SerializedStorageKey = string;\n\n  /**\n   * Enum of possible storage types.\n   */\n  export const enum StorageType {\n    Cookies = 'cookies',\n    File_systems = 'file_systems',\n    Indexeddb = 'indexeddb',\n    Local_storage = 'local_storage',\n    Shader_cache = 'shader_cache',\n    Websql = 'websql',\n    Service_workers = 'service_workers',\n    Cache_storage = 'cache_storage',\n    Interest_groups = 'interest_groups',\n    Shared_storage = 'shared_storage',\n    Storage_buckets = 'storage_buckets',\n    All = 'all',\n    Other = 'other',\n  }\n\n  /**\n   * Usage for a storage type.\n   */\n  export interface UsageForType {\n    /**\n     * Name of storage type.\n     */\n    storageType: StorageType;\n    /**\n     * Storage usage (bytes).\n     */\n    usage: number;\n  }\n\n  /**\n   * Pair of issuer origin and number of available (signed, but not used) Trust\n   * Tokens from that issuer.\n   */\n  export interface TrustTokens {\n    issuerOrigin: string;\n    count: number;\n  }\n\n  /**\n   * Protected audience interest group auction identifier.\n   */\n  export type InterestGroupAuctionId = OpaqueIdentifier<string, 'Protocol.Storage.InterestGroupAuctionId'>;\n\n  /**\n   * Enum of interest group access types.\n   */\n  export const enum InterestGroupAccessType {\n    Join = 'join',\n    Leave = 'leave',\n    Update = 'update',\n    Loaded = 'loaded',\n    Bid = 'bid',\n    Win = 'win',\n    AdditionalBid = 'additionalBid',\n    AdditionalBidWin = 'additionalBidWin',\n    TopLevelBid = 'topLevelBid',\n    TopLevelAdditionalBid = 'topLevelAdditionalBid',\n    Clear = 'clear',\n  }\n\n  /**\n   * Enum of auction events.\n   */\n  export const enum InterestGroupAuctionEventType {\n    Started = 'started',\n    ConfigResolved = 'configResolved',\n  }\n\n  /**\n   * Enum of network fetches auctions can do.\n   */\n  export const enum InterestGroupAuctionFetchType {\n    BidderJs = 'bidderJs',\n    BidderWasm = 'bidderWasm',\n    SellerJs = 'sellerJs',\n    BidderTrustedSignals = 'bidderTrustedSignals',\n    SellerTrustedSignals = 'sellerTrustedSignals',\n  }\n\n  /**\n   * Enum of shared storage access scopes.\n   */\n  export const enum SharedStorageAccessScope {\n    Window = 'window',\n    SharedStorageWorklet = 'sharedStorageWorklet',\n    ProtectedAudienceWorklet = 'protectedAudienceWorklet',\n    Header = 'header',\n  }\n\n  /**\n   * Enum of shared storage access methods.\n   */\n  export const enum SharedStorageAccessMethod {\n    AddModule = 'addModule',\n    CreateWorklet = 'createWorklet',\n    SelectURL = 'selectURL',\n    Run = 'run',\n    BatchUpdate = 'batchUpdate',\n    Set = 'set',\n    Append = 'append',\n    Delete = 'delete',\n    Clear = 'clear',\n    Get = 'get',\n    Keys = 'keys',\n    Values = 'values',\n    Entries = 'entries',\n    Length = 'length',\n    RemainingBudget = 'remainingBudget',\n  }\n\n  /**\n   * Struct for a single key-value pair in an origin's shared storage.\n   */\n  export interface SharedStorageEntry {\n    key: string;\n    value: string;\n  }\n\n  /**\n   * Details for an origin's shared storage.\n   */\n  export interface SharedStorageMetadata {\n    /**\n     * Time when the origin's shared storage was last created.\n     */\n    creationTime: Network.TimeSinceEpoch;\n    /**\n     * Number of key-value pairs stored in origin's shared storage.\n     */\n    length: integer;\n    /**\n     * Current amount of bits of entropy remaining in the navigation budget.\n     */\n    remainingBudget: number;\n    /**\n     * Total number of bytes stored as key-value pairs in origin's shared\n     * storage.\n     */\n    bytesUsed: integer;\n  }\n\n  /**\n   * Represents a dictionary object passed in as privateAggregationConfig to\n   * run or selectURL.\n   */\n  export interface SharedStoragePrivateAggregationConfig {\n    /**\n     * The chosen aggregation service deployment.\n     */\n    aggregationCoordinatorOrigin?: string;\n    /**\n     * The context ID provided.\n     */\n    contextId?: string;\n    /**\n     * Configures the maximum size allowed for filtering IDs.\n     */\n    filteringIdMaxBytes: integer;\n    /**\n     * The limit on the number of contributions in the final report.\n     */\n    maxContributions?: integer;\n  }\n\n  /**\n   * Pair of reporting metadata details for a candidate URL for `selectURL()`.\n   */\n  export interface SharedStorageReportingMetadata {\n    eventType: string;\n    reportingUrl: string;\n  }\n\n  /**\n   * Bundles a candidate URL with its reporting metadata.\n   */\n  export interface SharedStorageUrlWithMetadata {\n    /**\n     * Spec of candidate URL.\n     */\n    url: string;\n    /**\n     * Any associated reporting metadata.\n     */\n    reportingMetadata: SharedStorageReportingMetadata[];\n  }\n\n  /**\n   * Bundles the parameters for shared storage access events whose\n   * presence/absence can vary according to SharedStorageAccessType.\n   */\n  export interface SharedStorageAccessParams {\n    /**\n     * Spec of the module script URL.\n     * Present only for SharedStorageAccessMethods: addModule and\n     * createWorklet.\n     */\n    scriptSourceUrl?: string;\n    /**\n     * String denoting \"context-origin\", \"script-origin\", or a custom\n     * origin to be used as the worklet's data origin.\n     * Present only for SharedStorageAccessMethod: createWorklet.\n     */\n    dataOrigin?: string;\n    /**\n     * Name of the registered operation to be run.\n     * Present only for SharedStorageAccessMethods: run and selectURL.\n     */\n    operationName?: string;\n    /**\n     * ID of the operation call.\n     * Present only for SharedStorageAccessMethods: run and selectURL.\n     */\n    operationId?: string;\n    /**\n     * Whether or not to keep the worket alive for future run or selectURL\n     * calls.\n     * Present only for SharedStorageAccessMethods: run and selectURL.\n     */\n    keepAlive?: boolean;\n    /**\n     * Configures the private aggregation options.\n     * Present only for SharedStorageAccessMethods: run and selectURL.\n     */\n    privateAggregationConfig?: SharedStoragePrivateAggregationConfig;\n    /**\n     * The operation's serialized data in bytes (converted to a string).\n     * Present only for SharedStorageAccessMethods: run and selectURL.\n     * TODO(crbug.com/401011862): Consider updating this parameter to binary.\n     */\n    serializedData?: string;\n    /**\n     * Array of candidate URLs' specs, along with any associated metadata.\n     * Present only for SharedStorageAccessMethod: selectURL.\n     */\n    urlsWithMetadata?: SharedStorageUrlWithMetadata[];\n    /**\n     * Spec of the URN:UUID generated for a selectURL call.\n     * Present only for SharedStorageAccessMethod: selectURL.\n     */\n    urnUuid?: string;\n    /**\n     * Key for a specific entry in an origin's shared storage.\n     * Present only for SharedStorageAccessMethods: set, append, delete, and\n     * get.\n     */\n    key?: string;\n    /**\n     * Value for a specific entry in an origin's shared storage.\n     * Present only for SharedStorageAccessMethods: set and append.\n     */\n    value?: string;\n    /**\n     * Whether or not to set an entry for a key if that key is already present.\n     * Present only for SharedStorageAccessMethod: set.\n     */\n    ignoreIfPresent?: boolean;\n    /**\n     * A number denoting the (0-based) order of the worklet's\n     * creation relative to all other shared storage worklets created by\n     * documents using the current storage partition.\n     * Present only for SharedStorageAccessMethods: addModule, createWorklet.\n     */\n    workletOrdinal?: integer;\n    /**\n     * Hex representation of the DevTools token used as the TargetID for the\n     * associated shared storage worklet.\n     * Present only for SharedStorageAccessMethods: addModule, createWorklet,\n     * run, selectURL, and any other SharedStorageAccessMethod when the\n     * SharedStorageAccessScope is sharedStorageWorklet.\n     */\n    workletTargetId?: Target.TargetID;\n    /**\n     * Name of the lock to be acquired, if present.\n     * Optionally present only for SharedStorageAccessMethods: batchUpdate,\n     * set, append, delete, and clear.\n     */\n    withLock?: string;\n    /**\n     * If the method has been called as part of a batchUpdate, then this\n     * number identifies the batch to which it belongs.\n     * Optionally present only for SharedStorageAccessMethods:\n     * batchUpdate (required), set, append, delete, and clear.\n     */\n    batchUpdateId?: string;\n    /**\n     * Number of modifier methods sent in batch.\n     * Present only for SharedStorageAccessMethod: batchUpdate.\n     */\n    batchSize?: integer;\n  }\n\n  export const enum StorageBucketsDurability {\n    Relaxed = 'relaxed',\n    Strict = 'strict',\n  }\n\n  export interface StorageBucket {\n    storageKey: SerializedStorageKey;\n    /**\n     * If not specified, it is the default bucket of the storageKey.\n     */\n    name?: string;\n  }\n\n  export interface StorageBucketInfo {\n    bucket: StorageBucket;\n    id: string;\n    expiration: Network.TimeSinceEpoch;\n    /**\n     * Storage quota (bytes).\n     */\n    quota: number;\n    persistent: boolean;\n    durability: StorageBucketsDurability;\n  }\n\n  export const enum AttributionReportingSourceType {\n    Navigation = 'navigation',\n    Event = 'event',\n  }\n\n  export type UnsignedInt64AsBase10 = string;\n\n  export type UnsignedInt128AsBase16 = string;\n\n  export type SignedInt64AsBase10 = string;\n\n  export interface AttributionReportingFilterDataEntry {\n    key: string;\n    values: string[];\n  }\n\n  export interface AttributionReportingFilterConfig {\n    filterValues: AttributionReportingFilterDataEntry[];\n    /**\n     * duration in seconds\n     */\n    lookbackWindow?: integer;\n  }\n\n  export interface AttributionReportingFilterPair {\n    filters: AttributionReportingFilterConfig[];\n    notFilters: AttributionReportingFilterConfig[];\n  }\n\n  export interface AttributionReportingAggregationKeysEntry {\n    key: string;\n    value: UnsignedInt128AsBase16;\n  }\n\n  export interface AttributionReportingEventReportWindows {\n    /**\n     * duration in seconds\n     */\n    start: integer;\n    /**\n     * duration in seconds\n     */\n    ends: integer[];\n  }\n\n  export const enum AttributionReportingTriggerDataMatching {\n    Exact = 'exact',\n    Modulus = 'modulus',\n  }\n\n  export interface AttributionReportingAggregatableDebugReportingData {\n    keyPiece: UnsignedInt128AsBase16;\n    /**\n     * number instead of integer because not all uint32 can be represented by\n     * int\n     */\n    value: number;\n    types: string[];\n  }\n\n  export interface AttributionReportingAggregatableDebugReportingConfig {\n    /**\n     * number instead of integer because not all uint32 can be represented by\n     * int, only present for source registrations\n     */\n    budget?: number;\n    keyPiece: UnsignedInt128AsBase16;\n    debugData: AttributionReportingAggregatableDebugReportingData[];\n    aggregationCoordinatorOrigin?: string;\n  }\n\n  export interface AttributionScopesData {\n    values: string[];\n    /**\n     * number instead of integer because not all uint32 can be represented by\n     * int\n     */\n    limit: number;\n    maxEventStates: number;\n  }\n\n  export interface AttributionReportingNamedBudgetDef {\n    name: string;\n    budget: integer;\n  }\n\n  export interface AttributionReportingSourceRegistration {\n    time: Network.TimeSinceEpoch;\n    /**\n     * duration in seconds\n     */\n    expiry: integer;\n    /**\n     * number instead of integer because not all uint32 can be represented by\n     * int\n     */\n    triggerData: number[];\n    eventReportWindows: AttributionReportingEventReportWindows;\n    /**\n     * duration in seconds\n     */\n    aggregatableReportWindow: integer;\n    type: AttributionReportingSourceType;\n    sourceOrigin: string;\n    reportingOrigin: string;\n    destinationSites: string[];\n    eventId: UnsignedInt64AsBase10;\n    priority: SignedInt64AsBase10;\n    filterData: AttributionReportingFilterDataEntry[];\n    aggregationKeys: AttributionReportingAggregationKeysEntry[];\n    debugKey?: UnsignedInt64AsBase10;\n    triggerDataMatching: AttributionReportingTriggerDataMatching;\n    destinationLimitPriority: SignedInt64AsBase10;\n    aggregatableDebugReportingConfig: AttributionReportingAggregatableDebugReportingConfig;\n    scopesData?: AttributionScopesData;\n    maxEventLevelReports: integer;\n    namedBudgets: AttributionReportingNamedBudgetDef[];\n    debugReporting: boolean;\n    eventLevelEpsilon: number;\n  }\n\n  export const enum AttributionReportingSourceRegistrationResult {\n    Success = 'success',\n    InternalError = 'internalError',\n    InsufficientSourceCapacity = 'insufficientSourceCapacity',\n    InsufficientUniqueDestinationCapacity = 'insufficientUniqueDestinationCapacity',\n    ExcessiveReportingOrigins = 'excessiveReportingOrigins',\n    ProhibitedByBrowserPolicy = 'prohibitedByBrowserPolicy',\n    SuccessNoised = 'successNoised',\n    DestinationReportingLimitReached = 'destinationReportingLimitReached',\n    DestinationGlobalLimitReached = 'destinationGlobalLimitReached',\n    DestinationBothLimitsReached = 'destinationBothLimitsReached',\n    ReportingOriginsPerSiteLimitReached = 'reportingOriginsPerSiteLimitReached',\n    ExceedsMaxChannelCapacity = 'exceedsMaxChannelCapacity',\n    ExceedsMaxScopesChannelCapacity = 'exceedsMaxScopesChannelCapacity',\n    ExceedsMaxTriggerStateCardinality = 'exceedsMaxTriggerStateCardinality',\n    ExceedsMaxEventStatesLimit = 'exceedsMaxEventStatesLimit',\n    DestinationPerDayReportingLimitReached = 'destinationPerDayReportingLimitReached',\n  }\n\n  export const enum AttributionReportingSourceRegistrationTimeConfig {\n    Include = 'include',\n    Exclude = 'exclude',\n  }\n\n  export interface AttributionReportingAggregatableValueDictEntry {\n    key: string;\n    /**\n     * number instead of integer because not all uint32 can be represented by\n     * int\n     */\n    value: number;\n    filteringId: UnsignedInt64AsBase10;\n  }\n\n  export interface AttributionReportingAggregatableValueEntry {\n    values: AttributionReportingAggregatableValueDictEntry[];\n    filters: AttributionReportingFilterPair;\n  }\n\n  export interface AttributionReportingEventTriggerData {\n    data: UnsignedInt64AsBase10;\n    priority: SignedInt64AsBase10;\n    dedupKey?: UnsignedInt64AsBase10;\n    filters: AttributionReportingFilterPair;\n  }\n\n  export interface AttributionReportingAggregatableTriggerData {\n    keyPiece: UnsignedInt128AsBase16;\n    sourceKeys: string[];\n    filters: AttributionReportingFilterPair;\n  }\n\n  export interface AttributionReportingAggregatableDedupKey {\n    dedupKey?: UnsignedInt64AsBase10;\n    filters: AttributionReportingFilterPair;\n  }\n\n  export interface AttributionReportingNamedBudgetCandidate {\n    name?: string;\n    filters: AttributionReportingFilterPair;\n  }\n\n  export interface AttributionReportingTriggerRegistration {\n    filters: AttributionReportingFilterPair;\n    debugKey?: UnsignedInt64AsBase10;\n    aggregatableDedupKeys: AttributionReportingAggregatableDedupKey[];\n    eventTriggerData: AttributionReportingEventTriggerData[];\n    aggregatableTriggerData: AttributionReportingAggregatableTriggerData[];\n    aggregatableValues: AttributionReportingAggregatableValueEntry[];\n    aggregatableFilteringIdMaxBytes: integer;\n    debugReporting: boolean;\n    aggregationCoordinatorOrigin?: string;\n    sourceRegistrationTimeConfig: AttributionReportingSourceRegistrationTimeConfig;\n    triggerContextId?: string;\n    aggregatableDebugReportingConfig: AttributionReportingAggregatableDebugReportingConfig;\n    scopes: string[];\n    namedBudgets: AttributionReportingNamedBudgetCandidate[];\n  }\n\n  export const enum AttributionReportingEventLevelResult {\n    Success = 'success',\n    SuccessDroppedLowerPriority = 'successDroppedLowerPriority',\n    InternalError = 'internalError',\n    NoCapacityForAttributionDestination = 'noCapacityForAttributionDestination',\n    NoMatchingSources = 'noMatchingSources',\n    Deduplicated = 'deduplicated',\n    ExcessiveAttributions = 'excessiveAttributions',\n    PriorityTooLow = 'priorityTooLow',\n    NeverAttributedSource = 'neverAttributedSource',\n    ExcessiveReportingOrigins = 'excessiveReportingOrigins',\n    NoMatchingSourceFilterData = 'noMatchingSourceFilterData',\n    ProhibitedByBrowserPolicy = 'prohibitedByBrowserPolicy',\n    NoMatchingConfigurations = 'noMatchingConfigurations',\n    ExcessiveReports = 'excessiveReports',\n    FalselyAttributedSource = 'falselyAttributedSource',\n    ReportWindowPassed = 'reportWindowPassed',\n    NotRegistered = 'notRegistered',\n    ReportWindowNotStarted = 'reportWindowNotStarted',\n    NoMatchingTriggerData = 'noMatchingTriggerData',\n  }\n\n  export const enum AttributionReportingAggregatableResult {\n    Success = 'success',\n    InternalError = 'internalError',\n    NoCapacityForAttributionDestination = 'noCapacityForAttributionDestination',\n    NoMatchingSources = 'noMatchingSources',\n    ExcessiveAttributions = 'excessiveAttributions',\n    ExcessiveReportingOrigins = 'excessiveReportingOrigins',\n    NoHistograms = 'noHistograms',\n    InsufficientBudget = 'insufficientBudget',\n    InsufficientNamedBudget = 'insufficientNamedBudget',\n    NoMatchingSourceFilterData = 'noMatchingSourceFilterData',\n    NotRegistered = 'notRegistered',\n    ProhibitedByBrowserPolicy = 'prohibitedByBrowserPolicy',\n    Deduplicated = 'deduplicated',\n    ReportWindowPassed = 'reportWindowPassed',\n    ExcessiveReports = 'excessiveReports',\n  }\n\n  export const enum AttributionReportingReportResult {\n    Sent = 'sent',\n    Prohibited = 'prohibited',\n    FailedToAssemble = 'failedToAssemble',\n    Expired = 'expired',\n  }\n\n  /**\n   * A single Related Website Set object.\n   */\n  export interface RelatedWebsiteSet {\n    /**\n     * The primary site of this set, along with the ccTLDs if there is any.\n     */\n    primarySites: string[];\n    /**\n     * The associated sites of this set, along with the ccTLDs if there is any.\n     */\n    associatedSites: string[];\n    /**\n     * The service sites of this set, along with the ccTLDs if there is any.\n     */\n    serviceSites: string[];\n  }\n\n  export interface GetStorageKeyForFrameRequest {\n    frameId: Page.FrameId;\n  }\n\n  export interface GetStorageKeyForFrameResponse extends ProtocolResponseWithError {\n    storageKey: SerializedStorageKey;\n  }\n\n  export interface GetStorageKeyRequest {\n    frameId?: Page.FrameId;\n  }\n\n  export interface GetStorageKeyResponse extends ProtocolResponseWithError {\n    storageKey: SerializedStorageKey;\n  }\n\n  export interface ClearDataForOriginRequest {\n    /**\n     * Security origin.\n     */\n    origin: string;\n    /**\n     * Comma separated list of StorageType to clear.\n     */\n    storageTypes: string;\n  }\n\n  export interface ClearDataForStorageKeyRequest {\n    /**\n     * Storage key.\n     */\n    storageKey: string;\n    /**\n     * Comma separated list of StorageType to clear.\n     */\n    storageTypes: string;\n  }\n\n  export interface GetCookiesRequest {\n    /**\n     * Browser context to use when called on the browser endpoint.\n     */\n    browserContextId?: Browser.BrowserContextID;\n  }\n\n  export interface GetCookiesResponse extends ProtocolResponseWithError {\n    /**\n     * Array of cookie objects.\n     */\n    cookies: Network.Cookie[];\n  }\n\n  export interface SetCookiesRequest {\n    /**\n     * Cookies to be set.\n     */\n    cookies: Network.CookieParam[];\n    /**\n     * Browser context to use when called on the browser endpoint.\n     */\n    browserContextId?: Browser.BrowserContextID;\n  }\n\n  export interface ClearCookiesRequest {\n    /**\n     * Browser context to use when called on the browser endpoint.\n     */\n    browserContextId?: Browser.BrowserContextID;\n  }\n\n  export interface GetUsageAndQuotaRequest {\n    /**\n     * Security origin.\n     */\n    origin: string;\n  }\n\n  export interface GetUsageAndQuotaResponse extends ProtocolResponseWithError {\n    /**\n     * Storage usage (bytes).\n     */\n    usage: number;\n    /**\n     * Storage quota (bytes).\n     */\n    quota: number;\n    /**\n     * Whether or not the origin has an active storage quota override\n     */\n    overrideActive: boolean;\n    /**\n     * Storage usage per type (bytes).\n     */\n    usageBreakdown: UsageForType[];\n  }\n\n  export interface OverrideQuotaForOriginRequest {\n    /**\n     * Security origin.\n     */\n    origin: string;\n    /**\n     * The quota size (in bytes) to override the original quota with.\n     * If this is called multiple times, the overridden quota will be equal to\n     * the quotaSize provided in the final call. If this is called without\n     * specifying a quotaSize, the quota will be reset to the default value for\n     * the specified origin. If this is called multiple times with different\n     * origins, the override will be maintained for each origin until it is\n     * disabled (called without a quotaSize).\n     */\n    quotaSize?: number;\n  }\n\n  export interface TrackCacheStorageForOriginRequest {\n    /**\n     * Security origin.\n     */\n    origin: string;\n  }\n\n  export interface TrackCacheStorageForStorageKeyRequest {\n    /**\n     * Storage key.\n     */\n    storageKey: string;\n  }\n\n  export interface TrackIndexedDBForOriginRequest {\n    /**\n     * Security origin.\n     */\n    origin: string;\n  }\n\n  export interface TrackIndexedDBForStorageKeyRequest {\n    /**\n     * Storage key.\n     */\n    storageKey: string;\n  }\n\n  export interface UntrackCacheStorageForOriginRequest {\n    /**\n     * Security origin.\n     */\n    origin: string;\n  }\n\n  export interface UntrackCacheStorageForStorageKeyRequest {\n    /**\n     * Storage key.\n     */\n    storageKey: string;\n  }\n\n  export interface UntrackIndexedDBForOriginRequest {\n    /**\n     * Security origin.\n     */\n    origin: string;\n  }\n\n  export interface UntrackIndexedDBForStorageKeyRequest {\n    /**\n     * Storage key.\n     */\n    storageKey: string;\n  }\n\n  export interface GetTrustTokensResponse extends ProtocolResponseWithError {\n    tokens: TrustTokens[];\n  }\n\n  export interface ClearTrustTokensRequest {\n    issuerOrigin: string;\n  }\n\n  export interface ClearTrustTokensResponse extends ProtocolResponseWithError {\n    /**\n     * True if any tokens were deleted, false otherwise.\n     */\n    didDeleteTokens: boolean;\n  }\n\n  export interface GetInterestGroupDetailsRequest {\n    ownerOrigin: string;\n    name: string;\n  }\n\n  export interface GetInterestGroupDetailsResponse extends ProtocolResponseWithError {\n    /**\n     * This largely corresponds to:\n     * https://wicg.github.io/turtledove/#dictdef-generatebidinterestgroup\n     * but has absolute expirationTime instead of relative lifetimeMs and\n     * also adds joiningOrigin.\n     */\n    details: any;\n  }\n\n  export interface SetInterestGroupTrackingRequest {\n    enable: boolean;\n  }\n\n  export interface SetInterestGroupAuctionTrackingRequest {\n    enable: boolean;\n  }\n\n  export interface GetSharedStorageMetadataRequest {\n    ownerOrigin: string;\n  }\n\n  export interface GetSharedStorageMetadataResponse extends ProtocolResponseWithError {\n    metadata: SharedStorageMetadata;\n  }\n\n  export interface GetSharedStorageEntriesRequest {\n    ownerOrigin: string;\n  }\n\n  export interface GetSharedStorageEntriesResponse extends ProtocolResponseWithError {\n    entries: SharedStorageEntry[];\n  }\n\n  export interface SetSharedStorageEntryRequest {\n    ownerOrigin: string;\n    key: string;\n    value: string;\n    /**\n     * If `ignoreIfPresent` is included and true, then only sets the entry if\n     * `key` doesn't already exist.\n     */\n    ignoreIfPresent?: boolean;\n  }\n\n  export interface DeleteSharedStorageEntryRequest {\n    ownerOrigin: string;\n    key: string;\n  }\n\n  export interface ClearSharedStorageEntriesRequest {\n    ownerOrigin: string;\n  }\n\n  export interface ResetSharedStorageBudgetRequest {\n    ownerOrigin: string;\n  }\n\n  export interface SetSharedStorageTrackingRequest {\n    enable: boolean;\n  }\n\n  export interface SetStorageBucketTrackingRequest {\n    storageKey: string;\n    enable: boolean;\n  }\n\n  export interface DeleteStorageBucketRequest {\n    bucket: StorageBucket;\n  }\n\n  export interface RunBounceTrackingMitigationsResponse extends ProtocolResponseWithError {\n    deletedSites: string[];\n  }\n\n  export interface SetAttributionReportingLocalTestingModeRequest {\n    /**\n     * If enabled, noise is suppressed and reports are sent immediately.\n     */\n    enabled: boolean;\n  }\n\n  export interface SetAttributionReportingTrackingRequest {\n    enable: boolean;\n  }\n\n  export interface SendPendingAttributionReportsResponse extends ProtocolResponseWithError {\n    /**\n     * The number of reports that were sent.\n     */\n    numSent: integer;\n  }\n\n  export interface GetRelatedWebsiteSetsResponse extends ProtocolResponseWithError {\n    sets: RelatedWebsiteSet[];\n  }\n\n  export interface GetAffectedUrlsForThirdPartyCookieMetadataRequest {\n    /**\n     * The URL of the page currently being visited.\n     */\n    firstPartyUrl: string;\n    /**\n     * The list of embedded resource URLs from the page.\n     */\n    thirdPartyUrls: string[];\n  }\n\n  export interface GetAffectedUrlsForThirdPartyCookieMetadataResponse extends ProtocolResponseWithError {\n    /**\n     * Array of matching URLs. If there is a primary pattern match for the first-\n     * party URL, only the first-party URL is returned in the array.\n     */\n    matchedUrls: string[];\n  }\n\n  export interface SetProtectedAudienceKAnonymityRequest {\n    owner: string;\n    name: string;\n    hashes: binary[];\n  }\n\n  /**\n   * A cache's contents have been modified.\n   */\n  export interface CacheStorageContentUpdatedEvent {\n    /**\n     * Origin to update.\n     */\n    origin: string;\n    /**\n     * Storage key to update.\n     */\n    storageKey: string;\n    /**\n     * Storage bucket to update.\n     */\n    bucketId: string;\n    /**\n     * Name of cache in origin.\n     */\n    cacheName: string;\n  }\n\n  /**\n   * A cache has been added/deleted.\n   */\n  export interface CacheStorageListUpdatedEvent {\n    /**\n     * Origin to update.\n     */\n    origin: string;\n    /**\n     * Storage key to update.\n     */\n    storageKey: string;\n    /**\n     * Storage bucket to update.\n     */\n    bucketId: string;\n  }\n\n  /**\n   * The origin's IndexedDB object store has been modified.\n   */\n  export interface IndexedDBContentUpdatedEvent {\n    /**\n     * Origin to update.\n     */\n    origin: string;\n    /**\n     * Storage key to update.\n     */\n    storageKey: string;\n    /**\n     * Storage bucket to update.\n     */\n    bucketId: string;\n    /**\n     * Database to update.\n     */\n    databaseName: string;\n    /**\n     * ObjectStore to update.\n     */\n    objectStoreName: string;\n  }\n\n  /**\n   * The origin's IndexedDB database list has been modified.\n   */\n  export interface IndexedDBListUpdatedEvent {\n    /**\n     * Origin to update.\n     */\n    origin: string;\n    /**\n     * Storage key to update.\n     */\n    storageKey: string;\n    /**\n     * Storage bucket to update.\n     */\n    bucketId: string;\n  }\n\n  /**\n   * One of the interest groups was accessed. Note that these events are global\n   * to all targets sharing an interest group store.\n   */\n  export interface InterestGroupAccessedEvent {\n    accessTime: Network.TimeSinceEpoch;\n    type: InterestGroupAccessType;\n    ownerOrigin: string;\n    name: string;\n    /**\n     * For topLevelBid/topLevelAdditionalBid, and when appropriate,\n     * win and additionalBidWin\n     */\n    componentSellerOrigin?: string;\n    /**\n     * For bid or somethingBid event, if done locally and not on a server.\n     */\n    bid?: number;\n    bidCurrency?: string;\n    /**\n     * For non-global events --- links to interestGroupAuctionEvent\n     */\n    uniqueAuctionId?: InterestGroupAuctionId;\n  }\n\n  /**\n   * An auction involving interest groups is taking place. These events are\n   * target-specific.\n   */\n  export interface InterestGroupAuctionEventOccurredEvent {\n    eventTime: Network.TimeSinceEpoch;\n    type: InterestGroupAuctionEventType;\n    uniqueAuctionId: InterestGroupAuctionId;\n    /**\n     * Set for child auctions.\n     */\n    parentAuctionId?: InterestGroupAuctionId;\n    /**\n     * Set for started and configResolved\n     */\n    auctionConfig?: any;\n  }\n\n  /**\n   * Specifies which auctions a particular network fetch may be related to, and\n   * in what role. Note that it is not ordered with respect to\n   * Network.requestWillBeSent (but will happen before loadingFinished\n   * loadingFailed).\n   */\n  export interface InterestGroupAuctionNetworkRequestCreatedEvent {\n    type: InterestGroupAuctionFetchType;\n    requestId: Network.RequestId;\n    /**\n     * This is the set of the auctions using the worklet that issued this\n     * request.  In the case of trusted signals, it's possible that only some of\n     * them actually care about the keys being queried.\n     */\n    auctions: InterestGroupAuctionId[];\n  }\n\n  /**\n   * Shared storage was accessed by the associated page.\n   * The following parameters are included in all events.\n   */\n  export interface SharedStorageAccessedEvent {\n    /**\n     * Time of the access.\n     */\n    accessTime: Network.TimeSinceEpoch;\n    /**\n     * Enum value indicating the access scope.\n     */\n    scope: SharedStorageAccessScope;\n    /**\n     * Enum value indicating the Shared Storage API method invoked.\n     */\n    method: SharedStorageAccessMethod;\n    /**\n     * DevTools Frame Token for the primary frame tree's root.\n     */\n    mainFrameId: Page.FrameId;\n    /**\n     * Serialization of the origin owning the Shared Storage data.\n     */\n    ownerOrigin: string;\n    /**\n     * Serialization of the site owning the Shared Storage data.\n     */\n    ownerSite: string;\n    /**\n     * The sub-parameters wrapped by `params` are all optional and their\n     * presence/absence depends on `type`.\n     */\n    params: SharedStorageAccessParams;\n  }\n\n  /**\n   * A shared storage run or selectURL operation finished its execution.\n   * The following parameters are included in all events.\n   */\n  export interface SharedStorageWorkletOperationExecutionFinishedEvent {\n    /**\n     * Time that the operation finished.\n     */\n    finishedTime: Network.TimeSinceEpoch;\n    /**\n     * Time, in microseconds, from start of shared storage JS API call until\n     * end of operation execution in the worklet.\n     */\n    executionTime: integer;\n    /**\n     * Enum value indicating the Shared Storage API method invoked.\n     */\n    method: SharedStorageAccessMethod;\n    /**\n     * ID of the operation call.\n     */\n    operationId: string;\n    /**\n     * Hex representation of the DevTools token used as the TargetID for the\n     * associated shared storage worklet.\n     */\n    workletTargetId: Target.TargetID;\n    /**\n     * DevTools Frame Token for the primary frame tree's root.\n     */\n    mainFrameId: Page.FrameId;\n    /**\n     * Serialization of the origin owning the Shared Storage data.\n     */\n    ownerOrigin: string;\n  }\n\n  export interface StorageBucketCreatedOrUpdatedEvent {\n    bucketInfo: StorageBucketInfo;\n  }\n\n  export interface StorageBucketDeletedEvent {\n    bucketId: string;\n  }\n\n  export interface AttributionReportingSourceRegisteredEvent {\n    registration: AttributionReportingSourceRegistration;\n    result: AttributionReportingSourceRegistrationResult;\n  }\n\n  export interface AttributionReportingTriggerRegisteredEvent {\n    registration: AttributionReportingTriggerRegistration;\n    eventLevel: AttributionReportingEventLevelResult;\n    aggregatable: AttributionReportingAggregatableResult;\n  }\n\n  export interface AttributionReportingReportSentEvent {\n    url: string;\n    body: any;\n    result: AttributionReportingReportResult;\n    /**\n     * If result is `sent`, populated with net/HTTP status.\n     */\n    netError?: integer;\n    netErrorName?: string;\n    httpStatusCode?: integer;\n  }\n\n  export interface AttributionReportingVerboseDebugReportSentEvent {\n    url: string;\n    body?: any[];\n    netError?: integer;\n    netErrorName?: string;\n    httpStatusCode?: integer;\n  }\n}\n\n/**\n * The SystemInfo domain defines methods and events for querying low-level system information.\n */\nexport namespace SystemInfo {\n\n  /**\n   * Describes a single graphics processor (GPU).\n   */\n  export interface GPUDevice {\n    /**\n     * PCI ID of the GPU vendor, if available; 0 otherwise.\n     */\n    vendorId: number;\n    /**\n     * PCI ID of the GPU device, if available; 0 otherwise.\n     */\n    deviceId: number;\n    /**\n     * Sub sys ID of the GPU, only available on Windows.\n     */\n    subSysId?: number;\n    /**\n     * Revision of the GPU, only available on Windows.\n     */\n    revision?: number;\n    /**\n     * String description of the GPU vendor, if the PCI ID is not available.\n     */\n    vendorString: string;\n    /**\n     * String description of the GPU device, if the PCI ID is not available.\n     */\n    deviceString: string;\n    /**\n     * String description of the GPU driver vendor.\n     */\n    driverVendor: string;\n    /**\n     * String description of the GPU driver version.\n     */\n    driverVersion: string;\n  }\n\n  /**\n   * Describes the width and height dimensions of an entity.\n   */\n  export interface Size {\n    /**\n     * Width in pixels.\n     */\n    width: integer;\n    /**\n     * Height in pixels.\n     */\n    height: integer;\n  }\n\n  /**\n   * Describes a supported video decoding profile with its associated minimum and\n   * maximum resolutions.\n   */\n  export interface VideoDecodeAcceleratorCapability {\n    /**\n     * Video codec profile that is supported, e.g. VP9 Profile 2.\n     */\n    profile: string;\n    /**\n     * Maximum video dimensions in pixels supported for this |profile|.\n     */\n    maxResolution: Size;\n    /**\n     * Minimum video dimensions in pixels supported for this |profile|.\n     */\n    minResolution: Size;\n  }\n\n  /**\n   * Describes a supported video encoding profile with its associated maximum\n   * resolution and maximum framerate.\n   */\n  export interface VideoEncodeAcceleratorCapability {\n    /**\n     * Video codec profile that is supported, e.g H264 Main.\n     */\n    profile: string;\n    /**\n     * Maximum video dimensions in pixels supported for this |profile|.\n     */\n    maxResolution: Size;\n    /**\n     * Maximum encoding framerate in frames per second supported for this\n     * |profile|, as fraction's numerator and denominator, e.g. 24/1 fps,\n     * 24000/1001 fps, etc.\n     */\n    maxFramerateNumerator: integer;\n    maxFramerateDenominator: integer;\n  }\n\n  /**\n   * YUV subsampling type of the pixels of a given image.\n   */\n  export const enum SubsamplingFormat {\n    Yuv420 = 'yuv420',\n    Yuv422 = 'yuv422',\n    Yuv444 = 'yuv444',\n  }\n\n  /**\n   * Image format of a given image.\n   */\n  export const enum ImageType {\n    Jpeg = 'jpeg',\n    Webp = 'webp',\n    Unknown = 'unknown',\n  }\n\n  /**\n   * Provides information about the GPU(s) on the system.\n   */\n  export interface GPUInfo {\n    /**\n     * The graphics devices on the system. Element 0 is the primary GPU.\n     */\n    devices: GPUDevice[];\n    /**\n     * An optional dictionary of additional GPU related attributes.\n     */\n    auxAttributes?: any;\n    /**\n     * An optional dictionary of graphics features and their status.\n     */\n    featureStatus?: any;\n    /**\n     * An optional array of GPU driver bug workarounds.\n     */\n    driverBugWorkarounds: string[];\n    /**\n     * Supported accelerated video decoding capabilities.\n     */\n    videoDecoding: VideoDecodeAcceleratorCapability[];\n    /**\n     * Supported accelerated video encoding capabilities.\n     */\n    videoEncoding: VideoEncodeAcceleratorCapability[];\n  }\n\n  /**\n   * Represents process info.\n   */\n  export interface ProcessInfo {\n    /**\n     * Specifies process type.\n     */\n    type: string;\n    /**\n     * Specifies process id.\n     */\n    id: integer;\n    /**\n     * Specifies cumulative CPU usage in seconds across all threads of the\n     * process since the process start.\n     */\n    cpuTime: number;\n  }\n\n  export interface GetInfoResponse extends ProtocolResponseWithError {\n    /**\n     * Information about the GPUs on the system.\n     */\n    gpu: GPUInfo;\n    /**\n     * A platform-dependent description of the model of the machine. On Mac OS, this is, for\n     * example, 'MacBookPro'. Will be the empty string if not supported.\n     */\n    modelName: string;\n    /**\n     * A platform-dependent description of the version of the machine. On Mac OS, this is, for\n     * example, '10.1'. Will be the empty string if not supported.\n     */\n    modelVersion: string;\n    /**\n     * The command line string used to launch the browser. Will be the empty string if not\n     * supported.\n     */\n    commandLine: string;\n  }\n\n  export interface GetFeatureStateRequest {\n    featureState: string;\n  }\n\n  export interface GetFeatureStateResponse extends ProtocolResponseWithError {\n    featureEnabled: boolean;\n  }\n\n  export interface GetProcessInfoResponse extends ProtocolResponseWithError {\n    /**\n     * An array of process info blocks.\n     */\n    processInfo: ProcessInfo[];\n  }\n}\n\n/**\n * Supports additional targets discovery and allows to attach to them.\n */\nexport namespace Target {\n\n  export type TargetID = OpaqueIdentifier<string, 'Protocol.Target.TargetID'>;\n\n  /**\n   * Unique identifier of attached debugging session.\n   */\n  export type SessionID = OpaqueIdentifier<string, 'Protocol.Target.SessionID'>;\n\n  export interface TargetInfo {\n    targetId: TargetID;\n    /**\n     * List of types: https://source.chromium.org/chromium/chromium/src/+/main:content/browser/devtools/devtools_agent_host_impl.cc?ss=chromium&q=f:devtools%20-f:out%20%22::kTypeTab%5B%5D%22\n     */\n    type: string;\n    title: string;\n    url: string;\n    /**\n     * Whether the target has an attached client.\n     */\n    attached: boolean;\n    /**\n     * Opener target Id\n     */\n    openerId?: TargetID;\n    /**\n     * Whether the target has access to the originating window.\n     */\n    canAccessOpener: boolean;\n    /**\n     * Frame id of originating window (is only set if target has an opener).\n     */\n    openerFrameId?: Page.FrameId;\n    /**\n     * Id of the parent frame, only present for the \"iframe\" targets.\n     */\n    parentFrameId?: Page.FrameId;\n    browserContextId?: Browser.BrowserContextID;\n    /**\n     * Provides additional details for specific target types. For example, for\n     * the type of \"page\", this may be set to \"prerender\".\n     */\n    subtype?: string;\n  }\n\n  /**\n   * A filter used by target query/discovery/auto-attach operations.\n   */\n  export interface FilterEntry {\n    /**\n     * If set, causes exclusion of matching targets from the list.\n     */\n    exclude?: boolean;\n    /**\n     * If not present, matches any type.\n     */\n    type?: string;\n  }\n\n  /**\n   * The entries in TargetFilter are matched sequentially against targets and\n   * the first entry that matches determines if the target is included or not,\n   * depending on the value of `exclude` field in the entry.\n   * If filter is not specified, the one assumed is\n   * [{type: \"browser\", exclude: true}, {type: \"tab\", exclude: true}, {}]\n   * (i.e. include everything but `browser` and `tab`).\n   */\n  export type TargetFilter = FilterEntry[];\n\n  export interface RemoteLocation {\n    host: string;\n    port: integer;\n  }\n\n  /**\n   * The state of the target window.\n   */\n  export const enum WindowState {\n    Normal = 'normal',\n    Minimized = 'minimized',\n    Maximized = 'maximized',\n    Fullscreen = 'fullscreen',\n  }\n\n  export interface ActivateTargetRequest {\n    targetId: TargetID;\n  }\n\n  export interface AttachToTargetRequest {\n    targetId: TargetID;\n    /**\n     * Enables \"flat\" access to the session via specifying sessionId attribute in the commands.\n     * We plan to make this the default, deprecate non-flattened mode,\n     * and eventually retire it. See crbug.com/991325.\n     */\n    flatten?: boolean;\n  }\n\n  export interface AttachToTargetResponse extends ProtocolResponseWithError {\n    /**\n     * Id assigned to the session.\n     */\n    sessionId: SessionID;\n  }\n\n  export interface AttachToBrowserTargetResponse extends ProtocolResponseWithError {\n    /**\n     * Id assigned to the session.\n     */\n    sessionId: SessionID;\n  }\n\n  export interface CloseTargetRequest {\n    targetId: TargetID;\n  }\n\n  export interface CloseTargetResponse extends ProtocolResponseWithError {\n    /**\n     * Always set to true. If an error occurs, the response indicates protocol error.\n     * @deprecated\n     */\n    success: boolean;\n  }\n\n  export interface ExposeDevToolsProtocolRequest {\n    targetId: TargetID;\n    /**\n     * Binding name, 'cdp' if not specified.\n     */\n    bindingName?: string;\n    /**\n     * If true, inherits the current root session's permissions (default: false).\n     */\n    inheritPermissions?: boolean;\n  }\n\n  export interface CreateBrowserContextRequest {\n    /**\n     * If specified, disposes this context when debugging session disconnects.\n     */\n    disposeOnDetach?: boolean;\n    /**\n     * Proxy server, similar to the one passed to --proxy-server\n     */\n    proxyServer?: string;\n    /**\n     * Proxy bypass list, similar to the one passed to --proxy-bypass-list\n     */\n    proxyBypassList?: string;\n    /**\n     * An optional list of origins to grant unlimited cross-origin access to.\n     * Parts of the URL other than those constituting origin are ignored.\n     */\n    originsWithUniversalNetworkAccess?: string[];\n  }\n\n  export interface CreateBrowserContextResponse extends ProtocolResponseWithError {\n    /**\n     * The id of the context created.\n     */\n    browserContextId: Browser.BrowserContextID;\n  }\n\n  export interface GetBrowserContextsResponse extends ProtocolResponseWithError {\n    /**\n     * An array of browser context ids.\n     */\n    browserContextIds: Browser.BrowserContextID[];\n  }\n\n  export interface CreateTargetRequest {\n    /**\n     * The initial URL the page will be navigated to. An empty string indicates about:blank.\n     */\n    url: string;\n    /**\n     * Frame left origin in DIP (requires newWindow to be true or headless shell).\n     */\n    left?: integer;\n    /**\n     * Frame top origin in DIP (requires newWindow to be true or headless shell).\n     */\n    top?: integer;\n    /**\n     * Frame width in DIP (requires newWindow to be true or headless shell).\n     */\n    width?: integer;\n    /**\n     * Frame height in DIP (requires newWindow to be true or headless shell).\n     */\n    height?: integer;\n    /**\n     * Frame window state (requires newWindow to be true or headless shell).\n     * Default is normal.\n     */\n    windowState?: WindowState;\n    /**\n     * The browser context to create the page in.\n     */\n    browserContextId?: Browser.BrowserContextID;\n    /**\n     * Whether BeginFrames for this target will be controlled via DevTools (headless shell only,\n     * not supported on MacOS yet, false by default).\n     */\n    enableBeginFrameControl?: boolean;\n    /**\n     * Whether to create a new Window or Tab (false by default, not supported by headless shell).\n     */\n    newWindow?: boolean;\n    /**\n     * Whether to create the target in background or foreground (false by default, not supported\n     * by headless shell).\n     */\n    background?: boolean;\n    /**\n     * Whether to create the target of type \"tab\".\n     */\n    forTab?: boolean;\n    /**\n     * Whether to create a hidden target. The hidden target is observable via protocol, but not\n     * present in the tab UI strip. Cannot be created with `forTab: true`, `newWindow: true` or\n     * `background: false`. The life-time of the tab is limited to the life-time of the session.\n     */\n    hidden?: boolean;\n  }\n\n  export interface CreateTargetResponse extends ProtocolResponseWithError {\n    /**\n     * The id of the page opened.\n     */\n    targetId: TargetID;\n  }\n\n  export interface DetachFromTargetRequest {\n    /**\n     * Session to detach.\n     */\n    sessionId?: SessionID;\n    /**\n     * Deprecated.\n     * @deprecated\n     */\n    targetId?: TargetID;\n  }\n\n  export interface DisposeBrowserContextRequest {\n    browserContextId: Browser.BrowserContextID;\n  }\n\n  export interface GetTargetInfoRequest {\n    targetId?: TargetID;\n  }\n\n  export interface GetTargetInfoResponse extends ProtocolResponseWithError {\n    targetInfo: TargetInfo;\n  }\n\n  export interface GetTargetsRequest {\n    /**\n     * Only targets matching filter will be reported. If filter is not specified\n     * and target discovery is currently enabled, a filter used for target discovery\n     * is used for consistency.\n     */\n    filter?: TargetFilter;\n  }\n\n  export interface GetTargetsResponse extends ProtocolResponseWithError {\n    /**\n     * The list of targets.\n     */\n    targetInfos: TargetInfo[];\n  }\n\n  export interface SendMessageToTargetRequest {\n    message: string;\n    /**\n     * Identifier of the session.\n     */\n    sessionId?: SessionID;\n    /**\n     * Deprecated.\n     * @deprecated\n     */\n    targetId?: TargetID;\n  }\n\n  export interface SetAutoAttachRequest {\n    /**\n     * Whether to auto-attach to related targets.\n     */\n    autoAttach: boolean;\n    /**\n     * Whether to pause new targets when attaching to them. Use `Runtime.runIfWaitingForDebugger`\n     * to run paused targets.\n     */\n    waitForDebuggerOnStart: boolean;\n    /**\n     * Enables \"flat\" access to the session via specifying sessionId attribute in the commands.\n     * We plan to make this the default, deprecate non-flattened mode,\n     * and eventually retire it. See crbug.com/991325.\n     */\n    flatten?: boolean;\n    /**\n     * Only targets matching filter will be attached.\n     */\n    filter?: TargetFilter;\n  }\n\n  export interface AutoAttachRelatedRequest {\n    targetId: TargetID;\n    /**\n     * Whether to pause new targets when attaching to them. Use `Runtime.runIfWaitingForDebugger`\n     * to run paused targets.\n     */\n    waitForDebuggerOnStart: boolean;\n    /**\n     * Only targets matching filter will be attached.\n     */\n    filter?: TargetFilter;\n  }\n\n  export interface SetDiscoverTargetsRequest {\n    /**\n     * Whether to discover available targets.\n     */\n    discover: boolean;\n    /**\n     * Only targets matching filter will be attached. If `discover` is false,\n     * `filter` must be omitted or empty.\n     */\n    filter?: TargetFilter;\n  }\n\n  export interface SetRemoteLocationsRequest {\n    /**\n     * List of remote locations.\n     */\n    locations: RemoteLocation[];\n  }\n\n  export interface OpenDevToolsRequest {\n    /**\n     * This can be the page or tab target ID.\n     */\n    targetId: TargetID;\n  }\n\n  export interface OpenDevToolsResponse extends ProtocolResponseWithError {\n    /**\n     * The targetId of DevTools page target.\n     */\n    targetId: TargetID;\n  }\n\n  /**\n   * Issued when attached to target because of auto-attach or `attachToTarget` command.\n   */\n  export interface AttachedToTargetEvent {\n    /**\n     * Identifier assigned to the session used to send/receive messages.\n     */\n    sessionId: SessionID;\n    targetInfo: TargetInfo;\n    waitingForDebugger: boolean;\n  }\n\n  /**\n   * Issued when detached from target for any reason (including `detachFromTarget` command). Can be\n   * issued multiple times per target if multiple sessions have been attached to it.\n   */\n  export interface DetachedFromTargetEvent {\n    /**\n     * Detached session identifier.\n     */\n    sessionId: SessionID;\n    /**\n     * Deprecated.\n     * @deprecated\n     */\n    targetId?: TargetID;\n  }\n\n  /**\n   * Notifies about a new protocol message received from the session (as reported in\n   * `attachedToTarget` event).\n   */\n  export interface ReceivedMessageFromTargetEvent {\n    /**\n     * Identifier of a session which sends a message.\n     */\n    sessionId: SessionID;\n    message: string;\n    /**\n     * Deprecated.\n     * @deprecated\n     */\n    targetId?: TargetID;\n  }\n\n  /**\n   * Issued when a possible inspection target is created.\n   */\n  export interface TargetCreatedEvent {\n    targetInfo: TargetInfo;\n  }\n\n  /**\n   * Issued when a target is destroyed.\n   */\n  export interface TargetDestroyedEvent {\n    targetId: TargetID;\n  }\n\n  /**\n   * Issued when a target has crashed.\n   */\n  export interface TargetCrashedEvent {\n    targetId: TargetID;\n    /**\n     * Termination status type.\n     */\n    status: string;\n    /**\n     * Termination error code.\n     */\n    errorCode: integer;\n  }\n\n  /**\n   * Issued when some information about a target has changed. This only happens between\n   * `targetCreated` and `targetDestroyed`.\n   */\n  export interface TargetInfoChangedEvent {\n    targetInfo: TargetInfo;\n  }\n}\n\n/**\n * The Tethering domain defines methods and events for browser port binding.\n */\nexport namespace Tethering {\n\n  export interface BindRequest {\n    /**\n     * Port number to bind.\n     */\n    port: integer;\n  }\n\n  export interface UnbindRequest {\n    /**\n     * Port number to unbind.\n     */\n    port: integer;\n  }\n\n  /**\n   * Informs that port was successfully bound and got a specified connection id.\n   */\n  export interface AcceptedEvent {\n    /**\n     * Port number that was successfully bound.\n     */\n    port: integer;\n    /**\n     * Connection id to be used.\n     */\n    connectionId: string;\n  }\n}\n\nexport namespace Tracing {\n\n  /**\n   * Configuration for memory dump. Used only when \"memory-infra\" category is enabled.\n   */\n  export interface MemoryDumpConfig {\n    [key: string]: string;\n  }\n\n  export const enum TraceConfigRecordMode {\n    RecordUntilFull = 'recordUntilFull',\n    RecordContinuously = 'recordContinuously',\n    RecordAsMuchAsPossible = 'recordAsMuchAsPossible',\n    EchoToConsole = 'echoToConsole',\n  }\n\n  export interface TraceConfig {\n    /**\n     * Controls how the trace buffer stores data. The default is `recordUntilFull`.\n     */\n    recordMode?: TraceConfigRecordMode;\n    /**\n     * Size of the trace buffer in kilobytes. If not specified or zero is passed, a default value\n     * of 200 MB would be used.\n     */\n    traceBufferSizeInKb?: number;\n    /**\n     * Turns on JavaScript stack sampling.\n     */\n    enableSampling?: boolean;\n    /**\n     * Turns on system tracing.\n     */\n    enableSystrace?: boolean;\n    /**\n     * Turns on argument filter.\n     */\n    enableArgumentFilter?: boolean;\n    /**\n     * Included category filters.\n     */\n    includedCategories?: string[];\n    /**\n     * Excluded category filters.\n     */\n    excludedCategories?: string[];\n    /**\n     * Configuration to synthesize the delays in tracing.\n     */\n    syntheticDelays?: string[];\n    /**\n     * Configuration for memory dump triggers. Used only when \"memory-infra\" category is enabled.\n     */\n    memoryDumpConfig?: MemoryDumpConfig;\n  }\n\n  /**\n   * Data format of a trace. Can be either the legacy JSON format or the\n   * protocol buffer format. Note that the JSON format will be deprecated soon.\n   */\n  export const enum StreamFormat {\n    Json = 'json',\n    Proto = 'proto',\n  }\n\n  /**\n   * Compression type to use for traces returned via streams.\n   */\n  export const enum StreamCompression {\n    None = 'none',\n    Gzip = 'gzip',\n  }\n\n  /**\n   * Details exposed when memory request explicitly declared.\n   * Keep consistent with memory_dump_request_args.h and\n   * memory_instrumentation.mojom\n   */\n  export const enum MemoryDumpLevelOfDetail {\n    Background = 'background',\n    Light = 'light',\n    Detailed = 'detailed',\n  }\n\n  /**\n   * Backend type to use for tracing. `chrome` uses the Chrome-integrated\n   * tracing service and is supported on all platforms. `system` is only\n   * supported on Chrome OS and uses the Perfetto system tracing service.\n   * `auto` chooses `system` when the perfettoConfig provided to Tracing.start\n   * specifies at least one non-Chrome data source; otherwise uses `chrome`.\n   */\n  export const enum TracingBackend {\n    Auto = 'auto',\n    Chrome = 'chrome',\n    System = 'system',\n  }\n\n  export interface GetCategoriesResponse extends ProtocolResponseWithError {\n    /**\n     * A list of supported tracing categories.\n     */\n    categories: string[];\n  }\n\n  export interface RecordClockSyncMarkerRequest {\n    /**\n     * The ID of this clock sync marker\n     */\n    syncId: string;\n  }\n\n  export interface RequestMemoryDumpRequest {\n    /**\n     * Enables more deterministic results by forcing garbage collection\n     */\n    deterministic?: boolean;\n    /**\n     * Specifies level of details in memory dump. Defaults to \"detailed\".\n     */\n    levelOfDetail?: MemoryDumpLevelOfDetail;\n  }\n\n  export interface RequestMemoryDumpResponse extends ProtocolResponseWithError {\n    /**\n     * GUID of the resulting global memory dump.\n     */\n    dumpGuid: string;\n    /**\n     * True iff the global memory dump succeeded.\n     */\n    success: boolean;\n  }\n\n  export const enum StartRequestTransferMode {\n    ReportEvents = 'ReportEvents',\n    ReturnAsStream = 'ReturnAsStream',\n  }\n\n  export interface StartRequest {\n    /**\n     * Category/tag filter\n     * @deprecated\n     */\n    categories?: string;\n    /**\n     * Tracing options\n     * @deprecated\n     */\n    options?: string;\n    /**\n     * If set, the agent will issue bufferUsage events at this interval, specified in milliseconds\n     */\n    bufferUsageReportingInterval?: number;\n    /**\n     * Whether to report trace events as series of dataCollected events or to save trace to a\n     * stream (defaults to `ReportEvents`).\n     */\n    transferMode?: StartRequestTransferMode;\n    /**\n     * Trace data format to use. This only applies when using `ReturnAsStream`\n     * transfer mode (defaults to `json`).\n     */\n    streamFormat?: StreamFormat;\n    /**\n     * Compression format to use. This only applies when using `ReturnAsStream`\n     * transfer mode (defaults to `none`)\n     */\n    streamCompression?: StreamCompression;\n    traceConfig?: TraceConfig;\n    /**\n     * Base64-encoded serialized perfetto.protos.TraceConfig protobuf message\n     * When specified, the parameters `categories`, `options`, `traceConfig`\n     * are ignored.\n     */\n    perfettoConfig?: binary;\n    /**\n     * Backend type (defaults to `auto`)\n     */\n    tracingBackend?: TracingBackend;\n  }\n\n  export interface BufferUsageEvent {\n    /**\n     * A number in range [0..1] that indicates the used size of event buffer as a fraction of its\n     * total size.\n     */\n    percentFull?: number;\n    /**\n     * An approximate number of events in the trace log.\n     */\n    eventCount?: number;\n    /**\n     * A number in range [0..1] that indicates the used size of event buffer as a fraction of its\n     * total size.\n     */\n    value?: number;\n  }\n\n  /**\n   * Contains a bucket of collected trace events. When tracing is stopped collected events will be\n   * sent as a sequence of dataCollected events followed by tracingComplete event.\n   */\n  export interface DataCollectedEvent {\n    value: any[];\n  }\n\n  /**\n   * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\n   * delivered via dataCollected events.\n   */\n  export interface TracingCompleteEvent {\n    /**\n     * Indicates whether some trace data is known to have been lost, e.g. because the trace ring\n     * buffer wrapped around.\n     */\n    dataLossOccurred: boolean;\n    /**\n     * A handle of the stream that holds resulting trace data.\n     */\n    stream?: IO.StreamHandle;\n    /**\n     * Trace data format of returned stream.\n     */\n    traceFormat?: StreamFormat;\n    /**\n     * Compression format of returned stream.\n     */\n    streamCompression?: StreamCompression;\n  }\n}\n\n/**\n * This domain allows inspection of Web Audio API.\n * https://webaudio.github.io/web-audio-api/\n */\nexport namespace WebAudio {\n\n  /**\n   * An unique ID for a graph object (AudioContext, AudioNode, AudioParam) in Web Audio API\n   */\n  export type GraphObjectId = OpaqueIdentifier<string, 'Protocol.WebAudio.GraphObjectId'>;\n\n  /**\n   * Enum of BaseAudioContext types\n   */\n  export const enum ContextType {\n    Realtime = 'realtime',\n    Offline = 'offline',\n  }\n\n  /**\n   * Enum of AudioContextState from the spec\n   */\n  export const enum ContextState {\n    Suspended = 'suspended',\n    Running = 'running',\n    Closed = 'closed',\n    Interrupted = 'interrupted',\n  }\n\n  /**\n   * Enum of AudioNode types\n   */\n  export type NodeType = string;\n\n  /**\n   * Enum of AudioNode::ChannelCountMode from the spec\n   */\n  export const enum ChannelCountMode {\n    ClampedMax = 'clamped-max',\n    Explicit = 'explicit',\n    Max = 'max',\n  }\n\n  /**\n   * Enum of AudioNode::ChannelInterpretation from the spec\n   */\n  export const enum ChannelInterpretation {\n    Discrete = 'discrete',\n    Speakers = 'speakers',\n  }\n\n  /**\n   * Enum of AudioParam types\n   */\n  export type ParamType = string;\n\n  /**\n   * Enum of AudioParam::AutomationRate from the spec\n   */\n  export const enum AutomationRate {\n    ARate = 'a-rate',\n    KRate = 'k-rate',\n  }\n\n  /**\n   * Fields in AudioContext that change in real-time.\n   */\n  export interface ContextRealtimeData {\n    /**\n     * The current context time in second in BaseAudioContext.\n     */\n    currentTime: number;\n    /**\n     * The time spent on rendering graph divided by render quantum duration,\n     * and multiplied by 100. 100 means the audio renderer reached the full\n     * capacity and glitch may occur.\n     */\n    renderCapacity: number;\n    /**\n     * A running mean of callback interval.\n     */\n    callbackIntervalMean: number;\n    /**\n     * A running variance of callback interval.\n     */\n    callbackIntervalVariance: number;\n  }\n\n  /**\n   * Protocol object for BaseAudioContext\n   */\n  export interface BaseAudioContext {\n    contextId: GraphObjectId;\n    contextType: ContextType;\n    contextState: ContextState;\n    realtimeData?: ContextRealtimeData;\n    /**\n     * Platform-dependent callback buffer size.\n     */\n    callbackBufferSize: number;\n    /**\n     * Number of output channels supported by audio hardware in use.\n     */\n    maxOutputChannelCount: number;\n    /**\n     * Context sample rate.\n     */\n    sampleRate: number;\n  }\n\n  /**\n   * Protocol object for AudioListener\n   */\n  export interface AudioListener {\n    listenerId: GraphObjectId;\n    contextId: GraphObjectId;\n  }\n\n  /**\n   * Protocol object for AudioNode\n   */\n  export interface AudioNode {\n    nodeId: GraphObjectId;\n    contextId: GraphObjectId;\n    nodeType: NodeType;\n    numberOfInputs: number;\n    numberOfOutputs: number;\n    channelCount: number;\n    channelCountMode: ChannelCountMode;\n    channelInterpretation: ChannelInterpretation;\n  }\n\n  /**\n   * Protocol object for AudioParam\n   */\n  export interface AudioParam {\n    paramId: GraphObjectId;\n    nodeId: GraphObjectId;\n    contextId: GraphObjectId;\n    paramType: ParamType;\n    rate: AutomationRate;\n    defaultValue: number;\n    minValue: number;\n    maxValue: number;\n  }\n\n  export interface GetRealtimeDataRequest {\n    contextId: GraphObjectId;\n  }\n\n  export interface GetRealtimeDataResponse extends ProtocolResponseWithError {\n    realtimeData: ContextRealtimeData;\n  }\n\n  /**\n   * Notifies that a new BaseAudioContext has been created.\n   */\n  export interface ContextCreatedEvent {\n    context: BaseAudioContext;\n  }\n\n  /**\n   * Notifies that an existing BaseAudioContext will be destroyed.\n   */\n  export interface ContextWillBeDestroyedEvent {\n    contextId: GraphObjectId;\n  }\n\n  /**\n   * Notifies that existing BaseAudioContext has changed some properties (id stays the same)..\n   */\n  export interface ContextChangedEvent {\n    context: BaseAudioContext;\n  }\n\n  /**\n   * Notifies that the construction of an AudioListener has finished.\n   */\n  export interface AudioListenerCreatedEvent {\n    listener: AudioListener;\n  }\n\n  /**\n   * Notifies that a new AudioListener has been created.\n   */\n  export interface AudioListenerWillBeDestroyedEvent {\n    contextId: GraphObjectId;\n    listenerId: GraphObjectId;\n  }\n\n  /**\n   * Notifies that a new AudioNode has been created.\n   */\n  export interface AudioNodeCreatedEvent {\n    node: AudioNode;\n  }\n\n  /**\n   * Notifies that an existing AudioNode has been destroyed.\n   */\n  export interface AudioNodeWillBeDestroyedEvent {\n    contextId: GraphObjectId;\n    nodeId: GraphObjectId;\n  }\n\n  /**\n   * Notifies that a new AudioParam has been created.\n   */\n  export interface AudioParamCreatedEvent {\n    param: AudioParam;\n  }\n\n  /**\n   * Notifies that an existing AudioParam has been destroyed.\n   */\n  export interface AudioParamWillBeDestroyedEvent {\n    contextId: GraphObjectId;\n    nodeId: GraphObjectId;\n    paramId: GraphObjectId;\n  }\n\n  /**\n   * Notifies that two AudioNodes are connected.\n   */\n  export interface NodesConnectedEvent {\n    contextId: GraphObjectId;\n    sourceId: GraphObjectId;\n    destinationId: GraphObjectId;\n    sourceOutputIndex?: number;\n    destinationInputIndex?: number;\n  }\n\n  /**\n   * Notifies that AudioNodes are disconnected. The destination can be null, and it means all the outgoing connections from the source are disconnected.\n   */\n  export interface NodesDisconnectedEvent {\n    contextId: GraphObjectId;\n    sourceId: GraphObjectId;\n    destinationId: GraphObjectId;\n    sourceOutputIndex?: number;\n    destinationInputIndex?: number;\n  }\n\n  /**\n   * Notifies that an AudioNode is connected to an AudioParam.\n   */\n  export interface NodeParamConnectedEvent {\n    contextId: GraphObjectId;\n    sourceId: GraphObjectId;\n    destinationId: GraphObjectId;\n    sourceOutputIndex?: number;\n  }\n\n  /**\n   * Notifies that an AudioNode is disconnected to an AudioParam.\n   */\n  export interface NodeParamDisconnectedEvent {\n    contextId: GraphObjectId;\n    sourceId: GraphObjectId;\n    destinationId: GraphObjectId;\n    sourceOutputIndex?: number;\n  }\n}\n\n/**\n * This domain allows configuring virtual authenticators to test the WebAuthn\n * API.\n */\nexport namespace WebAuthn {\n\n  export type AuthenticatorId = OpaqueIdentifier<string, 'Protocol.WebAuthn.AuthenticatorId'>;\n\n  export const enum AuthenticatorProtocol {\n    U2f = 'u2f',\n    Ctap2 = 'ctap2',\n  }\n\n  export const enum Ctap2Version {\n    Ctap2_0 = 'ctap2_0',\n    Ctap2_1 = 'ctap2_1',\n  }\n\n  export const enum AuthenticatorTransport {\n    Usb = 'usb',\n    Nfc = 'nfc',\n    Ble = 'ble',\n    Cable = 'cable',\n    Internal = 'internal',\n  }\n\n  export interface VirtualAuthenticatorOptions {\n    protocol: AuthenticatorProtocol;\n    /**\n     * Defaults to ctap2_0. Ignored if |protocol| == u2f.\n     */\n    ctap2Version?: Ctap2Version;\n    transport: AuthenticatorTransport;\n    /**\n     * Defaults to false.\n     */\n    hasResidentKey?: boolean;\n    /**\n     * Defaults to false.\n     */\n    hasUserVerification?: boolean;\n    /**\n     * If set to true, the authenticator will support the largeBlob extension.\n     * https://w3c.github.io/webauthn#largeBlob\n     * Defaults to false.\n     */\n    hasLargeBlob?: boolean;\n    /**\n     * If set to true, the authenticator will support the credBlob extension.\n     * https://fidoalliance.org/specs/fido-v2.1-rd-20201208/fido-client-to-authenticator-protocol-v2.1-rd-20201208.html#sctn-credBlob-extension\n     * Defaults to false.\n     */\n    hasCredBlob?: boolean;\n    /**\n     * If set to true, the authenticator will support the minPinLength extension.\n     * https://fidoalliance.org/specs/fido-v2.1-ps-20210615/fido-client-to-authenticator-protocol-v2.1-ps-20210615.html#sctn-minpinlength-extension\n     * Defaults to false.\n     */\n    hasMinPinLength?: boolean;\n    /**\n     * If set to true, the authenticator will support the prf extension.\n     * https://w3c.github.io/webauthn/#prf-extension\n     * Defaults to false.\n     */\n    hasPrf?: boolean;\n    /**\n     * If set to true, tests of user presence will succeed immediately.\n     * Otherwise, they will not be resolved. Defaults to true.\n     */\n    automaticPresenceSimulation?: boolean;\n    /**\n     * Sets whether User Verification succeeds or fails for an authenticator.\n     * Defaults to false.\n     */\n    isUserVerified?: boolean;\n    /**\n     * Credentials created by this authenticator will have the backup\n     * eligibility (BE) flag set to this value. Defaults to false.\n     * https://w3c.github.io/webauthn/#sctn-credential-backup\n     */\n    defaultBackupEligibility?: boolean;\n    /**\n     * Credentials created by this authenticator will have the backup state\n     * (BS) flag set to this value. Defaults to false.\n     * https://w3c.github.io/webauthn/#sctn-credential-backup\n     */\n    defaultBackupState?: boolean;\n  }\n\n  export interface Credential {\n    credentialId: binary;\n    isResidentCredential: boolean;\n    /**\n     * Relying Party ID the credential is scoped to. Must be set when adding a\n     * credential.\n     */\n    rpId?: string;\n    /**\n     * The ECDSA P-256 private key in PKCS#8 format.\n     */\n    privateKey: binary;\n    /**\n     * An opaque byte sequence with a maximum size of 64 bytes mapping the\n     * credential to a specific user.\n     */\n    userHandle?: binary;\n    /**\n     * Signature counter. This is incremented by one for each successful\n     * assertion.\n     * See https://w3c.github.io/webauthn/#signature-counter\n     */\n    signCount: integer;\n    /**\n     * The large blob associated with the credential.\n     * See https://w3c.github.io/webauthn/#sctn-large-blob-extension\n     */\n    largeBlob?: binary;\n    /**\n     * Assertions returned by this credential will have the backup eligibility\n     * (BE) flag set to this value. Defaults to the authenticator's\n     * defaultBackupEligibility value.\n     */\n    backupEligibility?: boolean;\n    /**\n     * Assertions returned by this credential will have the backup state (BS)\n     * flag set to this value. Defaults to the authenticator's\n     * defaultBackupState value.\n     */\n    backupState?: boolean;\n    /**\n     * The credential's user.name property. Equivalent to empty if not set.\n     * https://w3c.github.io/webauthn/#dom-publickeycredentialentity-name\n     */\n    userName?: string;\n    /**\n     * The credential's user.displayName property. Equivalent to empty if\n     * not set.\n     * https://w3c.github.io/webauthn/#dom-publickeycredentialuserentity-displayname\n     */\n    userDisplayName?: string;\n  }\n\n  export interface EnableRequest {\n    /**\n     * Whether to enable the WebAuthn user interface. Enabling the UI is\n     * recommended for debugging and demo purposes, as it is closer to the real\n     * experience. Disabling the UI is recommended for automated testing.\n     * Supported at the embedder's discretion if UI is available.\n     * Defaults to false.\n     */\n    enableUI?: boolean;\n  }\n\n  export interface AddVirtualAuthenticatorRequest {\n    options: VirtualAuthenticatorOptions;\n  }\n\n  export interface AddVirtualAuthenticatorResponse extends ProtocolResponseWithError {\n    authenticatorId: AuthenticatorId;\n  }\n\n  export interface SetResponseOverrideBitsRequest {\n    authenticatorId: AuthenticatorId;\n    /**\n     * If isBogusSignature is set, overrides the signature in the authenticator response to be zero.\n     * Defaults to false.\n     */\n    isBogusSignature?: boolean;\n    /**\n     * If isBadUV is set, overrides the UV bit in the flags in the authenticator response to\n     * be zero. Defaults to false.\n     */\n    isBadUV?: boolean;\n    /**\n     * If isBadUP is set, overrides the UP bit in the flags in the authenticator response to\n     * be zero. Defaults to false.\n     */\n    isBadUP?: boolean;\n  }\n\n  export interface RemoveVirtualAuthenticatorRequest {\n    authenticatorId: AuthenticatorId;\n  }\n\n  export interface AddCredentialRequest {\n    authenticatorId: AuthenticatorId;\n    credential: Credential;\n  }\n\n  export interface GetCredentialRequest {\n    authenticatorId: AuthenticatorId;\n    credentialId: binary;\n  }\n\n  export interface GetCredentialResponse extends ProtocolResponseWithError {\n    credential: Credential;\n  }\n\n  export interface GetCredentialsRequest {\n    authenticatorId: AuthenticatorId;\n  }\n\n  export interface GetCredentialsResponse extends ProtocolResponseWithError {\n    credentials: Credential[];\n  }\n\n  export interface RemoveCredentialRequest {\n    authenticatorId: AuthenticatorId;\n    credentialId: binary;\n  }\n\n  export interface ClearCredentialsRequest {\n    authenticatorId: AuthenticatorId;\n  }\n\n  export interface SetUserVerifiedRequest {\n    authenticatorId: AuthenticatorId;\n    isUserVerified: boolean;\n  }\n\n  export interface SetAutomaticPresenceSimulationRequest {\n    authenticatorId: AuthenticatorId;\n    enabled: boolean;\n  }\n\n  export interface SetCredentialPropertiesRequest {\n    authenticatorId: AuthenticatorId;\n    credentialId: binary;\n    backupEligibility?: boolean;\n    backupState?: boolean;\n  }\n\n  /**\n   * Triggered when a credential is added to an authenticator.\n   */\n  export interface CredentialAddedEvent {\n    authenticatorId: AuthenticatorId;\n    credential: Credential;\n  }\n\n  /**\n   * Triggered when a credential is deleted, e.g. through\n   * PublicKeyCredential.signalUnknownCredential().\n   */\n  export interface CredentialDeletedEvent {\n    authenticatorId: AuthenticatorId;\n    credentialId: binary;\n  }\n\n  /**\n   * Triggered when a credential is updated, e.g. through\n   * PublicKeyCredential.signalCurrentUserDetails().\n   */\n  export interface CredentialUpdatedEvent {\n    authenticatorId: AuthenticatorId;\n    credential: Credential;\n  }\n\n  /**\n   * Triggered when a credential is used in a webauthn assertion.\n   */\n  export interface CredentialAssertedEvent {\n    authenticatorId: AuthenticatorId;\n    credential: Credential;\n  }\n}\n\n/**\n * Debugger domain exposes JavaScript debugging capabilities. It allows setting and removing\n * breakpoints, stepping through execution, exploring stack traces, etc.\n */\nexport namespace Debugger {\n\n  /**\n   * Breakpoint identifier.\n   */\n  export type BreakpointId = OpaqueIdentifier<string, 'Protocol.Debugger.BreakpointId'>;\n\n  /**\n   * Call frame identifier.\n   */\n  export type CallFrameId = OpaqueIdentifier<string, 'Protocol.Debugger.CallFrameId'>;\n\n  /**\n   * Location in the source code.\n   */\n  export interface Location {\n    /**\n     * Script identifier as reported in the `Debugger.scriptParsed`.\n     */\n    scriptId: Runtime.ScriptId;\n    /**\n     * Line number in the script (0-based).\n     */\n    lineNumber: integer;\n    /**\n     * Column number in the script (0-based).\n     */\n    columnNumber?: integer;\n  }\n\n  /**\n   * Location in the source code.\n   */\n  export interface ScriptPosition {\n    lineNumber: integer;\n    columnNumber: integer;\n  }\n\n  /**\n   * Location range within one script.\n   */\n  export interface LocationRange {\n    scriptId: Runtime.ScriptId;\n    start: ScriptPosition;\n    end: ScriptPosition;\n  }\n\n  /**\n   * JavaScript call frame. Array of call frames form the call stack.\n   */\n  export interface CallFrame {\n    /**\n     * Call frame identifier. This identifier is only valid while the virtual machine is paused.\n     */\n    callFrameId: CallFrameId;\n    /**\n     * Name of the JavaScript function called on this call frame.\n     */\n    functionName: string;\n    /**\n     * Location in the source code.\n     */\n    functionLocation?: Location;\n    /**\n     * Location in the source code.\n     */\n    location: Location;\n    /**\n     * JavaScript script name or url.\n     * Deprecated in favor of using the `location.scriptId` to resolve the URL via a previously\n     * sent `Debugger.scriptParsed` event.\n     * @deprecated\n     */\n    url: string;\n    /**\n     * Scope chain for this call frame.\n     */\n    scopeChain: Scope[];\n    /**\n     * `this` object for this call frame.\n     */\n    this: Runtime.RemoteObject;\n    /**\n     * The value being returned, if the function is at return point.\n     */\n    returnValue?: Runtime.RemoteObject;\n    /**\n     * Valid only while the VM is paused and indicates whether this frame\n     * can be restarted or not. Note that a `true` value here does not\n     * guarantee that Debugger#restartFrame with this CallFrameId will be\n     * successful, but it is very likely.\n     */\n    canBeRestarted?: boolean;\n  }\n\n  export const enum ScopeType {\n    Global = 'global',\n    Local = 'local',\n    With = 'with',\n    Closure = 'closure',\n    Catch = 'catch',\n    Block = 'block',\n    Script = 'script',\n    Eval = 'eval',\n    Module = 'module',\n    WasmExpressionStack = 'wasm-expression-stack',\n  }\n\n  /**\n   * Scope description.\n   */\n  export interface Scope {\n    /**\n     * Scope type.\n     */\n    type: ScopeType;\n    /**\n     * Object representing the scope. For `global` and `with` scopes it represents the actual\n     * object; for the rest of the scopes, it is artificial transient object enumerating scope\n     * variables as its properties.\n     */\n    object: Runtime.RemoteObject;\n    name?: string;\n    /**\n     * Location in the source code where scope starts\n     */\n    startLocation?: Location;\n    /**\n     * Location in the source code where scope ends\n     */\n    endLocation?: Location;\n  }\n\n  /**\n   * Search match for resource.\n   */\n  export interface SearchMatch {\n    /**\n     * Line number in resource content.\n     */\n    lineNumber: number;\n    /**\n     * Line with match content.\n     */\n    lineContent: string;\n  }\n\n  export const enum BreakLocationType {\n    DebuggerStatement = 'debuggerStatement',\n    Call = 'call',\n    Return = 'return',\n  }\n\n  export interface BreakLocation {\n    /**\n     * Script identifier as reported in the `Debugger.scriptParsed`.\n     */\n    scriptId: Runtime.ScriptId;\n    /**\n     * Line number in the script (0-based).\n     */\n    lineNumber: integer;\n    /**\n     * Column number in the script (0-based).\n     */\n    columnNumber?: integer;\n    type?: BreakLocationType;\n  }\n\n  export interface WasmDisassemblyChunk {\n    /**\n     * The next chunk of disassembled lines.\n     */\n    lines: string[];\n    /**\n     * The bytecode offsets describing the start of each line.\n     */\n    bytecodeOffsets: integer[];\n  }\n\n  /**\n   * Enum of possible script languages.\n   */\n  export const enum ScriptLanguage {\n    JavaScript = 'JavaScript',\n    WebAssembly = 'WebAssembly',\n  }\n\n  export const enum DebugSymbolsType {\n    SourceMap = 'SourceMap',\n    EmbeddedDWARF = 'EmbeddedDWARF',\n    ExternalDWARF = 'ExternalDWARF',\n  }\n\n  /**\n   * Debug symbols available for a wasm script.\n   */\n  export interface DebugSymbols {\n    /**\n     * Type of the debug symbols.\n     */\n    type: DebugSymbolsType;\n    /**\n     * URL of the external symbol source.\n     */\n    externalURL?: string;\n  }\n\n  export interface ResolvedBreakpoint {\n    /**\n     * Breakpoint unique identifier.\n     */\n    breakpointId: BreakpointId;\n    /**\n     * Actual breakpoint location.\n     */\n    location: Location;\n  }\n\n  export const enum ContinueToLocationRequestTargetCallFrames {\n    Any = 'any',\n    Current = 'current',\n  }\n\n  export interface ContinueToLocationRequest {\n    /**\n     * Location to continue to.\n     */\n    location: Location;\n    targetCallFrames?: ContinueToLocationRequestTargetCallFrames;\n  }\n\n  export interface EnableRequest {\n    /**\n     * The maximum size in bytes of collected scripts (not referenced by other heap objects)\n     * the debugger can hold. Puts no limit if parameter is omitted.\n     */\n    maxScriptsCacheSize?: number;\n  }\n\n  export interface EnableResponse extends ProtocolResponseWithError {\n    /**\n     * Unique identifier of the debugger.\n     */\n    debuggerId: Runtime.UniqueDebuggerId;\n  }\n\n  export interface EvaluateOnCallFrameRequest {\n    /**\n     * Call frame identifier to evaluate on.\n     */\n    callFrameId: CallFrameId;\n    /**\n     * Expression to evaluate.\n     */\n    expression: string;\n    /**\n     * String object group name to put result into (allows rapid releasing resulting object handles\n     * using `releaseObjectGroup`).\n     */\n    objectGroup?: string;\n    /**\n     * Specifies whether command line API should be available to the evaluated expression, defaults\n     * to false.\n     */\n    includeCommandLineAPI?: boolean;\n    /**\n     * In silent mode exceptions thrown during evaluation are not reported and do not pause\n     * execution. Overrides `setPauseOnException` state.\n     */\n    silent?: boolean;\n    /**\n     * Whether the result is expected to be a JSON object that should be sent by value.\n     */\n    returnByValue?: boolean;\n    /**\n     * Whether preview should be generated for the result.\n     */\n    generatePreview?: boolean;\n    /**\n     * Whether to throw an exception if side effect cannot be ruled out during evaluation.\n     */\n    throwOnSideEffect?: boolean;\n    /**\n     * Terminate execution after timing out (number of milliseconds).\n     */\n    timeout?: Runtime.TimeDelta;\n  }\n\n  export interface EvaluateOnCallFrameResponse extends ProtocolResponseWithError {\n    /**\n     * Object wrapper for the evaluation result.\n     */\n    result: Runtime.RemoteObject;\n    /**\n     * Exception details.\n     */\n    exceptionDetails?: Runtime.ExceptionDetails;\n  }\n\n  export interface GetPossibleBreakpointsRequest {\n    /**\n     * Start of range to search possible breakpoint locations in.\n     */\n    start: Location;\n    /**\n     * End of range to search possible breakpoint locations in (excluding). When not specified, end\n     * of scripts is used as end of range.\n     */\n    end?: Location;\n    /**\n     * Only consider locations which are in the same (non-nested) function as start.\n     */\n    restrictToFunction?: boolean;\n  }\n\n  export interface GetPossibleBreakpointsResponse extends ProtocolResponseWithError {\n    /**\n     * List of the possible breakpoint locations.\n     */\n    locations: BreakLocation[];\n  }\n\n  export interface GetScriptSourceRequest {\n    /**\n     * Id of the script to get source for.\n     */\n    scriptId: Runtime.ScriptId;\n  }\n\n  export interface GetScriptSourceResponse extends ProtocolResponseWithError {\n    /**\n     * Script source (empty in case of Wasm bytecode).\n     */\n    scriptSource: string;\n    /**\n     * Wasm bytecode.\n     */\n    bytecode?: binary;\n  }\n\n  export interface DisassembleWasmModuleRequest {\n    /**\n     * Id of the script to disassemble\n     */\n    scriptId: Runtime.ScriptId;\n  }\n\n  export interface DisassembleWasmModuleResponse extends ProtocolResponseWithError {\n    /**\n     * For large modules, return a stream from which additional chunks of\n     * disassembly can be read successively.\n     */\n    streamId?: string;\n    /**\n     * The total number of lines in the disassembly text.\n     */\n    totalNumberOfLines: integer;\n    /**\n     * The offsets of all function bodies, in the format [start1, end1,\n     * start2, end2, ...] where all ends are exclusive.\n     */\n    functionBodyOffsets: integer[];\n    /**\n     * The first chunk of disassembly.\n     */\n    chunk: WasmDisassemblyChunk;\n  }\n\n  export interface NextWasmDisassemblyChunkRequest {\n    streamId: string;\n  }\n\n  export interface NextWasmDisassemblyChunkResponse extends ProtocolResponseWithError {\n    /**\n     * The next chunk of disassembly.\n     */\n    chunk: WasmDisassemblyChunk;\n  }\n\n  export interface GetWasmBytecodeRequest {\n    /**\n     * Id of the Wasm script to get source for.\n     */\n    scriptId: Runtime.ScriptId;\n  }\n\n  export interface GetWasmBytecodeResponse extends ProtocolResponseWithError {\n    /**\n     * Script source.\n     */\n    bytecode: binary;\n  }\n\n  export interface GetStackTraceRequest {\n    stackTraceId: Runtime.StackTraceId;\n  }\n\n  export interface GetStackTraceResponse extends ProtocolResponseWithError {\n    stackTrace: Runtime.StackTrace;\n  }\n\n  export interface PauseOnAsyncCallRequest {\n    /**\n     * Debugger will pause when async call with given stack trace is started.\n     */\n    parentStackTraceId: Runtime.StackTraceId;\n  }\n\n  export interface RemoveBreakpointRequest {\n    breakpointId: BreakpointId;\n  }\n\n  export const enum RestartFrameRequestMode {\n    StepInto = 'StepInto',\n  }\n\n  export interface RestartFrameRequest {\n    /**\n     * Call frame identifier to evaluate on.\n     */\n    callFrameId: CallFrameId;\n    /**\n     * The `mode` parameter must be present and set to 'StepInto', otherwise\n     * `restartFrame` will error out.\n     */\n    mode?: RestartFrameRequestMode;\n  }\n\n  export interface RestartFrameResponse extends ProtocolResponseWithError {\n    /**\n     * New stack trace.\n     * @deprecated\n     */\n    callFrames: CallFrame[];\n    /**\n     * Async stack trace, if any.\n     * @deprecated\n     */\n    asyncStackTrace?: Runtime.StackTrace;\n    /**\n     * Async stack trace, if any.\n     * @deprecated\n     */\n    asyncStackTraceId?: Runtime.StackTraceId;\n  }\n\n  export interface ResumeRequest {\n    /**\n     * Set to true to terminate execution upon resuming execution. In contrast\n     * to Runtime.terminateExecution, this will allows to execute further\n     * JavaScript (i.e. via evaluation) until execution of the paused code\n     * is actually resumed, at which point termination is triggered.\n     * If execution is currently not paused, this parameter has no effect.\n     */\n    terminateOnResume?: boolean;\n  }\n\n  export interface SearchInContentRequest {\n    /**\n     * Id of the script to search in.\n     */\n    scriptId: Runtime.ScriptId;\n    /**\n     * String to search for.\n     */\n    query: string;\n    /**\n     * If true, search is case sensitive.\n     */\n    caseSensitive?: boolean;\n    /**\n     * If true, treats string parameter as regex.\n     */\n    isRegex?: boolean;\n  }\n\n  export interface SearchInContentResponse extends ProtocolResponseWithError {\n    /**\n     * List of search matches.\n     */\n    result: SearchMatch[];\n  }\n\n  export interface SetAsyncCallStackDepthRequest {\n    /**\n     * Maximum depth of async call stacks. Setting to `0` will effectively disable collecting async\n     * call stacks (default).\n     */\n    maxDepth: integer;\n  }\n\n  export interface SetBlackboxExecutionContextsRequest {\n    /**\n     * Array of execution context unique ids for the debugger to ignore.\n     */\n    uniqueIds: string[];\n  }\n\n  export interface SetBlackboxPatternsRequest {\n    /**\n     * Array of regexps that will be used to check script url for blackbox state.\n     */\n    patterns: string[];\n    /**\n     * If true, also ignore scripts with no source url.\n     */\n    skipAnonymous?: boolean;\n  }\n\n  export interface SetBlackboxedRangesRequest {\n    /**\n     * Id of the script.\n     */\n    scriptId: Runtime.ScriptId;\n    positions: ScriptPosition[];\n  }\n\n  export interface SetBreakpointRequest {\n    /**\n     * Location to set breakpoint in.\n     */\n    location: Location;\n    /**\n     * Expression to use as a breakpoint condition. When specified, debugger will only stop on the\n     * breakpoint if this expression evaluates to true.\n     */\n    condition?: string;\n  }\n\n  export interface SetBreakpointResponse extends ProtocolResponseWithError {\n    /**\n     * Id of the created breakpoint for further reference.\n     */\n    breakpointId: BreakpointId;\n    /**\n     * Location this breakpoint resolved into.\n     */\n    actualLocation: Location;\n  }\n\n  export const enum SetInstrumentationBreakpointRequestInstrumentation {\n    BeforeScriptExecution = 'beforeScriptExecution',\n    BeforeScriptWithSourceMapExecution = 'beforeScriptWithSourceMapExecution',\n  }\n\n  export interface SetInstrumentationBreakpointRequest {\n    /**\n     * Instrumentation name.\n     */\n    instrumentation: SetInstrumentationBreakpointRequestInstrumentation;\n  }\n\n  export interface SetInstrumentationBreakpointResponse extends ProtocolResponseWithError {\n    /**\n     * Id of the created breakpoint for further reference.\n     */\n    breakpointId: BreakpointId;\n  }\n\n  export interface SetBreakpointByUrlRequest {\n    /**\n     * Line number to set breakpoint at.\n     */\n    lineNumber: integer;\n    /**\n     * URL of the resources to set breakpoint on.\n     */\n    url?: string;\n    /**\n     * Regex pattern for the URLs of the resources to set breakpoints on. Either `url` or\n     * `urlRegex` must be specified.\n     */\n    urlRegex?: string;\n    /**\n     * Script hash of the resources to set breakpoint on.\n     */\n    scriptHash?: string;\n    /**\n     * Offset in the line to set breakpoint at.\n     */\n    columnNumber?: integer;\n    /**\n     * Expression to use as a breakpoint condition. When specified, debugger will only stop on the\n     * breakpoint if this expression evaluates to true.\n     */\n    condition?: string;\n  }\n\n  export interface SetBreakpointByUrlResponse extends ProtocolResponseWithError {\n    /**\n     * Id of the created breakpoint for further reference.\n     */\n    breakpointId: BreakpointId;\n    /**\n     * List of the locations this breakpoint resolved into upon addition.\n     */\n    locations: Location[];\n  }\n\n  export interface SetBreakpointOnFunctionCallRequest {\n    /**\n     * Function object id.\n     */\n    objectId: Runtime.RemoteObjectId;\n    /**\n     * Expression to use as a breakpoint condition. When specified, debugger will\n     * stop on the breakpoint if this expression evaluates to true.\n     */\n    condition?: string;\n  }\n\n  export interface SetBreakpointOnFunctionCallResponse extends ProtocolResponseWithError {\n    /**\n     * Id of the created breakpoint for further reference.\n     */\n    breakpointId: BreakpointId;\n  }\n\n  export interface SetBreakpointsActiveRequest {\n    /**\n     * New value for breakpoints active state.\n     */\n    active: boolean;\n  }\n\n  export const enum SetPauseOnExceptionsRequestState {\n    None = 'none',\n    Caught = 'caught',\n    Uncaught = 'uncaught',\n    All = 'all',\n  }\n\n  export interface SetPauseOnExceptionsRequest {\n    /**\n     * Pause on exceptions mode.\n     */\n    state: SetPauseOnExceptionsRequestState;\n  }\n\n  export interface SetReturnValueRequest {\n    /**\n     * New return value.\n     */\n    newValue: Runtime.CallArgument;\n  }\n\n  export const enum SetScriptSourceResponseStatus {\n    Ok = 'Ok',\n    CompileError = 'CompileError',\n    BlockedByActiveGenerator = 'BlockedByActiveGenerator',\n    BlockedByActiveFunction = 'BlockedByActiveFunction',\n    BlockedByTopLevelEsModuleChange = 'BlockedByTopLevelEsModuleChange',\n  }\n\n  export interface SetScriptSourceRequest {\n    /**\n     * Id of the script to edit.\n     */\n    scriptId: Runtime.ScriptId;\n    /**\n     * New content of the script.\n     */\n    scriptSource: string;\n    /**\n     * If true the change will not actually be applied. Dry run may be used to get result\n     * description without actually modifying the code.\n     */\n    dryRun?: boolean;\n    /**\n     * If true, then `scriptSource` is allowed to change the function on top of the stack\n     * as long as the top-most stack frame is the only activation of that function.\n     */\n    allowTopFrameEditing?: boolean;\n  }\n\n  export interface SetScriptSourceResponse extends ProtocolResponseWithError {\n    /**\n     * New stack trace in case editing has happened while VM was stopped.\n     * @deprecated\n     */\n    callFrames?: CallFrame[];\n    /**\n     * Whether current call stack  was modified after applying the changes.\n     * @deprecated\n     */\n    stackChanged?: boolean;\n    /**\n     * Async stack trace, if any.\n     * @deprecated\n     */\n    asyncStackTrace?: Runtime.StackTrace;\n    /**\n     * Async stack trace, if any.\n     * @deprecated\n     */\n    asyncStackTraceId?: Runtime.StackTraceId;\n    /**\n     * Whether the operation was successful or not. Only `Ok` denotes a\n     * successful live edit while the other enum variants denote why\n     * the live edit failed.\n     */\n    status: SetScriptSourceResponseStatus;\n    /**\n     * Exception details if any. Only present when `status` is `CompileError`.\n     */\n    exceptionDetails?: Runtime.ExceptionDetails;\n  }\n\n  export interface SetSkipAllPausesRequest {\n    /**\n     * New value for skip pauses state.\n     */\n    skip: boolean;\n  }\n\n  export interface SetVariableValueRequest {\n    /**\n     * 0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch'\n     * scope types are allowed. Other scopes could be manipulated manually.\n     */\n    scopeNumber: integer;\n    /**\n     * Variable name.\n     */\n    variableName: string;\n    /**\n     * New variable value.\n     */\n    newValue: Runtime.CallArgument;\n    /**\n     * Id of callframe that holds variable.\n     */\n    callFrameId: CallFrameId;\n  }\n\n  export interface StepIntoRequest {\n    /**\n     * Debugger will pause on the execution of the first async task which was scheduled\n     * before next pause.\n     */\n    breakOnAsyncCall?: boolean;\n    /**\n     * The skipList specifies location ranges that should be skipped on step into.\n     */\n    skipList?: LocationRange[];\n  }\n\n  export interface StepOverRequest {\n    /**\n     * The skipList specifies location ranges that should be skipped on step over.\n     */\n    skipList?: LocationRange[];\n  }\n\n  /**\n   * Fired when breakpoint is resolved to an actual script and location.\n   * Deprecated in favor of `resolvedBreakpoints` in the `scriptParsed` event.\n   * @deprecated\n   */\n  export interface BreakpointResolvedEvent {\n    /**\n     * Breakpoint unique identifier.\n     */\n    breakpointId: BreakpointId;\n    /**\n     * Actual breakpoint location.\n     */\n    location: Location;\n  }\n\n  export const enum PausedEventReason {\n    Ambiguous = 'ambiguous',\n    Assert = 'assert',\n    CSPViolation = 'CSPViolation',\n    DebugCommand = 'debugCommand',\n    DOM = 'DOM',\n    EventListener = 'EventListener',\n    Exception = 'exception',\n    Instrumentation = 'instrumentation',\n    OOM = 'OOM',\n    Other = 'other',\n    PromiseRejection = 'promiseRejection',\n    XHR = 'XHR',\n    Step = 'step',\n  }\n\n  /**\n   * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\n   */\n  export interface PausedEvent {\n    /**\n     * Call stack the virtual machine stopped on.\n     */\n    callFrames: CallFrame[];\n    /**\n     * Pause reason.\n     */\n    reason: PausedEventReason;\n    /**\n     * Object containing break-specific auxiliary properties.\n     */\n    data?: any;\n    /**\n     * Hit breakpoints IDs\n     */\n    hitBreakpoints?: string[];\n    /**\n     * Async stack trace, if any.\n     */\n    asyncStackTrace?: Runtime.StackTrace;\n    /**\n     * Async stack trace, if any.\n     */\n    asyncStackTraceId?: Runtime.StackTraceId;\n    /**\n     * Never present, will be removed.\n     * @deprecated\n     */\n    asyncCallStackTraceId?: Runtime.StackTraceId;\n  }\n\n  /**\n   * Fired when virtual machine fails to parse the script.\n   */\n  export interface ScriptFailedToParseEvent {\n    /**\n     * Identifier of the script parsed.\n     */\n    scriptId: Runtime.ScriptId;\n    /**\n     * URL or name of the script parsed (if any).\n     */\n    url: string;\n    /**\n     * Line offset of the script within the resource with given URL (for script tags).\n     */\n    startLine: integer;\n    /**\n     * Column offset of the script within the resource with given URL.\n     */\n    startColumn: integer;\n    /**\n     * Last line of the script.\n     */\n    endLine: integer;\n    /**\n     * Length of the last line of the script.\n     */\n    endColumn: integer;\n    /**\n     * Specifies script creation context.\n     */\n    executionContextId: Runtime.ExecutionContextId;\n    /**\n     * Content hash of the script, SHA-256.\n     */\n    hash: string;\n    /**\n     * For Wasm modules, the content of the `build_id` custom section. For JavaScript the `debugId` magic comment.\n     */\n    buildId: string;\n    /**\n     * Embedder-specific auxiliary data likely matching {isDefault: boolean, type: 'default'|'isolated'|'worker', frameId: string}\n     */\n    executionContextAuxData?: any;\n    /**\n     * URL of source map associated with script (if any).\n     */\n    sourceMapURL?: string;\n    /**\n     * True, if this script has sourceURL.\n     */\n    hasSourceURL?: boolean;\n    /**\n     * True, if this script is ES6 module.\n     */\n    isModule?: boolean;\n    /**\n     * This script length.\n     */\n    length?: integer;\n    /**\n     * JavaScript top stack frame of where the script parsed event was triggered if available.\n     */\n    stackTrace?: Runtime.StackTrace;\n    /**\n     * If the scriptLanguage is WebAssembly, the code section offset in the module.\n     */\n    codeOffset?: integer;\n    /**\n     * The language of the script.\n     */\n    scriptLanguage?: Debugger.ScriptLanguage;\n    /**\n     * The name the embedder supplied for this script.\n     */\n    embedderName?: string;\n  }\n\n  /**\n   * Fired when virtual machine parses script. This event is also fired for all known and uncollected\n   * scripts upon enabling debugger.\n   */\n  export interface ScriptParsedEvent {\n    /**\n     * Identifier of the script parsed.\n     */\n    scriptId: Runtime.ScriptId;\n    /**\n     * URL or name of the script parsed (if any).\n     */\n    url: string;\n    /**\n     * Line offset of the script within the resource with given URL (for script tags).\n     */\n    startLine: integer;\n    /**\n     * Column offset of the script within the resource with given URL.\n     */\n    startColumn: integer;\n    /**\n     * Last line of the script.\n     */\n    endLine: integer;\n    /**\n     * Length of the last line of the script.\n     */\n    endColumn: integer;\n    /**\n     * Specifies script creation context.\n     */\n    executionContextId: Runtime.ExecutionContextId;\n    /**\n     * Content hash of the script, SHA-256.\n     */\n    hash: string;\n    /**\n     * For Wasm modules, the content of the `build_id` custom section. For JavaScript the `debugId` magic comment.\n     */\n    buildId: string;\n    /**\n     * Embedder-specific auxiliary data likely matching {isDefault: boolean, type: 'default'|'isolated'|'worker', frameId: string}\n     */\n    executionContextAuxData?: any;\n    /**\n     * True, if this script is generated as a result of the live edit operation.\n     */\n    isLiveEdit?: boolean;\n    /**\n     * URL of source map associated with script (if any).\n     */\n    sourceMapURL?: string;\n    /**\n     * True, if this script has sourceURL.\n     */\n    hasSourceURL?: boolean;\n    /**\n     * True, if this script is ES6 module.\n     */\n    isModule?: boolean;\n    /**\n     * This script length.\n     */\n    length?: integer;\n    /**\n     * JavaScript top stack frame of where the script parsed event was triggered if available.\n     */\n    stackTrace?: Runtime.StackTrace;\n    /**\n     * If the scriptLanguage is WebAssembly, the code section offset in the module.\n     */\n    codeOffset?: integer;\n    /**\n     * The language of the script.\n     */\n    scriptLanguage?: Debugger.ScriptLanguage;\n    /**\n     * If the scriptLanguage is WebAssembly, the source of debug symbols for the module.\n     */\n    debugSymbols?: Debugger.DebugSymbols[];\n    /**\n     * The name the embedder supplied for this script.\n     */\n    embedderName?: string;\n    /**\n     * The list of set breakpoints in this script if calls to `setBreakpointByUrl`\n     * matches this script's URL or hash. Clients that use this list can ignore the\n     * `breakpointResolved` event. They are equivalent.\n     */\n    resolvedBreakpoints?: ResolvedBreakpoint[];\n  }\n}\n\nexport namespace HeapProfiler {\n\n  /**\n   * Heap snapshot object id.\n   */\n  export type HeapSnapshotObjectId = OpaqueIdentifier<string, 'Protocol.HeapProfiler.HeapSnapshotObjectId'>;\n\n  /**\n   * Sampling Heap Profile node. Holds callsite information, allocation statistics and child nodes.\n   */\n  export interface SamplingHeapProfileNode {\n    /**\n     * Function location.\n     */\n    callFrame: Runtime.CallFrame;\n    /**\n     * Allocations size in bytes for the node excluding children.\n     */\n    selfSize: number;\n    /**\n     * Node id. Ids are unique across all profiles collected between startSampling and stopSampling.\n     */\n    id: integer;\n    /**\n     * Child nodes.\n     */\n    children: SamplingHeapProfileNode[];\n  }\n\n  /**\n   * A single sample from a sampling profile.\n   */\n  export interface SamplingHeapProfileSample {\n    /**\n     * Allocation size in bytes attributed to the sample.\n     */\n    size: number;\n    /**\n     * Id of the corresponding profile tree node.\n     */\n    nodeId: integer;\n    /**\n     * Time-ordered sample ordinal number. It is unique across all profiles retrieved\n     * between startSampling and stopSampling.\n     */\n    ordinal: number;\n  }\n\n  /**\n   * Sampling profile.\n   */\n  export interface SamplingHeapProfile {\n    head: SamplingHeapProfileNode;\n    samples: SamplingHeapProfileSample[];\n  }\n\n  export interface AddInspectedHeapObjectRequest {\n    /**\n     * Heap snapshot object id to be accessible by means of $x command line API.\n     */\n    heapObjectId: HeapSnapshotObjectId;\n  }\n\n  export interface GetHeapObjectIdRequest {\n    /**\n     * Identifier of the object to get heap object id for.\n     */\n    objectId: Runtime.RemoteObjectId;\n  }\n\n  export interface GetHeapObjectIdResponse extends ProtocolResponseWithError {\n    /**\n     * Id of the heap snapshot object corresponding to the passed remote object id.\n     */\n    heapSnapshotObjectId: HeapSnapshotObjectId;\n  }\n\n  export interface GetObjectByHeapObjectIdRequest {\n    objectId: HeapSnapshotObjectId;\n    /**\n     * Symbolic group name that can be used to release multiple objects.\n     */\n    objectGroup?: string;\n  }\n\n  export interface GetObjectByHeapObjectIdResponse extends ProtocolResponseWithError {\n    /**\n     * Evaluation result.\n     */\n    result: Runtime.RemoteObject;\n  }\n\n  export interface GetSamplingProfileResponse extends ProtocolResponseWithError {\n    /**\n     * Return the sampling profile being collected.\n     */\n    profile: SamplingHeapProfile;\n  }\n\n  export interface StartSamplingRequest {\n    /**\n     * Average sample interval in bytes. Poisson distribution is used for the intervals. The\n     * default value is 32768 bytes.\n     */\n    samplingInterval?: number;\n    /**\n     * Maximum stack depth. The default value is 128.\n     */\n    stackDepth?: number;\n    /**\n     * By default, the sampling heap profiler reports only objects which are\n     * still alive when the profile is returned via getSamplingProfile or\n     * stopSampling, which is useful for determining what functions contribute\n     * the most to steady-state memory usage. This flag instructs the sampling\n     * heap profiler to also include information about objects discarded by\n     * major GC, which will show which functions cause large temporary memory\n     * usage or long GC pauses.\n     */\n    includeObjectsCollectedByMajorGC?: boolean;\n    /**\n     * By default, the sampling heap profiler reports only objects which are\n     * still alive when the profile is returned via getSamplingProfile or\n     * stopSampling, which is useful for determining what functions contribute\n     * the most to steady-state memory usage. This flag instructs the sampling\n     * heap profiler to also include information about objects discarded by\n     * minor GC, which is useful when tuning a latency-sensitive application\n     * for minimal GC activity.\n     */\n    includeObjectsCollectedByMinorGC?: boolean;\n  }\n\n  export interface StartTrackingHeapObjectsRequest {\n    trackAllocations?: boolean;\n  }\n\n  export interface StopSamplingResponse extends ProtocolResponseWithError {\n    /**\n     * Recorded sampling heap profile.\n     */\n    profile: SamplingHeapProfile;\n  }\n\n  export interface StopTrackingHeapObjectsRequest {\n    /**\n     * If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken\n     * when the tracking is stopped.\n     */\n    reportProgress?: boolean;\n    /**\n     * Deprecated in favor of `exposeInternals`.\n     * @deprecated\n     */\n    treatGlobalObjectsAsRoots?: boolean;\n    /**\n     * If true, numerical values are included in the snapshot\n     */\n    captureNumericValue?: boolean;\n    /**\n     * If true, exposes internals of the snapshot.\n     */\n    exposeInternals?: boolean;\n  }\n\n  export interface TakeHeapSnapshotRequest {\n    /**\n     * If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken.\n     */\n    reportProgress?: boolean;\n    /**\n     * If true, a raw snapshot without artificial roots will be generated.\n     * Deprecated in favor of `exposeInternals`.\n     * @deprecated\n     */\n    treatGlobalObjectsAsRoots?: boolean;\n    /**\n     * If true, numerical values are included in the snapshot\n     */\n    captureNumericValue?: boolean;\n    /**\n     * If true, exposes internals of the snapshot.\n     */\n    exposeInternals?: boolean;\n  }\n\n  export interface AddHeapSnapshotChunkEvent {\n    chunk: string;\n  }\n\n  /**\n   * If heap objects tracking has been started then backend may send update for one or more fragments\n   */\n  export interface HeapStatsUpdateEvent {\n    /**\n     * An array of triplets. Each triplet describes a fragment. The first integer is the fragment\n     * index, the second integer is a total count of objects for the fragment, the third integer is\n     * a total size of the objects for the fragment.\n     */\n    statsUpdate: integer[];\n  }\n\n  /**\n   * If heap objects tracking has been started then backend regularly sends a current value for last\n   * seen object id and corresponding timestamp. If the were changes in the heap since last event\n   * then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\n   */\n  export interface LastSeenObjectIdEvent {\n    lastSeenObjectId: integer;\n    timestamp: number;\n  }\n\n  export interface ReportHeapSnapshotProgressEvent {\n    done: integer;\n    total: integer;\n    finished?: boolean;\n  }\n}\n\nexport namespace Profiler {\n\n  /**\n   * Profile node. Holds callsite information, execution statistics and child nodes.\n   */\n  export interface ProfileNode {\n    /**\n     * Unique id of the node.\n     */\n    id: integer;\n    /**\n     * Function location.\n     */\n    callFrame: Runtime.CallFrame;\n    /**\n     * Number of samples where this node was on top of the call stack.\n     */\n    hitCount?: integer;\n    /**\n     * Child node ids.\n     */\n    children?: integer[];\n    /**\n     * The reason of being not optimized. The function may be deoptimized or marked as don't\n     * optimize.\n     */\n    deoptReason?: string;\n    /**\n     * An array of source position ticks.\n     */\n    positionTicks?: PositionTickInfo[];\n  }\n\n  /**\n   * Profile.\n   */\n  export interface Profile {\n    /**\n     * The list of profile nodes. First item is the root node.\n     */\n    nodes: ProfileNode[];\n    /**\n     * Profiling start timestamp in microseconds.\n     */\n    startTime: number;\n    /**\n     * Profiling end timestamp in microseconds.\n     */\n    endTime: number;\n    /**\n     * Ids of samples top nodes.\n     */\n    samples?: integer[];\n    /**\n     * Time intervals between adjacent samples in microseconds. The first delta is relative to the\n     * profile startTime.\n     */\n    timeDeltas?: integer[];\n  }\n\n  /**\n   * Specifies a number of samples attributed to a certain source position.\n   */\n  export interface PositionTickInfo {\n    /**\n     * Source line number (1-based).\n     */\n    line: integer;\n    /**\n     * Number of samples attributed to the source line.\n     */\n    ticks: integer;\n  }\n\n  /**\n   * Coverage data for a source range.\n   */\n  export interface CoverageRange {\n    /**\n     * JavaScript script source offset for the range start.\n     */\n    startOffset: integer;\n    /**\n     * JavaScript script source offset for the range end.\n     */\n    endOffset: integer;\n    /**\n     * Collected execution count of the source range.\n     */\n    count: integer;\n  }\n\n  /**\n   * Coverage data for a JavaScript function.\n   */\n  export interface FunctionCoverage {\n    /**\n     * JavaScript function name.\n     */\n    functionName: string;\n    /**\n     * Source ranges inside the function with coverage data.\n     */\n    ranges: CoverageRange[];\n    /**\n     * Whether coverage data for this function has block granularity.\n     */\n    isBlockCoverage: boolean;\n  }\n\n  /**\n   * Coverage data for a JavaScript script.\n   */\n  export interface ScriptCoverage {\n    /**\n     * JavaScript script id.\n     */\n    scriptId: Runtime.ScriptId;\n    /**\n     * JavaScript script name or url.\n     */\n    url: string;\n    /**\n     * Functions contained in the script that has coverage data.\n     */\n    functions: FunctionCoverage[];\n  }\n\n  export interface GetBestEffortCoverageResponse extends ProtocolResponseWithError {\n    /**\n     * Coverage data for the current isolate.\n     */\n    result: ScriptCoverage[];\n  }\n\n  export interface SetSamplingIntervalRequest {\n    /**\n     * New sampling interval in microseconds.\n     */\n    interval: integer;\n  }\n\n  export interface StartPreciseCoverageRequest {\n    /**\n     * Collect accurate call counts beyond simple 'covered' or 'not covered'.\n     */\n    callCount?: boolean;\n    /**\n     * Collect block-based coverage.\n     */\n    detailed?: boolean;\n    /**\n     * Allow the backend to send updates on its own initiative\n     */\n    allowTriggeredUpdates?: boolean;\n  }\n\n  export interface StartPreciseCoverageResponse extends ProtocolResponseWithError {\n    /**\n     * Monotonically increasing time (in seconds) when the coverage update was taken in the backend.\n     */\n    timestamp: number;\n  }\n\n  export interface StopResponse extends ProtocolResponseWithError {\n    /**\n     * Recorded profile.\n     */\n    profile: Profile;\n  }\n\n  export interface TakePreciseCoverageResponse extends ProtocolResponseWithError {\n    /**\n     * Coverage data for the current isolate.\n     */\n    result: ScriptCoverage[];\n    /**\n     * Monotonically increasing time (in seconds) when the coverage update was taken in the backend.\n     */\n    timestamp: number;\n  }\n\n  export interface ConsoleProfileFinishedEvent {\n    id: string;\n    /**\n     * Location of console.profileEnd().\n     */\n    location: Debugger.Location;\n    profile: Profile;\n    /**\n     * Profile title passed as an argument to console.profile().\n     */\n    title?: string;\n  }\n\n  /**\n   * Sent when new profile recording is started using console.profile() call.\n   */\n  export interface ConsoleProfileStartedEvent {\n    id: string;\n    /**\n     * Location of console.profile().\n     */\n    location: Debugger.Location;\n    /**\n     * Profile title passed as an argument to console.profile().\n     */\n    title?: string;\n  }\n\n  /**\n   * Reports coverage delta since the last poll (either from an event like this, or from\n   * `takePreciseCoverage` for the current isolate. May only be sent if precise code\n   * coverage has been started. This event can be trigged by the embedder to, for example,\n   * trigger collection of coverage data immediately at a certain point in time.\n   */\n  export interface PreciseCoverageDeltaUpdateEvent {\n    /**\n     * Monotonically increasing time (in seconds) when the coverage update was taken in the backend.\n     */\n    timestamp: number;\n    /**\n     * Identifier for distinguishing coverage events.\n     */\n    occasion: string;\n    /**\n     * Coverage data for the current isolate.\n     */\n    result: ScriptCoverage[];\n  }\n}\n\n/**\n * Runtime domain exposes JavaScript runtime by means of remote evaluation and mirror objects.\n * Evaluation results are returned as mirror object that expose object type, string representation\n * and unique identifier that can be used for further object reference. Original objects are\n * maintained in memory unless they are either explicitly released or are released along with the\n * other objects in their object group.\n */\nexport namespace Runtime {\n\n  /**\n   * Unique script identifier.\n   */\n  export type ScriptId = OpaqueIdentifier<string, 'Protocol.Runtime.ScriptId'>;\n\n  export const enum SerializationOptionsSerialization {\n    Deep = 'deep',\n    Json = 'json',\n    IdOnly = 'idOnly',\n  }\n\n  /**\n   * Represents options for serialization. Overrides `generatePreview` and `returnByValue`.\n   */\n  export interface SerializationOptions {\n    serialization: SerializationOptionsSerialization;\n    /**\n     * Deep serialization depth. Default is full depth. Respected only in `deep` serialization mode.\n     */\n    maxDepth?: integer;\n    /**\n     * Embedder-specific parameters. For example if connected to V8 in Chrome these control DOM\n     * serialization via `maxNodeDepth: integer` and `includeShadowTree: \"none\" | \"open\" | \"all\"`.\n     * Values can be only of type string or integer.\n     */\n    additionalParameters?: any;\n  }\n\n  export const enum DeepSerializedValueType {\n    Undefined = 'undefined',\n    Null = 'null',\n    String = 'string',\n    Number = 'number',\n    Boolean = 'boolean',\n    Bigint = 'bigint',\n    Regexp = 'regexp',\n    Date = 'date',\n    Symbol = 'symbol',\n    Array = 'array',\n    Object = 'object',\n    Function = 'function',\n    Map = 'map',\n    Set = 'set',\n    Weakmap = 'weakmap',\n    Weakset = 'weakset',\n    Error = 'error',\n    Proxy = 'proxy',\n    Promise = 'promise',\n    Typedarray = 'typedarray',\n    Arraybuffer = 'arraybuffer',\n    Node = 'node',\n    Window = 'window',\n    Generator = 'generator',\n  }\n\n  /**\n   * Represents deep serialized value.\n   */\n  export interface DeepSerializedValue {\n    type: DeepSerializedValueType;\n    value?: any;\n    objectId?: string;\n    /**\n     * Set if value reference met more then once during serialization. In such\n     * case, value is provided only to one of the serialized values. Unique\n     * per value in the scope of one CDP call.\n     */\n    weakLocalObjectReference?: integer;\n  }\n\n  /**\n   * Unique object identifier.\n   */\n  export type RemoteObjectId = OpaqueIdentifier<string, 'Protocol.Runtime.RemoteObjectId'>;\n\n  /**\n   * Primitive value which cannot be JSON-stringified. Includes values `-0`, `NaN`, `Infinity`,\n   * `-Infinity`, and bigint literals.\n   */\n  export type UnserializableValue = string;\n\n  export const enum RemoteObjectType {\n    Object = 'object',\n    Function = 'function',\n    Undefined = 'undefined',\n    String = 'string',\n    Number = 'number',\n    Boolean = 'boolean',\n    Symbol = 'symbol',\n    Bigint = 'bigint',\n  }\n\n  export const enum RemoteObjectSubtype {\n    Array = 'array',\n    Null = 'null',\n    Node = 'node',\n    Regexp = 'regexp',\n    Date = 'date',\n    Map = 'map',\n    Set = 'set',\n    Weakmap = 'weakmap',\n    Weakset = 'weakset',\n    Iterator = 'iterator',\n    Generator = 'generator',\n    Error = 'error',\n    Proxy = 'proxy',\n    Promise = 'promise',\n    Typedarray = 'typedarray',\n    Arraybuffer = 'arraybuffer',\n    Dataview = 'dataview',\n    Webassemblymemory = 'webassemblymemory',\n    Wasmvalue = 'wasmvalue',\n    Trustedtype = 'trustedtype',\n  }\n\n  /**\n   * Mirror object referencing original JavaScript object.\n   */\n  export interface RemoteObject {\n    /**\n     * Object type.\n     */\n    type: RemoteObjectType;\n    /**\n     * Object subtype hint. Specified for `object` type values only.\n     * NOTE: If you change anything here, make sure to also update\n     * `subtype` in `ObjectPreview` and `PropertyPreview` below.\n     */\n    subtype?: RemoteObjectSubtype;\n    /**\n     * Object class (constructor) name. Specified for `object` type values only.\n     */\n    className?: string;\n    /**\n     * Remote object value in case of primitive values or JSON values (if it was requested).\n     */\n    value?: any;\n    /**\n     * Primitive value which can not be JSON-stringified does not have `value`, but gets this\n     * property.\n     */\n    unserializableValue?: UnserializableValue;\n    /**\n     * String representation of the object.\n     */\n    description?: string;\n    /**\n     * Deep serialized value.\n     */\n    deepSerializedValue?: DeepSerializedValue;\n    /**\n     * Unique object identifier (for non-primitive values).\n     */\n    objectId?: RemoteObjectId;\n    /**\n     * Preview containing abbreviated property values. Specified for `object` type values only.\n     */\n    preview?: ObjectPreview;\n    customPreview?: CustomPreview;\n  }\n\n  export interface CustomPreview {\n    /**\n     * The JSON-stringified result of formatter.header(object, config) call.\n     * It contains json ML array that represents RemoteObject.\n     */\n    header: string;\n    /**\n     * If formatter returns true as a result of formatter.hasBody call then bodyGetterId will\n     * contain RemoteObjectId for the function that returns result of formatter.body(object, config) call.\n     * The result value is json ML array.\n     */\n    bodyGetterId?: RemoteObjectId;\n  }\n\n  export const enum ObjectPreviewType {\n    Object = 'object',\n    Function = 'function',\n    Undefined = 'undefined',\n    String = 'string',\n    Number = 'number',\n    Boolean = 'boolean',\n    Symbol = 'symbol',\n    Bigint = 'bigint',\n  }\n\n  export const enum ObjectPreviewSubtype {\n    Array = 'array',\n    Null = 'null',\n    Node = 'node',\n    Regexp = 'regexp',\n    Date = 'date',\n    Map = 'map',\n    Set = 'set',\n    Weakmap = 'weakmap',\n    Weakset = 'weakset',\n    Iterator = 'iterator',\n    Generator = 'generator',\n    Error = 'error',\n    Proxy = 'proxy',\n    Promise = 'promise',\n    Typedarray = 'typedarray',\n    Arraybuffer = 'arraybuffer',\n    Dataview = 'dataview',\n    Webassemblymemory = 'webassemblymemory',\n    Wasmvalue = 'wasmvalue',\n    Trustedtype = 'trustedtype',\n  }\n\n  /**\n   * Object containing abbreviated remote object value.\n   */\n  export interface ObjectPreview {\n    /**\n     * Object type.\n     */\n    type: ObjectPreviewType;\n    /**\n     * Object subtype hint. Specified for `object` type values only.\n     */\n    subtype?: ObjectPreviewSubtype;\n    /**\n     * String representation of the object.\n     */\n    description?: string;\n    /**\n     * True iff some of the properties or entries of the original object did not fit.\n     */\n    overflow: boolean;\n    /**\n     * List of the properties.\n     */\n    properties: PropertyPreview[];\n    /**\n     * List of the entries. Specified for `map` and `set` subtype values only.\n     */\n    entries?: EntryPreview[];\n  }\n\n  export const enum PropertyPreviewType {\n    Object = 'object',\n    Function = 'function',\n    Undefined = 'undefined',\n    String = 'string',\n    Number = 'number',\n    Boolean = 'boolean',\n    Symbol = 'symbol',\n    Accessor = 'accessor',\n    Bigint = 'bigint',\n  }\n\n  export const enum PropertyPreviewSubtype {\n    Array = 'array',\n    Null = 'null',\n    Node = 'node',\n    Regexp = 'regexp',\n    Date = 'date',\n    Map = 'map',\n    Set = 'set',\n    Weakmap = 'weakmap',\n    Weakset = 'weakset',\n    Iterator = 'iterator',\n    Generator = 'generator',\n    Error = 'error',\n    Proxy = 'proxy',\n    Promise = 'promise',\n    Typedarray = 'typedarray',\n    Arraybuffer = 'arraybuffer',\n    Dataview = 'dataview',\n    Webassemblymemory = 'webassemblymemory',\n    Wasmvalue = 'wasmvalue',\n    Trustedtype = 'trustedtype',\n  }\n\n  export interface PropertyPreview {\n    /**\n     * Property name.\n     */\n    name: string;\n    /**\n     * Object type. Accessor means that the property itself is an accessor property.\n     */\n    type: PropertyPreviewType;\n    /**\n     * User-friendly property value string.\n     */\n    value?: string;\n    /**\n     * Nested value preview.\n     */\n    valuePreview?: ObjectPreview;\n    /**\n     * Object subtype hint. Specified for `object` type values only.\n     */\n    subtype?: PropertyPreviewSubtype;\n  }\n\n  export interface EntryPreview {\n    /**\n     * Preview of the key. Specified for map-like collection entries.\n     */\n    key?: ObjectPreview;\n    /**\n     * Preview of the value.\n     */\n    value: ObjectPreview;\n  }\n\n  /**\n   * Object property descriptor.\n   */\n  export interface PropertyDescriptor {\n    /**\n     * Property name or symbol description.\n     */\n    name: string;\n    /**\n     * The value associated with the property.\n     */\n    value?: RemoteObject;\n    /**\n     * True if the value associated with the property may be changed (data descriptors only).\n     */\n    writable?: boolean;\n    /**\n     * A function which serves as a getter for the property, or `undefined` if there is no getter\n     * (accessor descriptors only).\n     */\n    get?: RemoteObject;\n    /**\n     * A function which serves as a setter for the property, or `undefined` if there is no setter\n     * (accessor descriptors only).\n     */\n    set?: RemoteObject;\n    /**\n     * True if the type of this property descriptor may be changed and if the property may be\n     * deleted from the corresponding object.\n     */\n    configurable: boolean;\n    /**\n     * True if this property shows up during enumeration of the properties on the corresponding\n     * object.\n     */\n    enumerable: boolean;\n    /**\n     * True if the result was thrown during the evaluation.\n     */\n    wasThrown?: boolean;\n    /**\n     * True if the property is owned for the object.\n     */\n    isOwn?: boolean;\n    /**\n     * Property symbol object, if the property is of the `symbol` type.\n     */\n    symbol?: RemoteObject;\n  }\n\n  /**\n   * Object internal property descriptor. This property isn't normally visible in JavaScript code.\n   */\n  export interface InternalPropertyDescriptor {\n    /**\n     * Conventional property name.\n     */\n    name: string;\n    /**\n     * The value associated with the property.\n     */\n    value?: RemoteObject;\n  }\n\n  /**\n   * Object private field descriptor.\n   */\n  export interface PrivatePropertyDescriptor {\n    /**\n     * Private property name.\n     */\n    name: string;\n    /**\n     * The value associated with the private property.\n     */\n    value?: RemoteObject;\n    /**\n     * A function which serves as a getter for the private property,\n     * or `undefined` if there is no getter (accessor descriptors only).\n     */\n    get?: RemoteObject;\n    /**\n     * A function which serves as a setter for the private property,\n     * or `undefined` if there is no setter (accessor descriptors only).\n     */\n    set?: RemoteObject;\n  }\n\n  /**\n   * Represents function call argument. Either remote object id `objectId`, primitive `value`,\n   * unserializable primitive value or neither of (for undefined) them should be specified.\n   */\n  export interface CallArgument {\n    /**\n     * Primitive value or serializable javascript object.\n     */\n    value?: any;\n    /**\n     * Primitive value which can not be JSON-stringified.\n     */\n    unserializableValue?: UnserializableValue;\n    /**\n     * Remote object handle.\n     */\n    objectId?: RemoteObjectId;\n  }\n\n  /**\n   * Id of an execution context.\n   */\n  export type ExecutionContextId = OpaqueIdentifier<integer, 'Protocol.Runtime.ExecutionContextId'>;\n\n  /**\n   * Description of an isolated world.\n   */\n  export interface ExecutionContextDescription {\n    /**\n     * Unique id of the execution context. It can be used to specify in which execution context\n     * script evaluation should be performed.\n     */\n    id: ExecutionContextId;\n    /**\n     * Execution context origin.\n     */\n    origin: string;\n    /**\n     * Human readable name describing given context.\n     */\n    name: string;\n    /**\n     * A system-unique execution context identifier. Unlike the id, this is unique across\n     * multiple processes, so can be reliably used to identify specific context while backend\n     * performs a cross-process navigation.\n     */\n    uniqueId: string;\n    /**\n     * Embedder-specific auxiliary data likely matching {isDefault: boolean, type: 'default'|'isolated'|'worker', frameId: string}\n     */\n    auxData?: any;\n  }\n\n  /**\n   * Detailed information about exception (or error) that was thrown during script compilation or\n   * execution.\n   */\n  export interface ExceptionDetails {\n    /**\n     * Exception id.\n     */\n    exceptionId: integer;\n    /**\n     * Exception text, which should be used together with exception object when available.\n     */\n    text: string;\n    /**\n     * Line number of the exception location (0-based).\n     */\n    lineNumber: integer;\n    /**\n     * Column number of the exception location (0-based).\n     */\n    columnNumber: integer;\n    /**\n     * Script ID of the exception location.\n     */\n    scriptId?: ScriptId;\n    /**\n     * URL of the exception location, to be used when the script was not reported.\n     */\n    url?: string;\n    /**\n     * JavaScript stack trace if available.\n     */\n    stackTrace?: StackTrace;\n    /**\n     * Exception object if available.\n     */\n    exception?: RemoteObject;\n    /**\n     * Identifier of the context where exception happened.\n     */\n    executionContextId?: ExecutionContextId;\n    /**\n     * Dictionary with entries of meta data that the client associated\n     * with this exception, such as information about associated network\n     * requests, etc.\n     */\n    exceptionMetaData?: any;\n  }\n\n  /**\n   * Number of milliseconds since epoch.\n   */\n  export type Timestamp = number;\n\n  /**\n   * Number of milliseconds.\n   */\n  export type TimeDelta = number;\n\n  /**\n   * Stack entry for runtime errors and assertions.\n   */\n  export interface CallFrame {\n    /**\n     * JavaScript function name.\n     */\n    functionName: string;\n    /**\n     * JavaScript script id.\n     */\n    scriptId: ScriptId;\n    /**\n     * JavaScript script name or url.\n     */\n    url: string;\n    /**\n     * JavaScript script line number (0-based).\n     */\n    lineNumber: integer;\n    /**\n     * JavaScript script column number (0-based).\n     */\n    columnNumber: integer;\n  }\n\n  /**\n   * Call frames for assertions or error messages.\n   */\n  export interface StackTrace {\n    /**\n     * String label of this stack trace. For async traces this may be a name of the function that\n     * initiated the async call.\n     */\n    description?: string;\n    /**\n     * JavaScript function name.\n     */\n    callFrames: CallFrame[];\n    /**\n     * Asynchronous JavaScript stack trace that preceded this stack, if available.\n     */\n    parent?: StackTrace;\n    /**\n     * Asynchronous JavaScript stack trace that preceded this stack, if available.\n     */\n    parentId?: StackTraceId;\n  }\n\n  /**\n   * Unique identifier of current debugger.\n   */\n  export type UniqueDebuggerId = OpaqueIdentifier<string, 'Protocol.Runtime.UniqueDebuggerId'>;\n\n  /**\n   * If `debuggerId` is set stack trace comes from another debugger and can be resolved there. This\n   * allows to track cross-debugger calls. See `Runtime.StackTrace` and `Debugger.paused` for usages.\n   */\n  export interface StackTraceId {\n    id: string;\n    debuggerId?: UniqueDebuggerId;\n  }\n\n  export interface AwaitPromiseRequest {\n    /**\n     * Identifier of the promise.\n     */\n    promiseObjectId: RemoteObjectId;\n    /**\n     * Whether the result is expected to be a JSON object that should be sent by value.\n     */\n    returnByValue?: boolean;\n    /**\n     * Whether preview should be generated for the result.\n     */\n    generatePreview?: boolean;\n  }\n\n  export interface AwaitPromiseResponse extends ProtocolResponseWithError {\n    /**\n     * Promise result. Will contain rejected value if promise was rejected.\n     */\n    result: RemoteObject;\n    /**\n     * Exception details if stack strace is available.\n     */\n    exceptionDetails?: ExceptionDetails;\n  }\n\n  export interface CallFunctionOnRequest {\n    /**\n     * Declaration of the function to call.\n     */\n    functionDeclaration: string;\n    /**\n     * Identifier of the object to call function on. Either objectId or executionContextId should\n     * be specified.\n     */\n    objectId?: RemoteObjectId;\n    /**\n     * Call arguments. All call arguments must belong to the same JavaScript world as the target\n     * object.\n     */\n    arguments?: CallArgument[];\n    /**\n     * In silent mode exceptions thrown during evaluation are not reported and do not pause\n     * execution. Overrides `setPauseOnException` state.\n     */\n    silent?: boolean;\n    /**\n     * Whether the result is expected to be a JSON object which should be sent by value.\n     * Can be overriden by `serializationOptions`.\n     */\n    returnByValue?: boolean;\n    /**\n     * Whether preview should be generated for the result.\n     */\n    generatePreview?: boolean;\n    /**\n     * Whether execution should be treated as initiated by user in the UI.\n     */\n    userGesture?: boolean;\n    /**\n     * Whether execution should `await` for resulting value and return once awaited promise is\n     * resolved.\n     */\n    awaitPromise?: boolean;\n    /**\n     * Specifies execution context which global object will be used to call function on. Either\n     * executionContextId or objectId should be specified.\n     */\n    executionContextId?: ExecutionContextId;\n    /**\n     * Symbolic group name that can be used to release multiple objects. If objectGroup is not\n     * specified and objectId is, objectGroup will be inherited from object.\n     */\n    objectGroup?: string;\n    /**\n     * Whether to throw an exception if side effect cannot be ruled out during evaluation.\n     */\n    throwOnSideEffect?: boolean;\n    /**\n     * An alternative way to specify the execution context to call function on.\n     * Compared to contextId that may be reused across processes, this is guaranteed to be\n     * system-unique, so it can be used to prevent accidental function call\n     * in context different than intended (e.g. as a result of navigation across process\n     * boundaries).\n     * This is mutually exclusive with `executionContextId`.\n     */\n    uniqueContextId?: string;\n    /**\n     * Specifies the result serialization. If provided, overrides\n     * `generatePreview` and `returnByValue`.\n     */\n    serializationOptions?: SerializationOptions;\n  }\n\n  export interface CallFunctionOnResponse extends ProtocolResponseWithError {\n    /**\n     * Call result.\n     */\n    result: RemoteObject;\n    /**\n     * Exception details.\n     */\n    exceptionDetails?: ExceptionDetails;\n  }\n\n  export interface CompileScriptRequest {\n    /**\n     * Expression to compile.\n     */\n    expression: string;\n    /**\n     * Source url to be set for the script.\n     */\n    sourceURL: string;\n    /**\n     * Specifies whether the compiled script should be persisted.\n     */\n    persistScript: boolean;\n    /**\n     * Specifies in which execution context to perform script run. If the parameter is omitted the\n     * evaluation will be performed in the context of the inspected page.\n     */\n    executionContextId?: ExecutionContextId;\n  }\n\n  export interface CompileScriptResponse extends ProtocolResponseWithError {\n    /**\n     * Id of the script.\n     */\n    scriptId?: ScriptId;\n    /**\n     * Exception details.\n     */\n    exceptionDetails?: ExceptionDetails;\n  }\n\n  export interface EvaluateRequest {\n    /**\n     * Expression to evaluate.\n     */\n    expression: string;\n    /**\n     * Symbolic group name that can be used to release multiple objects.\n     */\n    objectGroup?: string;\n    /**\n     * Determines whether Command Line API should be available during the evaluation.\n     */\n    includeCommandLineAPI?: boolean;\n    /**\n     * In silent mode exceptions thrown during evaluation are not reported and do not pause\n     * execution. Overrides `setPauseOnException` state.\n     */\n    silent?: boolean;\n    /**\n     * Specifies in which execution context to perform evaluation. If the parameter is omitted the\n     * evaluation will be performed in the context of the inspected page.\n     * This is mutually exclusive with `uniqueContextId`, which offers an\n     * alternative way to identify the execution context that is more reliable\n     * in a multi-process environment.\n     */\n    contextId?: ExecutionContextId;\n    /**\n     * Whether the result is expected to be a JSON object that should be sent by value.\n     */\n    returnByValue?: boolean;\n    /**\n     * Whether preview should be generated for the result.\n     */\n    generatePreview?: boolean;\n    /**\n     * Whether execution should be treated as initiated by user in the UI.\n     */\n    userGesture?: boolean;\n    /**\n     * Whether execution should `await` for resulting value and return once awaited promise is\n     * resolved.\n     */\n    awaitPromise?: boolean;\n    /**\n     * Whether to throw an exception if side effect cannot be ruled out during evaluation.\n     * This implies `disableBreaks` below.\n     */\n    throwOnSideEffect?: boolean;\n    /**\n     * Terminate execution after timing out (number of milliseconds).\n     */\n    timeout?: TimeDelta;\n    /**\n     * Disable breakpoints during execution.\n     */\n    disableBreaks?: boolean;\n    /**\n     * Setting this flag to true enables `let` re-declaration and top-level `await`.\n     * Note that `let` variables can only be re-declared if they originate from\n     * `replMode` themselves.\n     */\n    replMode?: boolean;\n    /**\n     * The Content Security Policy (CSP) for the target might block 'unsafe-eval'\n     * which includes eval(), Function(), setTimeout() and setInterval()\n     * when called with non-callable arguments. This flag bypasses CSP for this\n     * evaluation and allows unsafe-eval. Defaults to true.\n     */\n    allowUnsafeEvalBlockedByCSP?: boolean;\n    /**\n     * An alternative way to specify the execution context to evaluate in.\n     * Compared to contextId that may be reused across processes, this is guaranteed to be\n     * system-unique, so it can be used to prevent accidental evaluation of the expression\n     * in context different than intended (e.g. as a result of navigation across process\n     * boundaries).\n     * This is mutually exclusive with `contextId`.\n     */\n    uniqueContextId?: string;\n    /**\n     * Specifies the result serialization. If provided, overrides\n     * `generatePreview` and `returnByValue`.\n     */\n    serializationOptions?: SerializationOptions;\n  }\n\n  export interface EvaluateResponse extends ProtocolResponseWithError {\n    /**\n     * Evaluation result.\n     */\n    result: RemoteObject;\n    /**\n     * Exception details.\n     */\n    exceptionDetails?: ExceptionDetails;\n  }\n\n  export interface GetIsolateIdResponse extends ProtocolResponseWithError {\n    /**\n     * The isolate id.\n     */\n    id: string;\n  }\n\n  export interface GetHeapUsageResponse extends ProtocolResponseWithError {\n    /**\n     * Used JavaScript heap size in bytes.\n     */\n    usedSize: number;\n    /**\n     * Allocated JavaScript heap size in bytes.\n     */\n    totalSize: number;\n    /**\n     * Used size in bytes in the embedder's garbage-collected heap.\n     */\n    embedderHeapUsedSize: number;\n    /**\n     * Size in bytes of backing storage for array buffers and external strings.\n     */\n    backingStorageSize: number;\n  }\n\n  export interface GetPropertiesRequest {\n    /**\n     * Identifier of the object to return properties for.\n     */\n    objectId: RemoteObjectId;\n    /**\n     * If true, returns properties belonging only to the element itself, not to its prototype\n     * chain.\n     */\n    ownProperties?: boolean;\n    /**\n     * If true, returns accessor properties (with getter/setter) only; internal properties are not\n     * returned either.\n     */\n    accessorPropertiesOnly?: boolean;\n    /**\n     * Whether preview should be generated for the results.\n     */\n    generatePreview?: boolean;\n    /**\n     * If true, returns non-indexed properties only.\n     */\n    nonIndexedPropertiesOnly?: boolean;\n  }\n\n  export interface GetPropertiesResponse extends ProtocolResponseWithError {\n    /**\n     * Object properties.\n     */\n    result: PropertyDescriptor[];\n    /**\n     * Internal object properties (only of the element itself).\n     */\n    internalProperties?: InternalPropertyDescriptor[];\n    /**\n     * Object private properties.\n     */\n    privateProperties?: PrivatePropertyDescriptor[];\n    /**\n     * Exception details.\n     */\n    exceptionDetails?: ExceptionDetails;\n  }\n\n  export interface GlobalLexicalScopeNamesRequest {\n    /**\n     * Specifies in which execution context to lookup global scope variables.\n     */\n    executionContextId?: ExecutionContextId;\n  }\n\n  export interface GlobalLexicalScopeNamesResponse extends ProtocolResponseWithError {\n    names: string[];\n  }\n\n  export interface QueryObjectsRequest {\n    /**\n     * Identifier of the prototype to return objects for.\n     */\n    prototypeObjectId: RemoteObjectId;\n    /**\n     * Symbolic group name that can be used to release the results.\n     */\n    objectGroup?: string;\n  }\n\n  export interface QueryObjectsResponse extends ProtocolResponseWithError {\n    /**\n     * Array with objects.\n     */\n    objects: RemoteObject;\n  }\n\n  export interface ReleaseObjectRequest {\n    /**\n     * Identifier of the object to release.\n     */\n    objectId: RemoteObjectId;\n  }\n\n  export interface ReleaseObjectGroupRequest {\n    /**\n     * Symbolic object group name.\n     */\n    objectGroup: string;\n  }\n\n  export interface RunScriptRequest {\n    /**\n     * Id of the script to run.\n     */\n    scriptId: ScriptId;\n    /**\n     * Specifies in which execution context to perform script run. If the parameter is omitted the\n     * evaluation will be performed in the context of the inspected page.\n     */\n    executionContextId?: ExecutionContextId;\n    /**\n     * Symbolic group name that can be used to release multiple objects.\n     */\n    objectGroup?: string;\n    /**\n     * In silent mode exceptions thrown during evaluation are not reported and do not pause\n     * execution. Overrides `setPauseOnException` state.\n     */\n    silent?: boolean;\n    /**\n     * Determines whether Command Line API should be available during the evaluation.\n     */\n    includeCommandLineAPI?: boolean;\n    /**\n     * Whether the result is expected to be a JSON object which should be sent by value.\n     */\n    returnByValue?: boolean;\n    /**\n     * Whether preview should be generated for the result.\n     */\n    generatePreview?: boolean;\n    /**\n     * Whether execution should `await` for resulting value and return once awaited promise is\n     * resolved.\n     */\n    awaitPromise?: boolean;\n  }\n\n  export interface RunScriptResponse extends ProtocolResponseWithError {\n    /**\n     * Run result.\n     */\n    result: RemoteObject;\n    /**\n     * Exception details.\n     */\n    exceptionDetails?: ExceptionDetails;\n  }\n\n  export interface SetAsyncCallStackDepthRequest {\n    /**\n     * Maximum depth of async call stacks. Setting to `0` will effectively disable collecting async\n     * call stacks (default).\n     */\n    maxDepth: integer;\n  }\n\n  export interface SetCustomObjectFormatterEnabledRequest {\n    enabled: boolean;\n  }\n\n  export interface SetMaxCallStackSizeToCaptureRequest {\n    size: integer;\n  }\n\n  export interface AddBindingRequest {\n    name: string;\n    /**\n     * If specified, the binding would only be exposed to the specified\n     * execution context. If omitted and `executionContextName` is not set,\n     * the binding is exposed to all execution contexts of the target.\n     * This parameter is mutually exclusive with `executionContextName`.\n     * Deprecated in favor of `executionContextName` due to an unclear use case\n     * and bugs in implementation (crbug.com/1169639). `executionContextId` will be\n     * removed in the future.\n     * @deprecated\n     */\n    executionContextId?: ExecutionContextId;\n    /**\n     * If specified, the binding is exposed to the executionContext with\n     * matching name, even for contexts created after the binding is added.\n     * See also `ExecutionContext.name` and `worldName` parameter to\n     * `Page.addScriptToEvaluateOnNewDocument`.\n     * This parameter is mutually exclusive with `executionContextId`.\n     */\n    executionContextName?: string;\n  }\n\n  export interface RemoveBindingRequest {\n    name: string;\n  }\n\n  export interface GetExceptionDetailsRequest {\n    /**\n     * The error object for which to resolve the exception details.\n     */\n    errorObjectId: RemoteObjectId;\n  }\n\n  export interface GetExceptionDetailsResponse extends ProtocolResponseWithError {\n    exceptionDetails?: ExceptionDetails;\n  }\n\n  /**\n   * Notification is issued every time when binding is called.\n   */\n  export interface BindingCalledEvent {\n    name: string;\n    payload: string;\n    /**\n     * Identifier of the context where the call was made.\n     */\n    executionContextId: ExecutionContextId;\n  }\n\n  export const enum ConsoleAPICalledEventType {\n    Log = 'log',\n    Debug = 'debug',\n    Info = 'info',\n    Error = 'error',\n    Warning = 'warning',\n    Dir = 'dir',\n    DirXML = 'dirxml',\n    Table = 'table',\n    Trace = 'trace',\n    Clear = 'clear',\n    StartGroup = 'startGroup',\n    StartGroupCollapsed = 'startGroupCollapsed',\n    EndGroup = 'endGroup',\n    Assert = 'assert',\n    Profile = 'profile',\n    ProfileEnd = 'profileEnd',\n    Count = 'count',\n    TimeEnd = 'timeEnd',\n  }\n\n  /**\n   * Issued when console API was called.\n   */\n  export interface ConsoleAPICalledEvent {\n    /**\n     * Type of the call.\n     */\n    type: ConsoleAPICalledEventType;\n    /**\n     * Call arguments.\n     */\n    args: RemoteObject[];\n    /**\n     * Identifier of the context where the call was made.\n     */\n    executionContextId: ExecutionContextId;\n    /**\n     * Call timestamp.\n     */\n    timestamp: Timestamp;\n    /**\n     * Stack trace captured when the call was made. The async stack chain is automatically reported for\n     * the following call types: `assert`, `error`, `trace`, `warning`. For other types the async call\n     * chain can be retrieved using `Debugger.getStackTrace` and `stackTrace.parentId` field.\n     */\n    stackTrace?: StackTrace;\n    /**\n     * Console context descriptor for calls on non-default console context (not console.*):\n     * 'anonymous#unique-logger-id' for call on unnamed context, 'name#unique-logger-id' for call\n     * on named context.\n     */\n    context?: string;\n  }\n\n  /**\n   * Issued when unhandled exception was revoked.\n   */\n  export interface ExceptionRevokedEvent {\n    /**\n     * Reason describing why exception was revoked.\n     */\n    reason: string;\n    /**\n     * The id of revoked exception, as reported in `exceptionThrown`.\n     */\n    exceptionId: integer;\n  }\n\n  /**\n   * Issued when exception was thrown and unhandled.\n   */\n  export interface ExceptionThrownEvent {\n    /**\n     * Timestamp of the exception.\n     */\n    timestamp: Timestamp;\n    exceptionDetails: ExceptionDetails;\n  }\n\n  /**\n   * Issued when new execution context is created.\n   */\n  export interface ExecutionContextCreatedEvent {\n    /**\n     * A newly created execution context.\n     */\n    context: ExecutionContextDescription;\n  }\n\n  /**\n   * Issued when execution context is destroyed.\n   */\n  export interface ExecutionContextDestroyedEvent {\n    /**\n     * Id of the destroyed context\n     * @deprecated\n     */\n    executionContextId: ExecutionContextId;\n    /**\n     * Unique Id of the destroyed context\n     */\n    executionContextUniqueId: string;\n  }\n\n  /**\n   * Issued when object should be inspected (for example, as a result of inspect() command line API\n   * call).\n   */\n  export interface InspectRequestedEvent {\n    object: RemoteObject;\n    hints: any;\n    /**\n     * Identifier of the context where the call was made.\n     */\n    executionContextId?: ExecutionContextId;\n  }\n}\n\n/**\n * This domain is deprecated.\n * @deprecated\n */\nexport namespace Schema {\n\n  /**\n   * Description of the protocol domain.\n   */\n  export interface Domain {\n    /**\n     * Domain name.\n     */\n    name: string;\n    /**\n     * Domain version.\n     */\n    version: string;\n  }\n\n  export interface GetDomainsResponse extends ProtocolResponseWithError {\n    /**\n     * List of supported domains.\n     */\n    domains: Domain[];\n  }\n}\n"]}