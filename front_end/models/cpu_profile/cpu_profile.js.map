{
  "version": 3,
  "sources": ["../../../../../../front_end/models/cpu_profile/CPUProfileDataModel.ts", "../../../../../../front_end/models/cpu_profile/ProfileTreeModel.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport {ProfileNode, ProfileTreeModel} from './ProfileTreeModel.js';\n\nexport class CPUProfileNode extends ProfileNode {\n  override id: number;\n  override self: number;\n  // Position ticks are available in profile nodes coming from CDP\n  // profiles and not in those coming from tracing. They are used to\n  // calculate the line level execution time shown in the Sources panel\n  // after recording a profile. For trace CPU profiles we use the\n  // `lines` array instead.\n  positionTicks: Protocol.Profiler.PositionTickInfo[]|undefined;\n  override deoptReason: string|null;\n\n  constructor(node: Protocol.Profiler.ProfileNode, samplingInterval: number /* milliseconds */) {\n    const callFrame = node.callFrame || ({\n                        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n                        // @ts-expect-error\n                        functionName: node['functionName'],\n                        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n                        // @ts-expect-error\n                        scriptId: node['scriptId'],\n                        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n                        // @ts-expect-error\n                        url: node['url'],\n                        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n                        // @ts-expect-error\n                        lineNumber: node['lineNumber'] - 1,\n                        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n                        // @ts-expect-error\n                        columnNumber: node['columnNumber'] - 1,\n                      } as Protocol.Runtime.CallFrame);\n    super(callFrame);\n    this.id = node.id;\n    this.self = (node.hitCount || 0) * samplingInterval;\n    this.positionTicks = node.positionTicks;\n    // Compatibility: legacy backends could provide \"no reason\" for optimized functions.\n    this.deoptReason = node.deoptReason && node.deoptReason !== 'no reason' ? node.deoptReason : null;\n  }\n}\n\nexport class CPUProfileDataModel extends ProfileTreeModel {\n  profileStartTime: number /* milliseconds */;\n  profileEndTime: number /* milliseconds */;\n  timestamps: number[];\n  samples: number[]|undefined;\n  /**\n   * Contains trace ids assigned to samples, if any. Trace ids are\n   * keyed by the sample index in the profile. These are only created\n   * for CPU profiles coming from traces.\n   */\n  traceIds?: Record<string, number>;\n  lines?: number[];\n  totalHitCount: number;\n  profileHead: CPUProfileNode;\n  /**\n   * A cache for the nodes we have parsed.\n   * Note: \"Parsed\" nodes are different from the \"Protocol\" nodes, the\n   * latter being the raw data we receive from the backend.\n   */\n  #idToParsedNode!: Map<number, ProfileNode>;\n  gcNode?: ProfileNode;\n  programNode?: ProfileNode;\n  idleNode?: ProfileNode;\n  #stackStartTimes?: number[];\n  #stackChildrenDuration?: number[];\n  constructor(profile: ExtendedProfile) {\n    super();\n    // @ts-expect-error Legacy types\n    const isLegacyFormat = Boolean(profile['head']);\n    if (isLegacyFormat) {\n      // Legacy format contains raw timestamps and start/stop times are in seconds.\n      this.profileStartTime = profile.startTime * 1000;\n      this.profileEndTime = profile.endTime * 1000;\n      // @ts-expect-error Legacy types\n      this.timestamps = profile.timestamps;\n      this.compatibilityConversionHeadToNodes(profile);\n    } else {\n      // Current format encodes timestamps as deltas. Start/stop times are in microseconds.\n      this.profileStartTime = profile.startTime / 1000;\n      this.profileEndTime = profile.endTime / 1000;\n      this.timestamps = this.convertTimeDeltas(profile);\n    }\n    this.traceIds = profile.traceIds;\n    this.samples = profile.samples;\n\n    // Lines are available only in profiles coming from tracing.\n    // Elements in the lines array have a 1 to 1 correspondence with\n    // samples, by array position. They can be 1 or 0 and indicate if\n    // there is line data for a given sample, i.e. if a given sample\n    // needs to be included to calculate the line level execution time\n    // data, which we show in the sources panel after recording a\n    // profile.\n    this.lines = profile.lines;\n    this.totalHitCount = 0;\n    this.profileHead = this.translateProfileTree(profile.nodes);\n    this.initialize(this.profileHead);\n    this.extractMetaNodes();\n    if (this.samples?.length) {\n      this.sortSamples();\n      this.normalizeTimestamps();\n      this.fixMissingSamples();\n    }\n  }\n\n  private compatibilityConversionHeadToNodes(profile: Protocol.Profiler.Profile): void {\n    // @ts-expect-error Legacy types\n    if (!profile.head || profile.nodes) {\n      return;\n    }\n    const nodes: Protocol.Profiler.ProfileNode[] = [];\n    // @ts-expect-error Legacy types\n    convertNodesTree(profile.head);\n    profile.nodes = nodes;\n    // @ts-expect-error Legacy types\n    delete profile.head;\n    function convertNodesTree(node: Protocol.Profiler.ProfileNode): number {\n      nodes.push(node);\n      // @ts-expect-error Legacy types\n      node.children = (node.children as Protocol.Profiler.ProfileNode[]).map(convertNodesTree);\n      return node.id;\n    }\n  }\n\n  /**\n   * Calculate timestamps using timeDeltas. Some CPU profile formats,\n   * like the ones contained in traces have timeDeltas instead of\n   * timestamps.\n   */\n  private convertTimeDeltas(profile: Protocol.Profiler.Profile): number[] {\n    if (!profile.timeDeltas) {\n      return [];\n    }\n    let lastTimeMicroSec = profile.startTime;\n    const timestamps = new Array(profile.timeDeltas.length);\n    for (let i = 0; i < profile.timeDeltas.length; ++i) {\n      lastTimeMicroSec += profile.timeDeltas[i];\n      timestamps[i] = lastTimeMicroSec;\n    }\n    return timestamps;\n  }\n\n  /**\n   * Creates a Tree of CPUProfileNodes using the Protocol.Profiler.ProfileNodes.\n   * As the tree is built, samples of native code (prefixed with \"native \") are\n   * filtered out. Samples of filtered nodes are replaced with the parent of the\n   * node being filtered.\n   *\n   * This function supports legacy and new definitions of the CDP Profiler.Profile\n   * type.\n   */\n  private translateProfileTree(nodes: Protocol.Profiler.ProfileNode[]): CPUProfileNode {\n    function buildChildrenFromParents(nodes: Protocol.Profiler.ProfileNode[]): void {\n      if (nodes[0].children) {\n        return;\n      }\n      nodes[0].children = [];\n      for (let i = 1; i < nodes.length; ++i) {\n        const node = nodes[i];\n        // @ts-expect-error Legacy types\n        const parentNode = protocolNodeById.get(node.parent);\n        if (!parentNode) {\n          continue;\n        }\n        if (parentNode.children) {\n          parentNode.children.push(node.id);\n        } else {\n          parentNode.children = [node.id];\n        }\n      }\n    }\n\n    /**\n     * Calculate how many times each node was sampled in the profile, if\n     * not available in the profile data.\n     */\n    function buildHitCountFromSamples(nodes: Protocol.Profiler.ProfileNode[], samples: number[]|undefined): void {\n      // If hit count is available, this profile has the new format, so\n      // no need to continue.`\n      if (typeof (nodes[0].hitCount) === 'number') {\n        return;\n      }\n      if (!samples) {\n        throw new Error('Error: Neither hitCount nor samples are present in profile.');\n      }\n      for (let i = 0; i < nodes.length; ++i) {\n        nodes[i].hitCount = 0;\n      }\n      for (let i = 0; i < samples.length; ++i) {\n        const node = protocolNodeById.get(samples[i]);\n        if (node?.hitCount === undefined) {\n          continue;\n        }\n        node.hitCount++;\n      }\n    }\n\n    // A cache for the raw nodes received from the traces / CDP.\n    const protocolNodeById = new Map<number, Protocol.Profiler.ProfileNode>();\n    for (let i = 0; i < nodes.length; ++i) {\n      const node = nodes[i];\n      protocolNodeById.set(node.id, node);\n    }\n\n    buildHitCountFromSamples(nodes, this.samples);\n    buildChildrenFromParents(nodes);\n    this.totalHitCount = nodes.reduce((acc, node) => acc + (node.hitCount || 0), 0);\n    const sampleTime = (this.profileEndTime - this.profileStartTime) / this.totalHitCount;\n    const root = nodes[0];\n    // If a node is filtered out, its samples are replaced with its parent,\n    // so we keep track of the which id to use in the samples data.\n    const idToUseForRemovedNode = new Map<number, number>([[root.id, root.id]]);\n    this.#idToParsedNode = new Map();\n\n    const resultRoot = new CPUProfileNode(root, sampleTime);\n    this.#idToParsedNode.set(root.id, resultRoot);\n    if (!root.children) {\n      throw new Error('Missing children for root');\n    }\n    const parentNodeStack = root.children.map(() => resultRoot);\n    const sourceNodeStack = root.children.map(id => protocolNodeById.get(id));\n    while (sourceNodeStack.length) {\n      let parentNode = parentNodeStack.pop();\n      const sourceNode = sourceNodeStack.pop();\n      if (!sourceNode || !parentNode) {\n        continue;\n      }\n      if (!sourceNode.children) {\n        sourceNode.children = [];\n      }\n      const targetNode = new CPUProfileNode(sourceNode, sampleTime);\n      parentNode.children.push(targetNode);\n      parentNode = targetNode;\n\n      idToUseForRemovedNode.set(sourceNode.id, parentNode.id);\n      parentNodeStack.push.apply(parentNodeStack, sourceNode.children.map(() => parentNode));\n      sourceNodeStack.push.apply(sourceNodeStack, sourceNode.children.map(id => protocolNodeById.get(id)));\n      this.#idToParsedNode.set(sourceNode.id, targetNode);\n    }\n    if (this.samples) {\n      this.samples = this.samples.map(id => idToUseForRemovedNode.get(id) as number);\n    }\n    return resultRoot;\n  }\n\n  /**\n   * Sorts the samples array using the timestamps array (there is a one\n   * to one matching by index between the two).\n   */\n  private sortSamples(): void {\n    if (!this.timestamps || !this.samples) {\n      return;\n    }\n\n    const timestamps = this.timestamps;\n    const samples = this.samples;\n    const orderedIndices = timestamps.map((_x, index) => index);\n    orderedIndices.sort((a, b) => timestamps[a] - timestamps[b]);\n\n    this.timestamps = [];\n    this.samples = [];\n\n    for (let i = 0; i < orderedIndices.length; i++) {\n      const orderedIndex = orderedIndices[i];\n      this.timestamps.push(timestamps[orderedIndex]);\n      this.samples.push(samples[orderedIndex]);\n    }\n  }\n\n  /**\n   * Fills in timestamps and/or time deltas from legacy profiles where\n   * they could be missing.\n   */\n  private normalizeTimestamps(): void {\n    if (!this.samples) {\n      return;\n    }\n    let timestamps: number[] = this.timestamps;\n    if (!timestamps) {\n      // Support loading CPU profiles that are missing timestamps and\n      // timedeltas\n      const profileStartTime = this.profileStartTime;\n      const interval = (this.profileEndTime - profileStartTime) / this.samples.length;\n      // Add an extra timestamp used to calculate the last sample duration.\n      timestamps = new Array(this.samples.length + 1);\n      for (let i = 0; i < timestamps.length; ++i) {\n        timestamps[i] = profileStartTime + i * interval;\n      }\n      this.timestamps = timestamps;\n      return;\n    }\n\n    // Convert samples from micro to milliseconds\n    for (let i = 0; i < timestamps.length; ++i) {\n      timestamps[i] /= 1000;\n    }\n    if (this.samples.length === timestamps.length) {\n      // Add an extra timestamp used to calculate the last sample duration.\n      const lastTimestamp = timestamps.at(-1) || 0;\n      const averageIntervalTime = (lastTimestamp - timestamps[0]) / (timestamps.length - 1);\n      this.timestamps.push(lastTimestamp + averageIntervalTime);\n    }\n    this.profileStartTime = timestamps.at(0) || this.profileStartTime;\n    this.profileEndTime = timestamps.at(-1) || this.profileEndTime;\n  }\n\n  /**\n   * Some nodes do not refer to JS samples but to V8 system tasks, AKA\n   * \"meta\" nodes. This function extracts those nodes from the profile.\n   */\n  private extractMetaNodes(): void {\n    const topLevelNodes = this.profileHead.children;\n    for (let i = 0; i < topLevelNodes.length && !(this.gcNode && this.programNode && this.idleNode); i++) {\n      const node = topLevelNodes[i];\n      if (node.functionName === '(garbage collector)') {\n        this.gcNode = node;\n      } else if (node.functionName === '(program)') {\n        this.programNode = node;\n      } else if (node.functionName === '(idle)') {\n        this.idleNode = node;\n      }\n    }\n  }\n\n  private fixMissingSamples(): void {\n    // Sometimes the V8 sampler is not able to parse the JS stack and returns\n    // a (program) sample instead. The issue leads to call frames being split\n    // apart when they shouldn't.\n    // Here's a workaround for that. When there's a single (program) sample\n    // between two call stacks sharing the same bottom node, it is replaced\n    // with the preceding sample.\n    const samples = this.samples;\n    if (!samples) {\n      return;\n    }\n    const samplesCount = samples.length;\n    if (!this.programNode || samplesCount < 3) {\n      return;\n    }\n    const idToNode = this.#idToParsedNode;\n    const programNodeId = this.programNode.id;\n    const gcNodeId = this.gcNode ? this.gcNode.id : -1;\n    const idleNodeId = this.idleNode ? this.idleNode.id : -1;\n    let prevNodeId: number = samples[0];\n    let nodeId: number = samples[1];\n    for (let sampleIndex = 1; sampleIndex < samplesCount - 1; sampleIndex++) {\n      const nextNodeId = samples[sampleIndex + 1];\n      const prevNode = idToNode.get(prevNodeId);\n      const nextNode = idToNode.get(nextNodeId);\n      if (prevNodeId === undefined || nextNodeId === undefined || !prevNode || !nextNode) {\n        console.error(`Unexpectedly found undefined nodes: ${prevNodeId} ${nextNodeId}`);\n        continue;\n      }\n      if (nodeId === programNodeId && !isSystemNode(prevNodeId) && !isSystemNode(nextNodeId) &&\n          bottomNode(prevNode) === bottomNode(nextNode)) {\n        samples[sampleIndex] = prevNodeId;\n      }\n      prevNodeId = nodeId;\n      nodeId = nextNodeId;\n    }\n    function bottomNode(node: ProfileNode): ProfileNode {\n      while (node.parent?.parent) {\n        node = node.parent;\n      }\n      return node;\n    }\n    function isSystemNode(nodeId: number): boolean {\n      return nodeId === programNodeId || nodeId === gcNodeId || nodeId === idleNodeId;\n    }\n  }\n\n  /**\n   * Traverses the call tree derived from the samples calling back when a call is opened\n   * and when it's closed\n   */\n  forEachFrame(\n      openFrameCallback: (depth: number, node: ProfileNode, sampleIndex: number, timestamp: number) => void,\n      closeFrameCallback:\n          (depth: number, node: ProfileNode, sampleIndex: number, timestamp: number, dur: number,\n           selfTime: number) => void,\n      startTime?: number, stopTime?: number): void {\n    if (!this.profileHead || !this.samples) {\n      return;\n    }\n\n    startTime = startTime || 0;\n    stopTime = stopTime || Infinity;\n    const samples = this.samples;\n    const timestamps = this.timestamps;\n    const idToNode = this.#idToParsedNode;\n    const gcNode = this.gcNode;\n    const samplesCount = samples.length;\n    const startIndex =\n        Platform.ArrayUtilities.lowerBound(timestamps, startTime, Platform.ArrayUtilities.DEFAULT_COMPARATOR);\n    let stackTop = 0;\n    const stackNodes: ProfileNode[] = [];\n    let prevId: number = this.profileHead.id;\n    let sampleTime;\n    let gcParentNode: ProfileNode|null = null;\n\n    // Extra slots for gc being put on top,\n    // and one at the bottom to allow safe stackTop-1 access.\n    const stackDepth = this.maxDepth + 3;\n    if (!this.#stackStartTimes) {\n      this.#stackStartTimes = new Array(stackDepth);\n    }\n    const stackStartTimes = this.#stackStartTimes;\n    if (!this.#stackChildrenDuration) {\n      this.#stackChildrenDuration = new Array(stackDepth);\n    }\n    const stackChildrenDuration = this.#stackChildrenDuration;\n\n    let node;\n    let sampleIndex;\n    for (sampleIndex = startIndex; sampleIndex < samplesCount; sampleIndex++) {\n      sampleTime = timestamps[sampleIndex];\n      if (sampleTime >= stopTime) {\n        break;\n      }\n      const id = samples[sampleIndex];\n      if (id === prevId) {\n        continue;\n      }\n      node = idToNode.get(id);\n      let prevNode: ProfileNode|null = idToNode.get(prevId) || null;\n      if (!prevNode) {\n        continue;\n      }\n\n      if (gcNode && node === gcNode) {\n        // GC samples have no stack, so we just put GC node on top of the last recorded sample.\n        gcParentNode = prevNode;\n        openFrameCallback(gcParentNode.depth + 1, gcNode, sampleIndex, sampleTime);\n        stackStartTimes[++stackTop] = sampleTime;\n        stackChildrenDuration[stackTop] = 0;\n        prevId = id;\n        continue;\n      }\n      if (gcNode && prevNode === gcNode && gcParentNode) {\n        // end of GC frame\n        const start = stackStartTimes[stackTop];\n        const duration = sampleTime - start;\n        stackChildrenDuration[stackTop - 1] += duration;\n        closeFrameCallback(\n            gcParentNode.depth + 1, gcNode, sampleIndex, start, duration, duration - stackChildrenDuration[stackTop]);\n        --stackTop;\n        prevNode = gcParentNode;\n        prevId = prevNode.id;\n        gcParentNode = null;\n      }\n\n      // If the depth of this node is greater than the depth of the\n      // previous one, new calls happened in between and we need to open\n      // them, so track all of them in stackNodes.\n      while (node && node.depth > prevNode.depth) {\n        stackNodes.push(node);\n        node = node.parent;\n      }\n\n      // If `prevNode` differs from `node`, the current sample was taken\n      // after a change in the call stack, meaning that frames in the\n      // path of `prevNode` that differ from those in the path of `node`\n      // can be closed. So go down to the lowest common ancestor and\n      // close current intervals.\n      //\n      // For example:\n      //\n      // prevNode  node\n      //    |       |\n      //    v       v\n      // [---D--]\n      // [---C--][--E--]\n      // [------B------] <- LCA\n      // [------A------]\n      //\n      // Because a sample was taken with A, B and E in the stack, it\n      // means C and D finished and we can close them.\n      while (prevNode && prevNode !== node) {\n        const start = stackStartTimes[stackTop];\n        const duration = sampleTime - start;\n        stackChildrenDuration[stackTop - 1] += duration;\n        closeFrameCallback(\n            prevNode.depth, prevNode, sampleIndex, start, duration, duration - stackChildrenDuration[stackTop]);\n        --stackTop;\n        // Track calls to open after previous calls were closed\n        // In the example above, this would add E to the tracking stack.\n        if (node && node.depth === prevNode.depth) {\n          stackNodes.push(node);\n          node = node.parent;\n        }\n        prevNode = prevNode.parent;\n      }\n\n      // Go up the nodes stack and open new intervals.\n      while (stackNodes.length) {\n        const currentNode = stackNodes.pop();\n        if (!currentNode) {\n          break;\n        }\n        node = currentNode;\n        openFrameCallback(currentNode.depth, currentNode, sampleIndex, sampleTime);\n        stackStartTimes[++stackTop] = sampleTime;\n        stackChildrenDuration[stackTop] = 0;\n      }\n\n      prevId = id;\n    }\n\n    // Close remaining intervals.\n    sampleTime = timestamps[sampleIndex] || this.profileEndTime;\n    if (node && gcParentNode && idToNode.get(prevId) === gcNode) {\n      const start = stackStartTimes[stackTop];\n      const duration = sampleTime - start;\n      stackChildrenDuration[stackTop - 1] += duration;\n      closeFrameCallback(\n          gcParentNode.depth + 1, node, sampleIndex, start, duration, duration - stackChildrenDuration[stackTop]);\n      --stackTop;\n      prevId = gcParentNode.id;\n    }\n    for (let node = idToNode.get(prevId); node?.parent; node = node.parent) {\n      const start = stackStartTimes[stackTop];\n      const duration = sampleTime - start;\n      stackChildrenDuration[stackTop - 1] += duration;\n      closeFrameCallback(node.depth, node, sampleIndex, start, duration, duration - stackChildrenDuration[stackTop]);\n      --stackTop;\n    }\n  }\n  /**\n   * Returns the node that corresponds to a given index of a sample.\n   */\n  nodeByIndex(index: number): ProfileNode|null {\n    return this.samples && this.#idToParsedNode.get(this.samples[index]) || null;\n  }\n  /**\n   * Returns the node that corresponds to a given node id.\n   */\n  nodeById(nodeId: number): ProfileNode|null {\n    return this.#idToParsedNode.get(nodeId) || null;\n  }\n\n  nodes(): ProfileNode[]|null {\n    if (!this.#idToParsedNode) {\n      return null;\n    }\n    return [...this.#idToParsedNode.values()];\n  }\n}\n\n/** Format used by profiles coming from traces. **/\nexport type ExtendedProfileNode = Protocol.Profiler.ProfileNode&{parent?: number};\nexport type ExtendedProfile = Protocol.Profiler.Profile&{\n  nodes: Protocol.Profiler.ProfileNode[] | ExtendedProfileNode[],\n  lines?: number[],\n  /**\n   * A sample can be manually collected with v8::CpuProfiler::collectSample.\n   * When this is done an id (trace id) can be passed to the API to\n   * identify the collected sample in the resulting CPU profile. We\n   * do this for several trace events, to efficiently calculate their\n   * stack trace and improve the JS flamechart we build.\n   *\n   * This property, only present if there's any trace id provided within profileChunks,\n   * contains the mapping of the trace ids with the shape traceId -> nodeId.\n   */\n  traceIds?: Record<string, number>,\n};\n", "// Copyright 2016 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nexport class ProfileNode {\n  callFrame: Protocol.Runtime.CallFrame;\n  callUID: string;\n  self: number;\n  total: number;\n  id: number;\n  parent: ProfileNode|null;\n  children: this[];\n  functionName: string;\n  depth!: number;\n  deoptReason!: string|null;\n  constructor(callFrame: Protocol.Runtime.CallFrame) {\n    this.callFrame = callFrame;\n    this.callUID = `${callFrame.functionName}@${callFrame.scriptId}:${callFrame.lineNumber}:${callFrame.columnNumber}`;\n    this.self = 0;\n    this.total = 0;\n    this.id = 0;\n    this.functionName = callFrame.functionName;\n    this.parent = null;\n    this.children = [];\n  }\n\n  get scriptId(): Protocol.Runtime.ScriptId {\n    return String(this.callFrame.scriptId) as Protocol.Runtime.ScriptId;\n  }\n\n  get url(): Platform.DevToolsPath.UrlString {\n    return this.callFrame.url as Platform.DevToolsPath.UrlString;\n  }\n\n  get lineNumber(): number {\n    return this.callFrame.lineNumber;\n  }\n\n  get columnNumber(): number {\n    return this.callFrame.columnNumber;\n  }\n\n  setFunctionName(name: string|null): void {\n    if (name === null) {\n      return;\n    }\n    this.functionName = name;\n  }\n}\n\nexport class ProfileTreeModel {\n  root!: ProfileNode;\n  total!: number;\n  maxDepth!: number;\n\n  initialize(root: ProfileNode): void {\n    this.root = root;\n    this.assignDepthsAndParents();\n    this.total = this.calculateTotals(this.root);\n  }\n\n  private assignDepthsAndParents(): void {\n    const root = this.root;\n    root.depth = -1;\n    root.parent = null;\n    this.maxDepth = 0;\n    const nodesToTraverse = [root];\n    while (nodesToTraverse.length) {\n      const parent = (nodesToTraverse.pop() as ProfileNode);\n      const depth = parent.depth + 1;\n      if (depth > this.maxDepth) {\n        this.maxDepth = depth;\n      }\n      const children = parent.children;\n      for (const child of children) {\n        child.depth = depth;\n        child.parent = parent;\n        nodesToTraverse.push(child);\n      }\n    }\n  }\n\n  private calculateTotals(root: ProfileNode): number {\n    const nodesToTraverse = [root];\n    const dfsList = [];\n    while (nodesToTraverse.length) {\n      const node = (nodesToTraverse.pop() as ProfileNode);\n      node.total = node.self;\n      dfsList.push(node);\n      nodesToTraverse.push(...node.children);\n    }\n    while (dfsList.length > 1) {\n      const node = (dfsList.pop() as ProfileNode);\n      if (node.parent) {\n        node.parent.total += node.total;\n      }\n    }\n    return root.total;\n  }\n}\n"],
  "mappings": "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",
  "names": ["nodes", "nodeId", "node"]
}
