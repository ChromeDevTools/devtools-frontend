{
  "version": 3,
  "sources": ["../../../../../../front_end/models/geometry/GeometryImpl.ts"],
  "sourcesContent": ["// Copyright 2013 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as SDK from '../../core/sdk/sdk.js';\n\nconst EPS = 1e-5;\n\nexport class Vector {\n  x: number;\n  y: number;\n  z: number;\n\n  constructor(x: number, y: number, z: number) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  length(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n  }\n\n  normalize(): void {\n    const length = this.length();\n    if (length <= EPS) {\n      return;\n    }\n\n    this.x /= length;\n    this.y /= length;\n    this.z /= length;\n  }\n}\n\nexport class Point {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  distanceTo(p: Point): number {\n    return Math.sqrt(Math.pow(p.x - this.x, 2) + Math.pow(p.y - this.y, 2));\n  }\n\n  projectOn(line: Point): Point {\n    if (line.x === 0 && line.y === 0) {\n      return new Point(0, 0);\n    }\n    return line.scale((this.x * line.x + this.y * line.y) / (Math.pow(line.x, 2) + Math.pow(line.y, 2)));\n  }\n\n  scale(scalar: number): Point {\n    return new Point(this.x * scalar, this.y * scalar);\n  }\n\n  toString(): string {\n    return Math.round(this.x * 100) / 100 + ', ' + Math.round(this.y * 100) / 100;\n  }\n}\n\nexport class CubicBezier {\n  controlPoints: Point[];\n  constructor(point1: Point, point2: Point) {\n    this.controlPoints = [point1, point2];\n  }\n\n  static parse(text: string): CubicBezier|null {\n    const keywordValues = SDK.CSSMetadata.CubicBezierKeywordValues;\n    const value = text.toLowerCase().replace(/\\s+/g, '');\n    if (keywordValues.has(value)) {\n      return CubicBezier.parse((keywordValues.get(value) as string));\n    }\n    const bezierRegex = /^cubic-bezier\\(([^,]+),([^,]+),([^,]+),([^,]+)\\)$/;\n    const match = value.match(bezierRegex);\n    if (match) {\n      const control1 = new Point(parseFloat(match[1]), parseFloat(match[2]));\n      const control2 = new Point(parseFloat(match[3]), parseFloat(match[4]));\n      return new CubicBezier(control1, control2);\n    }\n    return null;\n  }\n\n  evaluateAt(t: number): Point {\n    function evaluate(v1: number, v2: number, t: number): number {\n      return 3 * (1 - t) * (1 - t) * t * v1 + 3 * (1 - t) * t * t * v2 + Math.pow(t, 3);\n    }\n\n    const x = evaluate(this.controlPoints[0].x, this.controlPoints[1].x, t);\n    const y = evaluate(this.controlPoints[0].y, this.controlPoints[1].y, t);\n    return new Point(x, y);\n  }\n\n  asCSSText(): string {\n    const raw = 'cubic-bezier(' + this.controlPoints.join(', ') + ')';\n    const keywordValues = SDK.CSSMetadata.CubicBezierKeywordValues;\n    for (const [keyword, value] of keywordValues) {\n      // We special case `linear` in here as we\n      // treat `linear` keyword as a CSSLinearEasingModel.\n      // We return its full value instead of the keyword\n      // since otherwise it will be parsed as a CSSLinearEasingModel\n      // instead of a cubic bezier.\n      if (raw === value && keyword !== 'linear') {\n        return keyword;\n      }\n    }\n    return raw;\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static readonly Regex =\n      /((cubic-bezier\\([^)]+\\))|\\b(linear(?![-\\(])|ease-in-out|ease-in|ease-out|ease)\\b)|(linear\\([^)]+\\))/g;\n}\n\nexport const LINEAR_BEZIER = new CubicBezier(new Point(0, 0), new Point(1, 1));\n\nexport class EulerAngles {\n  alpha: number;\n  beta: number;\n  gamma: number;\n\n  constructor(alpha: number, beta: number, gamma: number) {\n    this.alpha = alpha;\n    this.beta = beta;\n    this.gamma = gamma;\n  }\n\n  /**\n   * Derives orientation angles from a rotation matrix.\n   *\n   * The angles alpha, beta and gamma are in the [0, 360), [-180, 180) and\n   * [-90, 90) intervals respectively, as specified in the Device Orientation\n   * spec (https://w3c.github.io/deviceorientation/#deviceorientation).\n   *\n   * The Euler angles derived here follow a Z-X'-Y'' sequence.\n   *\n   * In particular we compute the decomposition of a given rotation matrix r\n   * such that\n   *    r = rz(alpha) * rx(beta) * ry(gamma)\n   * where rz, rx and ry are rotation matrices around z, x and y axes in the\n   * world coordinate reference frame respectively. The reference frame\n   * consists of three orthogonal axes x, y, z where x points East, y points\n   * north and z points upwards perpendicular to the ground plane. The computed\n   * angles alpha, beta and gamma are in degrees and clockwise-positive when\n   * viewed along the positive direction of the corresponding axis. Except for\n   * the special case when the beta angle is +-90 these angles uniquely\n   * define the orientation of a mobile device in 3D space. The\n   * alpha-beta-gamma representation resembles the yaw-pitch-roll convention\n   * used in vehicle dynamics, however it does not exactly match it. One of the\n   * differences is that the 'pitch' angle beta is allowed to be within [-180,\n   * 180). A mobile device with pitch angle greater than 90 could\n   * correspond to a user lying down and looking upward at the screen.\n   */\n  static fromDeviceOrientationRotationMatrix(rotationMatrix: DOMMatrixReadOnly): EulerAngles {\n    let alpha, beta, gamma;\n\n    // A few implementation notes:\n    // - This code has been ported from Chromium's\n    //   //services/device/generic_sensor/orientation_util.cc at commit\n    //   1be837b6f142.\n    //\n    // - Since |rotationMatrix| contains non-integer numbers, directly\n    //   comparing them to 0 will not be accurate, so we use |_Eps| to check if\n    //   some numbers are close enough to 0.\n    //\n    // - The C++ code in Chromium uses a std::vector<double> to represent a 3x3\n    //   rotation matrix in row-major order. |rotationMatrix| is a 4x4 matrix\n    //   defined in column-major order, so |rotationMatrix.m13| here\n    //   corresponds to |r[8]| in the original C++ code.\n    //\n    // - There are rounding errors and approximations in the floating-point\n    //   arithmetics below, but it does not interfere with the use cases in\n    //   DevTools (i.e. angles that are mostly within the allowed intervals). A\n    //   rotation around the Z axis by 360 degrees will correctly return\n    //   alpha=0, but a rotation around the Z axis by 360 * 20000000000000000\n    //   will return alpha=~75 degrees, for example.\n    if (Math.abs(rotationMatrix.m33) < EPS) {    // m33 == 0\n      if (Math.abs(rotationMatrix.m13) < EPS) {  // m13 == 0, cos(beta) == 0\n        // Gimbal lock discontinuity: in the Z-X'-Y'' angle system used here, a\n        // rotation of 90 or -90 degrees around the X axis (beta) causes a\n        // Gimbal lock, which we handle by always setting gamma = 0 and\n        // handling the rotation in alpha.\n        alpha = Math.atan2(rotationMatrix.m12, rotationMatrix.m11);\n        beta = (rotationMatrix.m23 > 0) ? (Math.PI / 2) : -(Math.PI / 2);  // beta = +-pi/2\n        gamma = 0;                                                         // gamma = 0\n      } else if (rotationMatrix.m13 > 0) {                                 // cos(gamma) == 0, cos(beta) > 0\n        alpha = Math.atan2(-rotationMatrix.m21, rotationMatrix.m22);\n        beta = Math.asin(rotationMatrix.m23);  // beta [-pi/2, pi/2]\n        gamma = -(Math.PI / 2);                // gamma = -pi/2\n      } else {                                 // cos(gamma) == 0, cos(beta) < 0\n        alpha = Math.atan2(rotationMatrix.m21, -rotationMatrix.m22);\n        beta = -Math.asin(rotationMatrix.m23);\n        beta += (beta > 0 || Math.abs(beta) < EPS) ? -Math.PI : Math.PI;  // beta [-pi,-pi/2) U (pi/2,pi)\n        gamma = -(Math.PI / 2);                                           // gamma = -pi/2\n      }\n    } else if (rotationMatrix.m33 > 0) {  // cos(beta) > 0\n      alpha = Math.atan2(-rotationMatrix.m21, rotationMatrix.m22);\n      beta = Math.asin(rotationMatrix.m23);                         // beta (-pi/2, pi/2)\n      gamma = Math.atan2(-rotationMatrix.m13, rotationMatrix.m33);  // gamma (-pi/2, pi/2)\n    } else {                                                        // cos(beta) < 0\n      alpha = Math.atan2(rotationMatrix.m21, -rotationMatrix.m22);\n      beta = -Math.asin(rotationMatrix.m23);\n      beta += (beta > 0 || Math.abs(beta) < EPS) ? -Math.PI : Math.PI;  // beta [-pi,-pi/2) U (pi/2,pi)\n      gamma = Math.atan2(rotationMatrix.m13, -rotationMatrix.m33);      // gamma (-pi/2, pi/2)\n    }\n\n    // alpha is in [-pi, pi], make sure it is in [0, 2*pi).\n    if (alpha < -EPS) {\n      alpha += 2 * Math.PI;  // alpha [0, 2*pi)\n    }\n\n    // We do not need a lot of precision in degrees. Arbitrarily set it to 6\n    // digits after the decimal point. In most use cases, this may be rounded\n    // even further in SensorsView and when passing these degrees to CSS.\n    alpha = Number(radiansToDegrees(alpha).toFixed(6));\n    beta = Number(radiansToDegrees(beta).toFixed(6));\n    gamma = Number(radiansToDegrees(gamma).toFixed(6));\n\n    return new EulerAngles(alpha, beta, gamma);\n  }\n}\n\nexport const scalarProduct = function(u: Vector, v: Vector): number {\n  return u.x * v.x + u.y * v.y + u.z * v.z;\n};\n\nexport const crossProduct = function(u: Vector, v: Vector): Vector {\n  const x = u.y * v.z - u.z * v.y;\n  const y = u.z * v.x - u.x * v.z;\n  const z = u.x * v.y - u.y * v.x;\n  return new Vector(x, y, z);\n};\n\nexport const subtract = function(u: Vector, v: Vector): Vector {\n  const x = u.x - v.x;\n  const y = u.y - v.y;\n  const z = u.z - v.z;\n  return new Vector(x, y, z);\n};\n\nexport const multiplyVectorByMatrixAndNormalize = function(v: Vector, m: DOMMatrix): Vector {\n  const t = v.x * m.m14 + v.y * m.m24 + v.z * m.m34 + m.m44;\n  const x = (v.x * m.m11 + v.y * m.m21 + v.z * m.m31 + m.m41) / t;\n  const y = (v.x * m.m12 + v.y * m.m22 + v.z * m.m32 + m.m42) / t;\n  const z = (v.x * m.m13 + v.y * m.m23 + v.z * m.m33 + m.m43) / t;\n  return new Vector(x, y, z);\n};\n\nexport const calculateAngle = function(u: Vector, v: Vector): number {\n  const uLength = u.length();\n  const vLength = v.length();\n  if (uLength <= EPS || vLength <= EPS) {\n    return 0;\n  }\n  const cos = scalarProduct(u, v) / uLength / vLength;\n  if (Math.abs(cos) > 1) {\n    return 0;\n  }\n  return radiansToDegrees(Math.acos(cos));\n};\n\nexport const degreesToRadians = function(deg: number): number {\n  return deg * Math.PI / 180;\n};\n\nexport const degreesToGradians = function(deg: number): number {\n  return deg / 9 * 10;\n};\n\nexport const degreesToTurns = function(deg: number): number {\n  return deg / 360;\n};\n\nexport const radiansToDegrees = function(rad: number): number {\n  return rad * 180 / Math.PI;\n};\n\nexport const radiansToGradians = function(rad: number): number {\n  return rad * 200 / Math.PI;\n};\n\nexport const radiansToTurns = function(rad: number): number {\n  return rad / (2 * Math.PI);\n};\n\nexport const gradiansToRadians = function(grad: number): number {\n  return grad * Math.PI / 200;\n};\n\nexport const turnsToRadians = function(turns: number): number {\n  return turns * 2 * Math.PI;\n};\n\nexport const boundsForTransformedPoints = function(matrix: DOMMatrix, points: number[], aggregateBounds?: {\n  minX: number,\n  maxX: number,\n  minY: number,\n  maxY: number,\n}): {\n  minX: number,\n  maxX: number,\n  minY: number,\n  maxY: number,\n} {\n  if (!aggregateBounds) {\n    aggregateBounds = {minX: Infinity, maxX: -Infinity, minY: Infinity, maxY: -Infinity};\n  }\n  if (points.length % 3) {\n    console.warn('Invalid size of points array');\n  }\n  for (let p = 0; p < points.length; p += 3) {\n    let vector: Vector = new Vector(points[p], points[p + 1], points[p + 2]);\n    vector = multiplyVectorByMatrixAndNormalize(vector, matrix);\n    aggregateBounds.minX = Math.min(aggregateBounds.minX, vector.x);\n    aggregateBounds.maxX = Math.max(aggregateBounds.maxX, vector.x);\n    aggregateBounds.minY = Math.min(aggregateBounds.minY, vector.y);\n    aggregateBounds.maxY = Math.max(aggregateBounds.maxY, vector.y);\n  }\n  return aggregateBounds;\n};\n\nexport class Size {\n  width: number;\n  height: number;\n  constructor(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n  }\n\n  clipTo(size?: Size|null): Size {\n    if (!size) {\n      return this;\n    }\n    return new Size(Math.min(this.width, size.width), Math.min(this.height, size.height));\n  }\n\n  scale(scale: number): Size {\n    return new Size(this.width * scale, this.height * scale);\n  }\n\n  isEqual(size: Size|null): boolean {\n    return size !== null && this.width === size.width && this.height === size.height;\n  }\n\n  widthToMax(size: number|Size): Size {\n    return new Size(Math.max(this.width, (typeof size === 'number' ? size : size.width)), this.height);\n  }\n\n  addWidth(size: number|Size): Size {\n    return new Size(this.width + (typeof size === 'number' ? size : size.width), this.height);\n  }\n\n  heightToMax(size: number|Size): Size {\n    return new Size(this.width, Math.max(this.height, (typeof size === 'number' ? size : size.height)));\n  }\n\n  addHeight(size: number|Size): Size {\n    return new Size(this.width, this.height + (typeof size === 'number' ? size : size.height));\n  }\n}\n\nexport class Constraints {\n  minimum: Size;\n  preferred: Size;\n  constructor(minimum?: Size, preferred?: Size|null) {\n    this.minimum = minimum || new Size(0, 0);\n\n    this.preferred = preferred || this.minimum;\n\n    if (this.minimum.width > this.preferred.width || this.minimum.height > this.preferred.height) {\n      throw new Error('Minimum size is greater than preferred.');\n    }\n  }\n\n  isEqual(constraints: Constraints|null): boolean {\n    return constraints !== null && this.minimum.isEqual(constraints.minimum) &&\n        this.preferred.isEqual(constraints.preferred);\n  }\n\n  widthToMax(value: number|Constraints): Constraints {\n    if (typeof value === 'number') {\n      return new Constraints(this.minimum.widthToMax(value), this.preferred.widthToMax(value));\n    }\n    return new Constraints(this.minimum.widthToMax(value.minimum), this.preferred.widthToMax(value.preferred));\n  }\n\n  addWidth(value: number|Constraints): Constraints {\n    if (typeof value === 'number') {\n      return new Constraints(this.minimum.addWidth(value), this.preferred.addWidth(value));\n    }\n    return new Constraints(this.minimum.addWidth(value.minimum), this.preferred.addWidth(value.preferred));\n  }\n\n  heightToMax(value: number|Constraints): Constraints {\n    if (typeof value === 'number') {\n      return new Constraints(this.minimum.heightToMax(value), this.preferred.heightToMax(value));\n    }\n    return new Constraints(this.minimum.heightToMax(value.minimum), this.preferred.heightToMax(value.preferred));\n  }\n\n  addHeight(value: number|Constraints): Constraints {\n    if (typeof value === 'number') {\n      return new Constraints(this.minimum.addHeight(value), this.preferred.addHeight(value));\n    }\n    return new Constraints(this.minimum.addHeight(value.minimum), this.preferred.addHeight(value.preferred));\n  }\n}\n"],
  "mappings": "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",
  "names": ["t"]
}
