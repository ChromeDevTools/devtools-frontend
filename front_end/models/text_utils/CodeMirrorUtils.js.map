{"version":3,"file":"CodeMirrorUtils.js","sourceRoot":"","sources":["../../../../../../front_end/models/text_utils/CodeMirrorUtils.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,UAAU,MAAM,sDAAsD,CAAC;AAInF,MAAM,UAAU,kBAAkB;IAChC,KAAK,UAAU,QAAQ,CAAC,IAAY,EAAE,QAAqD;QACzF,MAAM,YAAY,GAAG,MAAM,UAAU,CAAC,eAAe,EAAE,CAAC;QACxD,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAEvD,MAAM,KAAK,GAAG,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACzC,IAAI,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC;QACzB,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC;YACrB,MAAM,CAAC,KAAK,GAAG,OAAO,CAAC;YACvB,IAAI,SAAS,GAAG,YAAY,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAClD;;;;;;;;eAQG;YACH,IAAI,SAAS,KAAK,OAAO,IAAI,KAAK,CAAC,KAAK,KAAK,WAAW,EAAE,CAAC;gBACzD,SAAS,GAAG,UAAU,CAAC;YACzB,CAAC;YACD,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;YACjC,QAAQ,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YAC7B,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC;QACvB,CAAC;IACH,CAAC;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as CodeMirror from '../../third_party/codemirror.next/codemirror.next.js';\n\ntype Tokenizer = (line: string, callback: (value: string, style: string|null) => void) => Promise<void>;\n\nexport function createCssTokenizer(): Tokenizer {\n  async function tokenize(line: string, callback: (value: string, style: string|null) => void): Promise<void> {\n    const streamParser = await CodeMirror.cssStreamParser();\n    const stream = new CodeMirror.StringStream(line, 4, 2);\n\n    const state = streamParser.startState(2);\n    let lastPos = stream.pos;\n    while (!stream.eol()) {\n      stream.start = lastPos;\n      let tokenType = streamParser.token(stream, state);\n      /**\n       * We expect unknown properties (like `unknownProp: unknownPropVal`) to still be\n       * formatted correctly. However, `tokenType` for such properties are marked\n       * as `error` from CodeMirror side and the internal state of the parser becomes `maybeprop`.\n       *\n       * So, we handle that specific keyword to be marked as `property` even though it is\n       * not a known property. We do this because for our formatting purposes it doesn't matter\n       * whether a property is a known CSS property or not.\n       */\n      if (tokenType === 'error' && state.state === 'maybeprop') {\n        tokenType = 'property';\n      }\n      const segment = stream.current();\n      callback(segment, tokenType);\n      lastPos = stream.pos;\n    }\n  }\n  return tokenize;\n}\n"]}