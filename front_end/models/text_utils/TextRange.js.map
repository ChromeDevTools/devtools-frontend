{"version":3,"file":"TextRange.js","sourceRoot":"","sources":["../../../../../../front_end/models/text_utils/TextRange.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2013 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\n\nconst MAX_SAFE_INT32 = 2 ** 31 - 1;\n\nexport interface SerializedTextRange {\n  startLine: number;\n  startColumn: number;\n  endLine: number;\n  endColumn: number;\n}\n\nexport class TextRange {\n  constructor(public startLine: number, public startColumn: number, public endLine: number, public endColumn: number) {\n  }\n\n  static createFromLocation(line: number, column: number): TextRange {\n    return new TextRange(line, column, line, column);\n  }\n\n  static createUnboundedFromLocation(line: number, column: number): TextRange {\n    return new TextRange(line, column, MAX_SAFE_INT32, MAX_SAFE_INT32);\n  }\n\n  static fromObject(serializedTextRange: SerializedTextRange): TextRange {\n    return new TextRange(\n        serializedTextRange.startLine, serializedTextRange.startColumn, serializedTextRange.endLine,\n        serializedTextRange.endColumn);\n  }\n\n  static comparator(range1: TextRange, range2: TextRange): number {\n    return range1.compareTo(range2);\n  }\n\n  static fromEdit(oldRange: TextRange, newText: string): TextRange {\n    let endLine: number = oldRange.startLine;\n    let endColumn: number = oldRange.startColumn + newText.length;\n\n    const lineEndings = Platform.StringUtilities.findLineEndingIndexes(newText);\n    if (lineEndings.length > 1) {\n      endLine = oldRange.startLine + lineEndings.length - 1;\n      const len = lineEndings.length;\n      endColumn = lineEndings[len - 1] - lineEndings[len - 2] - 1;\n    }\n    return new TextRange(oldRange.startLine, oldRange.startColumn, endLine, endColumn);\n  }\n\n  isEmpty(): boolean {\n    return this.startLine === this.endLine && this.startColumn === this.endColumn;\n  }\n\n  immediatelyPrecedes(range?: TextRange): boolean {\n    if (!range) {\n      return false;\n    }\n    return this.endLine === range.startLine && this.endColumn === range.startColumn;\n  }\n\n  immediatelyFollows(range?: TextRange): boolean {\n    if (!range) {\n      return false;\n    }\n    return range.immediatelyPrecedes(this);\n  }\n\n  follows(range: TextRange): boolean {\n    return (range.endLine === this.startLine && range.endColumn <= this.startColumn) || range.endLine < this.startLine;\n  }\n\n  get linesCount(): number {\n    return this.endLine - this.startLine;\n  }\n\n  collapseToEnd(): TextRange {\n    return new TextRange(this.endLine, this.endColumn, this.endLine, this.endColumn);\n  }\n\n  collapseToStart(): TextRange {\n    return new TextRange(this.startLine, this.startColumn, this.startLine, this.startColumn);\n  }\n\n  normalize(): TextRange {\n    if (this.startLine > this.endLine || (this.startLine === this.endLine && this.startColumn > this.endColumn)) {\n      return new TextRange(this.endLine, this.endColumn, this.startLine, this.startColumn);\n    }\n    return this.clone();\n  }\n\n  clone(): TextRange {\n    return new TextRange(this.startLine, this.startColumn, this.endLine, this.endColumn);\n  }\n\n  serializeToObject(): {\n    startLine: number,\n    startColumn: number,\n    endLine: number,\n    endColumn: number,\n  } {\n    return {\n      startLine: this.startLine,\n      startColumn: this.startColumn,\n      endLine: this.endLine,\n      endColumn: this.endColumn,\n    };\n  }\n\n  compareTo(other: TextRange): number {\n    if (this.startLine > other.startLine) {\n      return 1;\n    }\n    if (this.startLine < other.startLine) {\n      return -1;\n    }\n    if (this.startColumn > other.startColumn) {\n      return 1;\n    }\n    if (this.startColumn < other.startColumn) {\n      return -1;\n    }\n    return 0;\n  }\n\n  compareToPosition(lineNumber: number, columnNumber: number): number {\n    if (lineNumber < this.startLine || (lineNumber === this.startLine && columnNumber < this.startColumn)) {\n      return -1;\n    }\n    if (lineNumber > this.endLine || (lineNumber === this.endLine && columnNumber > this.endColumn)) {\n      return 1;\n    }\n    return 0;\n  }\n\n  equal(other: TextRange): boolean {\n    return this.startLine === other.startLine && this.endLine === other.endLine &&\n        this.startColumn === other.startColumn && this.endColumn === other.endColumn;\n  }\n\n  relativeTo(line: number, column: number): TextRange {\n    const relative = this.clone();\n\n    if (this.startLine === line) {\n      relative.startColumn -= column;\n    }\n    if (this.endLine === line) {\n      relative.endColumn -= column;\n    }\n\n    relative.startLine -= line;\n    relative.endLine -= line;\n    return relative;\n  }\n\n  relativeFrom(line: number, column: number): TextRange {\n    const relative = this.clone();\n\n    if (this.startLine === 0) {\n      relative.startColumn += column;\n    }\n    if (this.endLine === 0) {\n      relative.endColumn += column;\n    }\n\n    relative.startLine += line;\n    relative.endLine += line;\n    return relative;\n  }\n\n  rebaseAfterTextEdit(originalRange: TextRange, editedRange: TextRange): TextRange {\n    console.assert(originalRange.startLine === editedRange.startLine);\n    console.assert(originalRange.startColumn === editedRange.startColumn);\n    const rebase = this.clone();\n    if (!this.follows(originalRange)) {\n      return rebase;\n    }\n    const lineDelta = editedRange.endLine - originalRange.endLine;\n    const columnDelta = editedRange.endColumn - originalRange.endColumn;\n    rebase.startLine += lineDelta;\n    rebase.endLine += lineDelta;\n    if (rebase.startLine === editedRange.endLine) {\n      rebase.startColumn += columnDelta;\n    }\n    if (rebase.endLine === editedRange.endLine) {\n      rebase.endColumn += columnDelta;\n    }\n    return rebase;\n  }\n\n  toString(): string {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * Checks whether this {@link TextRange} contains the location identified by the\n   * {@link lineNumber} and {@link columnNumber}. The beginning of the text range is\n   * considered inclusive while the end of the text range is considered exclusive\n   * for this comparison, meaning that for example a range `(0,1)-(1,4)` contains the\n   * location `(0,1)` but does not contain the location `(1,4)`.\n   *\n   * @param lineNumber the location's line offset.\n   * @param columnNumber the location's column offset.\n   * @returns `true` if the location identified by {@link lineNumber} and {@link columnNumber}\n   *          is contained within this text range.\n   */\n  containsLocation(lineNumber: number, columnNumber: number): boolean {\n    if (this.startLine === this.endLine) {\n      return this.startLine === lineNumber && this.startColumn <= columnNumber && columnNumber < this.endColumn;\n    }\n    if (this.startLine === lineNumber) {\n      return this.startColumn <= columnNumber;\n    }\n    if (this.endLine === lineNumber) {\n      return columnNumber < this.endColumn;\n    }\n    return this.startLine < lineNumber && lineNumber < this.endLine;\n  }\n\n  get start(): {lineNumber: number, columnNumber: number} {\n    return {lineNumber: this.startLine, columnNumber: this.startColumn};\n  }\n\n  get end(): {lineNumber: number, columnNumber: number} {\n    return {lineNumber: this.endLine, columnNumber: this.endColumn};\n  }\n\n  /**\n   * Checks whether this and `that` {@link TextRange} overlap and if they do, computes the\n   * intersection range. If they don't overlap an empty text range is returned instead (for\n   * which {@link #isEmpty()} yields `true`).\n   *\n   * The beginning of text ranges is considered to be includes while the end of the text\n   * ranges is considered exclusive for the intersection, meaning that for example intersecting\n   * `(0,1)-(1,4)` and `(1,4)-(1,6)` yields an empty range.\n   *\n   * @param that the other text range.\n   * @returns the intersection of this and `that` text range, which might be empty if their don't\n   *          overlap.\n   */\n  intersection(that: TextRange): TextRange {\n    let {startLine, startColumn} = this;\n    if (startLine < that.startLine) {\n      startLine = that.startLine;\n      startColumn = that.startColumn;\n    } else if (startLine === that.startLine) {\n      startColumn = Math.max(startColumn, that.startColumn);\n    }\n    let {endLine, endColumn} = this;\n    if (endLine > that.endLine) {\n      endLine = that.endLine;\n      endColumn = that.endColumn;\n    } else if (endLine === that.endLine) {\n      endColumn = Math.min(endColumn, that.endColumn);\n    }\n    if (startLine > endLine || (startLine === endLine && startColumn >= endColumn)) {\n      return new TextRange(0, 0, 0, 0);\n    }\n    return new TextRange(startLine, startColumn, endLine, endColumn);\n  }\n}\n\nexport class SourceRange {\n  constructor(public offset: number, public length: number) {\n  }\n}\n"]}