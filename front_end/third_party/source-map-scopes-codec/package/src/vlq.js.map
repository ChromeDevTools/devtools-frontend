{"version":3,"file":"vlq.js","sourceRoot":"","sources":["../../../../../../../../front_end/third_party/source-map-scopes-codec/package/src/vlq.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * @fileoverview\n *\n * VLQ implementation taken mostly verbatim from Chrome DevTools itself.\n */\n\nconst BASE64_CHARS =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nconst BASE64_CODES = new Uint8Array(123);\nfor (let index = 0; index < BASE64_CHARS.length; ++index) {\n  BASE64_CODES[BASE64_CHARS.charCodeAt(index)] = index;\n}\n\nconst VLQ_BASE_SHIFT = 5;\nconst VLQ_BASE_MASK = (1 << 5) - 1;\nconst VLQ_CONTINUATION_MASK = 1 << 5;\n\nexport function encodeSigned(n: number): string {\n  // Set the sign bit as the least significant bit.\n  n = n >= 0 ? 2 * n : 1 - 2 * n;\n  return encodeUnsigned(n);\n}\n\nexport function encodeUnsigned(n: number): string {\n  // Encode into a base64 run.\n  let result = \"\";\n  while (true) {\n    // Extract the lowest 5 bits and remove them from the number.\n    const digit = n & 0x1f;\n    n >>>= 5;\n    // Is there anything more left to encode?\n    if (n === 0) {\n      // We are done encoding, finish the run.\n      result += BASE64_CHARS[digit];\n      break;\n    } else {\n      // There is still more encode, so add the digit and the continuation bit.\n      result += BASE64_CHARS[0x20 + digit];\n    }\n  }\n  return result;\n}\n\nexport class TokenIterator {\n  readonly #string: string;\n  #position: number;\n\n  constructor(string: string) {\n    this.#string = string;\n    this.#position = 0;\n  }\n\n  nextChar(): string {\n    return this.#string.charAt(this.#position++);\n  }\n\n  /** Returns the unicode value of the next character and advances the iterator  */\n  nextCharCode(): number {\n    return this.#string.charCodeAt(this.#position++);\n  }\n\n  peek(): string {\n    return this.#string.charAt(this.#position);\n  }\n\n  hasNext(): boolean {\n    return this.#position < this.#string.length;\n  }\n\n  nextSignedVLQ(): number {\n    let result = this.nextUnsignedVLQ();\n\n    // Fix the sign.\n    const negative = result & 1;\n    result >>>= 1;\n    return negative ? -result : result;\n  }\n\n  nextUnsignedVLQ(): number {\n    let result = 0;\n    let shift = 0;\n    let digit = 0;\n    do {\n      const charCode = this.nextCharCode();\n      digit = BASE64_CODES[charCode];\n      result += (digit & VLQ_BASE_MASK) << shift;\n      shift += VLQ_BASE_SHIFT;\n    } while (digit & VLQ_CONTINUATION_MASK);\n    return result;\n  }\n\n  currentChar(): string {\n    return this.#string.charAt(this.#position - 1);\n  }\n}\n"]}