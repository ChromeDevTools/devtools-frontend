{"version":3,"file":"directives.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/helpers/directives.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,GAAG,MAAM,kBAAkB,CAAC;AAExC;;;;;;;GAOG;AACH,MAAM,oBAAqB,SAAQ,GAAG,CAAC,SAAS,CAAC,SAAS;IACxD,YAAY,QAAgC;QAC1C,KAAK,CAAC,QAAQ,CAAC,CAAC;QAEhB,IAAI,QAAQ,CAAC,IAAI,KAAK,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;YACvD,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;QACpF,CAAC;IACH,CAAC;IAEQ,MAAM,CAAC,IAA+B,EAAE,CAAC,QAAQ,CAA0C;QAClG,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACzB,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,SAAqC;IAC5C,CAAC;CACF;AAED,MAAM,CAAC,MAAM,oBAAoB,GAAG,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC","sourcesContent":["// Copyright 2021 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Lit from '../../lit/lit.js';\n\n/**\n * Provides a hook to get a callback when a Lit node is rendered into the DOM:\n * @example\n *\n * ```\n * <p on-render=${nodeRenderedCallback(node => ...)}>\n * ```\n */\nclass NodeRenderedCallback extends Lit.Directive.Directive {\n  constructor(partInfo: Lit.Directive.PartInfo) {\n    super(partInfo);\n\n    if (partInfo.type !== Lit.Directive.PartType.ATTRIBUTE) {\n      throw new Error('Node rendered callback directive must be used as an attribute.');\n    }\n  }\n\n  override update(part: Lit.Directive.ElementPart, [callback]: Lit.Directive.DirectiveParameters<this>): void {\n    callback(part.element);\n  }\n\n  /*\n   * Because this directive doesn't render anything, there's no implementation\n   * here for the render method. But we need it to state that it takes in a\n   * callback function at the callsite. Without this definition, the types in\n   * the update() method above don't get correctly picked up.\n   */\n  render(_callback: (domNode: Element) => void): void {\n  }\n}\n\nexport const nodeRenderedCallback = Lit.Directive.directive(NodeRenderedCallback);\n"]}