{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/helpers/directives.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Lit from '../../lit/lit.js';\n\n/**\n * Provides a hook to get a callback when a Lit node is rendered into the DOM:\n * @example\n *\n * ```\n * <p on-render=${nodeRenderedCallback(node => ...)}>\n * ```\n */\nclass NodeRenderedCallback extends Lit.Directive.Directive {\n  constructor(partInfo: Lit.Directive.PartInfo) {\n    super(partInfo);\n\n    if (partInfo.type !== Lit.Directive.PartType.ATTRIBUTE) {\n      throw new Error('Node rendered callback directive must be used as an attribute.');\n    }\n  }\n\n  override update(part: Lit.Directive.ElementPart, [callback]: Lit.Directive.DirectiveParameters<this>): void {\n    callback(part.element);\n  }\n\n  /*\n   * Because this directive doesn't render anything, there's no implementation\n   * here for the render method. But we need it to state that it takes in a\n   * callback function at the callsite. Without this definition, the types in\n   * the update() method above don't get correctly picked up.\n   */\n  render(_callback: (domNode: Element) => void): void {\n  }\n}\n\nexport const nodeRenderedCallback = Lit.Directive.directive(NodeRenderedCallback);\n"],
  "mappings": ";AAIA,YAAY,SAAS;AAUrB,MAAM,6BAA6B,IAAI,UAAU,UAAU;AAAA,EACzD,YAAY,UAAkC;AAC5C,UAAM,QAAQ;AAEd,QAAI,SAAS,SAAS,IAAI,UAAU,SAAS,WAAW;AACtD,YAAM,IAAI,MAAM,gEAAgE;AAAA,IAClF;AAAA,EACF;AAAA,EAES,OAAO,MAAiC,CAAC,QAAQ,GAAkD;AAC1G,aAAS,KAAK,OAAO;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,WAA6C;AAAA,EACpD;AACF;AAEO,aAAM,uBAAuB,IAAI,UAAU,UAAU,oBAAoB;",
  "names": []
}
