{"version":3,"file":"scheduled-render.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/helpers/scheduled-render.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,iBAAiB,MAAM,6CAA6C,CAAC;AAIjF,MAAM,QAAQ,GAAG,IAAI,GAAG,EAAmE,CAAC;AAC5F,MAAM,MAAM,GAAG,IAAI,GAAG,EAAe,CAAC;AAEtC,MAAM,UAAU,cAAc,CAAC,SAAsB,EAAE,QAAwB;IAC7E,MAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACxC,IAAI,OAAO,KAAK,SAAS,EAAE,CAAC;QAC1B,IAAI,OAAO,CAAC,QAAQ,KAAK,QAAQ,EAAE,CAAC;YAClC,MAAM,IAAI,SAAS,CACf,+DAA+D,SAAS,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;QACzG,CAAC;QACD,OAAO,OAAO,CAAC,OAAO,CAAC;IACzB,CAAC;IAED,MAAM,OAAO,GAAG,iBAAiB,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE;QACjD,IAAI,CAAC;YACH,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YACtB,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAC3B,MAAM,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACjC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,8BAA8B,SAAS,CAAC,QAAQ,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;YACjF,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACrB,MAAM,KAAK,CAAC;QACd,CAAC;gBAAS,CAAC;YACT,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAC3B,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,EAAC,QAAQ,EAAE,OAAO,EAAC,CAAC,CAAC;IAC7C,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,SAAsB;IACtD,OAAO,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AAC/B,CAAC","sourcesContent":["// Copyright 2021 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as RenderCoordinator from '../render_coordinator/render_coordinator.js';\n\nexport type RenderCallback = () => (void|Promise<void>);\n\nconst requests = new Map<HTMLElement, {callback: RenderCallback, promise: Promise<void>}>();\nconst active = new Set<HTMLElement>();\n\nexport function scheduleRender(component: HTMLElement, callback: RenderCallback): Promise<void> {\n  const request = requests.get(component);\n  if (request !== undefined) {\n    if (request.callback !== callback) {\n      throw new TypeError(\n          `Incompatible callback arguments for scheduling rendering of ${component.nodeName.toLowerCase()}`);\n    }\n    return request.promise;\n  }\n\n  const promise = RenderCoordinator.write(async () => {\n    try {\n      active.add(component);\n      requests.delete(component);\n      await callback.call(component);\n    } catch (error) {\n      console.error(`ScheduledRender: rendering ${component.nodeName.toLowerCase()}:`);\n      console.error(error);\n      throw error;\n    } finally {\n      active.delete(component);\n    }\n  });\n\n  requests.set(component, {callback, promise});\n  return promise;\n}\n\nexport function isScheduledRender(component: HTMLElement): boolean {\n  return active.has(component);\n}\n"]}