{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/highlighting/HighlightElement.ts", "../../../../../../../front_end/ui/components/highlighting/HighlightManager.ts"],
  "sourcesContent": ["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TextUtils from '../../../models/text_utils/text_utils.js';\n\nimport {HighlightManager} from './HighlightManager.js';\n\nexport class HighlightElement extends HTMLElement {\n  static readonly observedAttributes = ['ranges', 'current-range'];\n  #ranges: TextUtils.TextRange.SourceRange[] = [];\n  #currentRange: TextUtils.TextRange.SourceRange|undefined;\n\n  attributeChangedCallback(name: string, oldValue: string|null, newValue: string|null): void {\n    if (oldValue === newValue) {\n      return;\n    }\n    switch (name) {\n      case 'ranges':\n        this.#ranges = parseRanges(newValue);\n        break;\n      case 'current-range':\n        this.#currentRange = parseRanges(newValue)[0];\n        break;\n    }\n    HighlightManager.instance().set(this, this.#ranges, this.#currentRange);\n  }\n}\n\nfunction parseRanges(value: string|null): TextUtils.TextRange.SourceRange[] {\n  if (!value) {\n    return [];\n  }\n  const ranges = value.split(' ')\n                     .filter(rangeString => {\n                       const parts = rangeString.split(',');\n                       // A valid range string must have exactly two parts.\n                       if (parts.length !== 2) {\n                         return false;\n                       }\n                       // Both parts must be convertible to valid numbers.\n                       const num1 = Number(parts[0]);\n                       const num2 = Number(parts[1]);\n                       return !isNaN(num1) && !isNaN(num2);\n                     })\n                     .map(rangeString => {\n                       const parts = rangeString.split(',').map(part => Number(part));\n                       return new TextUtils.TextRange.SourceRange(parts[0], parts[1]);\n                     });\n  return sortAndMergeRanges(ranges);\n}\n\nfunction sortAndMergeRanges(ranges: TextUtils.TextRange.SourceRange[]): TextUtils.TextRange.SourceRange[] {\n  // Sort by start position.\n  ranges.sort((a, b) => a.offset - b.offset);\n\n  if (ranges.length === 0) {\n    return [];\n  }\n\n  // Merge overlapping ranges.\n  const merged = [ranges[0]];\n  for (let i = 1; i < ranges.length; i++) {\n    const last = merged[merged.length - 1];\n    const current = ranges[i];\n    if (current.offset <= last.offset + last.length) {\n      const newEnd = Math.max(last.offset + last.length, current.offset + current.length);\n      const newLength = newEnd - last.offset;\n      merged[merged.length - 1] = new TextUtils.TextRange.SourceRange(last.offset, newLength);\n    } else {\n      merged.push(current);\n    }\n  }\n  return merged;\n}\n\ncustomElements.define('devtools-highlight', HighlightElement);\n", "// Copyright 2023 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as TextUtils from '../../../models/text_utils/text_utils.js';\n\nexport class RangeWalker {\n  #offset = 0;\n  readonly #treeWalker: TreeWalker;\n  #eof: boolean;\n\n  constructor(readonly root: Node) {\n    const nodeFilter = {\n      acceptNode(node: Node): number {\n        if (['STYLE', 'SCRIPT'].includes(node.parentNode?.nodeName ?? '')) {\n          return NodeFilter.FILTER_REJECT;\n        }\n        return NodeFilter.FILTER_ACCEPT;\n      },\n    };\n    this.#treeWalker = document.createTreeWalker(root, NodeFilter.SHOW_TEXT, nodeFilter);\n    this.#eof = !this.#treeWalker.firstChild();\n  }\n\n  #next(): boolean {\n    this.#offset += this.#treeWalker.currentNode.textContent?.length ?? 0;\n    this.#eof = !this.#treeWalker.nextNode();\n    return !this.#eof;\n  }\n\n  #goToPosition(offset: number): Node|null {\n    if (offset < this.#offset || this.#eof) {\n      return null;\n    }\n    // `>` here implies that, except for the first range, start offsets are left-leaning, i.e., when the offset falls\n    // between two text nodes, the preceding one is returned. This doesn't matter for Range semantics, but isn't\n    // intuitive wrt. the usual understanding of intervals. Making start offsets right-leaning but end offsets\n    // left-leaning would incur an unwarranted amount of complexity.\n    while (offset > this.#offset + (this.#treeWalker.currentNode.textContent?.length ?? 0)) {\n      if (!this.#next()) {\n        return null;\n      }\n    }\n    return this.#treeWalker.currentNode;\n  }\n\n  nextRange(start: number, length: number): Range|null {\n    if (length <= 0 || this.#eof) {\n      return null;\n    }\n\n    const startNode = this.#goToPosition(start);\n    if (!startNode) {\n      return null;\n    }\n    const offsetInStartNode = start - this.#offset;\n    const endNode = this.#goToPosition(start + length);\n    if (!endNode) {\n      return null;\n    }\n    const offsetInEndNode = start + length - this.#offset;\n\n    const range = new Range();\n    range.setStart(startNode, offsetInStartNode);\n    range.setEnd(endNode, offsetInEndNode);\n    return range;\n  }\n\n  goToTextNode(node: Text): void {\n    while (this.#treeWalker.currentNode !== node) {\n      if (!this.#next()) {\n        return;\n      }\n    }\n  }\n\n  get offset(): number {\n    return this.#offset;\n  }\n}\n\nexport const HIGHLIGHT_REGISTRY = 'highlighted-search-result';\nexport const CURRENT_HIGHLIGHT_REGISTRY = 'current-search-result';\n\ninterface HighlightState {\n  activeRanges: Range[];\n  ranges: TextUtils.TextRange.SourceRange[];\n  currentRange: TextUtils.TextRange.SourceRange|undefined;\n}\n\nlet highlightManagerInstance: HighlightManager;\nexport class HighlightManager {\n  #highlights = new Highlight();\n  #currentHighlights = new Highlight();\n  #stateByNode = new WeakMap<Node, HighlightState>();\n\n  constructor() {\n    CSS.highlights.set(HIGHLIGHT_REGISTRY, this.#highlights);\n    CSS.highlights.set(CURRENT_HIGHLIGHT_REGISTRY, this.#currentHighlights);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  }|undefined = {forceNew: null}): HighlightManager {\n    const {forceNew} = opts;\n    if (!highlightManagerInstance || forceNew) {\n      highlightManagerInstance = new HighlightManager();\n    }\n\n    return highlightManagerInstance;\n  }\n\n  addHighlights(ranges: Range[]): void {\n    ranges.forEach(this.addHighlight.bind(this));\n  }\n\n  removeHighlights(ranges: Range[]): void {\n    ranges.forEach(this.removeHighlight.bind(this));\n  }\n\n  addCurrentHighlight(range: Range): void {\n    this.#currentHighlights.add(range);\n  }\n\n  addCurrentHighlights(ranges: Range[]): void {\n    ranges.forEach(this.addCurrentHighlight.bind(this));\n  }\n\n  addHighlight(range: Range): void {\n    this.#highlights.add(range);\n  }\n\n  removeHighlight(range: Range): void {\n    this.#highlights.delete(range);\n    this.#currentHighlights.delete(range);\n  }\n\n  highlightOrderedTextRanges(root: Node, sourceRanges: TextUtils.TextRange.SourceRange[], isCurrent = false): Range[] {\n    const rangeWalker = new RangeWalker(root);\n    const ranges = sourceRanges.map(range => rangeWalker.nextRange(range.offset, range.length))\n                       .filter((r): r is Range => r !== null && !r.collapsed);\n    if (isCurrent) {\n      this.addCurrentHighlights(ranges);\n    } else {\n      this.addHighlights(ranges);\n    }\n    return ranges;\n  }\n\n  #getOrCreateState(node: Node): HighlightState {\n    let state = this.#stateByNode.get(node);\n    if (!state) {\n      state = {\n        activeRanges: [],\n        ranges: [],\n        currentRange: undefined,\n      };\n      this.#stateByNode.set(node, state);\n    }\n    return state;\n  }\n\n  apply(node: Node): void {\n    const state = this.#getOrCreateState(node);\n    this.removeHighlights(state.activeRanges);\n    state.activeRanges = this.highlightOrderedTextRanges(node, state.ranges);\n    if (state.currentRange) {\n      state.activeRanges.push(...this.highlightOrderedTextRanges(node, [state.currentRange], /* isCurrent=*/ true));\n    }\n  }\n\n  set(element: Node, ranges: TextUtils.TextRange.SourceRange[],\n      currentRange: TextUtils.TextRange.SourceRange|undefined): void {\n    const state = this.#getOrCreateState(element);\n    state.ranges = ranges;\n    state.currentRange = currentRange;\n    this.apply(element);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
