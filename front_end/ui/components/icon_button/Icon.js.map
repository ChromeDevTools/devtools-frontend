{"version":3,"file":"Icon.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/icon_button/Icon.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable @devtools/no-imperative-dom-api */\n\nimport '../../../Images/Images.js';\n\nimport iconStyles from './icon.css.js';\n\n/**\n * @deprecated\n */\nexport interface IconWithName {\n  iconName: string;\n  color?: string;\n  width?: string;\n  height?: string;\n}\n\n/**\n * @deprecated\n */\nexport type IconData = IconWithName|{\n  iconPath: string,\n  color?: string,\n  width?: string,\n  height?: string,\n};\n\n/**\n * A simple icon component to display SVG icons from the `front_end/Images/src`\n * folder (via the `--image-file-<name>` CSS variables).\n *\n * Usage is simple:\n *\n * ```js\n * // Instantiate programmatically via the `create()` helper:\n * const icon = IconButton.Icon.create('bin');\n * const iconWithClassName = IconButton.Icon.create('bin', 'delete-icon');\n *\n * // Use within a template:\n * Lit.html`\n *   <devtools-icon name=\"bin\">\n *   </devtools-icon>\n * `;\n * ```\n *\n * The color for the icon defaults to `var(--icon-default)`, while the dimensions\n * default to 20px times 20px. You can change both color and size via CSS:\n *\n * ```css\n * devtools-icon.my-icon {\n *   color: red;\n *   width: 14px;\n *   height: 14px;\n * }\n * ```\n *\n * For `'triangle-up'`, `'triangle-down'`, `'triangle-left'`, and `'triangle-right'`\n * the default dimensions are 14px times 14px, and the default `vertical-align` is\n * `baseline` (instead of `sub`).\n *\n * @property name - The `\"name\"` attribute is reflected as property.\n * @property data - Deprecated way to set dimensions, color and name at once.\n * @attribute name - The basename of the icon file (not including the `.svg` suffix). For\n *              backwards compatibility we also support a full URL here, but that\n *              should not be used in newly written code.\n */\nexport class Icon extends HTMLElement {\n  static readonly observedAttributes = ['name'];\n\n  readonly #shadowRoot;\n  readonly #icon;\n\n  constructor() {\n    super();\n    this.role = 'presentation';\n    const style = document.createElement('style');\n    style.textContent = iconStyles;\n    this.#icon = document.createElement('span');\n    this.#shadowRoot = this.attachShadow({mode: 'open'});\n    this.#shadowRoot.append(style, this.#icon);\n  }\n\n  /**\n   * @deprecated use `name` and CSS instead.\n   */\n  get data(): IconData {\n    return {\n      color: this.style.color,\n      width: this.style.width,\n      height: this.style.height,\n      iconName: this.name ?? '',\n    };\n  }\n\n  /**\n   * @deprecated use `name` and CSS instead.\n   */\n  set data(data: IconData) {\n    const {color, width, height} = data;\n    if (color) {\n      this.style.color = color;\n    }\n    if (width) {\n      this.style.width = width;\n    }\n    if (height) {\n      this.style.height = height;\n    }\n    if ('iconName' in data && data.iconName) {\n      this.name = data.iconName;\n    } else if ('iconPath' in data && data.iconPath) {\n      this.name = data.iconPath;\n    } else {\n      throw new Error('Misconfigured `iconName` or `iconPath`.');\n    }\n  }\n\n  /**\n   * Yields the value of the `\"name\"` attribute of this `Icon` (`null` in case\n   * there's no `\"name\"` on this element).\n   */\n  get name(): string|null {\n    return this.getAttribute('name');\n  }\n\n  /**\n   * Changes the value of the `\"name\"` attribute of this `Icon`. If you pass\n   * `null` the `\"name\"` attribute will be removed from this element.\n   *\n   * @param name the new icon name or `null` to unset.\n   */\n  set name(name: string|null) {\n    if (name === null) {\n      this.removeAttribute('name');\n    } else {\n      this.setAttribute('name', name);\n    }\n  }\n\n  attributeChangedCallback(name: string, oldValue: string|null, newValue: string|null): void {\n    if (oldValue === newValue) {\n      return;\n    }\n    switch (name) {\n      case 'name': {\n        if (newValue === null) {\n          this.#icon.style.removeProperty('--icon-url');\n        } else {\n          const url = URL.canParse(newValue) ? `url(${newValue})` : `var(--image-file-${newValue})`;\n          this.#icon.style.setProperty('--icon-url', url);\n        }\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Helper function to programmatically create an `Icon` isntance with a given\n * `name` and an optional CSS `className`.\n *\n * @param name the name of the icon to use.\n * @param className optional CSS class name(s) to put onto the element.\n * @returns the newly created `Icon` instance.\n */\nexport const create = (name: string, className?: string): Icon => {\n  const icon = new Icon();\n  icon.name = name;\n  if (className !== undefined) {\n    icon.className = className;\n  }\n  return icon;\n};\n\ncustomElements.define('devtools-icon', Icon);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-icon': Icon;\n  }\n}\n"]}