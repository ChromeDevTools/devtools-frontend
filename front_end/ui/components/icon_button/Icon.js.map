{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/icon_button/Icon.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable @devtools/no-imperative-dom-api */\n\nimport '../../../Images/Images.js';\n\nimport iconStyles from './icon.css.js';\n\n/**\n * @deprecated\n */\nexport interface IconWithName {\n  iconName: string;\n  color?: string;\n  width?: string;\n  height?: string;\n}\n\n/**\n * @deprecated\n */\nexport type IconData = IconWithName|{\n  iconPath: string,\n  color?: string,\n  width?: string,\n  height?: string,\n};\n\n/**\n * A simple icon component to display SVG icons from the `front_end/Images/src`\n * folder (via the `--image-file-<name>` CSS variables).\n *\n * Usage is simple:\n *\n * ```js\n * // Instantiate programmatically via the `create()` helper:\n * const icon = IconButton.Icon.create('bin');\n * const iconWithClassName = IconButton.Icon.create('bin', 'delete-icon');\n *\n * // Use within a template:\n * Lit.html`\n *   <devtools-icon name=\"bin\">\n *   </devtools-icon>\n * `;\n * ```\n *\n * The color for the icon defaults to `var(--icon-default)`, while the dimensions\n * default to 20px times 20px. You can change both color and size via CSS:\n *\n * ```css\n * devtools-icon.my-icon {\n *   color: red;\n *   width: 14px;\n *   height: 14px;\n * }\n * ```\n *\n * For `'triangle-up'`, `'triangle-down'`, `'triangle-left'`, and `'triangle-right'`\n * the default dimensions are 14px times 14px, and the default `vertical-align` is\n * `baseline` (instead of `sub`).\n *\n * @property name - The `\"name\"` attribute is reflected as property.\n * @property data - Deprecated way to set dimensions, color and name at once.\n * @attribute name - The basename of the icon file (not including the `.svg` suffix). For\n *              backwards compatibility we also support a full URL here, but that\n *              should not be used in newly written code.\n */\nexport class Icon extends HTMLElement {\n  static readonly observedAttributes = ['name'];\n\n  readonly #shadowRoot;\n  readonly #icon;\n\n  constructor() {\n    super();\n    this.role = 'presentation';\n    const style = document.createElement('style');\n    style.textContent = iconStyles;\n    this.#icon = document.createElement('span');\n    this.#shadowRoot = this.attachShadow({mode: 'open'});\n    this.#shadowRoot.append(style, this.#icon);\n  }\n\n  /**\n   * @deprecated use `name` and CSS instead.\n   */\n  get data(): IconData {\n    return {\n      color: this.style.color,\n      width: this.style.width,\n      height: this.style.height,\n      iconName: this.name ?? '',\n    };\n  }\n\n  /**\n   * @deprecated use `name` and CSS instead.\n   */\n  set data(data: IconData) {\n    const {color, width, height} = data;\n    if (color) {\n      this.style.color = color;\n    }\n    if (width) {\n      this.style.width = width;\n    }\n    if (height) {\n      this.style.height = height;\n    }\n    if ('iconName' in data && data.iconName) {\n      this.name = data.iconName;\n    } else if ('iconPath' in data && data.iconPath) {\n      this.name = data.iconPath;\n    } else {\n      throw new Error('Misconfigured `iconName` or `iconPath`.');\n    }\n  }\n\n  /**\n   * Yields the value of the `\"name\"` attribute of this `Icon` (`null` in case\n   * there's no `\"name\"` on this element).\n   */\n  get name(): string|null {\n    return this.getAttribute('name');\n  }\n\n  /**\n   * Changes the value of the `\"name\"` attribute of this `Icon`. If you pass\n   * `null` the `\"name\"` attribute will be removed from this element.\n   *\n   * @param name the new icon name or `null` to unset.\n   */\n  set name(name: string|null) {\n    if (name === null) {\n      this.removeAttribute('name');\n    } else {\n      this.setAttribute('name', name);\n    }\n  }\n\n  attributeChangedCallback(name: string, oldValue: string|null, newValue: string|null): void {\n    if (oldValue === newValue) {\n      return;\n    }\n    switch (name) {\n      case 'name': {\n        if (newValue === null) {\n          this.#icon.style.removeProperty('--icon-url');\n        } else {\n          const url = URL.canParse(newValue) ? `url(${newValue})` : `var(--image-file-${newValue})`;\n          this.#icon.style.setProperty('--icon-url', url);\n        }\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Helper function to programmatically create an `Icon` isntance with a given\n * `name` and an optional CSS `className`.\n *\n * @param name the name of the icon to use.\n * @param className optional CSS class name(s) to put onto the element.\n * @returns the newly created `Icon` instance.\n */\nexport const create = (name: string, className?: string): Icon => {\n  const icon = new Icon();\n  icon.name = name;\n  if (className !== undefined) {\n    icon.className = className;\n  }\n  return icon;\n};\n\ncustomElements.define('devtools-icon', Icon);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-icon': Icon;\n  }\n}\n"],
  "mappings": ";AAKA,OAAO;AAEP,OAAO,gBAAgB;AA6DhB,aAAM,aAAa,YAAY;AAAA,EACpC,OAAgB,qBAAqB,CAAC,MAAM;AAAA,EAEnC;AAAA,EACA;AAAA,EAET,cAAc;AACZ,UAAM;AACN,SAAK,OAAO;AACZ,UAAM,QAAQ,SAAS,cAAc,OAAO;AAC5C,UAAM,cAAc;AACpB,SAAK,QAAQ,SAAS,cAAc,MAAM;AAC1C,SAAK,cAAc,KAAK,aAAa,EAAC,MAAM,OAAM,CAAC;AACnD,SAAK,YAAY,OAAO,OAAO,KAAK,KAAK;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,OAAiB;AACnB,WAAO;AAAA,MACL,OAAO,KAAK,MAAM;AAAA,MAClB,OAAO,KAAK,MAAM;AAAA,MAClB,QAAQ,KAAK,MAAM;AAAA,MACnB,UAAU,KAAK,QAAQ;AAAA,IACzB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,KAAK,MAAgB;AACvB,UAAM,EAAC,OAAO,OAAO,OAAM,IAAI;AAC/B,QAAI,OAAO;AACT,WAAK,MAAM,QAAQ;AAAA,IACrB;AACA,QAAI,OAAO;AACT,WAAK,MAAM,QAAQ;AAAA,IACrB;AACA,QAAI,QAAQ;AACV,WAAK,MAAM,SAAS;AAAA,IACtB;AACA,QAAI,cAAc,QAAQ,KAAK,UAAU;AACvC,WAAK,OAAO,KAAK;AAAA,IACnB,WAAW,cAAc,QAAQ,KAAK,UAAU;AAC9C,WAAK,OAAO,KAAK;AAAA,IACnB,OAAO;AACL,YAAM,IAAI,MAAM,yCAAyC;AAAA,IAC3D;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,OAAoB;AACtB,WAAO,KAAK,aAAa,MAAM;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,KAAK,MAAmB;AAC1B,QAAI,SAAS,MAAM;AACjB,WAAK,gBAAgB,MAAM;AAAA,IAC7B,OAAO;AACL,WAAK,aAAa,QAAQ,IAAI;AAAA,IAChC;AAAA,EACF;AAAA,EAEA,yBAAyB,MAAc,UAAuB,UAA6B;AACzF,QAAI,aAAa,UAAU;AACzB;AAAA,IACF;AACA,YAAQ,MAAM;AAAA,MACZ,KAAK,QAAQ;AACX,YAAI,aAAa,MAAM;AACrB,eAAK,MAAM,MAAM,eAAe,YAAY;AAAA,QAC9C,OAAO;AACL,gBAAM,MAAM,IAAI,SAAS,QAAQ,IAAI,OAAO,QAAQ,MAAM,oBAAoB,QAAQ;AACtF,eAAK,MAAM,MAAM,YAAY,cAAc,GAAG;AAAA,QAChD;AACA;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AAUO,aAAM,SAAS,CAAC,MAAc,cAA6B;AAChE,QAAM,OAAO,IAAI,KAAK;AACtB,OAAK,OAAO;AACZ,MAAI,cAAc,QAAW;AAC3B,SAAK,YAAY;AAAA,EACnB;AACA,SAAO;AACT;AAEA,eAAe,OAAO,iBAAiB,IAAI;",
  "names": []
}
