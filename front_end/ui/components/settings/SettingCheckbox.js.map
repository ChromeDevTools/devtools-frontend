{"version":3,"file":"SettingCheckbox.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/settings/SettingCheckbox.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable @devtools/no-lit-render-outside-of-view */\n\nimport './SettingDeprecationWarning.js';\n\nimport type * as Common from '../../../core/common/common.js';\nimport * as Host from '../../../core/host/host.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Lit from '../../lit/lit.js';\nimport * as VisualLogging from '../../visual_logging/visual_logging.js';\nimport * as Buttons from '../buttons/buttons.js';\nimport * as Input from '../input/input.js';\n\nimport settingCheckboxStyles from './settingCheckbox.css.js';\n\nconst {html, Directives: {ifDefined}} = Lit;\n\nconst UIStrings = {\n  /**\n   * @description Text that is usually a hyperlink to more documentation\n   */\n  learnMore: 'Learn more',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('ui/components/settings/SettingCheckbox.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface SettingCheckboxData {\n  setting: Common.Settings.Setting<boolean>;\n  textOverride?: string;\n}\n\n/**\n * A simple checkbox that is backed by a boolean setting.\n */\nexport class SettingCheckbox extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  #setting?: Common.Settings.Setting<boolean>;\n  #changeListenerDescriptor?: Common.EventTarget.EventDescriptor;\n  #textOverride?: string;\n\n  set data(data: SettingCheckboxData) {\n    if (this.#changeListenerDescriptor && this.#setting) {\n      this.#setting.removeChangeListener(this.#changeListenerDescriptor.listener);\n    }\n\n    this.#setting = data.setting;\n    this.#textOverride = data.textOverride;\n\n    this.#changeListenerDescriptor = this.#setting.addChangeListener(() => {\n      this.#render();\n    });\n    this.#render();\n  }\n\n  icon(): Lit.TemplateResult|undefined {\n    if (!this.#setting) {\n      return undefined;\n    }\n\n    if (this.#setting.deprecation) {\n      return html`<devtools-setting-deprecation-warning .data=${\n          this.#setting.deprecation}></devtools-setting-deprecation-warning>`;\n    }\n\n    const learnMore = this.#setting.learnMore();\n    if (learnMore?.url) {\n      const url = learnMore.url;\n      const data: Buttons.Button.ButtonData = {\n        iconName: 'help',\n        variant: Buttons.Button.Variant.ICON,\n        size: Buttons.Button.Size.SMALL,\n        jslogContext: `${this.#setting.name}-documentation`,\n        title: i18nString(UIStrings.learnMore),\n      };\n      const handleClick = (event: MouseEvent): void => {\n        Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(url);\n        event.consume();\n      };\n      return html`<devtools-button\n                    class=learn-more\n                    @click=${handleClick}\n                    .data=${data}></devtools-button>`;\n    }\n\n    return undefined;\n  }\n\n  get checked(): boolean {\n    if (!this.#setting || this.#setting.disabledReasons().length > 0) {\n      return false;\n    }\n\n    return this.#setting.get();\n  }\n\n  #render(): void {\n    if (!this.#setting) {\n      throw new Error('No \"Setting\" object provided for rendering');\n    }\n\n    const icon = this.icon();\n    const title = `${this.#setting.learnMore() ? this.#setting.learnMore()?.tooltip() : ''}`;\n    const disabledReasons = this.#setting.disabledReasons();\n    const reason = disabledReasons.length ?\n        html`\n      <devtools-button class=\"disabled-reason\" .iconName=${'info'} .variant=${Buttons.Button.Variant.ICON} .size=${\n            Buttons.Button.Size.SMALL} title=${ifDefined(disabledReasons.join('\\n'))} @click=${\n            onclick}></devtools-button>\n    ` :\n        Lit.nothing;\n    Lit.render(\n        html`\n      <style>${Input.checkboxStyles}</style>\n      <style>${settingCheckboxStyles}</style>\n      <p>\n        <label title=${title}>\n          <input\n            type=\"checkbox\"\n            .checked=${this.checked}\n            ?disabled=${this.#setting.disabled()}\n            @change=${this.#checkboxChanged}\n            jslog=${VisualLogging.toggle().track({click: true}).context(this.#setting.name)}\n            aria-label=${this.#setting.title()}\n          />\n          ${this.#textOverride || this.#setting.title()}${reason}\n        </label>\n        ${icon}\n      </p>`,\n        this.#shadow, {host: this});\n  }\n\n  #checkboxChanged(e: Event): void {\n    this.#setting?.set((e.target as HTMLInputElement).checked);\n    this.dispatchEvent(new CustomEvent('change', {\n      bubbles: true,\n      composed: false,\n    }));\n  }\n}\n\ncustomElements.define('setting-checkbox', SettingCheckbox);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'setting-checkbox': SettingCheckbox;\n  }\n}\n"]}