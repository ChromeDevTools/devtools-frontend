{"version":3,"file":"ActionRegistration.js","sourceRoot":"","sources":["../../../../../../front_end/ui/legacy/ActionRegistration.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AACtD,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,QAAQ,MAAM,iCAAiC,CAAC;AAC5D,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAEhD,OAAO,EAAC,OAAO,EAAC,MAAM,cAAc,CAAC;AAErC,MAAM,SAAS,GAAG;IAChB;;OAEG;IACH,QAAQ,EAAE,UAAU;IACpB;;OAEG;IACH,UAAU,EAAE,YAAY;IACxB;;OAEG;IACH,OAAO,EAAE,SAAS;IAClB;;OAEG;IACH,MAAM,EAAE,QAAQ;IAChB;;OAEG;IACH,mBAAmB,EAAE,qBAAqB;IAC1C;;OAEG;IACH,OAAO,EAAE,SAAS;IAClB;;OAEG;IACH,WAAW,EAAE,aAAa;IAC1B;;OAEG;IACH,MAAM,EAAE,QAAQ;IAChB;;OAEG;IACH,IAAI,EAAE,MAAM;IACZ;;OAEG;IACH,MAAM,EAAE,QAAQ;IAChB;;OAEG;IACH,UAAU,EAAE,YAAY;IACxB;;OAEG;IACH,MAAM,EAAE,QAAQ;IAChB;;OAEG;IACH,MAAM,EAAE,QAAQ;IAChB;;OAEG;IACH,SAAS,EAAE,WAAW;IACtB;;OAEG;IACH,mBAAmB,EAAE,qBAAqB;IAC1C;;OAEG;IACH,QAAQ,EAAE,UAAU;IACpB;;OAEG;IACH,QAAQ,EAAE,UAAU;IACpB;;OAEG;IACH,OAAO,EAAE,SAAS;IAClB;;OAEG;IACH,SAAS,EAAE,WAAW;IACtB;;OAEG;IACH,QAAQ,EAAE,UAAU;IACpB;;OAEG;IACH,OAAO,EAAE,SAAS;CACV,CAAC;AACX,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,iCAAiC,EAAE,SAAS,CAAC,CAAC;AACvF,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAMtE,MAAM,OAAO,MAAO,SAAQ,MAAM,CAAC,aAAa,CAAC,aAAyB;IACxE,QAAQ,GAAG,IAAI,CAAC;IAChB,QAAQ,GAAG,KAAK,CAAC;IACT,kBAAkB,CAAqB;IAC/C,YAAY,kBAAsC;QAChD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;IAC/C,CAAC;IAED,EAAE;QACA,OAAO,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,IAA8B;QAC1C,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,CAAC;YAChD,OAAO,KAAK,CAAC;QACf,CAAC;QACD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,CAAC;QACpE,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QAC3B,OAAO,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;IACnE,CAAC;IAED,IAAI;QACF,OAAO,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC;IAC3C,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC;IAClD,CAAC;IAED,kBAAkB;QAChB,OAAO,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;IAC7D,CAAC;IAED,UAAU,CAAC,OAAgB;QACzB,IAAI,IAAI,CAAC,QAAQ,KAAK,OAAO,EAAE,CAAC;YAC9B,OAAO;QACT,CAAC;QAED,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,wBAAwB,iCAAiB,OAAO,CAAC,CAAC;IACzD,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC;IAC1C,CAAC;IAED,IAAI;QACF,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC;YACjC,yGAAyG;YACzG,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnE,CAAC;IACH,CAAC;IAED,UAAU;QACR,OAAO,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;IACrD,CAAC;IAED,KAAK;QACH,IAAI,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QACzG,MAAM,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC;QAChD,IAAI,OAAO,EAAE,CAAC;YACZ,sFAAsF;YACtF,6FAA6F;YAC7F,6FAA6F;YAC7F,yEAAyE;YAEzE,KAAK,MAAM,IAAI,IAAI,OAAO,EAAE,CAAC;gBAC3B,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC;oBACjC,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;gBACvB,CAAC;YACH,CAAC;QACH,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,UAAU,CAAC,OAAgB;QACzB,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,+CAA+C,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;QAC9F,IAAI,IAAI,CAAC,QAAQ,KAAK,OAAO,EAAE,CAAC;YAC9B,OAAO;QACT,CAAC;QAED,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,wBAAwB,iCAAiB,OAAO,CAAC,CAAC;IACzD,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC;IACzC,CAAC;IAED,YAAY;QACV,IAAI,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;YACzC,OAAO,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;QAChD,CAAC;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,cAAc;QACZ,OAAO,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;IAC7D,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC;IAC1C,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC;IAC5C,CAAC;IAED,kBAAkB;QAChB,OAAO,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC;IACpD,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC;IACzC,CAAC;IAED,SAAS;QACP,OAAO,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC;IAC3C,CAAC;IAED,KAAK;QACH,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;IACvC,CAAC;CACF;AAED,MAAM,iBAAiB,GAAG,IAAI,GAAG,EAAkB,CAAC;AAEpD,MAAM,UAAU,uBAAuB,CAAC,YAAgC;IACtE,MAAM,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;IACvC,IAAI,iBAAiB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;QACpC,MAAM,IAAI,KAAK,CAAC,wBAAwB,QAAQ,GAAG,CAAC,CAAC;IACvD,CAAC;IACD,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC5D,MAAM,IAAI,KAAK,CAAC,sBAAsB,QAAQ,GAAG,CAAC,CAAC;IACrD,CAAC;IACD,iBAAiB,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;AAC5D,CAAC;AAED,MAAM,UAAU,KAAK;IACnB,iBAAiB,CAAC,KAAK,EAAE,CAAC;AAC5B,CAAC;AAED,MAAM,UAAU,6BAA6B;IAC3C,OAAO,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC;SACxC,MAAM,CAAC,MAAM,CAAC,EAAE;QACf,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;QACrC,IAAI,CAAC;YACH,IAAI,WAAW,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC;gBACrE,OAAO,KAAK,CAAC;YACf,CAAC;QACH,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,IAAI,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,uBAAuB,CAAC,EAAE,CAAC;gBACpD,OAAO,KAAK,CAAC;YACf,CAAC;QACH,CAAC;QAED,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC;YAC9C,UAAU,EAAE,MAAM,CAAC,UAAU,EAAE;YAC/B,SAAS,EAAE,MAAM,CAAC,SAAS,EAAE;SAC9B,CAAC,CAAC;IACL,CAAC,CAAC;SACD,IAAI,CAAC,CAAC,WAAW,EAAE,YAAY,EAAE,EAAE;QAClC,MAAM,MAAM,GAAG,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACxC,MAAM,MAAM,GAAG,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACzC,OAAO,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC,CAAC,CAAC;AACT,CAAC;AAED,MAAM,UAAU,0BAA0B,CAAC,QAAgB;IACzD,OAAO,iBAAiB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAC5C,CAAC;AA6CD,MAAM,UAAU,0BAA0B,CAAC,QAAwB;IACjE,QAAQ,QAAQ,EAAE,CAAC;QACjB;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACxC;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAC1C;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACvC;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACtC;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;QACnD;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACvC;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAC3C;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACtC;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACpC;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACtC;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAC1C;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACtC;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACtC;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACzC;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;QACnD;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACxC;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACxC;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACvC;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACzC;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACxC;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACvC;YACE,OAAO,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;IACtC,CAAC;IACD,oFAAoF;IACpF,OAAO,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;AAC1C,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\n\nimport {Context} from './Context.js';\n\nconst UIStrings = {\n  /**\n   * @description Title of the keybind category 'Elements' in Settings' Shortcuts pannel.\n   */\n  elements: 'Elements',\n  /**\n   * @description Title of the keybind category 'Screenshot' in Settings' Shortcuts pannel.\n   */\n  screenshot: 'Screenshot',\n  /**\n   * @description Title of the keybind category 'Network' in Settings' Shortcuts pannel.\n   */\n  network: 'Network',\n  /**\n   * @description Title of the keybind category 'Memory' in Settings' Shortcuts pannel.\n   */\n  memory: 'Memory',\n  /**\n   * @description Title of the keybind category 'JavaScript Profiler' in Settings' Shortcuts pannel.\n   */\n  javascript_profiler: 'JavaScript Profiler',\n  /**\n   * @description Title of the keybind category 'Console' in Settings' Shortcuts pannel.\n   */\n  console: 'Console',\n  /**\n   * @description Title of the keybind category 'Performance' in Settings' Shortcuts pannel.\n   */\n  performance: 'Performance',\n  /**\n   * @description Title of the keybind category 'Mobile' in Settings' Shortcuts pannel.\n   */\n  mobile: 'Mobile',\n  /**\n   * @description Title of the keybind category 'Help' in Settings' Shortcuts pannel.\n   */\n  help: 'Help',\n  /**\n   * @description Title of the keybind category 'Layers' in Settings' Shortcuts pannel.\n   */\n  layers: 'Layers',\n  /**\n   * @description Title of the keybind category 'Navigation' in Settings' Shortcuts pannel.\n   */\n  navigation: 'Navigation',\n  /**\n   * @description Title of the keybind category 'Drawer' in Settings' Shortcuts pannel.\n   */\n  drawer: 'Drawer',\n  /**\n   * @description Title of the keybind category 'Global' in Settings' Shortcuts pannel.\n   */\n  global: 'Global',\n  /**\n   * @description Title of the keybind category 'Resources' in Settings' Shortcuts pannel.\n   */\n  resources: 'Resources',\n  /**\n   * @description Title of the keybind category 'Background Services' in Settings' Shortcuts pannel.\n   */\n  background_services: 'Background Services',\n  /**\n   * @description Title of the keybind category 'Settings' in Settings' Shortcuts pannel.\n   */\n  settings: 'Settings',\n  /**\n   * @description Title of the keybind category 'Debugger' in Settings' Shortcuts pannel.\n   */\n  debugger: 'Debugger',\n  /**\n   * @description Title of the keybind category 'Sources' in Settings' Shortcuts pannel.\n   */\n  sources: 'Sources',\n  /**\n   * @description Title of the keybind category 'Rendering' in Settings' Shortcuts pannel.\n   */\n  rendering: 'Rendering',\n  /**\n   * @description Title of the keybind category 'Recorder' in Settings' Shortcuts pannel.\n   */\n  recorder: 'Recorder',\n  /**\n   * @description Title of the keybind category 'Changes' in Settings' Shortcuts pannel.\n   */\n  changes: 'Changes',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/ActionRegistration.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface ActionDelegate {\n  handleAction(context: Context, actionId: string, opts?: Record<string, unknown>): boolean;\n}\n\nexport class Action extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  #enabled = true;\n  #toggled = false;\n  private actionRegistration: ActionRegistration;\n  constructor(actionRegistration: ActionRegistration) {\n    super();\n    this.actionRegistration = actionRegistration;\n  }\n\n  id(): string {\n    return this.actionRegistration.actionId;\n  }\n\n  async execute(opts?: Record<string, unknown>): Promise<boolean> {\n    if (!this.actionRegistration.loadActionDelegate) {\n      return false;\n    }\n    const delegate = await this.actionRegistration.loadActionDelegate();\n    const actionId = this.id();\n    return delegate.handleAction(Context.instance(), actionId, opts);\n  }\n\n  icon(): string|undefined {\n    return this.actionRegistration.iconClass;\n  }\n\n  toggledIcon(): string|undefined {\n    return this.actionRegistration.toggledIconClass;\n  }\n\n  toggleWithRedColor(): boolean {\n    return Boolean(this.actionRegistration.toggleWithRedColor);\n  }\n\n  setEnabled(enabled: boolean): void {\n    if (this.#enabled === enabled) {\n      return;\n    }\n\n    this.#enabled = enabled;\n    this.dispatchEventToListeners(Events.ENABLED, enabled);\n  }\n\n  enabled(): boolean {\n    return this.#enabled;\n  }\n\n  category(): ActionCategory {\n    return this.actionRegistration.category;\n  }\n\n  tags(): string|void {\n    if (this.actionRegistration.tags) {\n      // Get localized keys and separate by null character to prevent fuzzy matching from matching across them.\n      return this.actionRegistration.tags.map(tag => tag()).join('\\0');\n    }\n  }\n\n  toggleable(): boolean {\n    return Boolean(this.actionRegistration.toggleable);\n  }\n\n  title(): Common.UIString.LocalizedString {\n    let title = this.actionRegistration.title ? this.actionRegistration.title() : i18n.i18n.lockedString('');\n    const options = this.actionRegistration.options;\n    if (options) {\n      // Actions with an 'options' property don't have a title field. Instead, the displayed\n      // title is taken from the 'title' property of the option that is not active. Only one of the\n      // two options can be active at a given moment and the 'toggled' property of the action along\n      // with the 'value' of the options are used to determine which one it is.\n\n      for (const pair of options) {\n        if (pair.value !== this.#toggled) {\n          title = pair.title();\n        }\n      }\n    }\n    return title;\n  }\n\n  toggled(): boolean {\n    return this.#toggled;\n  }\n\n  setToggled(toggled: boolean): void {\n    console.assert(this.toggleable(), 'Shouldn\\'t be toggling an untoggleable action', this.id());\n    if (this.#toggled === toggled) {\n      return;\n    }\n\n    this.#toggled = toggled;\n    this.dispatchEventToListeners(Events.TOGGLED, toggled);\n  }\n\n  options(): undefined|ExtensionOption[] {\n    return this.actionRegistration.options;\n  }\n\n  contextTypes(): undefined|Array<Platform.Constructor.Constructor<unknown>> {\n    if (this.actionRegistration.contextTypes) {\n      return this.actionRegistration.contextTypes();\n    }\n    return undefined;\n  }\n\n  canInstantiate(): boolean {\n    return Boolean(this.actionRegistration.loadActionDelegate);\n  }\n\n  bindings(): Binding[]|undefined {\n    return this.actionRegistration.bindings;\n  }\n\n  experiment(): string|undefined {\n    return this.actionRegistration.experiment;\n  }\n\n  featurePromotionId(): string|undefined {\n    return this.actionRegistration.featurePromotionId;\n  }\n\n  setting(): string|undefined {\n    return this.actionRegistration.setting;\n  }\n\n  condition(): Root.Runtime.Condition|undefined {\n    return this.actionRegistration.condition;\n  }\n\n  order(): number|undefined {\n    return this.actionRegistration.order;\n  }\n}\n\nconst registeredActions = new Map<string, Action>();\n\nexport function registerActionExtension(registration: ActionRegistration): void {\n  const actionId = registration.actionId;\n  if (registeredActions.has(actionId)) {\n    throw new Error(`Duplicate action ID '${actionId}'`);\n  }\n  if (!Platform.StringUtilities.isExtendedKebabCase(actionId)) {\n    throw new Error(`Invalid action ID '${actionId}'`);\n  }\n  registeredActions.set(actionId, new Action(registration));\n}\n\nexport function reset(): void {\n  registeredActions.clear();\n}\n\nexport function getRegisteredActionExtensions(): Action[] {\n  return Array.from(registeredActions.values())\n      .filter(action => {\n        const settingName = action.setting();\n        try {\n          if (settingName && !Common.Settings.moduleSetting(settingName).get()) {\n            return false;\n          }\n        } catch (err) {\n          if (err.message.startsWith('No setting registered')) {\n            return false;\n          }\n        }\n\n        return Root.Runtime.Runtime.isDescriptorEnabled({\n          experiment: action.experiment(),\n          condition: action.condition(),\n        });\n      })\n      .sort((firstAction, secondAction) => {\n        const order1 = firstAction.order() || 0;\n        const order2 = secondAction.order() || 0;\n        return order1 - order2;\n      });\n}\n\nexport function maybeRemoveActionExtension(actionId: string): boolean {\n  return registeredActions.delete(actionId);\n}\n\nexport const enum Platforms {\n  ALL = 'All platforms',\n  MAC = 'mac',\n  WINDOWS_LINUX = 'windows,linux',\n  ANDROID = 'Android',\n  WINDOWS = 'windows',\n}\n\nexport const enum Events {\n  ENABLED = 'Enabled',\n  TOGGLED = 'Toggled',\n}\n\nexport interface EventTypes {\n  [Events.ENABLED]: boolean;\n  [Events.TOGGLED]: boolean;\n}\n\nexport const enum ActionCategory {\n  NONE = '',  // `NONE` must be a falsy value. Legacy code uses if-checks for the category.\n  ELEMENTS = 'ELEMENTS',\n  SCREENSHOT = 'SCREENSHOT',\n  NETWORK = 'NETWORK',\n  MEMORY = 'MEMORY',\n  JAVASCRIPT_PROFILER = 'JAVASCRIPT_PROFILER',\n  CONSOLE = 'CONSOLE',\n  PERFORMANCE = 'PERFORMANCE',\n  MOBILE = 'MOBILE',\n  HELP = 'HELP',\n  LAYERS = 'LAYERS',\n  NAVIGATION = 'NAVIGATION',\n  DRAWER = 'DRAWER',\n  GLOBAL = 'GLOBAL',\n  RESOURCES = 'RESOURCES',\n  BACKGROUND_SERVICES = 'BACKGROUND_SERVICES',\n  SETTINGS = 'SETTINGS',\n  DEBUGGER = 'DEBUGGER',\n  SOURCES = 'SOURCES',\n  RENDERING = 'RENDERING',\n  RECORDER = 'RECORDER',\n  CHANGES = 'CHANGES',\n}\n\nexport function getLocalizedActionCategory(category: ActionCategory): Platform.UIString.LocalizedString {\n  switch (category) {\n    case ActionCategory.ELEMENTS:\n      return i18nString(UIStrings.elements);\n    case ActionCategory.SCREENSHOT:\n      return i18nString(UIStrings.screenshot);\n    case ActionCategory.NETWORK:\n      return i18nString(UIStrings.network);\n    case ActionCategory.MEMORY:\n      return i18nString(UIStrings.memory);\n    case ActionCategory.JAVASCRIPT_PROFILER:\n      return i18nString(UIStrings.javascript_profiler);\n    case ActionCategory.CONSOLE:\n      return i18nString(UIStrings.console);\n    case ActionCategory.PERFORMANCE:\n      return i18nString(UIStrings.performance);\n    case ActionCategory.MOBILE:\n      return i18nString(UIStrings.mobile);\n    case ActionCategory.HELP:\n      return i18nString(UIStrings.help);\n    case ActionCategory.LAYERS:\n      return i18nString(UIStrings.layers);\n    case ActionCategory.NAVIGATION:\n      return i18nString(UIStrings.navigation);\n    case ActionCategory.DRAWER:\n      return i18nString(UIStrings.drawer);\n    case ActionCategory.GLOBAL:\n      return i18nString(UIStrings.global);\n    case ActionCategory.RESOURCES:\n      return i18nString(UIStrings.resources);\n    case ActionCategory.BACKGROUND_SERVICES:\n      return i18nString(UIStrings.background_services);\n    case ActionCategory.SETTINGS:\n      return i18nString(UIStrings.settings);\n    case ActionCategory.DEBUGGER:\n      return i18nString(UIStrings.debugger);\n    case ActionCategory.SOURCES:\n      return i18nString(UIStrings.sources);\n    case ActionCategory.RENDERING:\n      return i18nString(UIStrings.rendering);\n    case ActionCategory.RECORDER:\n      return i18nString(UIStrings.recorder);\n    case ActionCategory.CHANGES:\n      return i18nString(UIStrings.changes);\n    case ActionCategory.NONE:\n      return i18n.i18n.lockedString('');\n  }\n  // Not all categories are cleanly typed yet. Return the category as-is in this case.\n  return i18n.i18n.lockedString(category);\n}\n\nexport const enum IconClass {\n  LARGEICON_NODE_SEARCH = 'select-element',\n  START_RECORDING = 'record-start',\n  STOP_RECORDING = 'record-stop',\n  REFRESH = 'refresh',\n  CLEAR = 'clear',\n  EYE = 'eye',\n  LARGEICON_PHONE = 'devices',\n  PLAY = 'play',\n  DOWNLOAD = 'download',\n  LARGEICON_PAUSE = 'pause',\n  LARGEICON_RESUME = 'resume',\n  MOP = 'mop',\n  BIN = 'bin',\n  LARGEICON_SETTINGS_GEAR = 'gear',\n  LARGEICON_STEP_OVER = 'step-over',\n  LARGE_ICON_STEP_INTO = 'step-into',\n  LARGE_ICON_STEP = 'step',\n  LARGE_ICON_STEP_OUT = 'step-out',\n  BREAKPOINT_CROSSED_FILLED = 'breakpoint-crossed-filled',\n  BREAKPOINT_CROSSED = 'breakpoint-crossed',\n  PLUS = 'plus',\n  UNDO = 'undo',\n  COPY = 'copy',\n  IMPORT = 'import',\n}\n\nexport const enum KeybindSet {\n  DEVTOOLS_DEFAULT = 'devToolsDefault',\n  VS_CODE = 'vsCode',\n}\n\nexport interface ExtensionOption {\n  value: boolean;\n  title: () => Platform.UIString.LocalizedString;\n  text?: string;\n}\n\nexport interface Binding {\n  platform?: Platforms;\n  shortcut: string;\n  keybindSets?: KeybindSet[];\n}\n\n/**\n * The representation of an action extension to be registered.\n */\nexport interface ActionRegistration {\n  /**\n   * The unique id of an Action extension.\n   */\n  actionId: string;\n  /**\n   * The category with which the action is displayed in the UI.\n   */\n  category: ActionCategory;\n  /**\n   * The title with which the action is displayed in the UI.\n   */\n  title?: () => Platform.UIString.LocalizedString;\n  /**\n   * The type of the icon used to trigger the action.\n   */\n  iconClass?: IconClass;\n  /**\n   * Whether the style of the icon toggles on interaction.\n   */\n  toggledIconClass?: IconClass;\n  /**\n   * Whether the class 'toolbar-toggle-with-red-color' is toggled on the icon on interaction.\n   */\n  toggleWithRedColor?: boolean;\n  /**\n   * Words used to find an action in the Command Menu.\n   */\n  tags?: Array<() => Platform.UIString.LocalizedString>;\n  /**\n   * Whether the action is toggleable.\n   */\n  toggleable?: boolean;\n  /**\n   * Loads the class that handles the action when it is triggered. The common pattern for implementing\n   * this function relies on having the module that contains the action’s handler lazily loaded. For example:\n   * ```js\n   *  let loadedElementsModule;\n   *\n   *  async function loadElementsModule() {\n   *\n   *    if (!loadedElementsModule) {\n   *      loadedElementsModule = await import('./elements.js');\n   *    }\n   *    return loadedElementsModule;\n   *  }\n   *  UI.ActionRegistration.registerActionExtension({\n   *   <...>\n   *    async loadActionDelegate() {\n   *      const Elements = await loadElementsModule();\n   *      return new Elements.ElementsPanel.ElementsActionDelegate();\n   *    },\n   *   <...>\n   *  });\n   * ```\n   */\n  loadActionDelegate?: () => Promise<ActionDelegate>;\n  /**\n   * Returns the classes that represent the 'context flavors' under which the action is available for triggering.\n   * The context of the application is described in 'flavors' that are usually views added and removed to the context\n   * as the user interacts with the application (e.g when the user moves across views). (See UI.Context)\n   * When the action is supposed to be available globally, that is, it does not depend on the application to have\n   * a specific context, the value of this property should be undefined.\n   *\n   * Because the method is synchronous, context types should be already loaded when the method is invoked.\n   * In the case that an action has context types it depends on, and they haven't been loaded yet, the function should\n   * return an empty array. Once the context types have been loaded, the function should return an array with all types\n   * that it depends on.\n   *\n   * The common pattern for implementing this function is relying on having the module with the corresponding context\n   * types loaded and stored when the related 'view' extension is loaded asynchronously. As an example:\n   *\n   * ```js\n   * let loadedElementsModule;\n   *\n   * async function loadElementsModule() {\n   *\n   *   if (!loadedElementsModule) {\n   *     loadedElementsModule = await import('./elements.js');\n   *   }\n   *   return loadedElementsModule;\n   * }\n   * function maybeRetrieveContextTypes(getClassCallBack: (elementsModule: typeof Elements) => unknown[]): unknown[] {\n   *\n   *   if (loadedElementsModule === undefined) {\n   *     return [];\n   *   }\n   *   return getClassCallBack(loadedElementsModule);\n   * }\n   * UI.ActionRegistration.registerActionExtension({\n   *\n   *   contextTypes() {\n   *     return maybeRetrieveContextTypes(Elements => [Elements.ElementsPanel.ElementsPanel]);\n   *   }\n   *   <...>\n   * });\n   * ```\n   */\n  contextTypes?: () => Array<Platform.Constructor.Constructor<unknown>>;\n  /**\n   * The descriptions for each of the two states in which a toggleable action can be.\n   */\n  options?: ExtensionOption[];\n  /**\n   * The description of the variables (e.g. platform, keys and keybind sets) under which a keyboard shortcut triggers the action.\n   * If a keybind must be available on all platforms, its 'platform' property must be undefined. The same applies to keybind sets\n   * and the keybindSet property.\n   *\n   * Keybinds also depend on the context types of their corresponding action, and so they will only be available when such context types\n   * are flavors of the current appliaction context.\n   */\n  bindings?: Binding[];\n  /**\n   * The name of the experiment an action is associated with. Enabling and disabling the declared\n   * experiment will enable and disable the action respectively.\n   */\n  experiment?: Root.Runtime.ExperimentName;\n  /**\n   * Whether an action needs to be promoted. A new badge is shown next to the menu items then.\n   */\n  featurePromotionId?: string;\n  /**\n   * The name of the setting an action is associated with. Enabling and\n   * disabling the declared setting will enable and disable the action\n   * respectively. Note that changing the setting requires a reload for it to\n   * apply to action registration.\n   */\n  setting?: string;\n  /**\n   * A condition is a function that will make the action available if it\n   * returns true, and not available, otherwise. Make sure that objects you\n   * access from inside the condition function are ready at the time when the\n   * setting conditions are checked.\n   */\n  condition?: Root.Runtime.Condition;\n  /**\n   * Used to sort actions when all registered actions are queried.\n   */\n  order?: number;\n}\n"]}