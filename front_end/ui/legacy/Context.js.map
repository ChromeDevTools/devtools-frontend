{"version":3,"file":"Context.js","sourceRoot":"","sources":["../../../../../../front_end/ui/legacy/Context.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\n\nimport type {ContextFlavorListener} from './ContextFlavorListener.js';\n\nlet contextInstance: Context|undefined;\n\nexport class Context {\n  readonly #flavors = new Map<Platform.Constructor.Constructor<unknown>, object|null>();\n  readonly #eventDispatchers =\n      new Map<Platform.Constructor.Constructor<unknown>, Common.ObjectWrapper.ObjectWrapper<EventTypes>>();\n\n  private constructor() {\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): Context {\n    const {forceNew} = opts;\n    if (!contextInstance || forceNew) {\n      contextInstance = new Context();\n    }\n\n    return contextInstance;\n  }\n\n  static removeInstance(): void {\n    contextInstance = undefined;\n  }\n\n  setFlavor<T extends Object>(flavorType: Platform.Constructor.Constructor<T>, flavorValue: T|null): void {\n    const value = this.#flavors.get(flavorType) || null;\n    if (value === flavorValue) {\n      return;\n    }\n    if (flavorValue) {\n      this.#flavors.set(flavorType, flavorValue);\n    } else {\n      this.#flavors.delete(flavorType);\n    }\n\n    this.#dispatchFlavorChange(flavorType, flavorValue);\n  }\n\n  #dispatchFlavorChange<T extends Object>(flavorType: Platform.Constructor.Constructor<T>, flavorValue: T|null): void {\n    for (const extension of getRegisteredListeners()) {\n      if (extension.contextTypes().includes(flavorType)) {\n        void extension.loadListener().then(instance => instance.flavorChanged(flavorValue));\n      }\n    }\n    const dispatcher = this.#eventDispatchers.get(flavorType);\n    if (!dispatcher) {\n      return;\n    }\n    dispatcher.dispatchEventToListeners(Events.FLAVOR_CHANGED, flavorValue);\n  }\n\n  addFlavorChangeListener<T>(\n      flavorType: Platform.Constructor.Constructor<T>, listener: (arg0: Common.EventTarget.EventTargetEvent<T>) => void,\n      thisObject?: Object): void {\n    let dispatcher = this.#eventDispatchers.get(flavorType);\n    if (!dispatcher) {\n      dispatcher = new Common.ObjectWrapper.ObjectWrapper<EventTypes>();\n      this.#eventDispatchers.set(flavorType, dispatcher);\n    }\n    dispatcher.addEventListener(\n        Events.FLAVOR_CHANGED,\n        listener as Common.EventTarget.EventListener<EventTypes, Events.FLAVOR_CHANGED>,\n        thisObject,\n    );\n  }\n\n  removeFlavorChangeListener<T>(\n      flavorType: Platform.Constructor.Constructor<T>,\n      listener: (arg0: Common.EventTarget.EventTargetEvent<T>) => void,\n      thisObject?: Object,\n      ): void {\n    const dispatcher = this.#eventDispatchers.get(flavorType);\n    if (!dispatcher) {\n      return;\n    }\n    dispatcher.removeEventListener(\n        Events.FLAVOR_CHANGED,\n        listener as Common.EventTarget.EventListener<EventTypes, Events.FLAVOR_CHANGED>,\n        thisObject,\n    );\n    if (!dispatcher.hasEventListeners(Events.FLAVOR_CHANGED)) {\n      this.#eventDispatchers.delete(flavorType);\n    }\n  }\n\n  flavor<T>(flavorType: Platform.Constructor.Constructor<T>): T|null {\n    return (this.#flavors.get(flavorType) as T | null) || null;\n  }\n\n  flavors(): Set<Platform.Constructor.Constructor<unknown>> {\n    return new Set(this.#flavors.keys());\n  }\n}\n\nconst enum Events {\n  FLAVOR_CHANGED = 'FlavorChanged',\n}\n\nexport type EventListenerDirect = Common.EventTarget.EventListener<EventTypes, Events.FLAVOR_CHANGED>;\nexport interface EventTypes {\n  [Events.FLAVOR_CHANGED]: InstanceType<Platform.Constructor.Constructor<unknown>>;\n}\n\nconst registeredListeners: ContextFlavorListenerRegistration[] = [];\n\nexport function registerListener(registration: ContextFlavorListenerRegistration): void {\n  registeredListeners.push(registration);\n}\n\nfunction getRegisteredListeners(): ContextFlavorListenerRegistration[] {\n  return registeredListeners;\n}\nexport interface ContextFlavorListenerRegistration {\n  contextTypes: () => Array<Platform.Constructor.Constructor<unknown>>;\n  loadListener: () => Promise<ContextFlavorListener>;\n}\n"]}