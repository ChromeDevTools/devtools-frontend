{"version":3,"file":"ForwardedInputEventHandler.js","sourceRoot":"","sources":["../../../../../../front_end/ui/legacy/ForwardedInputEventHandler.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAEhD,OAAO,EAAC,OAAO,EAAC,MAAM,cAAc,CAAC;AACrC,OAAO,EAAC,gBAAgB,EAAC,MAAM,uBAAuB,CAAC;AACvD,OAAO,EAAC,iBAAiB,EAAE,gBAAgB,EAAC,MAAM,uBAAuB,CAAC;AAE1E;;;IAGI;AACJ,MAAM,OAAO,0BAA0B;IACrC;QACE,IAAI,CAAC,qBAAqB,CAAC,6BAA6B,CAAC,MAAM,CAAC,gBAAgB,CAC5E,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,iBAAiB,EAAE,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;IAC9F,CAAC;IAEO,KAAK,CAAC,mBAAmB,CAC7B,KAAgG;QAClG,MAAM,EAAC,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,SAAS,EAAC,GAAG,KAAK,CAAC,IAAI,CAAC;QACnD,IAAI,IAAI,KAAK,SAAS,EAAE,CAAC;YACvB,OAAO;QACT,CAAC;QAED,MAAM,OAAO,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;QACnC,MAAM,gBAAgB,GAAG,gBAAgB,CAAC,QAAQ,EAAE,CAAC;QAErD,OAAO,CAAC,SAAS,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QACjE,MAAM,gBAAgB,CAAC,SAAS,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,EAAE,GAAG,CAAC,CAAC;QACpF,OAAO,CAAC,SAAS,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;IAC7C,CAAC;CACF;AAED,IAAI,0BAA0B,EAAE,CAAC","sourcesContent":["// Copyright 2014 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\n\nimport {Context} from './Context.js';\nimport {KeyboardShortcut} from './KeyboardShortcut.js';\nimport {ForwardedShortcut, ShortcutRegistry} from './ShortcutRegistry.js';\n\n/**\n * This handler only forwards the keystrokes if DevTools front-end is\n * not running in hosted mode.\n **/\nexport class ForwardedInputEventHandler {\n  constructor() {\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.KeyEventUnhandled, this.onKeyEventUnhandled, this);\n  }\n\n  private async onKeyEventUnhandled(\n      event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.KeyEventUnhandledEvent>): Promise<void> {\n    const {type, key, keyCode, modifiers} = event.data;\n    if (type !== 'keydown') {\n      return;\n    }\n\n    const context = Context.instance();\n    const shortcutRegistry = ShortcutRegistry.instance();\n\n    context.setFlavor(ForwardedShortcut, ForwardedShortcut.instance);\n    await shortcutRegistry.handleKey(KeyboardShortcut.makeKey(keyCode, modifiers), key);\n    context.setFlavor(ForwardedShortcut, null);\n  }\n}\n\nnew ForwardedInputEventHandler();\n"]}