{"version":3,"file":"RemoteDebuggingTerminatedScreen.js","sourceRoot":"","sources":["../../../../../../front_end/ui/legacy/RemoteDebuggingTerminatedScreen.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,OAAO,MAAM,wCAAwC,CAAC;AAClE,OAAO,EAAC,IAAI,EAAE,MAAM,EAAC,MAAM,qBAAqB,CAAC;AAEjD,OAAO,EAAC,MAAM,EAAC,MAAM,aAAa,CAAC;AAEnC,OAAO,qCAAqC,MAAM,0CAA0C,CAAC;AAC7F,OAAO,EAAC,IAAI,EAAC,MAAM,aAAa,CAAC;AAEjC,MAAM,SAAS,GAAG;IAChB;;;;OAIG;IACH,4BAA4B,EAAE,iCAAiC;IAC/D;;;OAGG;IACH,sBAAsB,EAAE,gBAAgB;IACxC;;;;;;OAMG;IACH,6BAA6B,EAAE,6CAA6C;IAC5E;;;;OAIG;IACH,iBAAiB,EAAE,sBAAsB;CACjC,CAAC;AACX,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,8CAA8C,EAAE,SAAS,CAAC,CAAC;AACpG,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAStE,MAAM,CAAC,MAAM,YAAY,GAAS,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;IAC3D,mBAAmB;IACnB,MAAM,CAAC,IAAI,CAAA;aACA,qCAAqC;0BACxB,UAAU,CAAC,SAAS,CAAC,4BAA4B,CAAC;;4BAEhD,UAAU,CAAC,SAAS,CAAC,sBAAsB,EAAE,EAAC,GAAG,EAAE,KAAK,CAAC,MAAM,EAAC,CAAC;6BAChE,UAAU,CAAC,SAAS,CAAC,6BAA6B,CAAC;;;;kCAI9C,KAAK,CAAC,WAAW,kBAAkB,WAAW;uBACzD,gDAA+B,IAAI,UAAU,CAAC,SAAS,CAAC,iBAAiB,CAAC;;WAEtF,EACP,MAAM,CAAC,CAAC;IACV,kBAAkB;AACpB,CAAC,CAAC;AAEF,MAAM,OAAO,+BAAgC,SAAQ,IAAI;IACvD,YAAY,MAAc,EAAE,OAAa,YAAY;QACnD,KAAK,CAAC,EAAC,YAAY,EAAE,IAAI,EAAC,CAAC,CAAC;QAC5B,MAAM,KAAK,GAAG;YACZ,MAAM;YACN,WAAW,EAAE,GAAG,EAAE;gBAChB,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;YAC3B,CAAC;SACF,CAAC;QACF,IAAI,CAAC,KAAK,EAAE,EAAE,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IACvC,CAAC;IAED,MAAM,CAAC,IAAI,CAAC,MAAc;QACxB,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,8BAA8B,CAAC,CAAC;QAC1D,MAAM,CAAC,eAAe,qDAA8B,CAAC;QACrD,MAAM,CAAC,cAAc,EAAE,CAAC;QACxB,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACvB,IAAI,+BAA+B,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QACxE,MAAM,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;CACF","sourcesContent":["// Copyright 2018 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport {html, render} from '../../ui/lit/lit.js';\n\nimport {Dialog} from './Dialog.js';\nimport {SizeBehavior} from './GlassPane.js';\nimport remoteDebuggingTerminatedScreenStyles from './remoteDebuggingTerminatedScreen.css.js';\nimport {VBox} from './Widget.js';\n\nconst UIStrings = {\n  /**\n   * @description Text in a dialog box in DevTools stating that remote debugging has been terminated.\n   * \"Remote debugging\" here means that DevTools on a PC is inspecting a website running on an actual mobile device\n   * (see https://developer.chrome.com/docs/devtools/remote-debugging/).\n   */\n  debuggingConnectionWasClosed: 'Debugging connection was closed',\n  /**\n   * @description Text in a dialog box in DevTools stating the reason for remote debugging being terminated.\n   * @example {target_closed} PH1\n   */\n  connectionClosedReason: 'Reason: {PH1}.',\n  /**\n   * @description Text in a dialog box showing how to reconnect to DevTools when remote debugging has been terminated.\n   * \"Remote debugging\" here means that DevTools on a PC is inspecting a website running on an actual mobile device\n   * (see https://developer.chrome.com/docs/devtools/remote-debugging/).\n   * \"Reconnect when ready\", refers to the state of the mobile device. The developer first has to put the mobile\n   * device back in a state where it can be inspected, before DevTools can reconnect to it.\n   */\n  reconnectWhenReadyByReopening: 'Reconnect when ready by reopening DevTools.',\n  /**\n   * @description Text on a button to reconnect Devtools when remote debugging terminated.\n   * \"Remote debugging\" here means that DevTools on a PC is inspecting a website running on an actual mobile device\n   * (see https://developer.chrome.com/docs/devtools/remote-debugging/).\n   */\n  reconnectDevtools: 'Reconnect `DevTools`',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/RemoteDebuggingTerminatedScreen.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface ViewInput {\n  reason: string;\n  onReconnect: () => void;\n}\n\ntype View = (input: ViewInput, output: object, target: HTMLElement) => void;\n\nexport const DEFAULT_VIEW: View = (input, _output, target) => {\n  // clang-format off\n  render(html`\n    <style>${remoteDebuggingTerminatedScreenStyles}</style>\n    <div class=\"header\">${i18nString(UIStrings.debuggingConnectionWasClosed)}</div>\n    <div class=\"content\">\n      <div class=\"reason\">${i18nString(UIStrings.connectionClosedReason, {PH1: input.reason})}</div>\n      <div class=\"message\">${i18nString(UIStrings.reconnectWhenReadyByReopening)}</div>\n    </div>\n    <div class=\"button-container\">\n      <div class=\"button\">\n        <devtools-button @click=${input.onReconnect} .jslogContext=${'reconnect'}\n            .variant=${Buttons.Button.Variant.OUTLINED}>${i18nString(UIStrings.reconnectDevtools)}</devtools-button>\n      </div>\n    </div>`,\n    target);\n  // clang-format on\n};\n\nexport class RemoteDebuggingTerminatedScreen extends VBox {\n  constructor(reason: string, view: View = DEFAULT_VIEW) {\n    super({useShadowDom: true});\n    const input = {\n      reason,\n      onReconnect: () => {\n        window.location.reload();\n      },\n    };\n    view(input, {}, this.contentElement);\n  }\n\n  static show(reason: string): void {\n    const dialog = new Dialog('remote-debnugging-terminated');\n    dialog.setSizeBehavior(SizeBehavior.MEASURE_CONTENT);\n    dialog.addCloseButton();\n    dialog.setDimmed(true);\n    new RemoteDebuggingTerminatedScreen(reason).show(dialog.contentElement);\n    dialog.show();\n  }\n}\n"]}