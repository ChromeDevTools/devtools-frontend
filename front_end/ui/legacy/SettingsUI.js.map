{"version":3,"file":"SettingsUI.js","sourceRoot":"","sources":["../../../../../../front_end/ui/legacy/SettingsUI.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable @devtools/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Settings from '../components/settings/settings.js';\nimport {Directives} from '../lit/lit.js';\nimport * as VisualLogging from '../visual_logging/visual_logging.js';\n\nimport * as ARIAUtils from './ARIAUtils.js';\nimport {InspectorView} from './InspectorView.js';\nimport {Tooltip} from './Tooltip.js';\nimport {bindInput, CheckboxLabel, createOption} from './UIUtils.js';\n\nconst UIStrings = {\n  /**\n   * @description Note when a setting change will require the user to reload DevTools\n   */\n  srequiresReload: '*Requires reload',\n  /**\n   * @description Message to display if a setting change requires a reload of DevTools\n   */\n  oneOrMoreSettingsHaveChanged: 'One or more settings have changed which requires a reload to take effect',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/SettingsUI.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport function createSettingCheckbox(\n    name: Common.UIString.LocalizedString, setting: Common.Settings.Setting<boolean>, tooltip?: string): CheckboxLabel {\n  const label = CheckboxLabel.create(name, undefined, undefined, setting.name);\n  label.name = name;\n  bindCheckbox(label, setting);\n  if (tooltip) {\n    Tooltip.install(label, tooltip);\n  }\n  return label;\n}\n\nconst createSettingSelect = function(\n    name: string, options: Common.Settings.SimpleSettingOption[], requiresReload: boolean|null,\n    setting: Common.Settings.Setting<unknown>, subtitle?: string): HTMLElement {\n  const container = document.createElement('div');\n  const settingSelectElement = container.createChild('p');\n  settingSelectElement.classList.add('settings-select');\n  const label = settingSelectElement.createChild('label');\n  const select = settingSelectElement.createChild('select');\n  label.textContent = name;\n  if (subtitle) {\n    container.classList.add('chrome-select-label');\n    label.createChild('p').textContent = subtitle;\n  }\n  select.setAttribute('jslog', `${VisualLogging.dropDown().track({change: true}).context(setting.name)}`);\n  ARIAUtils.bindLabelToControl(label, select);\n\n  for (const option of options) {\n    if (option.text && typeof option.value === 'string') {\n      select.add(createOption(option.text, option.value, Platform.StringUtilities.toKebabCase(option.value)));\n    }\n  }\n\n  let reloadWarning: HTMLElement|(Element | null) = (null as Element | null);\n  if (requiresReload) {\n    reloadWarning = container.createChild('p', 'reload-warning hidden');\n    reloadWarning.textContent = i18nString(UIStrings.srequiresReload);\n    ARIAUtils.markAsAlert(reloadWarning);\n  }\n\n  const {deprecation} = setting;\n  if (deprecation) {\n    const warning = new Settings.SettingDeprecationWarning.SettingDeprecationWarning();\n    warning.data = deprecation;\n    label.appendChild(warning);\n  }\n\n  setting.addChangeListener(settingChanged);\n  settingChanged();\n  select.addEventListener('change', selectChanged, false);\n  return container;\n\n  function settingChanged(): void {\n    const newValue = setting.get();\n    for (let i = 0; i < options.length; i++) {\n      if (options[i].value === newValue) {\n        select.selectedIndex = i;\n      }\n    }\n    select.disabled = setting.disabled();\n  }\n\n  function selectChanged(): void {\n    // Don't use event.target.value to avoid conversion of the value to string.\n    setting.set(options[select.selectedIndex].value);\n    if (reloadWarning) {\n      reloadWarning.classList.remove('hidden');\n      InspectorView.instance().displayReloadRequiredWarning(i18nString(UIStrings.oneOrMoreSettingsHaveChanged));\n    }\n  }\n};\n\nexport const bindToSetting =\n    (settingOrName: string|Common.Settings.Setting<boolean|string>|Common.Settings.RegExpSetting,\n     stringValidator?: (newSettingValue: string) => boolean): ReturnType<typeof Directives.ref> => {\n      const setting = typeof settingOrName === 'string' ?\n          Common.Settings.Settings.instance().moduleSetting(settingOrName) :\n          settingOrName;\n\n      // We can't use `setValue` as the change listener directly, otherwise we won't\n      // be able to remove it again.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      let setValue: (value: any) => void;\n      function settingChanged(): void {\n        setValue(setting.get());\n      }\n\n      if (setting.type() === Common.Settings.SettingType.BOOLEAN || typeof setting.defaultValue === 'boolean') {\n        return Directives.ref(e => {\n          if (e === undefined) {\n            setting.removeChangeListener(settingChanged);\n            return;\n          }\n\n          setting.addChangeListener(settingChanged);\n          setValue =\n              bindCheckboxImpl(e as CheckboxLabel, (setting as Common.Settings.Setting<boolean>).set.bind(setting));\n          setValue(setting.get());\n        });\n      }\n\n      if (setting.type() === Common.Settings.SettingType.REGEX || setting instanceof Common.Settings.RegExpSetting) {\n        return Directives.ref(e => {\n          if (e === undefined) {\n            setting.removeChangeListener(settingChanged);\n            return;\n          }\n\n          setting.addChangeListener(settingChanged);\n          setValue = bindInput(e as HTMLInputElement, setting.set.bind(setting), (value: string) => {\n            try {\n              new RegExp(value);\n              return true;\n            } catch {\n              return false;\n            }\n          }, /* numeric */ false);\n          setValue(setting.get());\n        });\n      }\n\n      if (typeof setting.defaultValue === 'string') {\n        return Directives.ref(e => {\n          if (e === undefined) {\n            setting.removeChangeListener(settingChanged);\n            return;\n          }\n\n          setting.addChangeListener(settingChanged);\n          setValue = bindInput(\n              e as HTMLInputElement, setting.set.bind(setting), stringValidator ?? (() => true), /* numeric */ false);\n          setValue(setting.get());\n        });\n      }\n\n      throw new Error(`Cannot infer type for setting  '${setting.name}'`);\n    };\n\n/**\n * @deprecated Prefer {@link bindToSetting} as this function leaks the checkbox via the setting listener.\n */\nexport const bindCheckbox = function(\n    input: CheckboxLabel, setting: Common.Settings.Setting<boolean>, metric?: UserMetricOptions): void {\n  const setValue = bindCheckboxImpl(input, setting.set.bind(setting), metric);\n  setting.addChangeListener(event => setValue(event.data));\n  setValue(setting.get());\n};\n\nconst bindCheckboxImpl = function(\n    input: CheckboxLabel, apply: (value: boolean) => void, metric?: UserMetricOptions): (value: boolean) => void {\n  input.addEventListener('change', onInputChanged, false);\n\n  function onInputChanged(): void {\n    apply(input.checked);\n\n    if (input.checked && metric?.enable) {\n      Host.userMetrics.actionTaken(metric.enable);\n    }\n\n    if (!input.checked && metric?.disable) {\n      Host.userMetrics.actionTaken(metric.disable);\n    }\n\n    if (metric?.toggle) {\n      Host.userMetrics.actionTaken(metric.toggle);\n    }\n  }\n\n  return function setValue(value: boolean): void {\n    if (value !== input.checked) {\n      input.checked = value;\n    }\n  };\n};\n\nexport const createControlForSetting = function(\n    setting: Common.Settings.Setting<unknown>, subtitle?: string): HTMLElement|null {\n  const uiTitle = setting.title();\n  switch (setting.type()) {\n    case Common.Settings.SettingType.BOOLEAN: {\n      const component = new Settings.SettingCheckbox.SettingCheckbox();\n      component.data = {\n        setting: setting as Common.Settings.Setting<boolean>,\n      };\n      component.onchange = () => {\n        if (setting.reloadRequired()) {\n          InspectorView.instance().displayReloadRequiredWarning(i18nString(UIStrings.oneOrMoreSettingsHaveChanged));\n        }\n      };\n      return component;\n    }\n    case Common.Settings.SettingType.ENUM:\n      return createSettingSelect(uiTitle, setting.options(), setting.reloadRequired(), setting, subtitle);\n    default:\n      console.error('Invalid setting type: ' + setting.type());\n      return null;\n  }\n};\n\n/**\n * Track toggle action as a whole or\n * track on and off action separately.\n */\nexport interface UserMetricOptions {\n  toggle?: Host.UserMetrics.Action;\n  enable?: Host.UserMetrics.Action;\n  disable?: Host.UserMetrics.Action;\n}\n"]}