{"version":3,"file":"View.js","sourceRoot":"","sources":["../../../../../../front_end/ui/legacy/View.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,QAAQ,MAAM,iCAAiC,CAAC;AAI5D,OAAO,EAAC,WAAW,EAAC,MAAM,kBAAkB,CAAC;AAC7C,OAAO,EAAC,IAAI,EAAkC,MAAM,aAAa,CAAC;AAyClE,MAAM,OAAO,UAAW,SAAQ,IAAI;IACzB,MAAM,CAAoC;IAC1C,OAAO,CAAoB;IAEpC;;;;;OAKG;IACH,YAAY,OAA0B;QACpC,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC;QAC5B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC;QAC9B,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;YAChE,MAAM,IAAI,SAAS,CAAC,oBAAoB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;QAC3D,CAAC;IACH,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,KAAK;QACH,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED,WAAW;QACT,OAAO,KAAK,CAAC;IACf,CAAC;IAED,WAAW;QACT,OAAO,KAAK,CAAC;IACf,CAAC;IAED,YAAY;QACV,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC7B,CAAC;IAED,MAAM;QACJ,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED,UAAU;QACR,OAAO,WAAW,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IACjD,CAAC;IAED,WAAW;IACX,CAAC;IAED,gBAAgB;QACd,OAAO,KAAK,CAAC;IACf,CAAC;IAED,QAAQ;QACN,OAAO,SAAS,CAAC;IACnB,CAAC;CACF","sourcesContent":["// Copyright 2016 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\n\nimport type {TabbedPane} from './TabbedPane.js';\nimport type {ToolbarItem, ToolbarMenuButton} from './Toolbar.js';\nimport {ViewManager} from './ViewManager.js';\nimport {VBox, type Widget, type WidgetOptions} from './Widget.js';\n\nexport interface View {\n  viewId(): string;\n\n  title(): Platform.UIString.LocalizedString;\n\n  isCloseable(): boolean;\n\n  isPreviewFeature(): boolean;\n\n  iconName(): string|undefined;\n\n  isTransient(): boolean;\n\n  toolbarItems(): Promise<ToolbarItem[]>;\n\n  widget(): Promise<Widget>;\n\n  disposeView(): void|Promise<void>;\n}\n\n/**\n * Settings to control the behavior of `SimpleView` subclasses.\n */\nexport interface SimpleViewOptions extends WidgetOptions {\n  /**\n   * User visible title for the view.\n   */\n  title: Platform.UIString.LocalizedString;\n\n  /**\n   * Internal ID used to refer to the view.\n   *\n   * Note that this is also used to construct VE contexts in some places.\n   *\n   * Must be in extended kebab case.\n   */\n  viewId: Lowercase<string>;\n}\n\nexport class SimpleView extends VBox implements View {\n  readonly #title: Platform.UIString.LocalizedString;\n  readonly #viewId: Lowercase<string>;\n\n  /**\n   * Constructs a new `SimpleView` with the given `options`.\n   *\n   * @param options the settings for the resulting view.\n   * @throws TypeError - if `options.viewId` is not in extended kebab case.\n   */\n  constructor(options: SimpleViewOptions) {\n    super(options);\n    this.#title = options.title;\n    this.#viewId = options.viewId;\n    if (!Platform.StringUtilities.isExtendedKebabCase(this.#viewId)) {\n      throw new TypeError(`Invalid view ID '${this.#viewId}'`);\n    }\n  }\n\n  viewId(): string {\n    return this.#viewId;\n  }\n\n  title(): Platform.UIString.LocalizedString {\n    return this.#title;\n  }\n\n  isCloseable(): boolean {\n    return false;\n  }\n\n  isTransient(): boolean {\n    return false;\n  }\n\n  toolbarItems(): Promise<ToolbarItem[]> {\n    return Promise.resolve([]);\n  }\n\n  widget(): Promise<Widget> {\n    return Promise.resolve(this);\n  }\n\n  revealView(): Promise<void> {\n    return ViewManager.instance().revealView(this);\n  }\n\n  disposeView(): void {\n  }\n\n  isPreviewFeature(): boolean {\n    return false;\n  }\n\n  iconName(): string|undefined {\n    return undefined;\n  }\n}\n\nexport interface ViewLocation {\n  appendApplicableItems(locationName: string): void;\n  appendView(view: View, insertBefore?: View|null): void;\n  showView(view: View, insertBefore?: View|null, userGesture?: boolean): Promise<void>;\n  removeView(view: View): void;\n  isViewVisible(view: View): boolean;\n  widget(): Widget;\n}\n\nexport interface TabbedViewLocation extends ViewLocation {\n  tabbedPane(): TabbedPane;\n  enableMoreTabsButton(): ToolbarMenuButton;\n}\n\nexport interface ViewLocationResolver {\n  resolveLocation(location: string): ViewLocation|null;\n}\n"]}