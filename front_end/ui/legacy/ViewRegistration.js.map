{"version":3,"file":"ViewRegistration.js","sourceRoot":"","sources":["../../../../../../front_end/ui/legacy/ViewRegistration.ts"],"names":[],"mappings":"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","sourcesContent":["\n// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\n\nimport type {ViewLocationResolver} from './View.js';\nimport {PreRegisteredView} from './ViewManager.js';\nimport type {Widget} from './Widget.js';\n\nconst UIStrings = {\n  /**\n   * @description Badge label for an entry in the Quick Open menu. Selecting the entry opens the 'Elements' panel.\n   */\n  elements: 'Elements',\n  /**\n   * @description Badge label for an entry in the Quick Open menu. Selecting the entry opens the 'Drawer' panel.\n   */\n  drawer: 'Drawer',\n  /**\n   * @description Badge label for an entry in the Quick Open menu. Selecting the entry opens the 'Drawer sidebar' panel.\n   */\n  drawer_sidebar: 'Drawer sidebar',\n  /**\n   * @description Badge label for an entry in the Quick Open menu. Selecting the entry opens the 'Panel'.\n   */\n  panel: 'Panel',\n  /**\n   * @description Badge label for an entry in the Quick Open menu. Selecting the entry opens the 'Network' panel.\n   */\n  network: 'Network',\n  /**\n   * @description Badge label for an entry in the Quick Open menu. Selecting the entry opens the 'Settings' panel.\n   */\n  settings: 'Settings',\n  /**\n   * @description Badge label for an entry in the Quick Open menu. Selecting the entry opens the 'Sources' panel.\n   */\n  sources: 'Sources',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/ViewRegistration.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst registeredViewExtensions: PreRegisteredView[] = [];\n\nexport const enum ViewPersistence {\n  CLOSEABLE = 'closeable',\n  PERMANENT = 'permanent',\n  TRANSIENT = 'transient',\n}\n\nexport const enum ViewLocationValues {\n  PANEL = 'panel',\n  SETTINGS_VIEW = 'settings-view',\n  ELEMENTS_SIDEBAR = 'elements-sidebar',\n  SOURCES_SIDEBAR_BOTTOM = 'sources.sidebar-bottom',\n  NAVIGATOR_VIEW = 'navigator-view',\n  DRAWER_VIEW = 'drawer-view',\n  DRAWER_SIDEBAR = 'drawer-sidebar',\n  NETWORK_SIDEBAR = 'network-sidebar',\n  SOURCES_SIDEBAR_TOP = 'sources.sidebar-top',\n  SOURCES_SIDEBAR_TABS = 'sources.sidebar-tabs',\n}\n\nexport interface ViewRegistration {\n  /**\n   * The name of the experiment a view is associated with. Enabling and disabling the declared\n   * experiment will enable and disable the view respectively.\n   */\n  experiment?: Root.Runtime.ExperimentName;\n  /**\n   * A condition is a function that will make the view available if it\n   * returns true, and not available, otherwise. Make sure that objects you\n   * access from inside the condition function are ready at the time when the\n   * setting conditions are checked.\n   */\n  condition?: Root.Runtime.Condition;\n  /**\n   * The command added to the command menu used to show the view. It usually follows the shape Show <title> as it must\n   * not be localized at declaration since it is localized internally when appending the commands to the command menu.\n   * The existing duplication of the declaration of the title is expected to be removed once the migration to the version\n   * 2 of the localization model has been completed (crbug.com/1136655).\n   */\n  commandPrompt: () => Platform.UIString.LocalizedString;\n\n  /**\n   * A UI string used as the title of the view.\n   */\n  title: () => Platform.UIString.LocalizedString;\n\n  /**\n   * Whether the view is permanently visible or can be opened temporarily.\n   */\n  persistence?: ViewPersistence;\n\n  /**\n   * Whether the view is a preview feature (a corresponding icon is shown then).\n   */\n  isPreviewFeature?: boolean;\n  /**\n   * Unique identifier of the view.\n   */\n  id: Lowercase<string>;\n  /**\n   * An identifier for the location of the view. The location is resolved by\n   * an extension of type '@UI.ViewLocationResolver'.\n   */\n  location?: ViewLocationValues;\n  /**\n   * Whether the view has a toolbar.\n   */\n  hasToolbar?: boolean;\n  /**\n   * Returns an instance of the class that wraps the view.\n   * The common pattern for implementing this function is loading the module with the wrapping 'Widget'\n   * lazily loaded. As an example:\n   *\n   * ```js\n   * let loadedElementsModule;\n   *\n   * async function loadElementsModule() {\n   *\n   *   if (!loadedElementsModule) {\n   *     loadedElementsModule = await import('./elements.js');\n   *   }\n   *   return loadedElementsModule;\n   * }\n   * UI.ViewManager.registerViewExtension({\n   *   <...>\n   *   async loadView() {\n   *      const Elements = await loadElementsModule();\n   *      return Elements.ElementsPanel.ElementsPanel.instance();\n   *   },\n   *   <...>\n   * });\n   * ```\n   */\n  loadView: () => Promise<Widget>;\n  /**\n   * Used to sort the views that appear in a shared location.\n   */\n  order?: number;\n  /**\n   * The names of the settings the registered view performs as UI for.\n   */\n  settings?: string[];\n  /**\n   * Words used to find the view in the Command Menu.\n   */\n  tags?: Array<() => Platform.UIString.LocalizedString>;\n  /**\n   * Icon to be used next to view's title.\n   */\n  iconName?: string;\n  /**\n   * Whether a view needs to be promoted. A new badge is shown next to the menu items then.\n   */\n  featurePromotionId?: string;\n}\n\nconst viewIdSet = new Set<string>();\nexport function registerViewExtension(registration: ViewRegistration): void {\n  const viewId = registration.id;\n  if (viewIdSet.has(viewId)) {\n    throw new Error(`Duplicate view id '${viewId}'`);\n  }\n  viewIdSet.add(viewId);\n  registeredViewExtensions.push(new PreRegisteredView(registration));\n}\n\nexport function getRegisteredViewExtensions(): PreRegisteredView[] {\n  return registeredViewExtensions.filter(\n      view => Root.Runtime.Runtime.isDescriptorEnabled({experiment: view.experiment(), condition: view.condition()}));\n}\n\nexport function maybeRemoveViewExtension(viewId: string): boolean {\n  const viewIndex = registeredViewExtensions.findIndex(view => view.viewId() === viewId);\n  if (viewIndex < 0 || !viewIdSet.delete(viewId)) {\n    return false;\n  }\n  registeredViewExtensions.splice(viewIndex, 1);\n  return true;\n}\n\nconst registeredLocationResolvers: LocationResolverRegistration[] = [];\n\nconst viewLocationNameSet = new Set<ViewLocationValues>();\n\nexport function registerLocationResolver(registration: LocationResolverRegistration): void {\n  const locationName = registration.name;\n  if (viewLocationNameSet.has(locationName)) {\n    throw new Error(`Duplicate view location name registration '${locationName}'`);\n  }\n  viewLocationNameSet.add(locationName);\n  registeredLocationResolvers.push(registration);\n}\n\nexport function getRegisteredLocationResolvers(): LocationResolverRegistration[] {\n  return registeredLocationResolvers;\n}\n\nexport function resetViewRegistration(): void {\n  registeredViewExtensions.length = 0;\n  registeredLocationResolvers.length = 0;\n  viewLocationNameSet.clear();\n  viewIdSet.clear();\n}\n\nexport const enum ViewLocationCategory {\n  NONE = '',  // `NONE` must be a falsy value. Legacy code uses if-checks for the category.\n  ELEMENTS = 'ELEMENTS',\n  DRAWER = 'DRAWER',\n  DRAWER_SIDEBAR = 'DRAWER_SIDEBAR',\n  PANEL = 'PANEL',\n  NETWORK = 'NETWORK',\n  SETTINGS = 'SETTINGS',\n  SOURCES = 'SOURCES',\n}\n\nexport function getLocalizedViewLocationCategory(category: ViewLocationCategory): Platform.UIString.LocalizedString {\n  switch (category) {\n    case ViewLocationCategory.ELEMENTS:\n      return i18nString(UIStrings.elements);\n    case ViewLocationCategory.DRAWER:\n      return i18nString(UIStrings.drawer);\n    case ViewLocationCategory.DRAWER_SIDEBAR:\n      return i18nString(UIStrings.drawer_sidebar);\n    case ViewLocationCategory.PANEL:\n      return i18nString(UIStrings.panel);\n    case ViewLocationCategory.NETWORK:\n      return i18nString(UIStrings.network);\n    case ViewLocationCategory.SETTINGS:\n      return i18nString(UIStrings.settings);\n    case ViewLocationCategory.SOURCES:\n      return i18nString(UIStrings.sources);\n    case ViewLocationCategory.NONE:\n      return i18n.i18n.lockedString('');\n  }\n}\n\nexport interface LocationResolverRegistration {\n  name: ViewLocationValues;\n  category: ViewLocationCategory;\n  loadResolver: () => Promise<ViewLocationResolver>;\n}\n"]}