{"version":3,"file":"ZoomManager.js","sourceRoot":"","sources":["../../../../../../front_end/ui/legacy/ZoomManager.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AAGtD,IAAI,mBAA0C,CAAC;AAE/C,MAAM,OAAO,WAAY,SAAQ,MAAM,CAAC,aAAa,CAAC,aAAyB;IACrE,YAAY,CAAyD;IAC7E,WAAW,CAAS;IAEpB,YAAoB,MAAc,EAAE,YAAoE;QACtG,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC;QAClD,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;IAC1E,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,OAIZ,EAAC,QAAQ,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAC;QACjD,MAAM,EAAC,QAAQ,EAAE,GAAG,EAAE,YAAY,EAAC,GAAG,IAAI,CAAC;QAC3C,IAAI,CAAC,mBAAmB,IAAI,QAAQ,EAAE,CAAC;YACrC,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;gBAC1B,MAAM,IAAI,KAAK,CACX,4EAA4E,IAAI,KAAK,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;YACvG,CAAC;YAED,mBAAmB,GAAG,IAAI,WAAW,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;QAC3D,CAAC;QAED,OAAO,mBAAmB,CAAC;IAC7B,CAAC;IAED,MAAM,CAAC,cAAc;QACnB,mBAAmB,GAAG,SAAS,CAAC;IAClC,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,QAAQ,CAAC,KAAa;QACpB,OAAO,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC;IAClC,CAAC;IAED,QAAQ,CAAC,QAAgB;QACvB,OAAO,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;IACrC,CAAC;IAEO,cAAc;QACpB,MAAM,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC;QACvC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC;QAClD,IAAI,aAAa,KAAK,IAAI,CAAC,WAAW,EAAE,CAAC;YACvC,IAAI,CAAC,wBAAwB,0CAAsB,EAAC,IAAI,EAAE,aAAa,EAAE,EAAE,EAAE,IAAI,CAAC,WAAW,EAAC,CAAC,CAAC;QAClG,CAAC;IACH,CAAC;CACF","sourcesContent":["// Copyright 2014 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Host from '../../core/host/host.js';\n\nlet zoomManagerInstance: ZoomManager|undefined;\n\nexport class ZoomManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private frontendHost: Host.InspectorFrontendHostAPI.InspectorFrontendHostAPI;\n  #zoomFactor: number;\n\n  private constructor(window: Window, frontendHost: Host.InspectorFrontendHostAPI.InspectorFrontendHostAPI) {\n    super();\n    this.frontendHost = frontendHost;\n    this.#zoomFactor = this.frontendHost.zoomFactor();\n    window.addEventListener('resize', this.onWindowResize.bind(this), true);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    win: Window|null,\n    frontendHost: Host.InspectorFrontendHostAPI.InspectorFrontendHostAPI|null,\n  } = {forceNew: null, win: null, frontendHost: null}): ZoomManager {\n    const {forceNew, win, frontendHost} = opts;\n    if (!zoomManagerInstance || forceNew) {\n      if (!win || !frontendHost) {\n        throw new Error(\n            `Unable to create zoom manager: window and frontendHost must be provided: ${new Error().stack}`);\n      }\n\n      zoomManagerInstance = new ZoomManager(win, frontendHost);\n    }\n\n    return zoomManagerInstance;\n  }\n\n  static removeInstance(): void {\n    zoomManagerInstance = undefined;\n  }\n\n  zoomFactor(): number {\n    return this.#zoomFactor;\n  }\n\n  cssToDIP(value: number): number {\n    return value * this.#zoomFactor;\n  }\n\n  dipToCSS(valueDIP: number): number {\n    return valueDIP / this.#zoomFactor;\n  }\n\n  private onWindowResize(): void {\n    const oldZoomFactor = this.#zoomFactor;\n    this.#zoomFactor = this.frontendHost.zoomFactor();\n    if (oldZoomFactor !== this.#zoomFactor) {\n      this.dispatchEventToListeners(Events.ZOOM_CHANGED, {from: oldZoomFactor, to: this.#zoomFactor});\n    }\n  }\n}\n\nexport const enum Events {\n  ZOOM_CHANGED = 'ZoomChanged',\n}\n\nexport interface ZoomChangedEvent {\n  from: number;\n  to: number;\n}\n\nexport interface EventTypes {\n  [Events.ZOOM_CHANGED]: ZoomChangedEvent;\n}\n"]}