{"version":3,"file":"ThemeSupport.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/legacy/theme_support/ThemeSupport.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable @devtools/no-imperative-dom-api */\n\n/*\n * Copyright (C) 2011 Google Inc.  All rights reserved.\n * Copyright (C) 2006, 2007, 2008 Apple Inc.  All rights reserved.\n * Copyright (C) 2007 Matt Lilek (pewtermoose@gmail.com).\n * Copyright (C) 2009 Joseph Pecoraro\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../../core/common/common.js';\nimport * as Host from '../../../core/host/host.js';\nimport * as Root from '../../../core/root/root.js';\n\nlet themeSupportInstance: ThemeSupport;\n\nconst themeValueByTargetByName = new Map<Element|null, Map<string, string>>();\n\nexport class ThemeSupport extends EventTarget {\n  #themeName = 'default';\n  private computedStyleOfHTML = Common.Lazy.lazy(() => window.getComputedStyle(document.documentElement));\n\n  readonly #documentsToTheme = new Set<Document>([document]);\n\n  readonly #darkThemeMediaQuery: MediaQueryList;\n  readonly #highContrastMediaQuery: MediaQueryList;\n  readonly #onThemeChangeListener = (): void => this.#applyTheme();\n  readonly #onHostThemeChangeListener = (): void => this.fetchColorsAndApplyHostTheme();\n\n  private constructor(private setting: Common.Settings.Setting<string>) {\n    super();\n\n    // When the theme changes we instantiate a new theme support and reapply.\n    // Equally if the user has set to match the system and the OS preference changes\n    // we perform the same change.\n    this.#darkThemeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    this.#highContrastMediaQuery = window.matchMedia('(forced-colors: active)');\n    this.#darkThemeMediaQuery.addEventListener('change', this.#onThemeChangeListener);\n    this.#highContrastMediaQuery.addEventListener('change', this.#onThemeChangeListener);\n    setting.addChangeListener(this.#onThemeChangeListener);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.ColorThemeChanged, this.#onHostThemeChangeListener);\n  }\n\n  #dispose(): void {\n    this.#darkThemeMediaQuery.removeEventListener('change', this.#onThemeChangeListener);\n    this.#highContrastMediaQuery.removeEventListener('change', this.#onThemeChangeListener);\n    this.setting.removeChangeListener(this.#onThemeChangeListener);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.removeEventListener(\n        Host.InspectorFrontendHostAPI.Events.ColorThemeChanged, this.#onHostThemeChangeListener);\n  }\n\n  static hasInstance(): boolean {\n    return typeof themeSupportInstance !== 'undefined';\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    setting: Common.Settings.Setting<string>|null,\n  } = {forceNew: null, setting: null}): ThemeSupport {\n    const {forceNew, setting} = opts;\n    if (!themeSupportInstance || forceNew) {\n      if (!setting) {\n        throw new Error(`Unable to create theme support: setting must be provided: ${new Error().stack}`);\n      }\n\n      if (themeSupportInstance) {\n        themeSupportInstance.#dispose();\n      }\n      themeSupportInstance = new ThemeSupport(setting);\n    }\n\n    return themeSupportInstance;\n  }\n\n  /**\n   * Adds additional `Document` instances that should be themed besides the default\n   * `window.document` in which this ThemeSupport instance was created.\n   */\n  addDocumentToTheme(document: Document): void {\n    this.#documentsToTheme.add(document);\n    this.#fetchColorsAndApplyHostTheme(document);\n  }\n\n  getComputedValue(propertyName: string, target: Element|null = null): string {\n    // Since we might query the same property name from various targets we need to support\n    // per-target caching of computed values. Here we attempt to locate the particular computed\n    // value cache for the target element. If no target was specified we use the default computed root,\n    // which belongs to the documentElement.\n    let themeValueByName = themeValueByTargetByName.get(target);\n    if (!themeValueByName) {\n      themeValueByName = new Map<string, string>();\n      themeValueByTargetByName.set(target, themeValueByName);\n    }\n\n    // Since theme changes trigger a reload, we can avoid repeatedly looking up color values\n    // dynamically. Instead we can look up the first time and cache them for future use,\n    // knowing that the cache will be invalidated by virtue of a reload when the theme changes.\n    let themeValue = themeValueByName.get(propertyName);\n    if (!themeValue) {\n      const styleDeclaration = target ? window.getComputedStyle(target) : this.computedStyleOfHTML();\n      if (typeof styleDeclaration === 'symbol') {\n        throw new Error(`Computed value for property (${propertyName}) could not be found on documentElement.`);\n      }\n      themeValue = styleDeclaration.getPropertyValue(propertyName).trim();\n\n      // If we receive back an empty value (nothing has been set) we don't store it for the future.\n      // This means that subsequent requests will continue to query the styles in case the value\n      // has been set.\n      if (themeValue) {\n        themeValueByName.set(propertyName, themeValue);\n      }\n    }\n\n    return themeValue;\n  }\n\n  themeName(): string {\n    return this.#themeName;\n  }\n\n  #applyTheme(): void {\n    for (const document of this.#documentsToTheme) {\n      this.#applyThemeToDocument(document);\n    }\n  }\n\n  #applyThemeToDocument(document: Document): void {\n    const isForcedColorsMode = window.matchMedia('(forced-colors: active)').matches;\n    const systemPreferredTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'default';\n\n    const useSystemPreferred = this.setting.get() === 'systemPreferred' || isForcedColorsMode;\n    this.#themeName = useSystemPreferred ? systemPreferredTheme : this.setting.get();\n    document.documentElement.classList.toggle('theme-with-dark-background', this.#themeName === 'dark');\n\n    const useChromeTheme = Common.Settings.moduleSetting('chrome-theme-colors').get();\n    const isIncognito = Root.Runtime.hostConfig.isOffTheRecord === true;\n    // Baseline is the name of Chrome's default color theme and there are two of these: default and grayscale.\n    // The collective name for the rest of the color themes is dynamic.\n    // In the baseline themes Chrome uses custom values for surface colors, whereas for dynamic themes these are color-mixed.\n    // To match Chrome we need to know if any of the baseline themes is currently active and assign specific values to surface colors.\n    if (isIncognito) {\n      document.documentElement.classList.toggle('baseline-grayscale', true);\n    } else if (useChromeTheme) {\n      const selectedTheme = getComputedStyle(document.body).getPropertyValue('--user-color-source');\n      document.documentElement.classList.toggle('baseline-default', selectedTheme === 'baseline-default');\n      document.documentElement.classList.toggle('baseline-grayscale', selectedTheme === 'baseline-grayscale');\n    } else {\n      document.documentElement.classList.toggle('baseline-grayscale', true);\n    }\n\n    // In the event the theme changes we need to clear caches and notify subscribers.\n    themeValueByTargetByName.clear();\n    this.dispatchEvent(new ThemeChangeEvent());\n  }\n\n  static clearThemeCache(): void {\n    themeValueByTargetByName.clear();\n  }\n\n  fetchColorsAndApplyHostTheme(): void {\n    for (const document of this.#documentsToTheme) {\n      this.#fetchColorsAndApplyHostTheme(document);\n    }\n  }\n\n  #fetchColorsAndApplyHostTheme(document: Document): void {\n    const useChromeTheme = Common.Settings.moduleSetting('chrome-theme-colors').get();\n    if (Host.InspectorFrontendHost.InspectorFrontendHostInstance.isHostedMode() || !useChromeTheme) {\n      this.#applyThemeToDocument(document);\n      return;\n    }\n\n    const oldColorsCssLink = document.querySelector('link[href*=\\'//theme/colors.css\\']');\n    const newColorsCssLink = document.createElement('link');\n    newColorsCssLink.setAttribute(\n        'href', `devtools://theme/colors.css?sets=ui,chrome&version=${(new Date()).getTime().toString()}`);\n    newColorsCssLink.setAttribute('rel', 'stylesheet');\n    newColorsCssLink.setAttribute('type', 'text/css');\n    newColorsCssLink.onload = () => {\n      if (oldColorsCssLink) {\n        oldColorsCssLink.remove();\n      }\n      this.#applyThemeToDocument(document);\n    };\n    document.body.appendChild(newColorsCssLink);\n  }\n}\n\nexport class ThemeChangeEvent extends Event {\n  static readonly eventName = 'themechange';\n\n  constructor() {\n    super(ThemeChangeEvent.eventName, {bubbles: true, composed: true});\n  }\n}\n"]}