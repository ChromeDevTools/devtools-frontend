{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/legacy/theme_support/ThemeSupport.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable @devtools/no-imperative-dom-api */\n\n/*\n * Copyright (C) 2011 Google Inc.  All rights reserved.\n * Copyright (C) 2006, 2007, 2008 Apple Inc.  All rights reserved.\n * Copyright (C) 2007 Matt Lilek (pewtermoose@gmail.com).\n * Copyright (C) 2009 Joseph Pecoraro\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../../core/common/common.js';\nimport * as Host from '../../../core/host/host.js';\nimport * as Root from '../../../core/root/root.js';\n\nlet themeSupportInstance: ThemeSupport;\n\nconst themeValueByTargetByName = new Map<Element|null, Map<string, string>>();\n\nexport class ThemeSupport extends EventTarget {\n  #themeName = 'default';\n  private computedStyleOfHTML = Common.Lazy.lazy(() => window.getComputedStyle(document.documentElement));\n\n  readonly #documentsToTheme = new Set<Document>([document]);\n\n  readonly #darkThemeMediaQuery: MediaQueryList;\n  readonly #highContrastMediaQuery: MediaQueryList;\n  readonly #onThemeChangeListener = (): void => this.#applyTheme();\n  readonly #onHostThemeChangeListener = (): void => this.fetchColorsAndApplyHostTheme();\n\n  private constructor(private setting: Common.Settings.Setting<string>) {\n    super();\n\n    // When the theme changes we instantiate a new theme support and reapply.\n    // Equally if the user has set to match the system and the OS preference changes\n    // we perform the same change.\n    this.#darkThemeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    this.#highContrastMediaQuery = window.matchMedia('(forced-colors: active)');\n    this.#darkThemeMediaQuery.addEventListener('change', this.#onThemeChangeListener);\n    this.#highContrastMediaQuery.addEventListener('change', this.#onThemeChangeListener);\n    setting.addChangeListener(this.#onThemeChangeListener);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.ColorThemeChanged, this.#onHostThemeChangeListener);\n  }\n\n  #dispose(): void {\n    this.#darkThemeMediaQuery.removeEventListener('change', this.#onThemeChangeListener);\n    this.#highContrastMediaQuery.removeEventListener('change', this.#onThemeChangeListener);\n    this.setting.removeChangeListener(this.#onThemeChangeListener);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.removeEventListener(\n        Host.InspectorFrontendHostAPI.Events.ColorThemeChanged, this.#onHostThemeChangeListener);\n  }\n\n  static hasInstance(): boolean {\n    return typeof themeSupportInstance !== 'undefined';\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    setting: Common.Settings.Setting<string>|null,\n  } = {forceNew: null, setting: null}): ThemeSupport {\n    const {forceNew, setting} = opts;\n    if (!themeSupportInstance || forceNew) {\n      if (!setting) {\n        throw new Error(`Unable to create theme support: setting must be provided: ${new Error().stack}`);\n      }\n\n      if (themeSupportInstance) {\n        themeSupportInstance.#dispose();\n      }\n      themeSupportInstance = new ThemeSupport(setting);\n    }\n\n    return themeSupportInstance;\n  }\n\n  /**\n   * Adds additional `Document` instances that should be themed besides the default\n   * `window.document` in which this ThemeSupport instance was created.\n   */\n  addDocumentToTheme(document: Document): void {\n    this.#documentsToTheme.add(document);\n    this.#fetchColorsAndApplyHostTheme(document);\n  }\n\n  getComputedValue(propertyName: string, target: Element|null = null): string {\n    // Since we might query the same property name from various targets we need to support\n    // per-target caching of computed values. Here we attempt to locate the particular computed\n    // value cache for the target element. If no target was specified we use the default computed root,\n    // which belongs to the documentElement.\n    let themeValueByName = themeValueByTargetByName.get(target);\n    if (!themeValueByName) {\n      themeValueByName = new Map<string, string>();\n      themeValueByTargetByName.set(target, themeValueByName);\n    }\n\n    // Since theme changes trigger a reload, we can avoid repeatedly looking up color values\n    // dynamically. Instead we can look up the first time and cache them for future use,\n    // knowing that the cache will be invalidated by virtue of a reload when the theme changes.\n    let themeValue = themeValueByName.get(propertyName);\n    if (!themeValue) {\n      const styleDeclaration = target ? window.getComputedStyle(target) : this.computedStyleOfHTML();\n      if (typeof styleDeclaration === 'symbol') {\n        throw new Error(`Computed value for property (${propertyName}) could not be found on documentElement.`);\n      }\n      themeValue = styleDeclaration.getPropertyValue(propertyName).trim();\n\n      // If we receive back an empty value (nothing has been set) we don't store it for the future.\n      // This means that subsequent requests will continue to query the styles in case the value\n      // has been set.\n      if (themeValue) {\n        themeValueByName.set(propertyName, themeValue);\n      }\n    }\n\n    return themeValue;\n  }\n\n  themeName(): string {\n    return this.#themeName;\n  }\n\n  #applyTheme(): void {\n    for (const document of this.#documentsToTheme) {\n      this.#applyThemeToDocument(document);\n    }\n  }\n\n  #applyThemeToDocument(document: Document): void {\n    const isForcedColorsMode = window.matchMedia('(forced-colors: active)').matches;\n    const systemPreferredTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'default';\n\n    const useSystemPreferred = this.setting.get() === 'systemPreferred' || isForcedColorsMode;\n    this.#themeName = useSystemPreferred ? systemPreferredTheme : this.setting.get();\n    document.documentElement.classList.toggle('theme-with-dark-background', this.#themeName === 'dark');\n\n    const useChromeTheme = Common.Settings.moduleSetting('chrome-theme-colors').get();\n    const isIncognito = Root.Runtime.hostConfig.isOffTheRecord === true;\n    // Baseline is the name of Chrome's default color theme and there are two of these: default and grayscale.\n    // The collective name for the rest of the color themes is dynamic.\n    // In the baseline themes Chrome uses custom values for surface colors, whereas for dynamic themes these are color-mixed.\n    // To match Chrome we need to know if any of the baseline themes is currently active and assign specific values to surface colors.\n    if (isIncognito) {\n      document.documentElement.classList.toggle('baseline-grayscale', true);\n    } else if (useChromeTheme) {\n      const selectedTheme = getComputedStyle(document.body).getPropertyValue('--user-color-source');\n      document.documentElement.classList.toggle('baseline-default', selectedTheme === 'baseline-default');\n      document.documentElement.classList.toggle('baseline-grayscale', selectedTheme === 'baseline-grayscale');\n    } else {\n      document.documentElement.classList.toggle('baseline-grayscale', true);\n    }\n\n    // In the event the theme changes we need to clear caches and notify subscribers.\n    themeValueByTargetByName.clear();\n    this.dispatchEvent(new ThemeChangeEvent());\n  }\n\n  static clearThemeCache(): void {\n    themeValueByTargetByName.clear();\n  }\n\n  fetchColorsAndApplyHostTheme(): void {\n    for (const document of this.#documentsToTheme) {\n      this.#fetchColorsAndApplyHostTheme(document);\n    }\n  }\n\n  #fetchColorsAndApplyHostTheme(document: Document): void {\n    const useChromeTheme = Common.Settings.moduleSetting('chrome-theme-colors').get();\n    if (Host.InspectorFrontendHost.InspectorFrontendHostInstance.isHostedMode() || !useChromeTheme) {\n      this.#applyThemeToDocument(document);\n      return;\n    }\n\n    const oldColorsCssLink = document.querySelector('link[href*=\\'//theme/colors.css\\']');\n    const newColorsCssLink = document.createElement('link');\n    newColorsCssLink.setAttribute(\n        'href', `devtools://theme/colors.css?sets=ui,chrome&version=${(new Date()).getTime().toString()}`);\n    newColorsCssLink.setAttribute('rel', 'stylesheet');\n    newColorsCssLink.setAttribute('type', 'text/css');\n    newColorsCssLink.onload = () => {\n      if (oldColorsCssLink) {\n        oldColorsCssLink.remove();\n      }\n      this.#applyThemeToDocument(document);\n    };\n    document.body.appendChild(newColorsCssLink);\n  }\n}\n\nexport class ThemeChangeEvent extends Event {\n  static readonly eventName = 'themechange';\n\n  constructor() {\n    super(ThemeChangeEvent.eventName, {bubbles: true, composed: true});\n  }\n}\n"],
  "mappings": "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",
  "names": ["document"]
}
