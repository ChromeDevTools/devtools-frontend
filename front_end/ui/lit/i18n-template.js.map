{"version":3,"file":"i18n-template.js","sourceRoot":"","sources":["../../../../../../front_end/ui/lit/i18n-template.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,oCAAoC;AACpC,6DAA6D;AAE7D,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAEhD,OAAO,KAAK,GAAG,MAAM,8BAA8B,CAAC;AAEpD,MAAM,EAAC,IAAI,EAAC,GAAG,GAAG,CAAC,UAAU,CAAC;AAE9B;;;GAGG;AACH,MAAM,UAAU,YAAY,CACxB,iBAAgE,EAAE,QAAgB,EAClF,YAAuD;IACzD,MAAM,SAAS,GAAG,iBAAiB,CAAC,wBAAwB,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC;SAC3F,sBAAsB,CAAC,QAAQ,CAAC,CAAC;IACxD,IAAI,MAAM,GAA0C,GAAG,CAAC,OAAO,CAAC;IAChE,KAAK,MAAM,UAAU,IAAI,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC;QAC5C,IAAI,UAAU,CAAC,IAAI,KAAK,qBAAqB,CAAC,CAAC,EAAE,CAAC;YAChD,MAAM,gBAAgB,GAAG,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YACxD,IAAI,gBAAgB,EAAE,CAAC;gBACrB,MAAM,GAAG,IAAI,CAAA,GAAG,MAAM,GAAG,gBAAgB,EAAE,CAAC;YAC9C,CAAC;QACH,CAAC;aAAM,IAAI,OAAO,IAAI,UAAU,EAAE,CAAC;YACjC,MAAM,GAAG,IAAI,CAAA,GAAG,MAAM,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC;QAC9C,CAAC;IACH,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["// Copyright 2021 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n// This files is import lit directly\n/* eslint-disable @devtools/lit-template-result-or-nothing */\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as I18n from '../../third_party/i18n/i18n.js';\nimport * as Lit from '../../third_party/lit/lit.js';\n\nconst {html} = Lit.StaticHtml;\n\n/**\n * @param placeholders placeholders must not contain localized strings or other localized templates as that is\n * incompatible with languages using a different sentence structure or ordering (e.g., RTL).\n */\nexport function i18nTemplate(\n    registeredStrings: I18n.LocalizedStringSet.RegisteredFileStrings, stringId: string,\n    placeholders: Record<string, Lit.TemplateResult|string>): Lit.TemplateResult|typeof Lit.nothing {\n  const formatter = registeredStrings.getLocalizedStringSetFor(i18n.DevToolsLocale.DevToolsLocale.instance().locale)\n                        .getMessageFormatterFor(stringId);\n  let result: Lit.TemplateResult|typeof Lit.nothing = Lit.nothing;\n  for (const icuElement of formatter.getAst()) {\n    if (icuElement.type === /* argumentElement */ 1) {\n      const placeholderValue = placeholders[icuElement.value];\n      if (placeholderValue) {\n        result = html`${result}${placeholderValue}`;\n      }\n    } else if ('value' in icuElement) {\n      result = html`${result}${icuElement.value}`;\n    }\n  }\n  return result;\n}\n"]}