{"version":3,"file":"strip-whitespace.js","sourceRoot":"","sources":["../../../../../../front_end/ui/lit/strip-whitespace.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,GAAG,MAAM,8BAA8B,CAAC;AAEpD,MAAM,SAAS,GAAG,IAAI,OAAO,EAA8C,CAAC;AAE5E,MAAM,UAAU,IAAI,CAAC,OAA6B,EAAE,GAAG,MAAiB;IACtE,IAAI,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACtC,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC;YACxC,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;QAC5B,CAAC;aAAM,CAAC;YACN,QAAQ,GAAG,OAAO,CAAC;QACrB,CAAC;IACH,CAAC;IACD,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IACjC,OAAO,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,MAAM,CAAC,CAAC;AACvC,CAAC;AAED,SAAS,KAAK,CAAC,OAA6B;IAC1C,IAAI,KAAK,GAAG,KAAK,CAAC;IAClB,+DAA+D;IAC/D,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,CAAC,EAAE;QAC7D,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;YACd,KAAK,GAAG,IAAI,CAAC;QACf,CAAC;aAAM,IAAI,KAAK,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;YAC9B,KAAK,GAAG,KAAK,CAAC;QAChB,CAAC;aAAM,IAAI,CAAC,KAAK,EAAE,CAAC;YAClB,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,OAAO,CAAC,CAAC;IACX,CAAC,CAAC,CAAwC,CAAC;IAC3C,QAAQ,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;IAC3B,OAAO,QAAgC,CAAC;AAC1C,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Lit from '../../third_party/lit/lit.js';\n\nconst templates = new WeakMap<TemplateStringsArray, TemplateStringsArray>();\n\nexport function html(strings: TemplateStringsArray, ...values: unknown[]): Lit.TemplateResult {\n  let stripped = templates.get(strings);\n  if (!stripped) {\n    if (strings.some(s => s.includes('\\n'))) {\n      stripped = strip(strings);\n    } else {\n      stripped = strings;\n    }\n  }\n  templates.set(strings, stripped);\n  return Lit.html(stripped, ...values);\n}\n\nfunction strip(strings: TemplateStringsArray): TemplateStringsArray {\n  let inTag = false;\n  // Remove runs of whitespace following newline outside of tags.\n  const stripped = strings.map(s => s.replace(/[<>]|\\n\\s*/g, s => {\n    if (s === '<') {\n      inTag = true;\n    } else if (inTag && s === '>') {\n      inTag = false;\n    } else if (!inTag) {\n      return '';\n    }\n    return s;\n  })) as string[] & {raw: readonly string[]};\n  stripped.raw = strings.raw;\n  return stripped as TemplateStringsArray;\n}\n"]}