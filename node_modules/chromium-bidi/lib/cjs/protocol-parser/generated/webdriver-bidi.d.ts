/**
 * Copyright 2024 Google LLC.
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * THIS FILE IS AUTOGENERATED. Run `node tools/generate-bidi-types.mjs` to regenerate.
 * @see https://github.com/w3c/webdriver-bidi/blob/master/index.bs
 */
import z from 'zod';
export declare const EventSchema: z.ZodLazy<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
    type: z.ZodLiteral<"event">;
}, "strip", z.ZodTypeAny, {
    type: "event";
}, {
    type: "event";
}>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.contextCreated">;
    params: any;
}, "strip", z.ZodTypeAny, {
    method: "browsingContext.contextCreated";
    params?: any;
}, {
    method: "browsingContext.contextCreated";
    params?: any;
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.contextDestroyed">;
    params: any;
}, "strip", z.ZodTypeAny, {
    method: "browsingContext.contextDestroyed";
    params?: any;
}, {
    method: "browsingContext.contextDestroyed";
    params?: any;
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.domContentLoaded">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.domContentLoaded";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.domContentLoaded";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.downloadWillBegin">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.downloadWillBegin";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.downloadWillBegin";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.fragmentNavigated">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.fragmentNavigated";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.fragmentNavigated";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.load">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.load";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.load";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.navigationAborted">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.navigationAborted";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.navigationAborted";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.navigationFailed">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.navigationFailed";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.navigationFailed";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.navigationStarted">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.navigationStarted";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.navigationStarted";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.userPromptClosed">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        accepted: z.ZodBoolean;
        userText: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        accepted: boolean;
        userText?: string | undefined;
    }, {
        context: string;
        accepted: boolean;
        userText?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        accepted: boolean;
        userText?: string | undefined;
    };
    method: "browsingContext.userPromptClosed";
}, {
    params: {
        context: string;
        accepted: boolean;
        userText?: string | undefined;
    };
    method: "browsingContext.userPromptClosed";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.userPromptOpened">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        type: z.ZodEnum<["alert", "confirm", "prompt", "beforeunload"]>;
        message: z.ZodString;
        defaultValue: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: "prompt" | "alert" | "confirm" | "beforeunload";
        context: string;
        defaultValue?: string | undefined;
    }, {
        message: string;
        type: "prompt" | "alert" | "confirm" | "beforeunload";
        context: string;
        defaultValue?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        message: string;
        type: "prompt" | "alert" | "confirm" | "beforeunload";
        context: string;
        defaultValue?: string | undefined;
    };
    method: "browsingContext.userPromptOpened";
}, {
    params: {
        message: string;
        type: "prompt" | "alert" | "confirm" | "beforeunload";
        context: string;
        defaultValue?: string | undefined;
    };
    method: "browsingContext.userPromptOpened";
}>>]>>, z.ZodLazy<z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"log.entryAdded">;
    params: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        level: z.ZodLazy<z.ZodEnum<["debug", "info", "warn", "error"]>>;
        source: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            context?: string | undefined;
        }, {
            realm: string;
            context?: string | undefined;
        }>>;
        text: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                columnNumber: z.ZodLazy<z.ZodNumber>;
                functionName: z.ZodString;
                lineNumber: z.ZodLazy<z.ZodNumber>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }>>, "many">;
        }, "strip", z.ZodTypeAny, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }>>>;
    }, "strip", z.ZodTypeAny, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }>>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        level: z.ZodLazy<z.ZodEnum<["debug", "info", "warn", "error"]>>;
        source: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            context?: string | undefined;
        }, {
            realm: string;
            context?: string | undefined;
        }>>;
        text: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                columnNumber: z.ZodLazy<z.ZodNumber>;
                functionName: z.ZodString;
                lineNumber: z.ZodLazy<z.ZodNumber>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }>>, "many">;
        }, "strip", z.ZodTypeAny, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }>>>;
    }, "strip", z.ZodTypeAny, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"console">;
        method: z.ZodString;
        args: z.ZodArray<any, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "console";
        args: any[];
        method: string;
    }, {
        type: "console";
        args: any[];
        method: string;
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        level: z.ZodLazy<z.ZodEnum<["debug", "info", "warn", "error"]>>;
        source: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            context?: string | undefined;
        }, {
            realm: string;
            context?: string | undefined;
        }>>;
        text: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                columnNumber: z.ZodLazy<z.ZodNumber>;
                functionName: z.ZodString;
                lineNumber: z.ZodLazy<z.ZodNumber>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }>>, "many">;
        }, "strip", z.ZodTypeAny, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }>>>;
    }, "strip", z.ZodTypeAny, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"javascript">;
    }, "strip", z.ZodTypeAny, {
        type: "javascript";
    }, {
        type: "javascript";
    }>>>]>>;
}, "strip", z.ZodTypeAny, {
    params: ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "console";
        args: any[];
        method: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "javascript";
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: string;
    } & {
        type: "console";
        args: any[];
        method: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: string;
    } & {
        type: "javascript";
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "console";
        args: any[];
        method: string;
    } & {
        type: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "javascript";
    } & {
        type: string;
    });
    method: "log.entryAdded";
}, {
    params: ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "console";
        args: any[];
        method: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "javascript";
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: string;
    } & {
        type: "console";
        args: any[];
        method: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: string;
    } & {
        type: "javascript";
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "console";
        args: any[];
        method: string;
    } & {
        type: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "javascript";
    } & {
        type: string;
    });
    method: "log.entryAdded";
}>>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.authRequired">;
    params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        response: z.ZodLazy<z.ZodObject<{
            url: z.ZodString;
            protocol: z.ZodString;
            status: z.ZodLazy<z.ZodNumber>;
            statusText: z.ZodString;
            fromCache: z.ZodBoolean;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            mimeType: z.ZodString;
            bytesReceived: z.ZodLazy<z.ZodNumber>;
            headersSize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            content: z.ZodLazy<z.ZodObject<{
                size: z.ZodLazy<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                size: number;
            }, {
                size: number;
            }>>;
            authChallenge: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                scheme: z.ZodString;
                realm: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                realm: string;
                scheme: string;
            }, {
                realm: string;
                scheme: string;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }>>>;
}, "strip", z.ZodTypeAny, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    };
    method: "network.authRequired";
}, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    };
    method: "network.authRequired";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.beforeRequestSent">;
    params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        initiator: z.ZodLazy<z.ZodObject<{
            type: z.ZodEnum<["parser", "script", "preflight", "other"]>;
            columnNumber: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            lineNumber: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                    columnNumber: z.ZodLazy<z.ZodNumber>;
                    functionName: z.ZodString;
                    lineNumber: z.ZodLazy<z.ZodNumber>;
                    url: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }, {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }>>, "many">;
            }, "strip", z.ZodTypeAny, {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            }, {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            }>>>;
            request: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        }, {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        initiator: {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        };
    }, {
        initiator: {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        };
    }>>>;
}, "strip", z.ZodTypeAny, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        initiator: {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        };
    };
    method: "network.beforeRequestSent";
}, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        initiator: {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        };
    };
    method: "network.beforeRequestSent";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.fetchError">;
    params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        errorText: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        errorText: string;
    }, {
        errorText: string;
    }>>>;
}, "strip", z.ZodTypeAny, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        errorText: string;
    };
    method: "network.fetchError";
}, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        errorText: string;
    };
    method: "network.fetchError";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.responseCompleted">;
    params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        response: z.ZodLazy<z.ZodObject<{
            url: z.ZodString;
            protocol: z.ZodString;
            status: z.ZodLazy<z.ZodNumber>;
            statusText: z.ZodString;
            fromCache: z.ZodBoolean;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            mimeType: z.ZodString;
            bytesReceived: z.ZodLazy<z.ZodNumber>;
            headersSize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            content: z.ZodLazy<z.ZodObject<{
                size: z.ZodLazy<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                size: number;
            }, {
                size: number;
            }>>;
            authChallenge: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                scheme: z.ZodString;
                realm: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                realm: string;
                scheme: string;
            }, {
                realm: string;
                scheme: string;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }>>>;
}, "strip", z.ZodTypeAny, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    };
    method: "network.responseCompleted";
}, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    };
    method: "network.responseCompleted";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.responseStarted">;
    params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        response: z.ZodLazy<z.ZodObject<{
            url: z.ZodString;
            protocol: z.ZodString;
            status: z.ZodLazy<z.ZodNumber>;
            statusText: z.ZodString;
            fromCache: z.ZodBoolean;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            mimeType: z.ZodString;
            bytesReceived: z.ZodLazy<z.ZodNumber>;
            headersSize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            content: z.ZodLazy<z.ZodObject<{
                size: z.ZodLazy<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                size: number;
            }, {
                size: number;
            }>>;
            authChallenge: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                scheme: z.ZodString;
                realm: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                realm: string;
                scheme: string;
            }, {
                realm: string;
                scheme: string;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }>>>;
}, "strip", z.ZodTypeAny, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    };
    method: "network.responseStarted";
}, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    };
    method: "network.responseStarted";
}>>]>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.message">;
    params: z.ZodLazy<z.ZodObject<{
        channel: z.ZodLazy<z.ZodString>;
        data: any;
        source: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            context?: string | undefined;
        }, {
            realm: string;
            context?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        channel: string;
        source: {
            realm: string;
            context?: string | undefined;
        };
        data?: any;
    }, {
        channel: string;
        source: {
            realm: string;
            context?: string | undefined;
        };
        data?: any;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        channel: string;
        source: {
            realm: string;
            context?: string | undefined;
        };
        data?: any;
    };
    method: "script.message";
}, {
    params: {
        channel: string;
        source: {
            realm: string;
            context?: string | undefined;
        };
        data?: any;
    };
    method: "script.message";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.realmCreated">;
    params: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"window">;
        context: z.ZodLazy<z.ZodString>;
        sandbox: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }, {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"dedicated-worker">;
        owners: z.ZodTuple<[z.ZodLazy<z.ZodString>], null>;
    }, "strip", z.ZodTypeAny, {
        type: "dedicated-worker";
        owners: [string];
    }, {
        type: "dedicated-worker";
        owners: [string];
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"shared-worker">;
    }, "strip", z.ZodTypeAny, {
        type: "shared-worker";
    }, {
        type: "shared-worker";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"service-worker">;
    }, "strip", z.ZodTypeAny, {
        type: "service-worker";
    }, {
        type: "service-worker";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"worker">;
    }, "strip", z.ZodTypeAny, {
        type: "worker";
    }, {
        type: "worker";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"paint-worklet">;
    }, "strip", z.ZodTypeAny, {
        type: "paint-worklet";
    }, {
        type: "paint-worklet";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"audio-worklet">;
    }, "strip", z.ZodTypeAny, {
        type: "audio-worklet";
    }, {
        type: "audio-worklet";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"worklet">;
    }, "strip", z.ZodTypeAny, {
        type: "worklet";
    }, {
        type: "worklet";
    }>>>]>>;
}, "strip", z.ZodTypeAny, {
    params: ({
        origin: string;
        realm: string;
    } & {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "dedicated-worker";
        owners: [string];
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "shared-worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "service-worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "paint-worklet";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "audio-worklet";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "worklet";
    });
    method: "script.realmCreated";
}, {
    params: ({
        origin: string;
        realm: string;
    } & {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "dedicated-worker";
        owners: [string];
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "shared-worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "service-worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "paint-worklet";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "audio-worklet";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "worklet";
    });
    method: "script.realmCreated";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.realmDestroyed">;
    params: z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        realm: string;
    }, {
        realm: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        realm: string;
    };
    method: "script.realmDestroyed";
}, {
    params: {
        realm: string;
    };
    method: "script.realmDestroyed";
}>>]>>]>>>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
export declare const CommandSchema: z.ZodLazy<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
    id: z.ZodLazy<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    id: number;
}, {
    id: number;
}>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browser.close">;
    params: z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    params: Record<string, any>;
    method: "browser.close";
}, {
    params: Record<string, any>;
    method: "browser.close";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browser.createUserContext">;
    params: z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    params: Record<string, any>;
    method: "browser.createUserContext";
}, {
    params: Record<string, any>;
    method: "browser.createUserContext";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browser.getUserContexts">;
    params: z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    params: Record<string, any>;
    method: "browser.getUserContexts";
}, {
    params: Record<string, any>;
    method: "browser.getUserContexts";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browser.removeUserContext">;
    params: z.ZodObject<{
        userContext: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        userContext: string;
    }, {
        userContext: string;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        userContext: string;
    };
    method: "browser.removeUserContext";
}, {
    params: {
        userContext: string;
    };
    method: "browser.removeUserContext";
}>>]>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.activate">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        context: string;
    }, {
        context: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
    };
    method: "browsingContext.activate";
}, {
    params: {
        context: string;
    };
    method: "browsingContext.activate";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.captureScreenshot">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        origin: z.ZodOptional<z.ZodDefault<z.ZodEnum<["viewport", "document"]>>>;
        format: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            type: z.ZodString;
            quality: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: string;
            quality?: number | undefined;
        }, {
            type: string;
            quality?: number | undefined;
        }>>>;
        clip: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"box">;
            x: z.ZodNumber;
            y: z.ZodNumber;
            width: z.ZodNumber;
            height: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "box";
            x: number;
            y: number;
            width: number;
            height: number;
        }, {
            type: "box";
            x: number;
            y: number;
            width: number;
            height: number;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"element">;
            element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                sharedId: z.ZodLazy<z.ZodString>;
                handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                sharedId: string;
                handle?: string | undefined;
            }, {
                sharedId: string;
                handle?: string | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
        }, "strip", z.ZodTypeAny, {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        }, {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        }>>]>>>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        origin?: "viewport" | "document" | undefined;
        format?: {
            type: string;
            quality?: number | undefined;
        } | undefined;
        clip?: {
            type: "box";
            x: number;
            y: number;
            width: number;
            height: number;
        } | {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        } | undefined;
    }, {
        context: string;
        origin?: "viewport" | "document" | undefined;
        format?: {
            type: string;
            quality?: number | undefined;
        } | undefined;
        clip?: {
            type: "box";
            x: number;
            y: number;
            width: number;
            height: number;
        } | {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        origin?: "viewport" | "document" | undefined;
        format?: {
            type: string;
            quality?: number | undefined;
        } | undefined;
        clip?: {
            type: "box";
            x: number;
            y: number;
            width: number;
            height: number;
        } | {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        } | undefined;
    };
    method: "browsingContext.captureScreenshot";
}, {
    params: {
        context: string;
        origin?: "viewport" | "document" | undefined;
        format?: {
            type: string;
            quality?: number | undefined;
        } | undefined;
        clip?: {
            type: "box";
            x: number;
            y: number;
            width: number;
            height: number;
        } | {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        } | undefined;
    };
    method: "browsingContext.captureScreenshot";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.close">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        promptUnload: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        promptUnload?: boolean | undefined;
    }, {
        context: string;
        promptUnload?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        promptUnload?: boolean | undefined;
    };
    method: "browsingContext.close";
}, {
    params: {
        context: string;
        promptUnload?: boolean | undefined;
    };
    method: "browsingContext.close";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.create">;
    params: z.ZodLazy<z.ZodObject<{
        type: z.ZodLazy<z.ZodEnum<["tab", "window"]>>;
        referenceContext: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        background: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        userContext: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        type: "window" | "tab";
        referenceContext?: string | undefined;
        background?: boolean | undefined;
        userContext?: string | undefined;
    }, {
        type: "window" | "tab";
        referenceContext?: string | undefined;
        background?: boolean | undefined;
        userContext?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        type: "window" | "tab";
        referenceContext?: string | undefined;
        background?: boolean | undefined;
        userContext?: string | undefined;
    };
    method: "browsingContext.create";
}, {
    params: {
        type: "window" | "tab";
        referenceContext?: string | undefined;
        background?: boolean | undefined;
        userContext?: string | undefined;
    };
    method: "browsingContext.create";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.getTree">;
    params: z.ZodLazy<z.ZodObject<{
        maxDepth: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        root: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        maxDepth?: number | undefined;
        root?: string | undefined;
    }, {
        maxDepth?: number | undefined;
        root?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        maxDepth?: number | undefined;
        root?: string | undefined;
    };
    method: "browsingContext.getTree";
}, {
    params: {
        maxDepth?: number | undefined;
        root?: string | undefined;
    };
    method: "browsingContext.getTree";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.handleUserPrompt">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        accept: z.ZodOptional<z.ZodBoolean>;
        userText: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        accept?: boolean | undefined;
        userText?: string | undefined;
    }, {
        context: string;
        accept?: boolean | undefined;
        userText?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        accept?: boolean | undefined;
        userText?: string | undefined;
    };
    method: "browsingContext.handleUserPrompt";
}, {
    params: {
        context: string;
        accept?: boolean | undefined;
        userText?: string | undefined;
    };
    method: "browsingContext.handleUserPrompt";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.locateNodes">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        locator: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"css">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "css";
            value: string;
        }, {
            type: "css";
            value: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"innerText">;
            value: z.ZodString;
            ignoreCase: z.ZodOptional<z.ZodBoolean>;
            matchType: z.ZodOptional<z.ZodEnum<["full", "partial"]>>;
            maxDepth: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            type: "innerText";
            value: string;
            ignoreCase?: boolean | undefined;
            matchType?: "partial" | "full" | undefined;
            maxDepth?: number | undefined;
        }, {
            type: "innerText";
            value: string;
            ignoreCase?: boolean | undefined;
            matchType?: "partial" | "full" | undefined;
            maxDepth?: number | undefined;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"xpath">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "xpath";
            value: string;
        }, {
            type: "xpath";
            value: string;
        }>>]>>;
        maxNodeCount: any;
        ownership: z.ZodOptional<z.ZodLazy<z.ZodEnum<["root", "none"]>>>;
        sandbox: z.ZodOptional<z.ZodString>;
        serializationOptions: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            maxDomDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            maxObjectDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            includeShadowTree: z.ZodOptional<z.ZodDefault<z.ZodEnum<["none", "open", "all"]>>>;
        }, "strip", z.ZodTypeAny, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }>>>;
        startNodes: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            sharedId: z.ZodLazy<z.ZodString>;
            handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            sharedId: string;
            handle?: string | undefined;
        }, {
            sharedId: string;
            handle?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">>;
    }, "strip", z.ZodTypeAny, {
        [x: string]: any;
        context?: string | undefined;
        locator?: {
            type: "css";
            value: string;
        } | {
            type: "innerText";
            value: string;
            ignoreCase?: boolean | undefined;
            matchType?: "partial" | "full" | undefined;
            maxDepth?: number | undefined;
        } | {
            type: "xpath";
            value: string;
        } | undefined;
        maxNodeCount?: any;
        ownership?: "none" | "root" | undefined;
        sandbox?: string | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        startNodes?: ({
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>)[] | undefined;
    }, {
        [x: string]: any;
        context?: string | undefined;
        locator?: {
            type: "css";
            value: string;
        } | {
            type: "innerText";
            value: string;
            ignoreCase?: boolean | undefined;
            matchType?: "partial" | "full" | undefined;
            maxDepth?: number | undefined;
        } | {
            type: "xpath";
            value: string;
        } | undefined;
        maxNodeCount?: any;
        ownership?: "none" | "root" | undefined;
        sandbox?: string | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        startNodes?: ({
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>)[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        [x: string]: any;
        context?: string | undefined;
        locator?: {
            type: "css";
            value: string;
        } | {
            type: "innerText";
            value: string;
            ignoreCase?: boolean | undefined;
            matchType?: "partial" | "full" | undefined;
            maxDepth?: number | undefined;
        } | {
            type: "xpath";
            value: string;
        } | undefined;
        maxNodeCount?: any;
        ownership?: "none" | "root" | undefined;
        sandbox?: string | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        startNodes?: ({
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>)[] | undefined;
    };
    method: "browsingContext.locateNodes";
}, {
    params: {
        [x: string]: any;
        context?: string | undefined;
        locator?: {
            type: "css";
            value: string;
        } | {
            type: "innerText";
            value: string;
            ignoreCase?: boolean | undefined;
            matchType?: "partial" | "full" | undefined;
            maxDepth?: number | undefined;
        } | {
            type: "xpath";
            value: string;
        } | undefined;
        maxNodeCount?: any;
        ownership?: "none" | "root" | undefined;
        sandbox?: string | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        startNodes?: ({
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>)[] | undefined;
    };
    method: "browsingContext.locateNodes";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.navigate">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        url: z.ZodString;
        wait: z.ZodOptional<z.ZodLazy<z.ZodEnum<["none", "interactive", "complete"]>>>;
    }, "strip", z.ZodTypeAny, {
        url: string;
        context: string;
        wait?: "none" | "interactive" | "complete" | undefined;
    }, {
        url: string;
        context: string;
        wait?: "none" | "interactive" | "complete" | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        context: string;
        wait?: "none" | "interactive" | "complete" | undefined;
    };
    method: "browsingContext.navigate";
}, {
    params: {
        url: string;
        context: string;
        wait?: "none" | "interactive" | "complete" | undefined;
    };
    method: "browsingContext.navigate";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.print">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        background: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        margin: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            bottom: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            left: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            right: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            top: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            bottom?: number | undefined;
            left?: number | undefined;
            right?: number | undefined;
            top?: number | undefined;
        }, {
            bottom?: number | undefined;
            left?: number | undefined;
            right?: number | undefined;
            top?: number | undefined;
        }>>>;
        orientation: z.ZodOptional<z.ZodDefault<z.ZodEnum<["portrait", "landscape"]>>>;
        page: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            height: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            width: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            height?: number | undefined;
            width?: number | undefined;
        }, {
            height?: number | undefined;
            width?: number | undefined;
        }>>>;
        pageRanges: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodString]>, "many">>;
        scale: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        shrinkToFit: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        background?: boolean | undefined;
        margin?: {
            bottom?: number | undefined;
            left?: number | undefined;
            right?: number | undefined;
            top?: number | undefined;
        } | undefined;
        orientation?: "portrait" | "landscape" | undefined;
        page?: {
            height?: number | undefined;
            width?: number | undefined;
        } | undefined;
        pageRanges?: (string | number)[] | undefined;
        scale?: number | undefined;
        shrinkToFit?: boolean | undefined;
    }, {
        context: string;
        background?: boolean | undefined;
        margin?: {
            bottom?: number | undefined;
            left?: number | undefined;
            right?: number | undefined;
            top?: number | undefined;
        } | undefined;
        orientation?: "portrait" | "landscape" | undefined;
        page?: {
            height?: number | undefined;
            width?: number | undefined;
        } | undefined;
        pageRanges?: (string | number)[] | undefined;
        scale?: number | undefined;
        shrinkToFit?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        background?: boolean | undefined;
        margin?: {
            bottom?: number | undefined;
            left?: number | undefined;
            right?: number | undefined;
            top?: number | undefined;
        } | undefined;
        orientation?: "portrait" | "landscape" | undefined;
        page?: {
            height?: number | undefined;
            width?: number | undefined;
        } | undefined;
        pageRanges?: (string | number)[] | undefined;
        scale?: number | undefined;
        shrinkToFit?: boolean | undefined;
    };
    method: "browsingContext.print";
}, {
    params: {
        context: string;
        background?: boolean | undefined;
        margin?: {
            bottom?: number | undefined;
            left?: number | undefined;
            right?: number | undefined;
            top?: number | undefined;
        } | undefined;
        orientation?: "portrait" | "landscape" | undefined;
        page?: {
            height?: number | undefined;
            width?: number | undefined;
        } | undefined;
        pageRanges?: (string | number)[] | undefined;
        scale?: number | undefined;
        shrinkToFit?: boolean | undefined;
    };
    method: "browsingContext.print";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.reload">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        ignoreCache: z.ZodOptional<z.ZodBoolean>;
        wait: z.ZodOptional<z.ZodLazy<z.ZodEnum<["none", "interactive", "complete"]>>>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        ignoreCache?: boolean | undefined;
        wait?: "none" | "interactive" | "complete" | undefined;
    }, {
        context: string;
        ignoreCache?: boolean | undefined;
        wait?: "none" | "interactive" | "complete" | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        ignoreCache?: boolean | undefined;
        wait?: "none" | "interactive" | "complete" | undefined;
    };
    method: "browsingContext.reload";
}, {
    params: {
        context: string;
        ignoreCache?: boolean | undefined;
        wait?: "none" | "interactive" | "complete" | undefined;
    };
    method: "browsingContext.reload";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.setViewport">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        viewport: z.ZodOptional<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            width: z.ZodLazy<z.ZodNumber>;
            height: z.ZodLazy<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
        }, {
            width: number;
            height: number;
        }>>, z.ZodNull]>>;
        devicePixelRatio: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        viewport?: {
            width: number;
            height: number;
        } | null | undefined;
        devicePixelRatio?: number | null | undefined;
    }, {
        context: string;
        viewport?: {
            width: number;
            height: number;
        } | null | undefined;
        devicePixelRatio?: number | null | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        viewport?: {
            width: number;
            height: number;
        } | null | undefined;
        devicePixelRatio?: number | null | undefined;
    };
    method: "browsingContext.setViewport";
}, {
    params: {
        context: string;
        viewport?: {
            width: number;
            height: number;
        } | null | undefined;
        devicePixelRatio?: number | null | undefined;
    };
    method: "browsingContext.setViewport";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.traverseHistory">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        delta: z.ZodLazy<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        delta: number;
    }, {
        context: string;
        delta: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        delta: number;
    };
    method: "browsingContext.traverseHistory";
}, {
    params: {
        context: string;
        delta: number;
    };
    method: "browsingContext.traverseHistory";
}>>]>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"input.performActions">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"none">;
            id: z.ZodString;
            actions: z.ZodArray<z.ZodLazy<z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"pause">;
                duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                type: "pause";
                duration?: number | undefined;
            }, {
                type: "pause";
                duration?: number | undefined;
            }>>>, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "none";
            actions: {
                type: "pause";
                duration?: number | undefined;
            }[];
            id: string;
        }, {
            type: "none";
            actions: {
                type: "pause";
                duration?: number | undefined;
            }[];
            id: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"key">;
            id: z.ZodString;
            actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"pause">;
                duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                type: "pause";
                duration?: number | undefined;
            }, {
                type: "pause";
                duration?: number | undefined;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"keyDown">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "keyDown";
                value: string;
            }, {
                type: "keyDown";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"keyUp">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "keyUp";
                value: string;
            }, {
                type: "keyUp";
                value: string;
            }>>]>>, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "key";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "keyDown";
                value: string;
            } | {
                type: "keyUp";
                value: string;
            })[];
            id: string;
        }, {
            type: "key";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "keyDown";
                value: string;
            } | {
                type: "keyUp";
                value: string;
            })[];
            id: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"pointer">;
            id: z.ZodString;
            parameters: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                pointerType: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodEnum<["mouse", "pen", "touch"]>>>>;
            }, "strip", z.ZodTypeAny, {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            }, {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            }>>>;
            actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"pause">;
                duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                type: "pause";
                duration?: number | undefined;
            }, {
                type: "pause";
                duration?: number | undefined;
            }>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                type: z.ZodLiteral<"pointerDown">;
                button: z.ZodLazy<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: "pointerDown";
                button: number;
            }, {
                type: "pointerDown";
                button: number;
            }>, z.ZodLazy<z.ZodObject<{
                width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }, {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                type: z.ZodLiteral<"pointerUp">;
                button: z.ZodLazy<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: "pointerUp";
                button: number;
            }, {
                type: "pointerUp";
                button: number;
            }>, z.ZodLazy<z.ZodObject<{
                width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }, {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                type: z.ZodLiteral<"pointerMove">;
                x: z.ZodLazy<z.ZodNumber>;
                y: z.ZodLazy<z.ZodNumber>;
                duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                origin: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLiteral<"viewport">, z.ZodLiteral<"pointer">, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"element">;
                    element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                        sharedId: z.ZodLazy<z.ZodString>;
                        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
                    }, "strip", z.ZodTypeAny, {
                        sharedId: string;
                        handle?: string | undefined;
                    }, {
                        sharedId: string;
                        handle?: string | undefined;
                    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                }, {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                }>>]>>>;
            }, "strip", z.ZodTypeAny, {
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            }, {
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            }>, z.ZodLazy<z.ZodObject<{
                width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }, {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }>>>>]>>, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "pointer";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | ({
                type: "pointerDown";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerUp";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }))[];
            id: string;
            parameters?: {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            } | undefined;
        }, {
            type: "pointer";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | ({
                type: "pointerDown";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerUp";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }))[];
            id: string;
            parameters?: {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            } | undefined;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"wheel">;
            id: z.ZodString;
            actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"pause">;
                duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                type: "pause";
                duration?: number | undefined;
            }, {
                type: "pause";
                duration?: number | undefined;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"scroll">;
                x: z.ZodLazy<z.ZodNumber>;
                y: z.ZodLazy<z.ZodNumber>;
                deltaX: z.ZodLazy<z.ZodNumber>;
                deltaY: z.ZodLazy<z.ZodNumber>;
                duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                origin: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodUnion<[z.ZodLiteral<"viewport">, z.ZodLiteral<"pointer">, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"element">;
                    element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                        sharedId: z.ZodLazy<z.ZodString>;
                        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
                    }, "strip", z.ZodTypeAny, {
                        sharedId: string;
                        handle?: string | undefined;
                    }, {
                        sharedId: string;
                        handle?: string | undefined;
                    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                }, {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                }>>]>>>>;
            }, "strip", z.ZodTypeAny, {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            }, {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            }>>]>>, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "wheel";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            })[];
            id: string;
        }, {
            type: "wheel";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            })[];
            id: string;
        }>>]>>, "many">;
    }, "strip", z.ZodTypeAny, {
        context: string;
        actions: ({
            type: "none";
            actions: {
                type: "pause";
                duration?: number | undefined;
            }[];
            id: string;
        } | {
            type: "key";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "keyDown";
                value: string;
            } | {
                type: "keyUp";
                value: string;
            })[];
            id: string;
        } | {
            type: "pointer";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | ({
                type: "pointerDown";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerUp";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }))[];
            id: string;
            parameters?: {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            } | undefined;
        } | {
            type: "wheel";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            })[];
            id: string;
        })[];
    }, {
        context: string;
        actions: ({
            type: "none";
            actions: {
                type: "pause";
                duration?: number | undefined;
            }[];
            id: string;
        } | {
            type: "key";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "keyDown";
                value: string;
            } | {
                type: "keyUp";
                value: string;
            })[];
            id: string;
        } | {
            type: "pointer";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | ({
                type: "pointerDown";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerUp";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }))[];
            id: string;
            parameters?: {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            } | undefined;
        } | {
            type: "wheel";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            })[];
            id: string;
        })[];
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        actions: ({
            type: "none";
            actions: {
                type: "pause";
                duration?: number | undefined;
            }[];
            id: string;
        } | {
            type: "key";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "keyDown";
                value: string;
            } | {
                type: "keyUp";
                value: string;
            })[];
            id: string;
        } | {
            type: "pointer";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | ({
                type: "pointerDown";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerUp";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }))[];
            id: string;
            parameters?: {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            } | undefined;
        } | {
            type: "wheel";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            })[];
            id: string;
        })[];
    };
    method: "input.performActions";
}, {
    params: {
        context: string;
        actions: ({
            type: "none";
            actions: {
                type: "pause";
                duration?: number | undefined;
            }[];
            id: string;
        } | {
            type: "key";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "keyDown";
                value: string;
            } | {
                type: "keyUp";
                value: string;
            })[];
            id: string;
        } | {
            type: "pointer";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | ({
                type: "pointerDown";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerUp";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }))[];
            id: string;
            parameters?: {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            } | undefined;
        } | {
            type: "wheel";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            })[];
            id: string;
        })[];
    };
    method: "input.performActions";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"input.releaseActions">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        context: string;
    }, {
        context: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
    };
    method: "input.releaseActions";
}, {
    params: {
        context: string;
    };
    method: "input.releaseActions";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"input.setFiles">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            sharedId: z.ZodLazy<z.ZodString>;
            handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            sharedId: string;
            handle?: string | undefined;
        }, {
            sharedId: string;
            handle?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
        files: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        element: {
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>;
        context: string;
        files: string[];
    }, {
        element: {
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>;
        context: string;
        files: string[];
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        element: {
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>;
        context: string;
        files: string[];
    };
    method: "input.setFiles";
}, {
    params: {
        element: {
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>;
        context: string;
        files: string[];
    };
    method: "input.setFiles";
}>>]>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.addIntercept">;
    params: z.ZodLazy<z.ZodObject<{
        phases: z.ZodArray<z.ZodLazy<z.ZodEnum<["beforeRequestSent", "responseStarted", "authRequired"]>>, "many">;
        contexts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
        urlPatterns: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"pattern">;
            protocol: z.ZodOptional<z.ZodString>;
            hostname: z.ZodOptional<z.ZodString>;
            port: z.ZodOptional<z.ZodString>;
            pathname: z.ZodOptional<z.ZodString>;
            search: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "pattern";
            protocol?: string | undefined;
            hostname?: string | undefined;
            port?: string | undefined;
            pathname?: string | undefined;
            search?: string | undefined;
        }, {
            type: "pattern";
            protocol?: string | undefined;
            hostname?: string | undefined;
            port?: string | undefined;
            pathname?: string | undefined;
            search?: string | undefined;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"string">;
            pattern: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "string";
            pattern: string;
        }, {
            type: "string";
            pattern: string;
        }>>]>>, "many">>;
    }, "strip", z.ZodTypeAny, {
        phases: ("beforeRequestSent" | "responseStarted" | "authRequired")[];
        contexts?: string[] | undefined;
        urlPatterns?: ({
            type: "pattern";
            protocol?: string | undefined;
            hostname?: string | undefined;
            port?: string | undefined;
            pathname?: string | undefined;
            search?: string | undefined;
        } | {
            type: "string";
            pattern: string;
        })[] | undefined;
    }, {
        phases: ("beforeRequestSent" | "responseStarted" | "authRequired")[];
        contexts?: string[] | undefined;
        urlPatterns?: ({
            type: "pattern";
            protocol?: string | undefined;
            hostname?: string | undefined;
            port?: string | undefined;
            pathname?: string | undefined;
            search?: string | undefined;
        } | {
            type: "string";
            pattern: string;
        })[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        phases: ("beforeRequestSent" | "responseStarted" | "authRequired")[];
        contexts?: string[] | undefined;
        urlPatterns?: ({
            type: "pattern";
            protocol?: string | undefined;
            hostname?: string | undefined;
            port?: string | undefined;
            pathname?: string | undefined;
            search?: string | undefined;
        } | {
            type: "string";
            pattern: string;
        })[] | undefined;
    };
    method: "network.addIntercept";
}, {
    params: {
        phases: ("beforeRequestSent" | "responseStarted" | "authRequired")[];
        contexts?: string[] | undefined;
        urlPatterns?: ({
            type: "pattern";
            protocol?: string | undefined;
            hostname?: string | undefined;
            port?: string | undefined;
            pathname?: string | undefined;
            search?: string | undefined;
        } | {
            type: "string";
            pattern: string;
        })[] | undefined;
    };
    method: "network.addIntercept";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.continueRequest">;
    params: z.ZodLazy<z.ZodObject<{
        request: z.ZodLazy<z.ZodString>;
        body: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"string">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "string";
            value: string;
        }, {
            type: "string";
            value: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            value: string;
        }, {
            type: "base64";
            value: string;
        }>>]>>>;
        cookies: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }>>, "many">>;
        headers: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }>>, "many">>;
        method: z.ZodOptional<z.ZodString>;
        url: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        method?: string | undefined;
        url?: string | undefined;
    }, {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        method?: string | undefined;
        url?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        method?: string | undefined;
        url?: string | undefined;
    };
    method: "network.continueRequest";
}, {
    params: {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        method?: string | undefined;
        url?: string | undefined;
    };
    method: "network.continueRequest";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.continueResponse">;
    params: z.ZodLazy<z.ZodObject<{
        request: z.ZodLazy<z.ZodString>;
        cookies: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
            domain: z.ZodOptional<z.ZodString>;
            httpOnly: z.ZodOptional<z.ZodBoolean>;
            expiry: z.ZodOptional<z.ZodString>;
            maxAge: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            path: z.ZodOptional<z.ZodString>;
            sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
            secure: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }>>, "many">>;
        credentials: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"password">;
            username: z.ZodString;
            password: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "password";
            password: string;
            username: string;
        }, {
            type: "password";
            password: string;
            username: string;
        }>>>;
        headers: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }>>, "many">>;
        reasonPhrase: z.ZodOptional<z.ZodString>;
        statusCode: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        request: string;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        credentials?: {
            type: "password";
            password: string;
            username: string;
        } | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    }, {
        request: string;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        credentials?: {
            type: "password";
            password: string;
            username: string;
        } | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        request: string;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        credentials?: {
            type: "password";
            password: string;
            username: string;
        } | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    };
    method: "network.continueResponse";
}, {
    params: {
        request: string;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        credentials?: {
            type: "password";
            password: string;
            username: string;
        } | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    };
    method: "network.continueResponse";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.continueWithAuth">;
    params: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        request: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        request: string;
    }, {
        request: string;
    }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        action: z.ZodLiteral<"provideCredentials">;
        credentials: z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"password">;
            username: z.ZodString;
            password: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "password";
            password: string;
            username: string;
        }, {
            type: "password";
            password: string;
            username: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        credentials: {
            type: "password";
            password: string;
            username: string;
        };
        action: "provideCredentials";
    }, {
        credentials: {
            type: "password";
            password: string;
            username: string;
        };
        action: "provideCredentials";
    }>>, z.ZodLazy<z.ZodObject<{
        action: z.ZodEnum<["default", "cancel"]>;
    }, "strip", z.ZodTypeAny, {
        action: "default" | "cancel";
    }, {
        action: "default" | "cancel";
    }>>]>>>;
}, "strip", z.ZodTypeAny, {
    params: ({
        request: string;
    } & {
        credentials: {
            type: "password";
            password: string;
            username: string;
        };
        action: "provideCredentials";
    }) | ({
        request: string;
    } & {
        action: "default" | "cancel";
    });
    method: "network.continueWithAuth";
}, {
    params: ({
        request: string;
    } & {
        credentials: {
            type: "password";
            password: string;
            username: string;
        };
        action: "provideCredentials";
    }) | ({
        request: string;
    } & {
        action: "default" | "cancel";
    });
    method: "network.continueWithAuth";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.failRequest">;
    params: z.ZodLazy<z.ZodObject<{
        request: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        request: string;
    }, {
        request: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        request: string;
    };
    method: "network.failRequest";
}, {
    params: {
        request: string;
    };
    method: "network.failRequest";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.provideResponse">;
    params: z.ZodLazy<z.ZodObject<{
        request: z.ZodLazy<z.ZodString>;
        body: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"string">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "string";
            value: string;
        }, {
            type: "string";
            value: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            value: string;
        }, {
            type: "base64";
            value: string;
        }>>]>>>;
        cookies: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
            domain: z.ZodOptional<z.ZodString>;
            httpOnly: z.ZodOptional<z.ZodBoolean>;
            expiry: z.ZodOptional<z.ZodString>;
            maxAge: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            path: z.ZodOptional<z.ZodString>;
            sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
            secure: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }>>, "many">>;
        headers: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }>>, "many">>;
        reasonPhrase: z.ZodOptional<z.ZodString>;
        statusCode: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    }, {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    };
    method: "network.provideResponse";
}, {
    params: {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    };
    method: "network.provideResponse";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.removeIntercept">;
    params: z.ZodLazy<z.ZodObject<{
        intercept: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        intercept: string;
    }, {
        intercept: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        intercept: string;
    };
    method: "network.removeIntercept";
}, {
    params: {
        intercept: string;
    };
    method: "network.removeIntercept";
}>>]>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.addPreloadScript">;
    params: z.ZodLazy<z.ZodObject<{
        functionDeclaration: z.ZodString;
        arguments: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"channel">;
            value: z.ZodLazy<z.ZodObject<{
                channel: z.ZodLazy<z.ZodString>;
                serializationOptions: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                    maxDomDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
                    maxObjectDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
                    includeShadowTree: z.ZodOptional<z.ZodDefault<z.ZodEnum<["none", "open", "all"]>>>;
                }, "strip", z.ZodTypeAny, {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                }, {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                }>>>;
                ownership: z.ZodOptional<z.ZodLazy<z.ZodEnum<["root", "none"]>>>;
            }, "strip", z.ZodTypeAny, {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            }, {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "channel";
            value: {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            };
        }, {
            type: "channel";
            value: {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            };
        }>>, "many">>;
        contexts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
        sandbox: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        functionDeclaration: string;
        arguments?: {
            type: "channel";
            value: {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            };
        }[] | undefined;
        contexts?: string[] | undefined;
        sandbox?: string | undefined;
    }, {
        functionDeclaration: string;
        arguments?: {
            type: "channel";
            value: {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            };
        }[] | undefined;
        contexts?: string[] | undefined;
        sandbox?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        functionDeclaration: string;
        arguments?: {
            type: "channel";
            value: {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            };
        }[] | undefined;
        contexts?: string[] | undefined;
        sandbox?: string | undefined;
    };
    method: "script.addPreloadScript";
}, {
    params: {
        functionDeclaration: string;
        arguments?: {
            type: "channel";
            value: {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            };
        }[] | undefined;
        contexts?: string[] | undefined;
        sandbox?: string | undefined;
    };
    method: "script.addPreloadScript";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.callFunction">;
    params: z.ZodLazy<z.ZodObject<{
        functionDeclaration: z.ZodString;
        awaitPromise: z.ZodBoolean;
        target: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
        }, {
            realm: string;
        }>>, z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            sandbox: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            context: string;
            sandbox?: string | undefined;
        }, {
            context: string;
            sandbox?: string | undefined;
        }>>]>>;
        arguments: z.ZodOptional<z.ZodArray<any, "many">>;
        resultOwnership: z.ZodOptional<z.ZodLazy<z.ZodEnum<["root", "none"]>>>;
        serializationOptions: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            maxDomDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            maxObjectDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            includeShadowTree: z.ZodOptional<z.ZodDefault<z.ZodEnum<["none", "open", "all"]>>>;
        }, "strip", z.ZodTypeAny, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }>>>;
        this: any;
        userActivation: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        functionDeclaration: string;
        arguments?: any[] | undefined;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        this?: any;
        userActivation?: boolean | undefined;
    }, {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        functionDeclaration: string;
        arguments?: any[] | undefined;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        this?: any;
        userActivation?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        functionDeclaration: string;
        arguments?: any[] | undefined;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        this?: any;
        userActivation?: boolean | undefined;
    };
    method: "script.callFunction";
}, {
    params: {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        functionDeclaration: string;
        arguments?: any[] | undefined;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        this?: any;
        userActivation?: boolean | undefined;
    };
    method: "script.callFunction";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.disown">;
    params: z.ZodLazy<z.ZodObject<{
        handles: z.ZodArray<z.ZodLazy<z.ZodString>, "many">;
        target: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
        }, {
            realm: string;
        }>>, z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            sandbox: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            context: string;
            sandbox?: string | undefined;
        }, {
            context: string;
            sandbox?: string | undefined;
        }>>]>>;
    }, "strip", z.ZodTypeAny, {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        handles: string[];
    }, {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        handles: string[];
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        handles: string[];
    };
    method: "script.disown";
}, {
    params: {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        handles: string[];
    };
    method: "script.disown";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.evaluate">;
    params: z.ZodLazy<z.ZodObject<{
        expression: z.ZodString;
        target: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
        }, {
            realm: string;
        }>>, z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            sandbox: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            context: string;
            sandbox?: string | undefined;
        }, {
            context: string;
            sandbox?: string | undefined;
        }>>]>>;
        awaitPromise: z.ZodBoolean;
        resultOwnership: z.ZodOptional<z.ZodLazy<z.ZodEnum<["root", "none"]>>>;
        serializationOptions: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            maxDomDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            maxObjectDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            includeShadowTree: z.ZodOptional<z.ZodDefault<z.ZodEnum<["none", "open", "all"]>>>;
        }, "strip", z.ZodTypeAny, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }>>>;
        userActivation: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        expression: string;
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        userActivation?: boolean | undefined;
    }, {
        expression: string;
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        userActivation?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        expression: string;
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        userActivation?: boolean | undefined;
    };
    method: "script.evaluate";
}, {
    params: {
        expression: string;
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        userActivation?: boolean | undefined;
    };
    method: "script.evaluate";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.getRealms">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        type: z.ZodOptional<z.ZodLazy<z.ZodEnum<["window", "dedicated-worker", "shared-worker", "service-worker", "worker", "paint-worklet", "audio-worklet", "worklet"]>>>;
    }, "strip", z.ZodTypeAny, {
        context?: string | undefined;
        type?: "worker" | "window" | "dedicated-worker" | "shared-worker" | "service-worker" | "paint-worklet" | "audio-worklet" | "worklet" | undefined;
    }, {
        context?: string | undefined;
        type?: "worker" | "window" | "dedicated-worker" | "shared-worker" | "service-worker" | "paint-worklet" | "audio-worklet" | "worklet" | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context?: string | undefined;
        type?: "worker" | "window" | "dedicated-worker" | "shared-worker" | "service-worker" | "paint-worklet" | "audio-worklet" | "worklet" | undefined;
    };
    method: "script.getRealms";
}, {
    params: {
        context?: string | undefined;
        type?: "worker" | "window" | "dedicated-worker" | "shared-worker" | "service-worker" | "paint-worklet" | "audio-worklet" | "worklet" | undefined;
    };
    method: "script.getRealms";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.removePreloadScript">;
    params: z.ZodLazy<z.ZodObject<{
        script: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        script: string;
    }, {
        script: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        script: string;
    };
    method: "script.removePreloadScript";
}, {
    params: {
        script: string;
    };
    method: "script.removePreloadScript";
}>>]>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"session.end">;
    params: z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    params: Record<string, any>;
    method: "session.end";
}, {
    params: Record<string, any>;
    method: "session.end";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"session.new">;
    params: z.ZodLazy<z.ZodObject<{
        capabilities: z.ZodLazy<z.ZodObject<{
            alwaysMatch: z.ZodOptional<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                acceptInsecureCerts: z.ZodOptional<z.ZodBoolean>;
                browserName: z.ZodOptional<z.ZodString>;
                browserVersion: z.ZodOptional<z.ZodString>;
                platformName: z.ZodOptional<z.ZodString>;
                proxy: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"autodetect">;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "autodetect";
                }, {
                    proxyType: "autodetect";
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"direct">;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "direct";
                }, {
                    proxyType: "direct";
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"manual">;
                    ftpProxy: z.ZodOptional<z.ZodString>;
                    httpProxy: z.ZodOptional<z.ZodString>;
                    sslProxy: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                }, {
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    socksProxy: z.ZodString;
                    socksVersion: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    socksProxy: string;
                    socksVersion: number;
                }, {
                    socksProxy: string;
                    socksVersion: number;
                }>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>, z.ZodObject<{
                    noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, "strip", z.ZodTypeAny, {
                    noProxy?: string[] | undefined;
                }, {
                    noProxy?: string[] | undefined;
                }>>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"pac">;
                    proxyAutoconfigUrl: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                }, {
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"system">;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "system";
                }, {
                    proxyType: "system";
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>>;
                webSocketUrl: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            }, {
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>>;
            firstMatch: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                acceptInsecureCerts: z.ZodOptional<z.ZodBoolean>;
                browserName: z.ZodOptional<z.ZodString>;
                browserVersion: z.ZodOptional<z.ZodString>;
                platformName: z.ZodOptional<z.ZodString>;
                proxy: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"autodetect">;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "autodetect";
                }, {
                    proxyType: "autodetect";
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"direct">;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "direct";
                }, {
                    proxyType: "direct";
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"manual">;
                    ftpProxy: z.ZodOptional<z.ZodString>;
                    httpProxy: z.ZodOptional<z.ZodString>;
                    sslProxy: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                }, {
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    socksProxy: z.ZodString;
                    socksVersion: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    socksProxy: string;
                    socksVersion: number;
                }, {
                    socksProxy: string;
                    socksVersion: number;
                }>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>, z.ZodObject<{
                    noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, "strip", z.ZodTypeAny, {
                    noProxy?: string[] | undefined;
                }, {
                    noProxy?: string[] | undefined;
                }>>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"pac">;
                    proxyAutoconfigUrl: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                }, {
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"system">;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "system";
                }, {
                    proxyType: "system";
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>>;
                webSocketUrl: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            }, {
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">>;
        }, "strip", z.ZodTypeAny, {
            alwaysMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>) | undefined;
            firstMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>)[] | undefined;
        }, {
            alwaysMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>) | undefined;
            firstMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>)[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        capabilities: {
            alwaysMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>) | undefined;
            firstMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>)[] | undefined;
        };
    }, {
        capabilities: {
            alwaysMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>) | undefined;
            firstMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>)[] | undefined;
        };
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        capabilities: {
            alwaysMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>) | undefined;
            firstMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>)[] | undefined;
        };
    };
    method: "session.new";
}, {
    params: {
        capabilities: {
            alwaysMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>) | undefined;
            firstMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>)[] | undefined;
        };
    };
    method: "session.new";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"session.status">;
    params: z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    params: Record<string, any>;
    method: "session.status";
}, {
    params: Record<string, any>;
    method: "session.status";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"session.subscribe">;
    params: z.ZodLazy<z.ZodObject<{
        events: z.ZodArray<z.ZodString, "many">;
        contexts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        events: string[];
        contexts?: string[] | undefined;
    }, {
        events: string[];
        contexts?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        events: string[];
        contexts?: string[] | undefined;
    };
    method: "session.subscribe";
}, {
    params: {
        events: string[];
        contexts?: string[] | undefined;
    };
    method: "session.subscribe";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"session.unsubscribe">;
    params: z.ZodLazy<z.ZodObject<{
        events: z.ZodArray<z.ZodString, "many">;
        contexts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        events: string[];
        contexts?: string[] | undefined;
    }, {
        events: string[];
        contexts?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        events: string[];
        contexts?: string[] | undefined;
    };
    method: "session.unsubscribe";
}, {
    params: {
        events: string[];
        contexts?: string[] | undefined;
    };
    method: "session.unsubscribe";
}>>]>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"storage.deleteCookies">;
    params: z.ZodLazy<z.ZodObject<{
        filter: z.ZodOptional<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            value: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>>;
            domain: z.ZodOptional<z.ZodString>;
            path: z.ZodOptional<z.ZodString>;
            size: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            httpOnly: z.ZodOptional<z.ZodBoolean>;
            secure: z.ZodOptional<z.ZodBoolean>;
            sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
            expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        }, {
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>>;
        partition: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"context">;
            context: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "context";
            context: string;
        }, {
            type: "context";
            context: string;
        }>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            type: z.ZodLiteral<"storageKey">;
            userContext: z.ZodOptional<z.ZodString>;
            sourceOrigin: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }, {
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>]>>>;
    }, "strip", z.ZodTypeAny, {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    }, {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    };
    method: "storage.deleteCookies";
}, {
    params: {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    };
    method: "storage.deleteCookies";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"storage.getCookies">;
    params: z.ZodLazy<z.ZodObject<{
        filter: z.ZodOptional<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            value: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>>;
            domain: z.ZodOptional<z.ZodString>;
            path: z.ZodOptional<z.ZodString>;
            size: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            httpOnly: z.ZodOptional<z.ZodBoolean>;
            secure: z.ZodOptional<z.ZodBoolean>;
            sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
            expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        }, {
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>>;
        partition: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"context">;
            context: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "context";
            context: string;
        }, {
            type: "context";
            context: string;
        }>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            type: z.ZodLiteral<"storageKey">;
            userContext: z.ZodOptional<z.ZodString>;
            sourceOrigin: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }, {
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>]>>>;
    }, "strip", z.ZodTypeAny, {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    }, {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    };
    method: "storage.getCookies";
}, {
    params: {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    };
    method: "storage.getCookies";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"storage.setCookie">;
    params: z.ZodLazy<z.ZodObject<{
        cookie: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
            domain: z.ZodString;
            path: z.ZodOptional<z.ZodString>;
            httpOnly: z.ZodOptional<z.ZodBoolean>;
            secure: z.ZodOptional<z.ZodBoolean>;
            sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
            expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain: string;
            path?: string | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain: string;
            path?: string | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
        partition: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"context">;
            context: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "context";
            context: string;
        }, {
            type: "context";
            context: string;
        }>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            type: z.ZodLiteral<"storageKey">;
            userContext: z.ZodOptional<z.ZodString>;
            sourceOrigin: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }, {
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>]>>>;
    }, "strip", z.ZodTypeAny, {
        cookie: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain: string;
            path?: string | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    }, {
        cookie: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain: string;
            path?: string | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        cookie: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain: string;
            path?: string | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    };
    method: "storage.setCookie";
}, {
    params: {
        cookie: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain: string;
            path?: string | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    };
    method: "storage.setCookie";
}>>]>>]>>>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
export declare const CommandResponseSchema: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
    type: z.ZodLiteral<"success">;
    id: z.ZodLazy<z.ZodNumber>;
    result: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        data: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        data: string;
    }, {
        data: string;
    }>>, z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        context: string;
    }, {
        context: string;
    }>>, z.ZodLazy<z.ZodObject<{
        contexts: any;
    }, "strip", z.ZodTypeAny, {
        contexts?: any;
    }, {
        contexts?: any;
    }>>, z.ZodLazy<z.ZodObject<{
        nodes: z.ZodArray<any, "many">;
    }, "strip", z.ZodTypeAny, {
        nodes: any[];
    }, {
        nodes: any[];
    }>>, z.ZodLazy<z.ZodObject<{
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
    }, {
        url: string;
        navigation: string | null;
    }>>, z.ZodLazy<z.ZodObject<{
        data: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        data: string;
    }, {
        data: string;
    }>>, z.ZodLazy<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>]>>, z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>, z.ZodLazy<z.ZodLazy<z.ZodObject<{
        intercept: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        intercept: string;
    }, {
        intercept: string;
    }>>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        script: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        script: string;
    }, {
        script: string;
    }>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"success">;
        result: any;
        realm: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "success";
        realm: string;
        result?: any;
    }, {
        type: "success";
        realm: string;
        result?: any;
    }>>, z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"exception">;
        exceptionDetails: z.ZodLazy<z.ZodObject<{
            columnNumber: z.ZodLazy<z.ZodNumber>;
            exception: any;
            lineNumber: z.ZodLazy<z.ZodNumber>;
            stackTrace: z.ZodLazy<z.ZodObject<{
                callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                    columnNumber: z.ZodLazy<z.ZodNumber>;
                    functionName: z.ZodString;
                    lineNumber: z.ZodLazy<z.ZodNumber>;
                    url: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }, {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }>>, "many">;
            }, "strip", z.ZodTypeAny, {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            }, {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            }>>;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        }, {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        }>>;
        realm: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }, {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }>>]>>, z.ZodLazy<z.ZodObject<{
        realms: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"window">;
            context: z.ZodLazy<z.ZodString>;
            sandbox: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }, {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"dedicated-worker">;
            owners: z.ZodTuple<[z.ZodLazy<z.ZodString>], null>;
        }, "strip", z.ZodTypeAny, {
            type: "dedicated-worker";
            owners: [string];
        }, {
            type: "dedicated-worker";
            owners: [string];
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"shared-worker">;
        }, "strip", z.ZodTypeAny, {
            type: "shared-worker";
        }, {
            type: "shared-worker";
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"service-worker">;
        }, "strip", z.ZodTypeAny, {
            type: "service-worker";
        }, {
            type: "service-worker";
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"worker">;
        }, "strip", z.ZodTypeAny, {
            type: "worker";
        }, {
            type: "worker";
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"paint-worklet">;
        }, "strip", z.ZodTypeAny, {
            type: "paint-worklet";
        }, {
            type: "paint-worklet";
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"audio-worklet">;
        }, "strip", z.ZodTypeAny, {
            type: "audio-worklet";
        }, {
            type: "audio-worklet";
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"worklet">;
        }, "strip", z.ZodTypeAny, {
            type: "worklet";
        }, {
            type: "worklet";
        }>>>]>>, "many">;
    }, "strip", z.ZodTypeAny, {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }, {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }>>]>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        sessionId: z.ZodString;
        capabilities: z.ZodIntersection<z.ZodObject<{
            acceptInsecureCerts: z.ZodBoolean;
            browserName: z.ZodString;
            browserVersion: z.ZodString;
            platformName: z.ZodString;
            setWindowRect: z.ZodBoolean;
            proxy: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"autodetect">;
            }, "strip", z.ZodTypeAny, {
                proxyType: "autodetect";
            }, {
                proxyType: "autodetect";
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"direct">;
            }, "strip", z.ZodTypeAny, {
                proxyType: "direct";
            }, {
                proxyType: "direct";
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"manual">;
                ftpProxy: z.ZodOptional<z.ZodString>;
                httpProxy: z.ZodOptional<z.ZodString>;
                sslProxy: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            }, {
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                socksProxy: z.ZodString;
                socksVersion: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                socksProxy: string;
                socksVersion: number;
            }, {
                socksProxy: string;
                socksVersion: number;
            }>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>, z.ZodObject<{
                noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                noProxy?: string[] | undefined;
            }, {
                noProxy?: string[] | undefined;
            }>>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"pac">;
                proxyAutoconfigUrl: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            }, {
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"system">;
            }, "strip", z.ZodTypeAny, {
                proxyType: "system";
            }, {
                proxyType: "system";
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>>;
            webSocketUrl: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        }, {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    }, "strip", z.ZodTypeAny, {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }, {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }>>, z.ZodLazy<z.ZodObject<{
        ready: z.ZodBoolean;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        ready: boolean;
    }, {
        message: string;
        ready: boolean;
    }>>]>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        partitionKey: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            userContext: z.ZodOptional<z.ZodString>;
            sourceOrigin: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }, {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
    }, "strip", z.ZodTypeAny, {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }, {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }>>, z.ZodLazy<z.ZodObject<{
        cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
            domain: z.ZodString;
            path: z.ZodString;
            size: z.ZodLazy<z.ZodNumber>;
            httpOnly: z.ZodBoolean;
            secure: z.ZodBoolean;
            sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
            expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        }, {
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
        partitionKey: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            userContext: z.ZodOptional<z.ZodString>;
            sourceOrigin: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }, {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
    }, "strip", z.ZodTypeAny, {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }, {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }>>, z.ZodLazy<z.ZodObject<{
        partitionKey: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            userContext: z.ZodOptional<z.ZodString>;
            sourceOrigin: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }, {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
    }, "strip", z.ZodTypeAny, {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }, {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }>>]>>]>>;
}, "strip", z.ZodTypeAny, {
    type: "success";
    id: number;
    result: Record<string, any> | {
        data: string;
    } | {
        context: string;
    } | {
        contexts?: any;
    } | {
        nodes: any[];
    } | {
        url: string;
        navigation: string | null;
    } | {
        data: string;
    } | {} | {
        intercept: string;
    } | {
        script: string;
    } | {
        type: "success";
        realm: string;
        result?: any;
    } | {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } | {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } | {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } | {
        message: string;
        ready: boolean;
    } | {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } | {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } | {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } | (Record<string, any> & {
        data: string;
    }) | (Record<string, any> & {
        context: string;
    }) | (Record<string, any> & {
        contexts?: any;
    }) | (Record<string, any> & {
        nodes: any[];
    }) | (Record<string, any> & {
        url: string;
        navigation: string | null;
    }) | (Record<string, any> & {
        data: string;
    }) | (Record<string, any> & {}) | (Record<string, any> & {
        intercept: string;
    }) | (Record<string, any> & {
        script: string;
    }) | (Record<string, any> & {
        type: "success";
        realm: string;
        result?: any;
    }) | (Record<string, any> & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | (Record<string, any> & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | (Record<string, any> & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | (Record<string, any> & {
        message: string;
        ready: boolean;
    }) | (Record<string, any> & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | (Record<string, any> & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | (Record<string, any> & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        data: string;
    } & Record<string, any>) | ({
        data: string;
    } & {
        context: string;
    }) | ({
        data: string;
    } & {
        contexts?: any;
    }) | ({
        data: string;
    } & {
        nodes: any[];
    }) | ({
        data: string;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        data: string;
    } & {
        data: string;
    }) | ({
        data: string;
    } & {}) | ({
        data: string;
    } & {
        intercept: string;
    }) | ({
        data: string;
    } & {
        script: string;
    }) | ({
        data: string;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        data: string;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        data: string;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        data: string;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        data: string;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        data: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        data: string;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        data: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        context: string;
    } & Record<string, any>) | ({
        context: string;
    } & {
        data: string;
    }) | ({
        context: string;
    } & {
        contexts?: any;
    }) | ({
        context: string;
    } & {
        nodes: any[];
    }) | ({
        context: string;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        context: string;
    } & {
        data: string;
    }) | ({
        context: string;
    } & {}) | ({
        context: string;
    } & {
        intercept: string;
    }) | ({
        context: string;
    } & {
        script: string;
    }) | ({
        context: string;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        context: string;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        context: string;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        context: string;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        context: string;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        context: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        context: string;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        context: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        contexts?: any;
    } & Record<string, any>) | ({
        contexts?: any;
    } & {
        data: string;
    }) | ({
        contexts?: any;
    } & {
        context: string;
    }) | ({
        contexts?: any;
    } & {
        nodes: any[];
    }) | ({
        contexts?: any;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        contexts?: any;
    } & {
        data: string;
    }) | ({
        contexts?: any;
    } & {}) | ({
        contexts?: any;
    } & {
        intercept: string;
    }) | ({
        contexts?: any;
    } & {
        script: string;
    }) | ({
        contexts?: any;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        contexts?: any;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        contexts?: any;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        contexts?: any;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        contexts?: any;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        contexts?: any;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        contexts?: any;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        contexts?: any;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        nodes: any[];
    } & Record<string, any>) | ({
        nodes: any[];
    } & {
        data: string;
    }) | ({
        nodes: any[];
    } & {
        context: string;
    }) | ({
        nodes: any[];
    } & {
        contexts?: any;
    }) | ({
        nodes: any[];
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        nodes: any[];
    } & {
        data: string;
    }) | ({
        nodes: any[];
    } & {}) | ({
        nodes: any[];
    } & {
        intercept: string;
    }) | ({
        nodes: any[];
    } & {
        script: string;
    }) | ({
        nodes: any[];
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        nodes: any[];
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        nodes: any[];
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        nodes: any[];
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        nodes: any[];
    } & {
        message: string;
        ready: boolean;
    }) | ({
        nodes: any[];
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        nodes: any[];
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        nodes: any[];
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        url: string;
        navigation: string | null;
    } & Record<string, any>) | ({
        url: string;
        navigation: string | null;
    } & {
        data: string;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        context: string;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        contexts?: any;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        nodes: any[];
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        data: string;
    }) | ({
        url: string;
        navigation: string | null;
    } & {}) | ({
        url: string;
        navigation: string | null;
    } & {
        intercept: string;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        script: string;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        data: string;
    } & Record<string, any>) | ({
        data: string;
    } & {
        data: string;
    }) | ({
        data: string;
    } & {
        context: string;
    }) | ({
        data: string;
    } & {
        contexts?: any;
    }) | ({
        data: string;
    } & {
        nodes: any[];
    }) | ({
        data: string;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        data: string;
    } & {}) | ({
        data: string;
    } & {
        intercept: string;
    }) | ({
        data: string;
    } & {
        script: string;
    }) | ({
        data: string;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        data: string;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        data: string;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        data: string;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        data: string;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        data: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        data: string;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        data: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({} & Record<string, any>) | ({} & {
        data: string;
    }) | ({} & {
        context: string;
    }) | ({} & {
        contexts?: any;
    }) | ({} & {
        nodes: any[];
    }) | ({} & {
        url: string;
        navigation: string | null;
    }) | ({} & {
        data: string;
    }) | ({} & {
        intercept: string;
    }) | ({} & {
        script: string;
    }) | ({} & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({} & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({} & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({} & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({} & {
        message: string;
        ready: boolean;
    }) | ({} & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({} & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({} & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        intercept: string;
    } & Record<string, any>) | ({
        intercept: string;
    } & {
        data: string;
    }) | ({
        intercept: string;
    } & {
        context: string;
    }) | ({
        intercept: string;
    } & {
        contexts?: any;
    }) | ({
        intercept: string;
    } & {
        nodes: any[];
    }) | ({
        intercept: string;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        intercept: string;
    } & {
        data: string;
    }) | ({
        intercept: string;
    } & {}) | ({
        intercept: string;
    } & {
        script: string;
    }) | ({
        intercept: string;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        intercept: string;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        intercept: string;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        intercept: string;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        intercept: string;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        intercept: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        intercept: string;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        intercept: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        script: string;
    } & Record<string, any>) | ({
        script: string;
    } & {
        data: string;
    }) | ({
        script: string;
    } & {
        context: string;
    }) | ({
        script: string;
    } & {
        contexts?: any;
    }) | ({
        script: string;
    } & {
        nodes: any[];
    }) | ({
        script: string;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        script: string;
    } & {
        data: string;
    }) | ({
        script: string;
    } & {}) | ({
        script: string;
    } & {
        intercept: string;
    }) | ({
        script: string;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        script: string;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        script: string;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        script: string;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        script: string;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        script: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        script: string;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        script: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & Record<string, any>) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        data: string;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        context: string;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        contexts?: any;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        nodes: any[];
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        data: string;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {}) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        intercept: string;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        script: string;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & Record<string, any>) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        data: string;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        context: string;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        contexts?: any;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        nodes: any[];
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        data: string;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {}) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        intercept: string;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        script: string;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        message: string;
        ready: boolean;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & Record<string, any>) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        data: string;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        context: string;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        contexts?: any;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        nodes: any[];
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        data: string;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {}) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        intercept: string;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        script: string;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        message: string;
        ready: boolean;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & Record<string, any>) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        data: string;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        context: string;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        contexts?: any;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        nodes: any[];
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        data: string;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {}) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        intercept: string;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        script: string;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        message: string;
        ready: boolean;
    } & Record<string, any>) | ({
        message: string;
        ready: boolean;
    } & {
        data: string;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        context: string;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        contexts?: any;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        nodes: any[];
    }) | ({
        message: string;
        ready: boolean;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        data: string;
    }) | ({
        message: string;
        ready: boolean;
    } & {}) | ({
        message: string;
        ready: boolean;
    } & {
        intercept: string;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        script: string;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        message: string;
        ready: boolean;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        message: string;
        ready: boolean;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & Record<string, any>) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        data: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        context: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        contexts?: any;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        nodes: any[];
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        data: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {}) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        intercept: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        script: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & Record<string, any>) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        data: string;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        context: string;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        contexts?: any;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        nodes: any[];
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        data: string;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {}) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        intercept: string;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        script: string;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & Record<string, any>) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        data: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        context: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        contexts?: any;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        nodes: any[];
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        data: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {}) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        intercept: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        script: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    });
}, {
    type: "success";
    id: number;
    result: Record<string, any> | {
        data: string;
    } | {
        context: string;
    } | {
        contexts?: any;
    } | {
        nodes: any[];
    } | {
        url: string;
        navigation: string | null;
    } | {
        data: string;
    } | {} | {
        intercept: string;
    } | {
        script: string;
    } | {
        type: "success";
        realm: string;
        result?: any;
    } | {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } | {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } | {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } | {
        message: string;
        ready: boolean;
    } | {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } | {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } | {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } | (Record<string, any> & {
        data: string;
    }) | (Record<string, any> & {
        context: string;
    }) | (Record<string, any> & {
        contexts?: any;
    }) | (Record<string, any> & {
        nodes: any[];
    }) | (Record<string, any> & {
        url: string;
        navigation: string | null;
    }) | (Record<string, any> & {
        data: string;
    }) | (Record<string, any> & {}) | (Record<string, any> & {
        intercept: string;
    }) | (Record<string, any> & {
        script: string;
    }) | (Record<string, any> & {
        type: "success";
        realm: string;
        result?: any;
    }) | (Record<string, any> & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | (Record<string, any> & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | (Record<string, any> & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | (Record<string, any> & {
        message: string;
        ready: boolean;
    }) | (Record<string, any> & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | (Record<string, any> & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | (Record<string, any> & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        data: string;
    } & Record<string, any>) | ({
        data: string;
    } & {
        context: string;
    }) | ({
        data: string;
    } & {
        contexts?: any;
    }) | ({
        data: string;
    } & {
        nodes: any[];
    }) | ({
        data: string;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        data: string;
    } & {
        data: string;
    }) | ({
        data: string;
    } & {}) | ({
        data: string;
    } & {
        intercept: string;
    }) | ({
        data: string;
    } & {
        script: string;
    }) | ({
        data: string;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        data: string;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        data: string;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        data: string;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        data: string;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        data: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        data: string;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        data: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        context: string;
    } & Record<string, any>) | ({
        context: string;
    } & {
        data: string;
    }) | ({
        context: string;
    } & {
        contexts?: any;
    }) | ({
        context: string;
    } & {
        nodes: any[];
    }) | ({
        context: string;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        context: string;
    } & {
        data: string;
    }) | ({
        context: string;
    } & {}) | ({
        context: string;
    } & {
        intercept: string;
    }) | ({
        context: string;
    } & {
        script: string;
    }) | ({
        context: string;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        context: string;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        context: string;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        context: string;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        context: string;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        context: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        context: string;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        context: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        contexts?: any;
    } & Record<string, any>) | ({
        contexts?: any;
    } & {
        data: string;
    }) | ({
        contexts?: any;
    } & {
        context: string;
    }) | ({
        contexts?: any;
    } & {
        nodes: any[];
    }) | ({
        contexts?: any;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        contexts?: any;
    } & {
        data: string;
    }) | ({
        contexts?: any;
    } & {}) | ({
        contexts?: any;
    } & {
        intercept: string;
    }) | ({
        contexts?: any;
    } & {
        script: string;
    }) | ({
        contexts?: any;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        contexts?: any;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        contexts?: any;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        contexts?: any;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        contexts?: any;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        contexts?: any;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        contexts?: any;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        contexts?: any;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        nodes: any[];
    } & Record<string, any>) | ({
        nodes: any[];
    } & {
        data: string;
    }) | ({
        nodes: any[];
    } & {
        context: string;
    }) | ({
        nodes: any[];
    } & {
        contexts?: any;
    }) | ({
        nodes: any[];
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        nodes: any[];
    } & {
        data: string;
    }) | ({
        nodes: any[];
    } & {}) | ({
        nodes: any[];
    } & {
        intercept: string;
    }) | ({
        nodes: any[];
    } & {
        script: string;
    }) | ({
        nodes: any[];
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        nodes: any[];
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        nodes: any[];
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        nodes: any[];
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        nodes: any[];
    } & {
        message: string;
        ready: boolean;
    }) | ({
        nodes: any[];
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        nodes: any[];
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        nodes: any[];
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        url: string;
        navigation: string | null;
    } & Record<string, any>) | ({
        url: string;
        navigation: string | null;
    } & {
        data: string;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        context: string;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        contexts?: any;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        nodes: any[];
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        data: string;
    }) | ({
        url: string;
        navigation: string | null;
    } & {}) | ({
        url: string;
        navigation: string | null;
    } & {
        intercept: string;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        script: string;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        data: string;
    } & Record<string, any>) | ({
        data: string;
    } & {
        data: string;
    }) | ({
        data: string;
    } & {
        context: string;
    }) | ({
        data: string;
    } & {
        contexts?: any;
    }) | ({
        data: string;
    } & {
        nodes: any[];
    }) | ({
        data: string;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        data: string;
    } & {}) | ({
        data: string;
    } & {
        intercept: string;
    }) | ({
        data: string;
    } & {
        script: string;
    }) | ({
        data: string;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        data: string;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        data: string;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        data: string;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        data: string;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        data: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        data: string;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        data: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({} & Record<string, any>) | ({} & {
        data: string;
    }) | ({} & {
        context: string;
    }) | ({} & {
        contexts?: any;
    }) | ({} & {
        nodes: any[];
    }) | ({} & {
        url: string;
        navigation: string | null;
    }) | ({} & {
        data: string;
    }) | ({} & {
        intercept: string;
    }) | ({} & {
        script: string;
    }) | ({} & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({} & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({} & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({} & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({} & {
        message: string;
        ready: boolean;
    }) | ({} & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({} & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({} & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        intercept: string;
    } & Record<string, any>) | ({
        intercept: string;
    } & {
        data: string;
    }) | ({
        intercept: string;
    } & {
        context: string;
    }) | ({
        intercept: string;
    } & {
        contexts?: any;
    }) | ({
        intercept: string;
    } & {
        nodes: any[];
    }) | ({
        intercept: string;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        intercept: string;
    } & {
        data: string;
    }) | ({
        intercept: string;
    } & {}) | ({
        intercept: string;
    } & {
        script: string;
    }) | ({
        intercept: string;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        intercept: string;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        intercept: string;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        intercept: string;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        intercept: string;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        intercept: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        intercept: string;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        intercept: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        script: string;
    } & Record<string, any>) | ({
        script: string;
    } & {
        data: string;
    }) | ({
        script: string;
    } & {
        context: string;
    }) | ({
        script: string;
    } & {
        contexts?: any;
    }) | ({
        script: string;
    } & {
        nodes: any[];
    }) | ({
        script: string;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        script: string;
    } & {
        data: string;
    }) | ({
        script: string;
    } & {}) | ({
        script: string;
    } & {
        intercept: string;
    }) | ({
        script: string;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        script: string;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        script: string;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        script: string;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        script: string;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        script: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        script: string;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        script: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & Record<string, any>) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        data: string;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        context: string;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        contexts?: any;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        nodes: any[];
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        data: string;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {}) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        intercept: string;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        script: string;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & Record<string, any>) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        data: string;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        context: string;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        contexts?: any;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        nodes: any[];
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        data: string;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {}) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        intercept: string;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        script: string;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        message: string;
        ready: boolean;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & Record<string, any>) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        data: string;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        context: string;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        contexts?: any;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        nodes: any[];
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        data: string;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {}) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        intercept: string;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        script: string;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        message: string;
        ready: boolean;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & Record<string, any>) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        data: string;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        context: string;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        contexts?: any;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        nodes: any[];
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        data: string;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {}) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        intercept: string;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        script: string;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        message: string;
        ready: boolean;
    } & Record<string, any>) | ({
        message: string;
        ready: boolean;
    } & {
        data: string;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        context: string;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        contexts?: any;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        nodes: any[];
    }) | ({
        message: string;
        ready: boolean;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        data: string;
    }) | ({
        message: string;
        ready: boolean;
    } & {}) | ({
        message: string;
        ready: boolean;
    } & {
        intercept: string;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        script: string;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        message: string;
        ready: boolean;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        message: string;
        ready: boolean;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & Record<string, any>) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        data: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        context: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        contexts?: any;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        nodes: any[];
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        data: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {}) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        intercept: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        script: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & Record<string, any>) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        data: string;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        context: string;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        contexts?: any;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        nodes: any[];
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        data: string;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {}) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        intercept: string;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        script: string;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & Record<string, any>) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        data: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        context: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        contexts?: any;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        nodes: any[];
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        data: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {}) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        intercept: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        script: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    });
}>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
export declare const EventDataSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.contextCreated">;
    params: any;
}, "strip", z.ZodTypeAny, {
    method: "browsingContext.contextCreated";
    params?: any;
}, {
    method: "browsingContext.contextCreated";
    params?: any;
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.contextDestroyed">;
    params: any;
}, "strip", z.ZodTypeAny, {
    method: "browsingContext.contextDestroyed";
    params?: any;
}, {
    method: "browsingContext.contextDestroyed";
    params?: any;
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.domContentLoaded">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.domContentLoaded";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.domContentLoaded";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.downloadWillBegin">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.downloadWillBegin";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.downloadWillBegin";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.fragmentNavigated">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.fragmentNavigated";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.fragmentNavigated";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.load">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.load";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.load";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.navigationAborted">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.navigationAborted";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.navigationAborted";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.navigationFailed">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.navigationFailed";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.navigationFailed";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.navigationStarted">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.navigationStarted";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.navigationStarted";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.userPromptClosed">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        accepted: z.ZodBoolean;
        userText: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        accepted: boolean;
        userText?: string | undefined;
    }, {
        context: string;
        accepted: boolean;
        userText?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        accepted: boolean;
        userText?: string | undefined;
    };
    method: "browsingContext.userPromptClosed";
}, {
    params: {
        context: string;
        accepted: boolean;
        userText?: string | undefined;
    };
    method: "browsingContext.userPromptClosed";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.userPromptOpened">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        type: z.ZodEnum<["alert", "confirm", "prompt", "beforeunload"]>;
        message: z.ZodString;
        defaultValue: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: "prompt" | "alert" | "confirm" | "beforeunload";
        context: string;
        defaultValue?: string | undefined;
    }, {
        message: string;
        type: "prompt" | "alert" | "confirm" | "beforeunload";
        context: string;
        defaultValue?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        message: string;
        type: "prompt" | "alert" | "confirm" | "beforeunload";
        context: string;
        defaultValue?: string | undefined;
    };
    method: "browsingContext.userPromptOpened";
}, {
    params: {
        message: string;
        type: "prompt" | "alert" | "confirm" | "beforeunload";
        context: string;
        defaultValue?: string | undefined;
    };
    method: "browsingContext.userPromptOpened";
}>>]>>, z.ZodLazy<z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"log.entryAdded">;
    params: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        level: z.ZodLazy<z.ZodEnum<["debug", "info", "warn", "error"]>>;
        source: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            context?: string | undefined;
        }, {
            realm: string;
            context?: string | undefined;
        }>>;
        text: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                columnNumber: z.ZodLazy<z.ZodNumber>;
                functionName: z.ZodString;
                lineNumber: z.ZodLazy<z.ZodNumber>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }>>, "many">;
        }, "strip", z.ZodTypeAny, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }>>>;
    }, "strip", z.ZodTypeAny, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }>>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        level: z.ZodLazy<z.ZodEnum<["debug", "info", "warn", "error"]>>;
        source: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            context?: string | undefined;
        }, {
            realm: string;
            context?: string | undefined;
        }>>;
        text: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                columnNumber: z.ZodLazy<z.ZodNumber>;
                functionName: z.ZodString;
                lineNumber: z.ZodLazy<z.ZodNumber>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }>>, "many">;
        }, "strip", z.ZodTypeAny, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }>>>;
    }, "strip", z.ZodTypeAny, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"console">;
        method: z.ZodString;
        args: z.ZodArray<any, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "console";
        args: any[];
        method: string;
    }, {
        type: "console";
        args: any[];
        method: string;
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        level: z.ZodLazy<z.ZodEnum<["debug", "info", "warn", "error"]>>;
        source: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            context?: string | undefined;
        }, {
            realm: string;
            context?: string | undefined;
        }>>;
        text: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                columnNumber: z.ZodLazy<z.ZodNumber>;
                functionName: z.ZodString;
                lineNumber: z.ZodLazy<z.ZodNumber>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }>>, "many">;
        }, "strip", z.ZodTypeAny, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }>>>;
    }, "strip", z.ZodTypeAny, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"javascript">;
    }, "strip", z.ZodTypeAny, {
        type: "javascript";
    }, {
        type: "javascript";
    }>>>]>>;
}, "strip", z.ZodTypeAny, {
    params: ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "console";
        args: any[];
        method: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "javascript";
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: string;
    } & {
        type: "console";
        args: any[];
        method: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: string;
    } & {
        type: "javascript";
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "console";
        args: any[];
        method: string;
    } & {
        type: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "javascript";
    } & {
        type: string;
    });
    method: "log.entryAdded";
}, {
    params: ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "console";
        args: any[];
        method: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "javascript";
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: string;
    } & {
        type: "console";
        args: any[];
        method: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: string;
    } & {
        type: "javascript";
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "console";
        args: any[];
        method: string;
    } & {
        type: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "javascript";
    } & {
        type: string;
    });
    method: "log.entryAdded";
}>>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.authRequired">;
    params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        response: z.ZodLazy<z.ZodObject<{
            url: z.ZodString;
            protocol: z.ZodString;
            status: z.ZodLazy<z.ZodNumber>;
            statusText: z.ZodString;
            fromCache: z.ZodBoolean;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            mimeType: z.ZodString;
            bytesReceived: z.ZodLazy<z.ZodNumber>;
            headersSize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            content: z.ZodLazy<z.ZodObject<{
                size: z.ZodLazy<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                size: number;
            }, {
                size: number;
            }>>;
            authChallenge: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                scheme: z.ZodString;
                realm: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                realm: string;
                scheme: string;
            }, {
                realm: string;
                scheme: string;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }>>>;
}, "strip", z.ZodTypeAny, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    };
    method: "network.authRequired";
}, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    };
    method: "network.authRequired";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.beforeRequestSent">;
    params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        initiator: z.ZodLazy<z.ZodObject<{
            type: z.ZodEnum<["parser", "script", "preflight", "other"]>;
            columnNumber: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            lineNumber: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                    columnNumber: z.ZodLazy<z.ZodNumber>;
                    functionName: z.ZodString;
                    lineNumber: z.ZodLazy<z.ZodNumber>;
                    url: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }, {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }>>, "many">;
            }, "strip", z.ZodTypeAny, {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            }, {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            }>>>;
            request: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        }, {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        initiator: {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        };
    }, {
        initiator: {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        };
    }>>>;
}, "strip", z.ZodTypeAny, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        initiator: {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        };
    };
    method: "network.beforeRequestSent";
}, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        initiator: {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        };
    };
    method: "network.beforeRequestSent";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.fetchError">;
    params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        errorText: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        errorText: string;
    }, {
        errorText: string;
    }>>>;
}, "strip", z.ZodTypeAny, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        errorText: string;
    };
    method: "network.fetchError";
}, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        errorText: string;
    };
    method: "network.fetchError";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.responseCompleted">;
    params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        response: z.ZodLazy<z.ZodObject<{
            url: z.ZodString;
            protocol: z.ZodString;
            status: z.ZodLazy<z.ZodNumber>;
            statusText: z.ZodString;
            fromCache: z.ZodBoolean;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            mimeType: z.ZodString;
            bytesReceived: z.ZodLazy<z.ZodNumber>;
            headersSize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            content: z.ZodLazy<z.ZodObject<{
                size: z.ZodLazy<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                size: number;
            }, {
                size: number;
            }>>;
            authChallenge: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                scheme: z.ZodString;
                realm: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                realm: string;
                scheme: string;
            }, {
                realm: string;
                scheme: string;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }>>>;
}, "strip", z.ZodTypeAny, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    };
    method: "network.responseCompleted";
}, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    };
    method: "network.responseCompleted";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.responseStarted">;
    params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        response: z.ZodLazy<z.ZodObject<{
            url: z.ZodString;
            protocol: z.ZodString;
            status: z.ZodLazy<z.ZodNumber>;
            statusText: z.ZodString;
            fromCache: z.ZodBoolean;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            mimeType: z.ZodString;
            bytesReceived: z.ZodLazy<z.ZodNumber>;
            headersSize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            content: z.ZodLazy<z.ZodObject<{
                size: z.ZodLazy<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                size: number;
            }, {
                size: number;
            }>>;
            authChallenge: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                scheme: z.ZodString;
                realm: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                realm: string;
                scheme: string;
            }, {
                realm: string;
                scheme: string;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }>>>;
}, "strip", z.ZodTypeAny, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    };
    method: "network.responseStarted";
}, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    };
    method: "network.responseStarted";
}>>]>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.message">;
    params: z.ZodLazy<z.ZodObject<{
        channel: z.ZodLazy<z.ZodString>;
        data: any;
        source: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            context?: string | undefined;
        }, {
            realm: string;
            context?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        channel: string;
        source: {
            realm: string;
            context?: string | undefined;
        };
        data?: any;
    }, {
        channel: string;
        source: {
            realm: string;
            context?: string | undefined;
        };
        data?: any;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        channel: string;
        source: {
            realm: string;
            context?: string | undefined;
        };
        data?: any;
    };
    method: "script.message";
}, {
    params: {
        channel: string;
        source: {
            realm: string;
            context?: string | undefined;
        };
        data?: any;
    };
    method: "script.message";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.realmCreated">;
    params: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"window">;
        context: z.ZodLazy<z.ZodString>;
        sandbox: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }, {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"dedicated-worker">;
        owners: z.ZodTuple<[z.ZodLazy<z.ZodString>], null>;
    }, "strip", z.ZodTypeAny, {
        type: "dedicated-worker";
        owners: [string];
    }, {
        type: "dedicated-worker";
        owners: [string];
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"shared-worker">;
    }, "strip", z.ZodTypeAny, {
        type: "shared-worker";
    }, {
        type: "shared-worker";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"service-worker">;
    }, "strip", z.ZodTypeAny, {
        type: "service-worker";
    }, {
        type: "service-worker";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"worker">;
    }, "strip", z.ZodTypeAny, {
        type: "worker";
    }, {
        type: "worker";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"paint-worklet">;
    }, "strip", z.ZodTypeAny, {
        type: "paint-worklet";
    }, {
        type: "paint-worklet";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"audio-worklet">;
    }, "strip", z.ZodTypeAny, {
        type: "audio-worklet";
    }, {
        type: "audio-worklet";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"worklet">;
    }, "strip", z.ZodTypeAny, {
        type: "worklet";
    }, {
        type: "worklet";
    }>>>]>>;
}, "strip", z.ZodTypeAny, {
    params: ({
        origin: string;
        realm: string;
    } & {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "dedicated-worker";
        owners: [string];
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "shared-worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "service-worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "paint-worklet";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "audio-worklet";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "worklet";
    });
    method: "script.realmCreated";
}, {
    params: ({
        origin: string;
        realm: string;
    } & {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "dedicated-worker";
        owners: [string];
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "shared-worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "service-worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "paint-worklet";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "audio-worklet";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "worklet";
    });
    method: "script.realmCreated";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.realmDestroyed">;
    params: z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        realm: string;
    }, {
        realm: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        realm: string;
    };
    method: "script.realmDestroyed";
}, {
    params: {
        realm: string;
    };
    method: "script.realmDestroyed";
}>>]>>]>>;
export declare const CommandDataSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browser.close">;
    params: z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    params: Record<string, any>;
    method: "browser.close";
}, {
    params: Record<string, any>;
    method: "browser.close";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browser.createUserContext">;
    params: z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    params: Record<string, any>;
    method: "browser.createUserContext";
}, {
    params: Record<string, any>;
    method: "browser.createUserContext";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browser.getUserContexts">;
    params: z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    params: Record<string, any>;
    method: "browser.getUserContexts";
}, {
    params: Record<string, any>;
    method: "browser.getUserContexts";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browser.removeUserContext">;
    params: z.ZodObject<{
        userContext: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        userContext: string;
    }, {
        userContext: string;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        userContext: string;
    };
    method: "browser.removeUserContext";
}, {
    params: {
        userContext: string;
    };
    method: "browser.removeUserContext";
}>>]>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.activate">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        context: string;
    }, {
        context: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
    };
    method: "browsingContext.activate";
}, {
    params: {
        context: string;
    };
    method: "browsingContext.activate";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.captureScreenshot">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        origin: z.ZodOptional<z.ZodDefault<z.ZodEnum<["viewport", "document"]>>>;
        format: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            type: z.ZodString;
            quality: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: string;
            quality?: number | undefined;
        }, {
            type: string;
            quality?: number | undefined;
        }>>>;
        clip: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"box">;
            x: z.ZodNumber;
            y: z.ZodNumber;
            width: z.ZodNumber;
            height: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "box";
            x: number;
            y: number;
            width: number;
            height: number;
        }, {
            type: "box";
            x: number;
            y: number;
            width: number;
            height: number;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"element">;
            element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                sharedId: z.ZodLazy<z.ZodString>;
                handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                sharedId: string;
                handle?: string | undefined;
            }, {
                sharedId: string;
                handle?: string | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
        }, "strip", z.ZodTypeAny, {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        }, {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        }>>]>>>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        origin?: "viewport" | "document" | undefined;
        format?: {
            type: string;
            quality?: number | undefined;
        } | undefined;
        clip?: {
            type: "box";
            x: number;
            y: number;
            width: number;
            height: number;
        } | {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        } | undefined;
    }, {
        context: string;
        origin?: "viewport" | "document" | undefined;
        format?: {
            type: string;
            quality?: number | undefined;
        } | undefined;
        clip?: {
            type: "box";
            x: number;
            y: number;
            width: number;
            height: number;
        } | {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        origin?: "viewport" | "document" | undefined;
        format?: {
            type: string;
            quality?: number | undefined;
        } | undefined;
        clip?: {
            type: "box";
            x: number;
            y: number;
            width: number;
            height: number;
        } | {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        } | undefined;
    };
    method: "browsingContext.captureScreenshot";
}, {
    params: {
        context: string;
        origin?: "viewport" | "document" | undefined;
        format?: {
            type: string;
            quality?: number | undefined;
        } | undefined;
        clip?: {
            type: "box";
            x: number;
            y: number;
            width: number;
            height: number;
        } | {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        } | undefined;
    };
    method: "browsingContext.captureScreenshot";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.close">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        promptUnload: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        promptUnload?: boolean | undefined;
    }, {
        context: string;
        promptUnload?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        promptUnload?: boolean | undefined;
    };
    method: "browsingContext.close";
}, {
    params: {
        context: string;
        promptUnload?: boolean | undefined;
    };
    method: "browsingContext.close";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.create">;
    params: z.ZodLazy<z.ZodObject<{
        type: z.ZodLazy<z.ZodEnum<["tab", "window"]>>;
        referenceContext: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        background: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        userContext: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        type: "window" | "tab";
        referenceContext?: string | undefined;
        background?: boolean | undefined;
        userContext?: string | undefined;
    }, {
        type: "window" | "tab";
        referenceContext?: string | undefined;
        background?: boolean | undefined;
        userContext?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        type: "window" | "tab";
        referenceContext?: string | undefined;
        background?: boolean | undefined;
        userContext?: string | undefined;
    };
    method: "browsingContext.create";
}, {
    params: {
        type: "window" | "tab";
        referenceContext?: string | undefined;
        background?: boolean | undefined;
        userContext?: string | undefined;
    };
    method: "browsingContext.create";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.getTree">;
    params: z.ZodLazy<z.ZodObject<{
        maxDepth: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        root: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        maxDepth?: number | undefined;
        root?: string | undefined;
    }, {
        maxDepth?: number | undefined;
        root?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        maxDepth?: number | undefined;
        root?: string | undefined;
    };
    method: "browsingContext.getTree";
}, {
    params: {
        maxDepth?: number | undefined;
        root?: string | undefined;
    };
    method: "browsingContext.getTree";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.handleUserPrompt">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        accept: z.ZodOptional<z.ZodBoolean>;
        userText: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        accept?: boolean | undefined;
        userText?: string | undefined;
    }, {
        context: string;
        accept?: boolean | undefined;
        userText?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        accept?: boolean | undefined;
        userText?: string | undefined;
    };
    method: "browsingContext.handleUserPrompt";
}, {
    params: {
        context: string;
        accept?: boolean | undefined;
        userText?: string | undefined;
    };
    method: "browsingContext.handleUserPrompt";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.locateNodes">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        locator: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"css">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "css";
            value: string;
        }, {
            type: "css";
            value: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"innerText">;
            value: z.ZodString;
            ignoreCase: z.ZodOptional<z.ZodBoolean>;
            matchType: z.ZodOptional<z.ZodEnum<["full", "partial"]>>;
            maxDepth: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            type: "innerText";
            value: string;
            ignoreCase?: boolean | undefined;
            matchType?: "partial" | "full" | undefined;
            maxDepth?: number | undefined;
        }, {
            type: "innerText";
            value: string;
            ignoreCase?: boolean | undefined;
            matchType?: "partial" | "full" | undefined;
            maxDepth?: number | undefined;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"xpath">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "xpath";
            value: string;
        }, {
            type: "xpath";
            value: string;
        }>>]>>;
        maxNodeCount: any;
        ownership: z.ZodOptional<z.ZodLazy<z.ZodEnum<["root", "none"]>>>;
        sandbox: z.ZodOptional<z.ZodString>;
        serializationOptions: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            maxDomDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            maxObjectDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            includeShadowTree: z.ZodOptional<z.ZodDefault<z.ZodEnum<["none", "open", "all"]>>>;
        }, "strip", z.ZodTypeAny, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }>>>;
        startNodes: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            sharedId: z.ZodLazy<z.ZodString>;
            handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            sharedId: string;
            handle?: string | undefined;
        }, {
            sharedId: string;
            handle?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">>;
    }, "strip", z.ZodTypeAny, {
        [x: string]: any;
        context?: string | undefined;
        locator?: {
            type: "css";
            value: string;
        } | {
            type: "innerText";
            value: string;
            ignoreCase?: boolean | undefined;
            matchType?: "partial" | "full" | undefined;
            maxDepth?: number | undefined;
        } | {
            type: "xpath";
            value: string;
        } | undefined;
        maxNodeCount?: any;
        ownership?: "none" | "root" | undefined;
        sandbox?: string | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        startNodes?: ({
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>)[] | undefined;
    }, {
        [x: string]: any;
        context?: string | undefined;
        locator?: {
            type: "css";
            value: string;
        } | {
            type: "innerText";
            value: string;
            ignoreCase?: boolean | undefined;
            matchType?: "partial" | "full" | undefined;
            maxDepth?: number | undefined;
        } | {
            type: "xpath";
            value: string;
        } | undefined;
        maxNodeCount?: any;
        ownership?: "none" | "root" | undefined;
        sandbox?: string | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        startNodes?: ({
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>)[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        [x: string]: any;
        context?: string | undefined;
        locator?: {
            type: "css";
            value: string;
        } | {
            type: "innerText";
            value: string;
            ignoreCase?: boolean | undefined;
            matchType?: "partial" | "full" | undefined;
            maxDepth?: number | undefined;
        } | {
            type: "xpath";
            value: string;
        } | undefined;
        maxNodeCount?: any;
        ownership?: "none" | "root" | undefined;
        sandbox?: string | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        startNodes?: ({
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>)[] | undefined;
    };
    method: "browsingContext.locateNodes";
}, {
    params: {
        [x: string]: any;
        context?: string | undefined;
        locator?: {
            type: "css";
            value: string;
        } | {
            type: "innerText";
            value: string;
            ignoreCase?: boolean | undefined;
            matchType?: "partial" | "full" | undefined;
            maxDepth?: number | undefined;
        } | {
            type: "xpath";
            value: string;
        } | undefined;
        maxNodeCount?: any;
        ownership?: "none" | "root" | undefined;
        sandbox?: string | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        startNodes?: ({
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>)[] | undefined;
    };
    method: "browsingContext.locateNodes";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.navigate">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        url: z.ZodString;
        wait: z.ZodOptional<z.ZodLazy<z.ZodEnum<["none", "interactive", "complete"]>>>;
    }, "strip", z.ZodTypeAny, {
        url: string;
        context: string;
        wait?: "none" | "interactive" | "complete" | undefined;
    }, {
        url: string;
        context: string;
        wait?: "none" | "interactive" | "complete" | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        context: string;
        wait?: "none" | "interactive" | "complete" | undefined;
    };
    method: "browsingContext.navigate";
}, {
    params: {
        url: string;
        context: string;
        wait?: "none" | "interactive" | "complete" | undefined;
    };
    method: "browsingContext.navigate";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.print">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        background: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        margin: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            bottom: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            left: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            right: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            top: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            bottom?: number | undefined;
            left?: number | undefined;
            right?: number | undefined;
            top?: number | undefined;
        }, {
            bottom?: number | undefined;
            left?: number | undefined;
            right?: number | undefined;
            top?: number | undefined;
        }>>>;
        orientation: z.ZodOptional<z.ZodDefault<z.ZodEnum<["portrait", "landscape"]>>>;
        page: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            height: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            width: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            height?: number | undefined;
            width?: number | undefined;
        }, {
            height?: number | undefined;
            width?: number | undefined;
        }>>>;
        pageRanges: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodString]>, "many">>;
        scale: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        shrinkToFit: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        background?: boolean | undefined;
        margin?: {
            bottom?: number | undefined;
            left?: number | undefined;
            right?: number | undefined;
            top?: number | undefined;
        } | undefined;
        orientation?: "portrait" | "landscape" | undefined;
        page?: {
            height?: number | undefined;
            width?: number | undefined;
        } | undefined;
        pageRanges?: (string | number)[] | undefined;
        scale?: number | undefined;
        shrinkToFit?: boolean | undefined;
    }, {
        context: string;
        background?: boolean | undefined;
        margin?: {
            bottom?: number | undefined;
            left?: number | undefined;
            right?: number | undefined;
            top?: number | undefined;
        } | undefined;
        orientation?: "portrait" | "landscape" | undefined;
        page?: {
            height?: number | undefined;
            width?: number | undefined;
        } | undefined;
        pageRanges?: (string | number)[] | undefined;
        scale?: number | undefined;
        shrinkToFit?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        background?: boolean | undefined;
        margin?: {
            bottom?: number | undefined;
            left?: number | undefined;
            right?: number | undefined;
            top?: number | undefined;
        } | undefined;
        orientation?: "portrait" | "landscape" | undefined;
        page?: {
            height?: number | undefined;
            width?: number | undefined;
        } | undefined;
        pageRanges?: (string | number)[] | undefined;
        scale?: number | undefined;
        shrinkToFit?: boolean | undefined;
    };
    method: "browsingContext.print";
}, {
    params: {
        context: string;
        background?: boolean | undefined;
        margin?: {
            bottom?: number | undefined;
            left?: number | undefined;
            right?: number | undefined;
            top?: number | undefined;
        } | undefined;
        orientation?: "portrait" | "landscape" | undefined;
        page?: {
            height?: number | undefined;
            width?: number | undefined;
        } | undefined;
        pageRanges?: (string | number)[] | undefined;
        scale?: number | undefined;
        shrinkToFit?: boolean | undefined;
    };
    method: "browsingContext.print";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.reload">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        ignoreCache: z.ZodOptional<z.ZodBoolean>;
        wait: z.ZodOptional<z.ZodLazy<z.ZodEnum<["none", "interactive", "complete"]>>>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        ignoreCache?: boolean | undefined;
        wait?: "none" | "interactive" | "complete" | undefined;
    }, {
        context: string;
        ignoreCache?: boolean | undefined;
        wait?: "none" | "interactive" | "complete" | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        ignoreCache?: boolean | undefined;
        wait?: "none" | "interactive" | "complete" | undefined;
    };
    method: "browsingContext.reload";
}, {
    params: {
        context: string;
        ignoreCache?: boolean | undefined;
        wait?: "none" | "interactive" | "complete" | undefined;
    };
    method: "browsingContext.reload";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.setViewport">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        viewport: z.ZodOptional<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            width: z.ZodLazy<z.ZodNumber>;
            height: z.ZodLazy<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
        }, {
            width: number;
            height: number;
        }>>, z.ZodNull]>>;
        devicePixelRatio: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        viewport?: {
            width: number;
            height: number;
        } | null | undefined;
        devicePixelRatio?: number | null | undefined;
    }, {
        context: string;
        viewport?: {
            width: number;
            height: number;
        } | null | undefined;
        devicePixelRatio?: number | null | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        viewport?: {
            width: number;
            height: number;
        } | null | undefined;
        devicePixelRatio?: number | null | undefined;
    };
    method: "browsingContext.setViewport";
}, {
    params: {
        context: string;
        viewport?: {
            width: number;
            height: number;
        } | null | undefined;
        devicePixelRatio?: number | null | undefined;
    };
    method: "browsingContext.setViewport";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.traverseHistory">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        delta: z.ZodLazy<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        delta: number;
    }, {
        context: string;
        delta: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        delta: number;
    };
    method: "browsingContext.traverseHistory";
}, {
    params: {
        context: string;
        delta: number;
    };
    method: "browsingContext.traverseHistory";
}>>]>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"input.performActions">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"none">;
            id: z.ZodString;
            actions: z.ZodArray<z.ZodLazy<z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"pause">;
                duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                type: "pause";
                duration?: number | undefined;
            }, {
                type: "pause";
                duration?: number | undefined;
            }>>>, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "none";
            actions: {
                type: "pause";
                duration?: number | undefined;
            }[];
            id: string;
        }, {
            type: "none";
            actions: {
                type: "pause";
                duration?: number | undefined;
            }[];
            id: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"key">;
            id: z.ZodString;
            actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"pause">;
                duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                type: "pause";
                duration?: number | undefined;
            }, {
                type: "pause";
                duration?: number | undefined;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"keyDown">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "keyDown";
                value: string;
            }, {
                type: "keyDown";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"keyUp">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "keyUp";
                value: string;
            }, {
                type: "keyUp";
                value: string;
            }>>]>>, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "key";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "keyDown";
                value: string;
            } | {
                type: "keyUp";
                value: string;
            })[];
            id: string;
        }, {
            type: "key";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "keyDown";
                value: string;
            } | {
                type: "keyUp";
                value: string;
            })[];
            id: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"pointer">;
            id: z.ZodString;
            parameters: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                pointerType: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodEnum<["mouse", "pen", "touch"]>>>>;
            }, "strip", z.ZodTypeAny, {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            }, {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            }>>>;
            actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"pause">;
                duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                type: "pause";
                duration?: number | undefined;
            }, {
                type: "pause";
                duration?: number | undefined;
            }>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                type: z.ZodLiteral<"pointerDown">;
                button: z.ZodLazy<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: "pointerDown";
                button: number;
            }, {
                type: "pointerDown";
                button: number;
            }>, z.ZodLazy<z.ZodObject<{
                width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }, {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                type: z.ZodLiteral<"pointerUp">;
                button: z.ZodLazy<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: "pointerUp";
                button: number;
            }, {
                type: "pointerUp";
                button: number;
            }>, z.ZodLazy<z.ZodObject<{
                width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }, {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                type: z.ZodLiteral<"pointerMove">;
                x: z.ZodLazy<z.ZodNumber>;
                y: z.ZodLazy<z.ZodNumber>;
                duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                origin: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLiteral<"viewport">, z.ZodLiteral<"pointer">, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"element">;
                    element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                        sharedId: z.ZodLazy<z.ZodString>;
                        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
                    }, "strip", z.ZodTypeAny, {
                        sharedId: string;
                        handle?: string | undefined;
                    }, {
                        sharedId: string;
                        handle?: string | undefined;
                    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                }, {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                }>>]>>>;
            }, "strip", z.ZodTypeAny, {
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            }, {
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            }>, z.ZodLazy<z.ZodObject<{
                width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }, {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }>>>>]>>, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "pointer";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | ({
                type: "pointerDown";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerUp";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }))[];
            id: string;
            parameters?: {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            } | undefined;
        }, {
            type: "pointer";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | ({
                type: "pointerDown";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerUp";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }))[];
            id: string;
            parameters?: {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            } | undefined;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"wheel">;
            id: z.ZodString;
            actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"pause">;
                duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                type: "pause";
                duration?: number | undefined;
            }, {
                type: "pause";
                duration?: number | undefined;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"scroll">;
                x: z.ZodLazy<z.ZodNumber>;
                y: z.ZodLazy<z.ZodNumber>;
                deltaX: z.ZodLazy<z.ZodNumber>;
                deltaY: z.ZodLazy<z.ZodNumber>;
                duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                origin: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodUnion<[z.ZodLiteral<"viewport">, z.ZodLiteral<"pointer">, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"element">;
                    element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                        sharedId: z.ZodLazy<z.ZodString>;
                        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
                    }, "strip", z.ZodTypeAny, {
                        sharedId: string;
                        handle?: string | undefined;
                    }, {
                        sharedId: string;
                        handle?: string | undefined;
                    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                }, {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                }>>]>>>>;
            }, "strip", z.ZodTypeAny, {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            }, {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            }>>]>>, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "wheel";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            })[];
            id: string;
        }, {
            type: "wheel";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            })[];
            id: string;
        }>>]>>, "many">;
    }, "strip", z.ZodTypeAny, {
        context: string;
        actions: ({
            type: "none";
            actions: {
                type: "pause";
                duration?: number | undefined;
            }[];
            id: string;
        } | {
            type: "key";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "keyDown";
                value: string;
            } | {
                type: "keyUp";
                value: string;
            })[];
            id: string;
        } | {
            type: "pointer";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | ({
                type: "pointerDown";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerUp";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }))[];
            id: string;
            parameters?: {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            } | undefined;
        } | {
            type: "wheel";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            })[];
            id: string;
        })[];
    }, {
        context: string;
        actions: ({
            type: "none";
            actions: {
                type: "pause";
                duration?: number | undefined;
            }[];
            id: string;
        } | {
            type: "key";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "keyDown";
                value: string;
            } | {
                type: "keyUp";
                value: string;
            })[];
            id: string;
        } | {
            type: "pointer";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | ({
                type: "pointerDown";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerUp";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }))[];
            id: string;
            parameters?: {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            } | undefined;
        } | {
            type: "wheel";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            })[];
            id: string;
        })[];
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        actions: ({
            type: "none";
            actions: {
                type: "pause";
                duration?: number | undefined;
            }[];
            id: string;
        } | {
            type: "key";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "keyDown";
                value: string;
            } | {
                type: "keyUp";
                value: string;
            })[];
            id: string;
        } | {
            type: "pointer";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | ({
                type: "pointerDown";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerUp";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }))[];
            id: string;
            parameters?: {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            } | undefined;
        } | {
            type: "wheel";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            })[];
            id: string;
        })[];
    };
    method: "input.performActions";
}, {
    params: {
        context: string;
        actions: ({
            type: "none";
            actions: {
                type: "pause";
                duration?: number | undefined;
            }[];
            id: string;
        } | {
            type: "key";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "keyDown";
                value: string;
            } | {
                type: "keyUp";
                value: string;
            })[];
            id: string;
        } | {
            type: "pointer";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | ({
                type: "pointerDown";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerUp";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }))[];
            id: string;
            parameters?: {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            } | undefined;
        } | {
            type: "wheel";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            })[];
            id: string;
        })[];
    };
    method: "input.performActions";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"input.releaseActions">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        context: string;
    }, {
        context: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
    };
    method: "input.releaseActions";
}, {
    params: {
        context: string;
    };
    method: "input.releaseActions";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"input.setFiles">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            sharedId: z.ZodLazy<z.ZodString>;
            handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            sharedId: string;
            handle?: string | undefined;
        }, {
            sharedId: string;
            handle?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
        files: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        element: {
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>;
        context: string;
        files: string[];
    }, {
        element: {
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>;
        context: string;
        files: string[];
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        element: {
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>;
        context: string;
        files: string[];
    };
    method: "input.setFiles";
}, {
    params: {
        element: {
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>;
        context: string;
        files: string[];
    };
    method: "input.setFiles";
}>>]>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.addIntercept">;
    params: z.ZodLazy<z.ZodObject<{
        phases: z.ZodArray<z.ZodLazy<z.ZodEnum<["beforeRequestSent", "responseStarted", "authRequired"]>>, "many">;
        contexts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
        urlPatterns: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"pattern">;
            protocol: z.ZodOptional<z.ZodString>;
            hostname: z.ZodOptional<z.ZodString>;
            port: z.ZodOptional<z.ZodString>;
            pathname: z.ZodOptional<z.ZodString>;
            search: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "pattern";
            protocol?: string | undefined;
            hostname?: string | undefined;
            port?: string | undefined;
            pathname?: string | undefined;
            search?: string | undefined;
        }, {
            type: "pattern";
            protocol?: string | undefined;
            hostname?: string | undefined;
            port?: string | undefined;
            pathname?: string | undefined;
            search?: string | undefined;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"string">;
            pattern: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "string";
            pattern: string;
        }, {
            type: "string";
            pattern: string;
        }>>]>>, "many">>;
    }, "strip", z.ZodTypeAny, {
        phases: ("beforeRequestSent" | "responseStarted" | "authRequired")[];
        contexts?: string[] | undefined;
        urlPatterns?: ({
            type: "pattern";
            protocol?: string | undefined;
            hostname?: string | undefined;
            port?: string | undefined;
            pathname?: string | undefined;
            search?: string | undefined;
        } | {
            type: "string";
            pattern: string;
        })[] | undefined;
    }, {
        phases: ("beforeRequestSent" | "responseStarted" | "authRequired")[];
        contexts?: string[] | undefined;
        urlPatterns?: ({
            type: "pattern";
            protocol?: string | undefined;
            hostname?: string | undefined;
            port?: string | undefined;
            pathname?: string | undefined;
            search?: string | undefined;
        } | {
            type: "string";
            pattern: string;
        })[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        phases: ("beforeRequestSent" | "responseStarted" | "authRequired")[];
        contexts?: string[] | undefined;
        urlPatterns?: ({
            type: "pattern";
            protocol?: string | undefined;
            hostname?: string | undefined;
            port?: string | undefined;
            pathname?: string | undefined;
            search?: string | undefined;
        } | {
            type: "string";
            pattern: string;
        })[] | undefined;
    };
    method: "network.addIntercept";
}, {
    params: {
        phases: ("beforeRequestSent" | "responseStarted" | "authRequired")[];
        contexts?: string[] | undefined;
        urlPatterns?: ({
            type: "pattern";
            protocol?: string | undefined;
            hostname?: string | undefined;
            port?: string | undefined;
            pathname?: string | undefined;
            search?: string | undefined;
        } | {
            type: "string";
            pattern: string;
        })[] | undefined;
    };
    method: "network.addIntercept";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.continueRequest">;
    params: z.ZodLazy<z.ZodObject<{
        request: z.ZodLazy<z.ZodString>;
        body: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"string">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "string";
            value: string;
        }, {
            type: "string";
            value: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            value: string;
        }, {
            type: "base64";
            value: string;
        }>>]>>>;
        cookies: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }>>, "many">>;
        headers: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }>>, "many">>;
        method: z.ZodOptional<z.ZodString>;
        url: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        method?: string | undefined;
        url?: string | undefined;
    }, {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        method?: string | undefined;
        url?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        method?: string | undefined;
        url?: string | undefined;
    };
    method: "network.continueRequest";
}, {
    params: {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        method?: string | undefined;
        url?: string | undefined;
    };
    method: "network.continueRequest";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.continueResponse">;
    params: z.ZodLazy<z.ZodObject<{
        request: z.ZodLazy<z.ZodString>;
        cookies: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
            domain: z.ZodOptional<z.ZodString>;
            httpOnly: z.ZodOptional<z.ZodBoolean>;
            expiry: z.ZodOptional<z.ZodString>;
            maxAge: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            path: z.ZodOptional<z.ZodString>;
            sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
            secure: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }>>, "many">>;
        credentials: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"password">;
            username: z.ZodString;
            password: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "password";
            password: string;
            username: string;
        }, {
            type: "password";
            password: string;
            username: string;
        }>>>;
        headers: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }>>, "many">>;
        reasonPhrase: z.ZodOptional<z.ZodString>;
        statusCode: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        request: string;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        credentials?: {
            type: "password";
            password: string;
            username: string;
        } | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    }, {
        request: string;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        credentials?: {
            type: "password";
            password: string;
            username: string;
        } | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        request: string;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        credentials?: {
            type: "password";
            password: string;
            username: string;
        } | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    };
    method: "network.continueResponse";
}, {
    params: {
        request: string;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        credentials?: {
            type: "password";
            password: string;
            username: string;
        } | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    };
    method: "network.continueResponse";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.continueWithAuth">;
    params: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        request: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        request: string;
    }, {
        request: string;
    }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        action: z.ZodLiteral<"provideCredentials">;
        credentials: z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"password">;
            username: z.ZodString;
            password: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "password";
            password: string;
            username: string;
        }, {
            type: "password";
            password: string;
            username: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        credentials: {
            type: "password";
            password: string;
            username: string;
        };
        action: "provideCredentials";
    }, {
        credentials: {
            type: "password";
            password: string;
            username: string;
        };
        action: "provideCredentials";
    }>>, z.ZodLazy<z.ZodObject<{
        action: z.ZodEnum<["default", "cancel"]>;
    }, "strip", z.ZodTypeAny, {
        action: "default" | "cancel";
    }, {
        action: "default" | "cancel";
    }>>]>>>;
}, "strip", z.ZodTypeAny, {
    params: ({
        request: string;
    } & {
        credentials: {
            type: "password";
            password: string;
            username: string;
        };
        action: "provideCredentials";
    }) | ({
        request: string;
    } & {
        action: "default" | "cancel";
    });
    method: "network.continueWithAuth";
}, {
    params: ({
        request: string;
    } & {
        credentials: {
            type: "password";
            password: string;
            username: string;
        };
        action: "provideCredentials";
    }) | ({
        request: string;
    } & {
        action: "default" | "cancel";
    });
    method: "network.continueWithAuth";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.failRequest">;
    params: z.ZodLazy<z.ZodObject<{
        request: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        request: string;
    }, {
        request: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        request: string;
    };
    method: "network.failRequest";
}, {
    params: {
        request: string;
    };
    method: "network.failRequest";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.provideResponse">;
    params: z.ZodLazy<z.ZodObject<{
        request: z.ZodLazy<z.ZodString>;
        body: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"string">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "string";
            value: string;
        }, {
            type: "string";
            value: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            value: string;
        }, {
            type: "base64";
            value: string;
        }>>]>>>;
        cookies: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
            domain: z.ZodOptional<z.ZodString>;
            httpOnly: z.ZodOptional<z.ZodBoolean>;
            expiry: z.ZodOptional<z.ZodString>;
            maxAge: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            path: z.ZodOptional<z.ZodString>;
            sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
            secure: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }>>, "many">>;
        headers: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }>>, "many">>;
        reasonPhrase: z.ZodOptional<z.ZodString>;
        statusCode: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    }, {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    };
    method: "network.provideResponse";
}, {
    params: {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    };
    method: "network.provideResponse";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.removeIntercept">;
    params: z.ZodLazy<z.ZodObject<{
        intercept: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        intercept: string;
    }, {
        intercept: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        intercept: string;
    };
    method: "network.removeIntercept";
}, {
    params: {
        intercept: string;
    };
    method: "network.removeIntercept";
}>>]>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.addPreloadScript">;
    params: z.ZodLazy<z.ZodObject<{
        functionDeclaration: z.ZodString;
        arguments: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"channel">;
            value: z.ZodLazy<z.ZodObject<{
                channel: z.ZodLazy<z.ZodString>;
                serializationOptions: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                    maxDomDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
                    maxObjectDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
                    includeShadowTree: z.ZodOptional<z.ZodDefault<z.ZodEnum<["none", "open", "all"]>>>;
                }, "strip", z.ZodTypeAny, {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                }, {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                }>>>;
                ownership: z.ZodOptional<z.ZodLazy<z.ZodEnum<["root", "none"]>>>;
            }, "strip", z.ZodTypeAny, {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            }, {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "channel";
            value: {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            };
        }, {
            type: "channel";
            value: {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            };
        }>>, "many">>;
        contexts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
        sandbox: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        functionDeclaration: string;
        arguments?: {
            type: "channel";
            value: {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            };
        }[] | undefined;
        contexts?: string[] | undefined;
        sandbox?: string | undefined;
    }, {
        functionDeclaration: string;
        arguments?: {
            type: "channel";
            value: {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            };
        }[] | undefined;
        contexts?: string[] | undefined;
        sandbox?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        functionDeclaration: string;
        arguments?: {
            type: "channel";
            value: {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            };
        }[] | undefined;
        contexts?: string[] | undefined;
        sandbox?: string | undefined;
    };
    method: "script.addPreloadScript";
}, {
    params: {
        functionDeclaration: string;
        arguments?: {
            type: "channel";
            value: {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            };
        }[] | undefined;
        contexts?: string[] | undefined;
        sandbox?: string | undefined;
    };
    method: "script.addPreloadScript";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.callFunction">;
    params: z.ZodLazy<z.ZodObject<{
        functionDeclaration: z.ZodString;
        awaitPromise: z.ZodBoolean;
        target: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
        }, {
            realm: string;
        }>>, z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            sandbox: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            context: string;
            sandbox?: string | undefined;
        }, {
            context: string;
            sandbox?: string | undefined;
        }>>]>>;
        arguments: z.ZodOptional<z.ZodArray<any, "many">>;
        resultOwnership: z.ZodOptional<z.ZodLazy<z.ZodEnum<["root", "none"]>>>;
        serializationOptions: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            maxDomDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            maxObjectDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            includeShadowTree: z.ZodOptional<z.ZodDefault<z.ZodEnum<["none", "open", "all"]>>>;
        }, "strip", z.ZodTypeAny, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }>>>;
        this: any;
        userActivation: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        functionDeclaration: string;
        arguments?: any[] | undefined;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        this?: any;
        userActivation?: boolean | undefined;
    }, {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        functionDeclaration: string;
        arguments?: any[] | undefined;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        this?: any;
        userActivation?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        functionDeclaration: string;
        arguments?: any[] | undefined;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        this?: any;
        userActivation?: boolean | undefined;
    };
    method: "script.callFunction";
}, {
    params: {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        functionDeclaration: string;
        arguments?: any[] | undefined;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        this?: any;
        userActivation?: boolean | undefined;
    };
    method: "script.callFunction";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.disown">;
    params: z.ZodLazy<z.ZodObject<{
        handles: z.ZodArray<z.ZodLazy<z.ZodString>, "many">;
        target: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
        }, {
            realm: string;
        }>>, z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            sandbox: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            context: string;
            sandbox?: string | undefined;
        }, {
            context: string;
            sandbox?: string | undefined;
        }>>]>>;
    }, "strip", z.ZodTypeAny, {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        handles: string[];
    }, {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        handles: string[];
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        handles: string[];
    };
    method: "script.disown";
}, {
    params: {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        handles: string[];
    };
    method: "script.disown";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.evaluate">;
    params: z.ZodLazy<z.ZodObject<{
        expression: z.ZodString;
        target: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
        }, {
            realm: string;
        }>>, z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            sandbox: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            context: string;
            sandbox?: string | undefined;
        }, {
            context: string;
            sandbox?: string | undefined;
        }>>]>>;
        awaitPromise: z.ZodBoolean;
        resultOwnership: z.ZodOptional<z.ZodLazy<z.ZodEnum<["root", "none"]>>>;
        serializationOptions: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            maxDomDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            maxObjectDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            includeShadowTree: z.ZodOptional<z.ZodDefault<z.ZodEnum<["none", "open", "all"]>>>;
        }, "strip", z.ZodTypeAny, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }>>>;
        userActivation: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        expression: string;
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        userActivation?: boolean | undefined;
    }, {
        expression: string;
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        userActivation?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        expression: string;
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        userActivation?: boolean | undefined;
    };
    method: "script.evaluate";
}, {
    params: {
        expression: string;
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        userActivation?: boolean | undefined;
    };
    method: "script.evaluate";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.getRealms">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        type: z.ZodOptional<z.ZodLazy<z.ZodEnum<["window", "dedicated-worker", "shared-worker", "service-worker", "worker", "paint-worklet", "audio-worklet", "worklet"]>>>;
    }, "strip", z.ZodTypeAny, {
        context?: string | undefined;
        type?: "worker" | "window" | "dedicated-worker" | "shared-worker" | "service-worker" | "paint-worklet" | "audio-worklet" | "worklet" | undefined;
    }, {
        context?: string | undefined;
        type?: "worker" | "window" | "dedicated-worker" | "shared-worker" | "service-worker" | "paint-worklet" | "audio-worklet" | "worklet" | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context?: string | undefined;
        type?: "worker" | "window" | "dedicated-worker" | "shared-worker" | "service-worker" | "paint-worklet" | "audio-worklet" | "worklet" | undefined;
    };
    method: "script.getRealms";
}, {
    params: {
        context?: string | undefined;
        type?: "worker" | "window" | "dedicated-worker" | "shared-worker" | "service-worker" | "paint-worklet" | "audio-worklet" | "worklet" | undefined;
    };
    method: "script.getRealms";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.removePreloadScript">;
    params: z.ZodLazy<z.ZodObject<{
        script: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        script: string;
    }, {
        script: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        script: string;
    };
    method: "script.removePreloadScript";
}, {
    params: {
        script: string;
    };
    method: "script.removePreloadScript";
}>>]>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"session.end">;
    params: z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    params: Record<string, any>;
    method: "session.end";
}, {
    params: Record<string, any>;
    method: "session.end";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"session.new">;
    params: z.ZodLazy<z.ZodObject<{
        capabilities: z.ZodLazy<z.ZodObject<{
            alwaysMatch: z.ZodOptional<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                acceptInsecureCerts: z.ZodOptional<z.ZodBoolean>;
                browserName: z.ZodOptional<z.ZodString>;
                browserVersion: z.ZodOptional<z.ZodString>;
                platformName: z.ZodOptional<z.ZodString>;
                proxy: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"autodetect">;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "autodetect";
                }, {
                    proxyType: "autodetect";
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"direct">;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "direct";
                }, {
                    proxyType: "direct";
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"manual">;
                    ftpProxy: z.ZodOptional<z.ZodString>;
                    httpProxy: z.ZodOptional<z.ZodString>;
                    sslProxy: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                }, {
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    socksProxy: z.ZodString;
                    socksVersion: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    socksProxy: string;
                    socksVersion: number;
                }, {
                    socksProxy: string;
                    socksVersion: number;
                }>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>, z.ZodObject<{
                    noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, "strip", z.ZodTypeAny, {
                    noProxy?: string[] | undefined;
                }, {
                    noProxy?: string[] | undefined;
                }>>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"pac">;
                    proxyAutoconfigUrl: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                }, {
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"system">;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "system";
                }, {
                    proxyType: "system";
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>>;
                webSocketUrl: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            }, {
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>>;
            firstMatch: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                acceptInsecureCerts: z.ZodOptional<z.ZodBoolean>;
                browserName: z.ZodOptional<z.ZodString>;
                browserVersion: z.ZodOptional<z.ZodString>;
                platformName: z.ZodOptional<z.ZodString>;
                proxy: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"autodetect">;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "autodetect";
                }, {
                    proxyType: "autodetect";
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"direct">;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "direct";
                }, {
                    proxyType: "direct";
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"manual">;
                    ftpProxy: z.ZodOptional<z.ZodString>;
                    httpProxy: z.ZodOptional<z.ZodString>;
                    sslProxy: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                }, {
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    socksProxy: z.ZodString;
                    socksVersion: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    socksProxy: string;
                    socksVersion: number;
                }, {
                    socksProxy: string;
                    socksVersion: number;
                }>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>, z.ZodObject<{
                    noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, "strip", z.ZodTypeAny, {
                    noProxy?: string[] | undefined;
                }, {
                    noProxy?: string[] | undefined;
                }>>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"pac">;
                    proxyAutoconfigUrl: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                }, {
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"system">;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "system";
                }, {
                    proxyType: "system";
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>>;
                webSocketUrl: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            }, {
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">>;
        }, "strip", z.ZodTypeAny, {
            alwaysMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>) | undefined;
            firstMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>)[] | undefined;
        }, {
            alwaysMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>) | undefined;
            firstMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>)[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        capabilities: {
            alwaysMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>) | undefined;
            firstMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>)[] | undefined;
        };
    }, {
        capabilities: {
            alwaysMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>) | undefined;
            firstMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>)[] | undefined;
        };
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        capabilities: {
            alwaysMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>) | undefined;
            firstMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>)[] | undefined;
        };
    };
    method: "session.new";
}, {
    params: {
        capabilities: {
            alwaysMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>) | undefined;
            firstMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>)[] | undefined;
        };
    };
    method: "session.new";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"session.status">;
    params: z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    params: Record<string, any>;
    method: "session.status";
}, {
    params: Record<string, any>;
    method: "session.status";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"session.subscribe">;
    params: z.ZodLazy<z.ZodObject<{
        events: z.ZodArray<z.ZodString, "many">;
        contexts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        events: string[];
        contexts?: string[] | undefined;
    }, {
        events: string[];
        contexts?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        events: string[];
        contexts?: string[] | undefined;
    };
    method: "session.subscribe";
}, {
    params: {
        events: string[];
        contexts?: string[] | undefined;
    };
    method: "session.subscribe";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"session.unsubscribe">;
    params: z.ZodLazy<z.ZodObject<{
        events: z.ZodArray<z.ZodString, "many">;
        contexts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        events: string[];
        contexts?: string[] | undefined;
    }, {
        events: string[];
        contexts?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        events: string[];
        contexts?: string[] | undefined;
    };
    method: "session.unsubscribe";
}, {
    params: {
        events: string[];
        contexts?: string[] | undefined;
    };
    method: "session.unsubscribe";
}>>]>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"storage.deleteCookies">;
    params: z.ZodLazy<z.ZodObject<{
        filter: z.ZodOptional<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            value: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>>;
            domain: z.ZodOptional<z.ZodString>;
            path: z.ZodOptional<z.ZodString>;
            size: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            httpOnly: z.ZodOptional<z.ZodBoolean>;
            secure: z.ZodOptional<z.ZodBoolean>;
            sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
            expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        }, {
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>>;
        partition: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"context">;
            context: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "context";
            context: string;
        }, {
            type: "context";
            context: string;
        }>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            type: z.ZodLiteral<"storageKey">;
            userContext: z.ZodOptional<z.ZodString>;
            sourceOrigin: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }, {
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>]>>>;
    }, "strip", z.ZodTypeAny, {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    }, {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    };
    method: "storage.deleteCookies";
}, {
    params: {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    };
    method: "storage.deleteCookies";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"storage.getCookies">;
    params: z.ZodLazy<z.ZodObject<{
        filter: z.ZodOptional<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            value: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>>;
            domain: z.ZodOptional<z.ZodString>;
            path: z.ZodOptional<z.ZodString>;
            size: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            httpOnly: z.ZodOptional<z.ZodBoolean>;
            secure: z.ZodOptional<z.ZodBoolean>;
            sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
            expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        }, {
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>>;
        partition: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"context">;
            context: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "context";
            context: string;
        }, {
            type: "context";
            context: string;
        }>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            type: z.ZodLiteral<"storageKey">;
            userContext: z.ZodOptional<z.ZodString>;
            sourceOrigin: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }, {
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>]>>>;
    }, "strip", z.ZodTypeAny, {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    }, {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    };
    method: "storage.getCookies";
}, {
    params: {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    };
    method: "storage.getCookies";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"storage.setCookie">;
    params: z.ZodLazy<z.ZodObject<{
        cookie: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
            domain: z.ZodString;
            path: z.ZodOptional<z.ZodString>;
            httpOnly: z.ZodOptional<z.ZodBoolean>;
            secure: z.ZodOptional<z.ZodBoolean>;
            sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
            expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain: string;
            path?: string | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain: string;
            path?: string | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
        partition: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"context">;
            context: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "context";
            context: string;
        }, {
            type: "context";
            context: string;
        }>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            type: z.ZodLiteral<"storageKey">;
            userContext: z.ZodOptional<z.ZodString>;
            sourceOrigin: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }, {
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>]>>>;
    }, "strip", z.ZodTypeAny, {
        cookie: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain: string;
            path?: string | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    }, {
        cookie: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain: string;
            path?: string | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        cookie: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain: string;
            path?: string | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    };
    method: "storage.setCookie";
}, {
    params: {
        cookie: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain: string;
            path?: string | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    };
    method: "storage.setCookie";
}>>]>>]>>;
export declare const ResultDataSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    data: z.ZodString;
}, "strip", z.ZodTypeAny, {
    data: string;
}, {
    data: string;
}>>, z.ZodLazy<z.ZodObject<{
    context: z.ZodLazy<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    context: string;
}, {
    context: string;
}>>, z.ZodLazy<z.ZodObject<{
    contexts: any;
}, "strip", z.ZodTypeAny, {
    contexts?: any;
}, {
    contexts?: any;
}>>, z.ZodLazy<z.ZodObject<{
    nodes: z.ZodArray<any, "many">;
}, "strip", z.ZodTypeAny, {
    nodes: any[];
}, {
    nodes: any[];
}>>, z.ZodLazy<z.ZodObject<{
    navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    url: string;
    navigation: string | null;
}, {
    url: string;
    navigation: string | null;
}>>, z.ZodLazy<z.ZodObject<{
    data: z.ZodString;
}, "strip", z.ZodTypeAny, {
    data: string;
}, {
    data: string;
}>>, z.ZodLazy<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>]>>, z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>, z.ZodLazy<z.ZodLazy<z.ZodObject<{
    intercept: z.ZodLazy<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    intercept: string;
}, {
    intercept: string;
}>>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    script: z.ZodLazy<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    script: string;
}, {
    script: string;
}>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    type: z.ZodLiteral<"success">;
    result: any;
    realm: z.ZodLazy<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "success";
    realm: string;
    result?: any;
}, {
    type: "success";
    realm: string;
    result?: any;
}>>, z.ZodLazy<z.ZodObject<{
    type: z.ZodLiteral<"exception">;
    exceptionDetails: z.ZodLazy<z.ZodObject<{
        columnNumber: z.ZodLazy<z.ZodNumber>;
        exception: any;
        lineNumber: z.ZodLazy<z.ZodNumber>;
        stackTrace: z.ZodLazy<z.ZodObject<{
            callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                columnNumber: z.ZodLazy<z.ZodNumber>;
                functionName: z.ZodString;
                lineNumber: z.ZodLazy<z.ZodNumber>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }>>, "many">;
        }, "strip", z.ZodTypeAny, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }>>;
        text: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        columnNumber: number;
        lineNumber: number;
        text: string;
        stackTrace: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        };
        exception?: any;
    }, {
        columnNumber: number;
        lineNumber: number;
        text: string;
        stackTrace: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        };
        exception?: any;
    }>>;
    realm: z.ZodLazy<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "exception";
    realm: string;
    exceptionDetails: {
        columnNumber: number;
        lineNumber: number;
        text: string;
        stackTrace: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        };
        exception?: any;
    };
}, {
    type: "exception";
    realm: string;
    exceptionDetails: {
        columnNumber: number;
        lineNumber: number;
        text: string;
        stackTrace: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        };
        exception?: any;
    };
}>>]>>, z.ZodLazy<z.ZodObject<{
    realms: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"window">;
        context: z.ZodLazy<z.ZodString>;
        sandbox: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }, {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"dedicated-worker">;
        owners: z.ZodTuple<[z.ZodLazy<z.ZodString>], null>;
    }, "strip", z.ZodTypeAny, {
        type: "dedicated-worker";
        owners: [string];
    }, {
        type: "dedicated-worker";
        owners: [string];
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"shared-worker">;
    }, "strip", z.ZodTypeAny, {
        type: "shared-worker";
    }, {
        type: "shared-worker";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"service-worker">;
    }, "strip", z.ZodTypeAny, {
        type: "service-worker";
    }, {
        type: "service-worker";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"worker">;
    }, "strip", z.ZodTypeAny, {
        type: "worker";
    }, {
        type: "worker";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"paint-worklet">;
    }, "strip", z.ZodTypeAny, {
        type: "paint-worklet";
    }, {
        type: "paint-worklet";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"audio-worklet">;
    }, "strip", z.ZodTypeAny, {
        type: "audio-worklet";
    }, {
        type: "audio-worklet";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"worklet">;
    }, "strip", z.ZodTypeAny, {
        type: "worklet";
    }, {
        type: "worklet";
    }>>>]>>, "many">;
}, "strip", z.ZodTypeAny, {
    realms: (({
        origin: string;
        realm: string;
    } & {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "dedicated-worker";
        owners: [string];
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "shared-worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "service-worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "paint-worklet";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "audio-worklet";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "worklet";
    }))[];
}, {
    realms: (({
        origin: string;
        realm: string;
    } & {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "dedicated-worker";
        owners: [string];
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "shared-worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "service-worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "paint-worklet";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "audio-worklet";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "worklet";
    }))[];
}>>]>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    sessionId: z.ZodString;
    capabilities: z.ZodIntersection<z.ZodObject<{
        acceptInsecureCerts: z.ZodBoolean;
        browserName: z.ZodString;
        browserVersion: z.ZodString;
        platformName: z.ZodString;
        setWindowRect: z.ZodBoolean;
        proxy: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            proxyType: z.ZodLiteral<"autodetect">;
        }, "strip", z.ZodTypeAny, {
            proxyType: "autodetect";
        }, {
            proxyType: "autodetect";
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            proxyType: z.ZodLiteral<"direct">;
        }, "strip", z.ZodTypeAny, {
            proxyType: "direct";
        }, {
            proxyType: "direct";
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            proxyType: z.ZodLiteral<"manual">;
            ftpProxy: z.ZodOptional<z.ZodString>;
            httpProxy: z.ZodOptional<z.ZodString>;
            sslProxy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            proxyType: "manual";
            ftpProxy?: string | undefined;
            httpProxy?: string | undefined;
            sslProxy?: string | undefined;
        }, {
            proxyType: "manual";
            ftpProxy?: string | undefined;
            httpProxy?: string | undefined;
            sslProxy?: string | undefined;
        }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            socksProxy: z.ZodString;
            socksVersion: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            socksProxy: string;
            socksVersion: number;
        }, {
            socksProxy: string;
            socksVersion: number;
        }>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>, z.ZodObject<{
            noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            noProxy?: string[] | undefined;
        }, {
            noProxy?: string[] | undefined;
        }>>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            proxyType: z.ZodLiteral<"pac">;
            proxyAutoconfigUrl: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            proxyType: "pac";
            proxyAutoconfigUrl: string;
        }, {
            proxyType: "pac";
            proxyAutoconfigUrl: string;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            proxyType: z.ZodLiteral<"system">;
        }, "strip", z.ZodTypeAny, {
            proxyType: "system";
        }, {
            proxyType: "system";
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>>;
        webSocketUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        acceptInsecureCerts: boolean;
        browserName: string;
        browserVersion: string;
        platformName: string;
        setWindowRect: boolean;
        proxy?: ({
            proxyType: "autodetect";
        } & Record<string, any>) | ({
            proxyType: "direct";
        } & Record<string, any>) | ((({
            proxyType: "manual";
            ftpProxy?: string | undefined;
            httpProxy?: string | undefined;
            sslProxy?: string | undefined;
        } & ({
            socksProxy: string;
            socksVersion: number;
        } | {})) & {
            noProxy?: string[] | undefined;
        }) & Record<string, any>) | ({
            proxyType: "pac";
            proxyAutoconfigUrl: string;
        } & Record<string, any>) | ({
            proxyType: "system";
        } & Record<string, any>) | {} | undefined;
        webSocketUrl?: string | undefined;
    }, {
        acceptInsecureCerts: boolean;
        browserName: string;
        browserVersion: string;
        platformName: string;
        setWindowRect: boolean;
        proxy?: ({
            proxyType: "autodetect";
        } & Record<string, any>) | ({
            proxyType: "direct";
        } & Record<string, any>) | ((({
            proxyType: "manual";
            ftpProxy?: string | undefined;
            httpProxy?: string | undefined;
            sslProxy?: string | undefined;
        } & ({
            socksProxy: string;
            socksVersion: number;
        } | {})) & {
            noProxy?: string[] | undefined;
        }) & Record<string, any>) | ({
            proxyType: "pac";
            proxyAutoconfigUrl: string;
        } & Record<string, any>) | ({
            proxyType: "system";
        } & Record<string, any>) | {} | undefined;
        webSocketUrl?: string | undefined;
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    capabilities: {
        acceptInsecureCerts: boolean;
        browserName: string;
        browserVersion: string;
        platformName: string;
        setWindowRect: boolean;
        proxy?: ({
            proxyType: "autodetect";
        } & Record<string, any>) | ({
            proxyType: "direct";
        } & Record<string, any>) | ((({
            proxyType: "manual";
            ftpProxy?: string | undefined;
            httpProxy?: string | undefined;
            sslProxy?: string | undefined;
        } & ({
            socksProxy: string;
            socksVersion: number;
        } | {})) & {
            noProxy?: string[] | undefined;
        }) & Record<string, any>) | ({
            proxyType: "pac";
            proxyAutoconfigUrl: string;
        } & Record<string, any>) | ({
            proxyType: "system";
        } & Record<string, any>) | {} | undefined;
        webSocketUrl?: string | undefined;
    } & Record<string, any>;
    sessionId: string;
}, {
    capabilities: {
        acceptInsecureCerts: boolean;
        browserName: string;
        browserVersion: string;
        platformName: string;
        setWindowRect: boolean;
        proxy?: ({
            proxyType: "autodetect";
        } & Record<string, any>) | ({
            proxyType: "direct";
        } & Record<string, any>) | ((({
            proxyType: "manual";
            ftpProxy?: string | undefined;
            httpProxy?: string | undefined;
            sslProxy?: string | undefined;
        } & ({
            socksProxy: string;
            socksVersion: number;
        } | {})) & {
            noProxy?: string[] | undefined;
        }) & Record<string, any>) | ({
            proxyType: "pac";
            proxyAutoconfigUrl: string;
        } & Record<string, any>) | ({
            proxyType: "system";
        } & Record<string, any>) | {} | undefined;
        webSocketUrl?: string | undefined;
    } & Record<string, any>;
    sessionId: string;
}>>, z.ZodLazy<z.ZodObject<{
    ready: z.ZodBoolean;
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    ready: boolean;
}, {
    message: string;
    ready: boolean;
}>>]>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    partitionKey: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        userContext: z.ZodOptional<z.ZodString>;
        sourceOrigin: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    }, {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
}, "strip", z.ZodTypeAny, {
    partitionKey: {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    } & Record<string, any>;
}, {
    partitionKey: {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    } & Record<string, any>;
}>>, z.ZodLazy<z.ZodObject<{
    cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"string">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "string";
            value: string;
        }, {
            type: "string";
            value: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            value: string;
        }, {
            type: "base64";
            value: string;
        }>>]>>;
        domain: z.ZodString;
        path: z.ZodString;
        size: z.ZodLazy<z.ZodNumber>;
        httpOnly: z.ZodBoolean;
        secure: z.ZodBoolean;
        sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
        expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        path: string;
        value: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        };
        size: number;
        secure: boolean;
        name: string;
        domain: string;
        httpOnly: boolean;
        sameSite: "strict" | "none" | "lax";
        expiry?: number | undefined;
    }, {
        path: string;
        value: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        };
        size: number;
        secure: boolean;
        name: string;
        domain: string;
        httpOnly: boolean;
        sameSite: "strict" | "none" | "lax";
        expiry?: number | undefined;
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
    partitionKey: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        userContext: z.ZodOptional<z.ZodString>;
        sourceOrigin: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    }, {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
}, "strip", z.ZodTypeAny, {
    cookies: ({
        path: string;
        value: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        };
        size: number;
        secure: boolean;
        name: string;
        domain: string;
        httpOnly: boolean;
        sameSite: "strict" | "none" | "lax";
        expiry?: number | undefined;
    } & Record<string, any>)[];
    partitionKey: {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    } & Record<string, any>;
}, {
    cookies: ({
        path: string;
        value: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        };
        size: number;
        secure: boolean;
        name: string;
        domain: string;
        httpOnly: boolean;
        sameSite: "strict" | "none" | "lax";
        expiry?: number | undefined;
    } & Record<string, any>)[];
    partitionKey: {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    } & Record<string, any>;
}>>, z.ZodLazy<z.ZodObject<{
    partitionKey: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        userContext: z.ZodOptional<z.ZodString>;
        sourceOrigin: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    }, {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
}, "strip", z.ZodTypeAny, {
    partitionKey: {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    } & Record<string, any>;
}, {
    partitionKey: {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    } & Record<string, any>;
}>>]>>]>>;
export declare const EmptyParamsSchema: z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
export declare const MessageSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodObject<{
    type: z.ZodLiteral<"success">;
    id: z.ZodLazy<z.ZodNumber>;
    result: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        data: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        data: string;
    }, {
        data: string;
    }>>, z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        context: string;
    }, {
        context: string;
    }>>, z.ZodLazy<z.ZodObject<{
        contexts: any;
    }, "strip", z.ZodTypeAny, {
        contexts?: any;
    }, {
        contexts?: any;
    }>>, z.ZodLazy<z.ZodObject<{
        nodes: z.ZodArray<any, "many">;
    }, "strip", z.ZodTypeAny, {
        nodes: any[];
    }, {
        nodes: any[];
    }>>, z.ZodLazy<z.ZodObject<{
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
    }, {
        url: string;
        navigation: string | null;
    }>>, z.ZodLazy<z.ZodObject<{
        data: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        data: string;
    }, {
        data: string;
    }>>, z.ZodLazy<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>]>>, z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>, z.ZodLazy<z.ZodLazy<z.ZodObject<{
        intercept: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        intercept: string;
    }, {
        intercept: string;
    }>>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        script: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        script: string;
    }, {
        script: string;
    }>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"success">;
        result: any;
        realm: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "success";
        realm: string;
        result?: any;
    }, {
        type: "success";
        realm: string;
        result?: any;
    }>>, z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"exception">;
        exceptionDetails: z.ZodLazy<z.ZodObject<{
            columnNumber: z.ZodLazy<z.ZodNumber>;
            exception: any;
            lineNumber: z.ZodLazy<z.ZodNumber>;
            stackTrace: z.ZodLazy<z.ZodObject<{
                callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                    columnNumber: z.ZodLazy<z.ZodNumber>;
                    functionName: z.ZodString;
                    lineNumber: z.ZodLazy<z.ZodNumber>;
                    url: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }, {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }>>, "many">;
            }, "strip", z.ZodTypeAny, {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            }, {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            }>>;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        }, {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        }>>;
        realm: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }, {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }>>]>>, z.ZodLazy<z.ZodObject<{
        realms: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"window">;
            context: z.ZodLazy<z.ZodString>;
            sandbox: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }, {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"dedicated-worker">;
            owners: z.ZodTuple<[z.ZodLazy<z.ZodString>], null>;
        }, "strip", z.ZodTypeAny, {
            type: "dedicated-worker";
            owners: [string];
        }, {
            type: "dedicated-worker";
            owners: [string];
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"shared-worker">;
        }, "strip", z.ZodTypeAny, {
            type: "shared-worker";
        }, {
            type: "shared-worker";
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"service-worker">;
        }, "strip", z.ZodTypeAny, {
            type: "service-worker";
        }, {
            type: "service-worker";
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"worker">;
        }, "strip", z.ZodTypeAny, {
            type: "worker";
        }, {
            type: "worker";
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"paint-worklet">;
        }, "strip", z.ZodTypeAny, {
            type: "paint-worklet";
        }, {
            type: "paint-worklet";
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"audio-worklet">;
        }, "strip", z.ZodTypeAny, {
            type: "audio-worklet";
        }, {
            type: "audio-worklet";
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"worklet">;
        }, "strip", z.ZodTypeAny, {
            type: "worklet";
        }, {
            type: "worklet";
        }>>>]>>, "many">;
    }, "strip", z.ZodTypeAny, {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }, {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }>>]>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        sessionId: z.ZodString;
        capabilities: z.ZodIntersection<z.ZodObject<{
            acceptInsecureCerts: z.ZodBoolean;
            browserName: z.ZodString;
            browserVersion: z.ZodString;
            platformName: z.ZodString;
            setWindowRect: z.ZodBoolean;
            proxy: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"autodetect">;
            }, "strip", z.ZodTypeAny, {
                proxyType: "autodetect";
            }, {
                proxyType: "autodetect";
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"direct">;
            }, "strip", z.ZodTypeAny, {
                proxyType: "direct";
            }, {
                proxyType: "direct";
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"manual">;
                ftpProxy: z.ZodOptional<z.ZodString>;
                httpProxy: z.ZodOptional<z.ZodString>;
                sslProxy: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            }, {
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                socksProxy: z.ZodString;
                socksVersion: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                socksProxy: string;
                socksVersion: number;
            }, {
                socksProxy: string;
                socksVersion: number;
            }>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>, z.ZodObject<{
                noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                noProxy?: string[] | undefined;
            }, {
                noProxy?: string[] | undefined;
            }>>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"pac">;
                proxyAutoconfigUrl: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            }, {
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"system">;
            }, "strip", z.ZodTypeAny, {
                proxyType: "system";
            }, {
                proxyType: "system";
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>>;
            webSocketUrl: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        }, {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    }, "strip", z.ZodTypeAny, {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }, {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }>>, z.ZodLazy<z.ZodObject<{
        ready: z.ZodBoolean;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        ready: boolean;
    }, {
        message: string;
        ready: boolean;
    }>>]>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        partitionKey: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            userContext: z.ZodOptional<z.ZodString>;
            sourceOrigin: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }, {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
    }, "strip", z.ZodTypeAny, {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }, {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }>>, z.ZodLazy<z.ZodObject<{
        cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
            domain: z.ZodString;
            path: z.ZodString;
            size: z.ZodLazy<z.ZodNumber>;
            httpOnly: z.ZodBoolean;
            secure: z.ZodBoolean;
            sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
            expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        }, {
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
        partitionKey: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            userContext: z.ZodOptional<z.ZodString>;
            sourceOrigin: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }, {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
    }, "strip", z.ZodTypeAny, {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }, {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }>>, z.ZodLazy<z.ZodObject<{
        partitionKey: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            userContext: z.ZodOptional<z.ZodString>;
            sourceOrigin: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }, {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
    }, "strip", z.ZodTypeAny, {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }, {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }>>]>>]>>;
}, "strip", z.ZodTypeAny, {
    type: "success";
    id: number;
    result: Record<string, any> | {
        data: string;
    } | {
        context: string;
    } | {
        contexts?: any;
    } | {
        nodes: any[];
    } | {
        url: string;
        navigation: string | null;
    } | {
        data: string;
    } | {} | {
        intercept: string;
    } | {
        script: string;
    } | {
        type: "success";
        realm: string;
        result?: any;
    } | {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } | {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } | {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } | {
        message: string;
        ready: boolean;
    } | {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } | {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } | {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } | (Record<string, any> & {
        data: string;
    }) | (Record<string, any> & {
        context: string;
    }) | (Record<string, any> & {
        contexts?: any;
    }) | (Record<string, any> & {
        nodes: any[];
    }) | (Record<string, any> & {
        url: string;
        navigation: string | null;
    }) | (Record<string, any> & {
        data: string;
    }) | (Record<string, any> & {}) | (Record<string, any> & {
        intercept: string;
    }) | (Record<string, any> & {
        script: string;
    }) | (Record<string, any> & {
        type: "success";
        realm: string;
        result?: any;
    }) | (Record<string, any> & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | (Record<string, any> & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | (Record<string, any> & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | (Record<string, any> & {
        message: string;
        ready: boolean;
    }) | (Record<string, any> & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | (Record<string, any> & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | (Record<string, any> & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        data: string;
    } & Record<string, any>) | ({
        data: string;
    } & {
        context: string;
    }) | ({
        data: string;
    } & {
        contexts?: any;
    }) | ({
        data: string;
    } & {
        nodes: any[];
    }) | ({
        data: string;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        data: string;
    } & {
        data: string;
    }) | ({
        data: string;
    } & {}) | ({
        data: string;
    } & {
        intercept: string;
    }) | ({
        data: string;
    } & {
        script: string;
    }) | ({
        data: string;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        data: string;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        data: string;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        data: string;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        data: string;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        data: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        data: string;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        data: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        context: string;
    } & Record<string, any>) | ({
        context: string;
    } & {
        data: string;
    }) | ({
        context: string;
    } & {
        contexts?: any;
    }) | ({
        context: string;
    } & {
        nodes: any[];
    }) | ({
        context: string;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        context: string;
    } & {
        data: string;
    }) | ({
        context: string;
    } & {}) | ({
        context: string;
    } & {
        intercept: string;
    }) | ({
        context: string;
    } & {
        script: string;
    }) | ({
        context: string;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        context: string;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        context: string;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        context: string;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        context: string;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        context: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        context: string;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        context: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        contexts?: any;
    } & Record<string, any>) | ({
        contexts?: any;
    } & {
        data: string;
    }) | ({
        contexts?: any;
    } & {
        context: string;
    }) | ({
        contexts?: any;
    } & {
        nodes: any[];
    }) | ({
        contexts?: any;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        contexts?: any;
    } & {
        data: string;
    }) | ({
        contexts?: any;
    } & {}) | ({
        contexts?: any;
    } & {
        intercept: string;
    }) | ({
        contexts?: any;
    } & {
        script: string;
    }) | ({
        contexts?: any;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        contexts?: any;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        contexts?: any;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        contexts?: any;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        contexts?: any;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        contexts?: any;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        contexts?: any;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        contexts?: any;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        nodes: any[];
    } & Record<string, any>) | ({
        nodes: any[];
    } & {
        data: string;
    }) | ({
        nodes: any[];
    } & {
        context: string;
    }) | ({
        nodes: any[];
    } & {
        contexts?: any;
    }) | ({
        nodes: any[];
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        nodes: any[];
    } & {
        data: string;
    }) | ({
        nodes: any[];
    } & {}) | ({
        nodes: any[];
    } & {
        intercept: string;
    }) | ({
        nodes: any[];
    } & {
        script: string;
    }) | ({
        nodes: any[];
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        nodes: any[];
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        nodes: any[];
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        nodes: any[];
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        nodes: any[];
    } & {
        message: string;
        ready: boolean;
    }) | ({
        nodes: any[];
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        nodes: any[];
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        nodes: any[];
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        url: string;
        navigation: string | null;
    } & Record<string, any>) | ({
        url: string;
        navigation: string | null;
    } & {
        data: string;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        context: string;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        contexts?: any;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        nodes: any[];
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        data: string;
    }) | ({
        url: string;
        navigation: string | null;
    } & {}) | ({
        url: string;
        navigation: string | null;
    } & {
        intercept: string;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        script: string;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        data: string;
    } & Record<string, any>) | ({
        data: string;
    } & {
        data: string;
    }) | ({
        data: string;
    } & {
        context: string;
    }) | ({
        data: string;
    } & {
        contexts?: any;
    }) | ({
        data: string;
    } & {
        nodes: any[];
    }) | ({
        data: string;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        data: string;
    } & {}) | ({
        data: string;
    } & {
        intercept: string;
    }) | ({
        data: string;
    } & {
        script: string;
    }) | ({
        data: string;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        data: string;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        data: string;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        data: string;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        data: string;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        data: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        data: string;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        data: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({} & Record<string, any>) | ({} & {
        data: string;
    }) | ({} & {
        context: string;
    }) | ({} & {
        contexts?: any;
    }) | ({} & {
        nodes: any[];
    }) | ({} & {
        url: string;
        navigation: string | null;
    }) | ({} & {
        data: string;
    }) | ({} & {
        intercept: string;
    }) | ({} & {
        script: string;
    }) | ({} & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({} & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({} & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({} & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({} & {
        message: string;
        ready: boolean;
    }) | ({} & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({} & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({} & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        intercept: string;
    } & Record<string, any>) | ({
        intercept: string;
    } & {
        data: string;
    }) | ({
        intercept: string;
    } & {
        context: string;
    }) | ({
        intercept: string;
    } & {
        contexts?: any;
    }) | ({
        intercept: string;
    } & {
        nodes: any[];
    }) | ({
        intercept: string;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        intercept: string;
    } & {
        data: string;
    }) | ({
        intercept: string;
    } & {}) | ({
        intercept: string;
    } & {
        script: string;
    }) | ({
        intercept: string;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        intercept: string;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        intercept: string;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        intercept: string;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        intercept: string;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        intercept: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        intercept: string;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        intercept: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        script: string;
    } & Record<string, any>) | ({
        script: string;
    } & {
        data: string;
    }) | ({
        script: string;
    } & {
        context: string;
    }) | ({
        script: string;
    } & {
        contexts?: any;
    }) | ({
        script: string;
    } & {
        nodes: any[];
    }) | ({
        script: string;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        script: string;
    } & {
        data: string;
    }) | ({
        script: string;
    } & {}) | ({
        script: string;
    } & {
        intercept: string;
    }) | ({
        script: string;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        script: string;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        script: string;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        script: string;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        script: string;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        script: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        script: string;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        script: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & Record<string, any>) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        data: string;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        context: string;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        contexts?: any;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        nodes: any[];
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        data: string;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {}) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        intercept: string;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        script: string;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & Record<string, any>) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        data: string;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        context: string;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        contexts?: any;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        nodes: any[];
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        data: string;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {}) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        intercept: string;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        script: string;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        message: string;
        ready: boolean;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & Record<string, any>) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        data: string;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        context: string;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        contexts?: any;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        nodes: any[];
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        data: string;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {}) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        intercept: string;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        script: string;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        message: string;
        ready: boolean;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & Record<string, any>) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        data: string;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        context: string;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        contexts?: any;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        nodes: any[];
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        data: string;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {}) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        intercept: string;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        script: string;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        message: string;
        ready: boolean;
    } & Record<string, any>) | ({
        message: string;
        ready: boolean;
    } & {
        data: string;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        context: string;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        contexts?: any;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        nodes: any[];
    }) | ({
        message: string;
        ready: boolean;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        data: string;
    }) | ({
        message: string;
        ready: boolean;
    } & {}) | ({
        message: string;
        ready: boolean;
    } & {
        intercept: string;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        script: string;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        message: string;
        ready: boolean;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        message: string;
        ready: boolean;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & Record<string, any>) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        data: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        context: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        contexts?: any;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        nodes: any[];
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        data: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {}) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        intercept: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        script: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & Record<string, any>) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        data: string;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        context: string;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        contexts?: any;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        nodes: any[];
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        data: string;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {}) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        intercept: string;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        script: string;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & Record<string, any>) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        data: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        context: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        contexts?: any;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        nodes: any[];
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        data: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {}) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        intercept: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        script: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    });
}, {
    type: "success";
    id: number;
    result: Record<string, any> | {
        data: string;
    } | {
        context: string;
    } | {
        contexts?: any;
    } | {
        nodes: any[];
    } | {
        url: string;
        navigation: string | null;
    } | {
        data: string;
    } | {} | {
        intercept: string;
    } | {
        script: string;
    } | {
        type: "success";
        realm: string;
        result?: any;
    } | {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } | {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } | {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } | {
        message: string;
        ready: boolean;
    } | {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } | {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } | {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } | (Record<string, any> & {
        data: string;
    }) | (Record<string, any> & {
        context: string;
    }) | (Record<string, any> & {
        contexts?: any;
    }) | (Record<string, any> & {
        nodes: any[];
    }) | (Record<string, any> & {
        url: string;
        navigation: string | null;
    }) | (Record<string, any> & {
        data: string;
    }) | (Record<string, any> & {}) | (Record<string, any> & {
        intercept: string;
    }) | (Record<string, any> & {
        script: string;
    }) | (Record<string, any> & {
        type: "success";
        realm: string;
        result?: any;
    }) | (Record<string, any> & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | (Record<string, any> & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | (Record<string, any> & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | (Record<string, any> & {
        message: string;
        ready: boolean;
    }) | (Record<string, any> & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | (Record<string, any> & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | (Record<string, any> & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        data: string;
    } & Record<string, any>) | ({
        data: string;
    } & {
        context: string;
    }) | ({
        data: string;
    } & {
        contexts?: any;
    }) | ({
        data: string;
    } & {
        nodes: any[];
    }) | ({
        data: string;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        data: string;
    } & {
        data: string;
    }) | ({
        data: string;
    } & {}) | ({
        data: string;
    } & {
        intercept: string;
    }) | ({
        data: string;
    } & {
        script: string;
    }) | ({
        data: string;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        data: string;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        data: string;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        data: string;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        data: string;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        data: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        data: string;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        data: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        context: string;
    } & Record<string, any>) | ({
        context: string;
    } & {
        data: string;
    }) | ({
        context: string;
    } & {
        contexts?: any;
    }) | ({
        context: string;
    } & {
        nodes: any[];
    }) | ({
        context: string;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        context: string;
    } & {
        data: string;
    }) | ({
        context: string;
    } & {}) | ({
        context: string;
    } & {
        intercept: string;
    }) | ({
        context: string;
    } & {
        script: string;
    }) | ({
        context: string;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        context: string;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        context: string;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        context: string;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        context: string;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        context: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        context: string;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        context: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        contexts?: any;
    } & Record<string, any>) | ({
        contexts?: any;
    } & {
        data: string;
    }) | ({
        contexts?: any;
    } & {
        context: string;
    }) | ({
        contexts?: any;
    } & {
        nodes: any[];
    }) | ({
        contexts?: any;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        contexts?: any;
    } & {
        data: string;
    }) | ({
        contexts?: any;
    } & {}) | ({
        contexts?: any;
    } & {
        intercept: string;
    }) | ({
        contexts?: any;
    } & {
        script: string;
    }) | ({
        contexts?: any;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        contexts?: any;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        contexts?: any;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        contexts?: any;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        contexts?: any;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        contexts?: any;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        contexts?: any;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        contexts?: any;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        nodes: any[];
    } & Record<string, any>) | ({
        nodes: any[];
    } & {
        data: string;
    }) | ({
        nodes: any[];
    } & {
        context: string;
    }) | ({
        nodes: any[];
    } & {
        contexts?: any;
    }) | ({
        nodes: any[];
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        nodes: any[];
    } & {
        data: string;
    }) | ({
        nodes: any[];
    } & {}) | ({
        nodes: any[];
    } & {
        intercept: string;
    }) | ({
        nodes: any[];
    } & {
        script: string;
    }) | ({
        nodes: any[];
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        nodes: any[];
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        nodes: any[];
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        nodes: any[];
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        nodes: any[];
    } & {
        message: string;
        ready: boolean;
    }) | ({
        nodes: any[];
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        nodes: any[];
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        nodes: any[];
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        url: string;
        navigation: string | null;
    } & Record<string, any>) | ({
        url: string;
        navigation: string | null;
    } & {
        data: string;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        context: string;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        contexts?: any;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        nodes: any[];
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        data: string;
    }) | ({
        url: string;
        navigation: string | null;
    } & {}) | ({
        url: string;
        navigation: string | null;
    } & {
        intercept: string;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        script: string;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        url: string;
        navigation: string | null;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        data: string;
    } & Record<string, any>) | ({
        data: string;
    } & {
        data: string;
    }) | ({
        data: string;
    } & {
        context: string;
    }) | ({
        data: string;
    } & {
        contexts?: any;
    }) | ({
        data: string;
    } & {
        nodes: any[];
    }) | ({
        data: string;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        data: string;
    } & {}) | ({
        data: string;
    } & {
        intercept: string;
    }) | ({
        data: string;
    } & {
        script: string;
    }) | ({
        data: string;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        data: string;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        data: string;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        data: string;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        data: string;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        data: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        data: string;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        data: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({} & Record<string, any>) | ({} & {
        data: string;
    }) | ({} & {
        context: string;
    }) | ({} & {
        contexts?: any;
    }) | ({} & {
        nodes: any[];
    }) | ({} & {
        url: string;
        navigation: string | null;
    }) | ({} & {
        data: string;
    }) | ({} & {
        intercept: string;
    }) | ({} & {
        script: string;
    }) | ({} & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({} & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({} & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({} & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({} & {
        message: string;
        ready: boolean;
    }) | ({} & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({} & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({} & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        intercept: string;
    } & Record<string, any>) | ({
        intercept: string;
    } & {
        data: string;
    }) | ({
        intercept: string;
    } & {
        context: string;
    }) | ({
        intercept: string;
    } & {
        contexts?: any;
    }) | ({
        intercept: string;
    } & {
        nodes: any[];
    }) | ({
        intercept: string;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        intercept: string;
    } & {
        data: string;
    }) | ({
        intercept: string;
    } & {}) | ({
        intercept: string;
    } & {
        script: string;
    }) | ({
        intercept: string;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        intercept: string;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        intercept: string;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        intercept: string;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        intercept: string;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        intercept: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        intercept: string;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        intercept: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        script: string;
    } & Record<string, any>) | ({
        script: string;
    } & {
        data: string;
    }) | ({
        script: string;
    } & {
        context: string;
    }) | ({
        script: string;
    } & {
        contexts?: any;
    }) | ({
        script: string;
    } & {
        nodes: any[];
    }) | ({
        script: string;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        script: string;
    } & {
        data: string;
    }) | ({
        script: string;
    } & {}) | ({
        script: string;
    } & {
        intercept: string;
    }) | ({
        script: string;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        script: string;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        script: string;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        script: string;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        script: string;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        script: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        script: string;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        script: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & Record<string, any>) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        data: string;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        context: string;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        contexts?: any;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        nodes: any[];
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        data: string;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {}) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        intercept: string;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        script: string;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        type: "success";
        realm: string;
        result?: any;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & Record<string, any>) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        data: string;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        context: string;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        contexts?: any;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        nodes: any[];
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        data: string;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {}) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        intercept: string;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        script: string;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        message: string;
        ready: boolean;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & Record<string, any>) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        data: string;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        context: string;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        contexts?: any;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        nodes: any[];
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        data: string;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {}) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        intercept: string;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        script: string;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        message: string;
        ready: boolean;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & Record<string, any>) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        data: string;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        context: string;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        contexts?: any;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        nodes: any[];
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        data: string;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {}) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        intercept: string;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        script: string;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        message: string;
        ready: boolean;
    } & Record<string, any>) | ({
        message: string;
        ready: boolean;
    } & {
        data: string;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        context: string;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        contexts?: any;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        nodes: any[];
    }) | ({
        message: string;
        ready: boolean;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        data: string;
    }) | ({
        message: string;
        ready: boolean;
    } & {}) | ({
        message: string;
        ready: boolean;
    } & {
        intercept: string;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        script: string;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        message: string;
        ready: boolean;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        message: string;
        ready: boolean;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        message: string;
        ready: boolean;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & Record<string, any>) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        data: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        context: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        contexts?: any;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        nodes: any[];
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        data: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {}) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        intercept: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        script: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & Record<string, any>) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        data: string;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        context: string;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        contexts?: any;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        nodes: any[];
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        data: string;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {}) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        intercept: string;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        script: string;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & Record<string, any>) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        data: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        context: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        contexts?: any;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        nodes: any[];
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        url: string;
        navigation: string | null;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        data: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {}) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        intercept: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        script: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        type: "success";
        realm: string;
        result?: any;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        message: string;
        ready: boolean;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }) | ({
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    } & {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    });
}>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
    type: z.ZodLiteral<"error">;
    id: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
    error: z.ZodLazy<z.ZodEnum<["invalid argument", "invalid session id", "move target out of bounds", "no such alert", "no such element", "no such frame", "no such handle", "no such history entry", "no such intercept", "no such node", "no such request", "no such script", "no such storage partition", "no such user context", "session not created", "unable to capture screen", "unable to close browser", "unable to set cookie", "unable to set file input", "underspecified storage partition", "unknown command", "unknown error", "unsupported operation"]>>;
    message: z.ZodString;
    stacktrace: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "error";
    error: "invalid argument" | "invalid session id" | "move target out of bounds" | "no such alert" | "no such element" | "no such frame" | "no such handle" | "no such history entry" | "no such intercept" | "no such node" | "no such request" | "no such script" | "no such storage partition" | "no such user context" | "session not created" | "unable to capture screen" | "unable to close browser" | "unable to set cookie" | "unable to set file input" | "underspecified storage partition" | "unknown command" | "unknown error" | "unsupported operation";
    id: number | null;
    stacktrace?: string | undefined;
}, {
    message: string;
    type: "error";
    error: "invalid argument" | "invalid session id" | "move target out of bounds" | "no such alert" | "no such element" | "no such frame" | "no such handle" | "no such history entry" | "no such intercept" | "no such node" | "no such request" | "no such script" | "no such storage partition" | "no such user context" | "session not created" | "unable to capture screen" | "unable to close browser" | "unable to set cookie" | "unable to set file input" | "underspecified storage partition" | "unknown command" | "unknown error" | "unsupported operation";
    id: number | null;
    stacktrace?: string | undefined;
}>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
    type: z.ZodLiteral<"event">;
}, "strip", z.ZodTypeAny, {
    type: "event";
}, {
    type: "event";
}>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.contextCreated">;
    params: any;
}, "strip", z.ZodTypeAny, {
    method: "browsingContext.contextCreated";
    params?: any;
}, {
    method: "browsingContext.contextCreated";
    params?: any;
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.contextDestroyed">;
    params: any;
}, "strip", z.ZodTypeAny, {
    method: "browsingContext.contextDestroyed";
    params?: any;
}, {
    method: "browsingContext.contextDestroyed";
    params?: any;
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.domContentLoaded">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.domContentLoaded";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.domContentLoaded";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.downloadWillBegin">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.downloadWillBegin";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.downloadWillBegin";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.fragmentNavigated">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.fragmentNavigated";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.fragmentNavigated";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.load">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.load";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.load";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.navigationAborted">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.navigationAborted";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.navigationAborted";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.navigationFailed">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.navigationFailed";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.navigationFailed";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.navigationStarted">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.navigationStarted";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.navigationStarted";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.userPromptClosed">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        accepted: z.ZodBoolean;
        userText: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        accepted: boolean;
        userText?: string | undefined;
    }, {
        context: string;
        accepted: boolean;
        userText?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        accepted: boolean;
        userText?: string | undefined;
    };
    method: "browsingContext.userPromptClosed";
}, {
    params: {
        context: string;
        accepted: boolean;
        userText?: string | undefined;
    };
    method: "browsingContext.userPromptClosed";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.userPromptOpened">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        type: z.ZodEnum<["alert", "confirm", "prompt", "beforeunload"]>;
        message: z.ZodString;
        defaultValue: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: "prompt" | "alert" | "confirm" | "beforeunload";
        context: string;
        defaultValue?: string | undefined;
    }, {
        message: string;
        type: "prompt" | "alert" | "confirm" | "beforeunload";
        context: string;
        defaultValue?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        message: string;
        type: "prompt" | "alert" | "confirm" | "beforeunload";
        context: string;
        defaultValue?: string | undefined;
    };
    method: "browsingContext.userPromptOpened";
}, {
    params: {
        message: string;
        type: "prompt" | "alert" | "confirm" | "beforeunload";
        context: string;
        defaultValue?: string | undefined;
    };
    method: "browsingContext.userPromptOpened";
}>>]>>, z.ZodLazy<z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"log.entryAdded">;
    params: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        level: z.ZodLazy<z.ZodEnum<["debug", "info", "warn", "error"]>>;
        source: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            context?: string | undefined;
        }, {
            realm: string;
            context?: string | undefined;
        }>>;
        text: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                columnNumber: z.ZodLazy<z.ZodNumber>;
                functionName: z.ZodString;
                lineNumber: z.ZodLazy<z.ZodNumber>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }>>, "many">;
        }, "strip", z.ZodTypeAny, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }>>>;
    }, "strip", z.ZodTypeAny, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }>>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        level: z.ZodLazy<z.ZodEnum<["debug", "info", "warn", "error"]>>;
        source: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            context?: string | undefined;
        }, {
            realm: string;
            context?: string | undefined;
        }>>;
        text: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                columnNumber: z.ZodLazy<z.ZodNumber>;
                functionName: z.ZodString;
                lineNumber: z.ZodLazy<z.ZodNumber>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }>>, "many">;
        }, "strip", z.ZodTypeAny, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }>>>;
    }, "strip", z.ZodTypeAny, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"console">;
        method: z.ZodString;
        args: z.ZodArray<any, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "console";
        args: any[];
        method: string;
    }, {
        type: "console";
        args: any[];
        method: string;
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        level: z.ZodLazy<z.ZodEnum<["debug", "info", "warn", "error"]>>;
        source: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            context?: string | undefined;
        }, {
            realm: string;
            context?: string | undefined;
        }>>;
        text: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                columnNumber: z.ZodLazy<z.ZodNumber>;
                functionName: z.ZodString;
                lineNumber: z.ZodLazy<z.ZodNumber>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }>>, "many">;
        }, "strip", z.ZodTypeAny, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }>>>;
    }, "strip", z.ZodTypeAny, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"javascript">;
    }, "strip", z.ZodTypeAny, {
        type: "javascript";
    }, {
        type: "javascript";
    }>>>]>>;
}, "strip", z.ZodTypeAny, {
    params: ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "console";
        args: any[];
        method: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "javascript";
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: string;
    } & {
        type: "console";
        args: any[];
        method: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: string;
    } & {
        type: "javascript";
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "console";
        args: any[];
        method: string;
    } & {
        type: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "javascript";
    } & {
        type: string;
    });
    method: "log.entryAdded";
}, {
    params: ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "console";
        args: any[];
        method: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "javascript";
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: string;
    } & {
        type: "console";
        args: any[];
        method: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: string;
    } & {
        type: "javascript";
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "console";
        args: any[];
        method: string;
    } & {
        type: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "javascript";
    } & {
        type: string;
    });
    method: "log.entryAdded";
}>>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.authRequired">;
    params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        response: z.ZodLazy<z.ZodObject<{
            url: z.ZodString;
            protocol: z.ZodString;
            status: z.ZodLazy<z.ZodNumber>;
            statusText: z.ZodString;
            fromCache: z.ZodBoolean;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            mimeType: z.ZodString;
            bytesReceived: z.ZodLazy<z.ZodNumber>;
            headersSize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            content: z.ZodLazy<z.ZodObject<{
                size: z.ZodLazy<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                size: number;
            }, {
                size: number;
            }>>;
            authChallenge: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                scheme: z.ZodString;
                realm: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                realm: string;
                scheme: string;
            }, {
                realm: string;
                scheme: string;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }>>>;
}, "strip", z.ZodTypeAny, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    };
    method: "network.authRequired";
}, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    };
    method: "network.authRequired";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.beforeRequestSent">;
    params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        initiator: z.ZodLazy<z.ZodObject<{
            type: z.ZodEnum<["parser", "script", "preflight", "other"]>;
            columnNumber: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            lineNumber: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                    columnNumber: z.ZodLazy<z.ZodNumber>;
                    functionName: z.ZodString;
                    lineNumber: z.ZodLazy<z.ZodNumber>;
                    url: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }, {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }>>, "many">;
            }, "strip", z.ZodTypeAny, {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            }, {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            }>>>;
            request: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        }, {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        initiator: {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        };
    }, {
        initiator: {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        };
    }>>>;
}, "strip", z.ZodTypeAny, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        initiator: {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        };
    };
    method: "network.beforeRequestSent";
}, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        initiator: {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        };
    };
    method: "network.beforeRequestSent";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.fetchError">;
    params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        errorText: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        errorText: string;
    }, {
        errorText: string;
    }>>>;
}, "strip", z.ZodTypeAny, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        errorText: string;
    };
    method: "network.fetchError";
}, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        errorText: string;
    };
    method: "network.fetchError";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.responseCompleted">;
    params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        response: z.ZodLazy<z.ZodObject<{
            url: z.ZodString;
            protocol: z.ZodString;
            status: z.ZodLazy<z.ZodNumber>;
            statusText: z.ZodString;
            fromCache: z.ZodBoolean;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            mimeType: z.ZodString;
            bytesReceived: z.ZodLazy<z.ZodNumber>;
            headersSize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            content: z.ZodLazy<z.ZodObject<{
                size: z.ZodLazy<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                size: number;
            }, {
                size: number;
            }>>;
            authChallenge: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                scheme: z.ZodString;
                realm: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                realm: string;
                scheme: string;
            }, {
                realm: string;
                scheme: string;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }>>>;
}, "strip", z.ZodTypeAny, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    };
    method: "network.responseCompleted";
}, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    };
    method: "network.responseCompleted";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.responseStarted">;
    params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        response: z.ZodLazy<z.ZodObject<{
            url: z.ZodString;
            protocol: z.ZodString;
            status: z.ZodLazy<z.ZodNumber>;
            statusText: z.ZodString;
            fromCache: z.ZodBoolean;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            mimeType: z.ZodString;
            bytesReceived: z.ZodLazy<z.ZodNumber>;
            headersSize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            content: z.ZodLazy<z.ZodObject<{
                size: z.ZodLazy<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                size: number;
            }, {
                size: number;
            }>>;
            authChallenge: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                scheme: z.ZodString;
                realm: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                realm: string;
                scheme: string;
            }, {
                realm: string;
                scheme: string;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }>>>;
}, "strip", z.ZodTypeAny, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    };
    method: "network.responseStarted";
}, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    };
    method: "network.responseStarted";
}>>]>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.message">;
    params: z.ZodLazy<z.ZodObject<{
        channel: z.ZodLazy<z.ZodString>;
        data: any;
        source: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            context?: string | undefined;
        }, {
            realm: string;
            context?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        channel: string;
        source: {
            realm: string;
            context?: string | undefined;
        };
        data?: any;
    }, {
        channel: string;
        source: {
            realm: string;
            context?: string | undefined;
        };
        data?: any;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        channel: string;
        source: {
            realm: string;
            context?: string | undefined;
        };
        data?: any;
    };
    method: "script.message";
}, {
    params: {
        channel: string;
        source: {
            realm: string;
            context?: string | undefined;
        };
        data?: any;
    };
    method: "script.message";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.realmCreated">;
    params: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"window">;
        context: z.ZodLazy<z.ZodString>;
        sandbox: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }, {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"dedicated-worker">;
        owners: z.ZodTuple<[z.ZodLazy<z.ZodString>], null>;
    }, "strip", z.ZodTypeAny, {
        type: "dedicated-worker";
        owners: [string];
    }, {
        type: "dedicated-worker";
        owners: [string];
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"shared-worker">;
    }, "strip", z.ZodTypeAny, {
        type: "shared-worker";
    }, {
        type: "shared-worker";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"service-worker">;
    }, "strip", z.ZodTypeAny, {
        type: "service-worker";
    }, {
        type: "service-worker";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"worker">;
    }, "strip", z.ZodTypeAny, {
        type: "worker";
    }, {
        type: "worker";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"paint-worklet">;
    }, "strip", z.ZodTypeAny, {
        type: "paint-worklet";
    }, {
        type: "paint-worklet";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"audio-worklet">;
    }, "strip", z.ZodTypeAny, {
        type: "audio-worklet";
    }, {
        type: "audio-worklet";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"worklet">;
    }, "strip", z.ZodTypeAny, {
        type: "worklet";
    }, {
        type: "worklet";
    }>>>]>>;
}, "strip", z.ZodTypeAny, {
    params: ({
        origin: string;
        realm: string;
    } & {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "dedicated-worker";
        owners: [string];
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "shared-worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "service-worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "paint-worklet";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "audio-worklet";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "worklet";
    });
    method: "script.realmCreated";
}, {
    params: ({
        origin: string;
        realm: string;
    } & {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "dedicated-worker";
        owners: [string];
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "shared-worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "service-worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "paint-worklet";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "audio-worklet";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "worklet";
    });
    method: "script.realmCreated";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.realmDestroyed">;
    params: z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        realm: string;
    }, {
        realm: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        realm: string;
    };
    method: "script.realmDestroyed";
}, {
    params: {
        realm: string;
    };
    method: "script.realmDestroyed";
}>>]>>]>>>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>]>>;
export declare const ErrorResponseSchema: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
    type: z.ZodLiteral<"error">;
    id: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
    error: z.ZodLazy<z.ZodEnum<["invalid argument", "invalid session id", "move target out of bounds", "no such alert", "no such element", "no such frame", "no such handle", "no such history entry", "no such intercept", "no such node", "no such request", "no such script", "no such storage partition", "no such user context", "session not created", "unable to capture screen", "unable to close browser", "unable to set cookie", "unable to set file input", "underspecified storage partition", "unknown command", "unknown error", "unsupported operation"]>>;
    message: z.ZodString;
    stacktrace: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "error";
    error: "invalid argument" | "invalid session id" | "move target out of bounds" | "no such alert" | "no such element" | "no such frame" | "no such handle" | "no such history entry" | "no such intercept" | "no such node" | "no such request" | "no such script" | "no such storage partition" | "no such user context" | "session not created" | "unable to capture screen" | "unable to close browser" | "unable to set cookie" | "unable to set file input" | "underspecified storage partition" | "unknown command" | "unknown error" | "unsupported operation";
    id: number | null;
    stacktrace?: string | undefined;
}, {
    message: string;
    type: "error";
    error: "invalid argument" | "invalid session id" | "move target out of bounds" | "no such alert" | "no such element" | "no such frame" | "no such handle" | "no such history entry" | "no such intercept" | "no such node" | "no such request" | "no such script" | "no such storage partition" | "no such user context" | "session not created" | "unable to capture screen" | "unable to close browser" | "unable to set cookie" | "unable to set file input" | "underspecified storage partition" | "unknown command" | "unknown error" | "unsupported operation";
    id: number | null;
    stacktrace?: string | undefined;
}>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
export declare const EmptyResultSchema: z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
export declare const ExtensibleSchema: z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>;
export declare const JsIntSchema: z.ZodLazy<z.ZodNumber>;
export declare const JsUintSchema: z.ZodLazy<z.ZodNumber>;
export declare const ErrorCodeSchema: z.ZodLazy<z.ZodEnum<["invalid argument", "invalid session id", "move target out of bounds", "no such alert", "no such element", "no such frame", "no such handle", "no such history entry", "no such intercept", "no such node", "no such request", "no such script", "no such storage partition", "no such user context", "session not created", "unable to capture screen", "unable to close browser", "unable to set cookie", "unable to set file input", "underspecified storage partition", "unknown command", "unknown error", "unsupported operation"]>>;
export declare const SessionCommandSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"session.end">;
    params: z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    params: Record<string, any>;
    method: "session.end";
}, {
    params: Record<string, any>;
    method: "session.end";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"session.new">;
    params: z.ZodLazy<z.ZodObject<{
        capabilities: z.ZodLazy<z.ZodObject<{
            alwaysMatch: z.ZodOptional<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                acceptInsecureCerts: z.ZodOptional<z.ZodBoolean>;
                browserName: z.ZodOptional<z.ZodString>;
                browserVersion: z.ZodOptional<z.ZodString>;
                platformName: z.ZodOptional<z.ZodString>;
                proxy: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"autodetect">;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "autodetect";
                }, {
                    proxyType: "autodetect";
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"direct">;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "direct";
                }, {
                    proxyType: "direct";
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"manual">;
                    ftpProxy: z.ZodOptional<z.ZodString>;
                    httpProxy: z.ZodOptional<z.ZodString>;
                    sslProxy: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                }, {
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    socksProxy: z.ZodString;
                    socksVersion: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    socksProxy: string;
                    socksVersion: number;
                }, {
                    socksProxy: string;
                    socksVersion: number;
                }>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>, z.ZodObject<{
                    noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, "strip", z.ZodTypeAny, {
                    noProxy?: string[] | undefined;
                }, {
                    noProxy?: string[] | undefined;
                }>>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"pac">;
                    proxyAutoconfigUrl: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                }, {
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"system">;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "system";
                }, {
                    proxyType: "system";
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>>;
                webSocketUrl: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            }, {
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>>;
            firstMatch: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                acceptInsecureCerts: z.ZodOptional<z.ZodBoolean>;
                browserName: z.ZodOptional<z.ZodString>;
                browserVersion: z.ZodOptional<z.ZodString>;
                platformName: z.ZodOptional<z.ZodString>;
                proxy: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"autodetect">;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "autodetect";
                }, {
                    proxyType: "autodetect";
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"direct">;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "direct";
                }, {
                    proxyType: "direct";
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"manual">;
                    ftpProxy: z.ZodOptional<z.ZodString>;
                    httpProxy: z.ZodOptional<z.ZodString>;
                    sslProxy: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                }, {
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    socksProxy: z.ZodString;
                    socksVersion: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    socksProxy: string;
                    socksVersion: number;
                }, {
                    socksProxy: string;
                    socksVersion: number;
                }>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>, z.ZodObject<{
                    noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, "strip", z.ZodTypeAny, {
                    noProxy?: string[] | undefined;
                }, {
                    noProxy?: string[] | undefined;
                }>>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"pac">;
                    proxyAutoconfigUrl: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                }, {
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"system">;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "system";
                }, {
                    proxyType: "system";
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>>;
                webSocketUrl: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            }, {
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">>;
        }, "strip", z.ZodTypeAny, {
            alwaysMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>) | undefined;
            firstMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>)[] | undefined;
        }, {
            alwaysMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>) | undefined;
            firstMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>)[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        capabilities: {
            alwaysMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>) | undefined;
            firstMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>)[] | undefined;
        };
    }, {
        capabilities: {
            alwaysMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>) | undefined;
            firstMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>)[] | undefined;
        };
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        capabilities: {
            alwaysMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>) | undefined;
            firstMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>)[] | undefined;
        };
    };
    method: "session.new";
}, {
    params: {
        capabilities: {
            alwaysMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>) | undefined;
            firstMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>)[] | undefined;
        };
    };
    method: "session.new";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"session.status">;
    params: z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    params: Record<string, any>;
    method: "session.status";
}, {
    params: Record<string, any>;
    method: "session.status";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"session.subscribe">;
    params: z.ZodLazy<z.ZodObject<{
        events: z.ZodArray<z.ZodString, "many">;
        contexts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        events: string[];
        contexts?: string[] | undefined;
    }, {
        events: string[];
        contexts?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        events: string[];
        contexts?: string[] | undefined;
    };
    method: "session.subscribe";
}, {
    params: {
        events: string[];
        contexts?: string[] | undefined;
    };
    method: "session.subscribe";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"session.unsubscribe">;
    params: z.ZodLazy<z.ZodObject<{
        events: z.ZodArray<z.ZodString, "many">;
        contexts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        events: string[];
        contexts?: string[] | undefined;
    }, {
        events: string[];
        contexts?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        events: string[];
        contexts?: string[] | undefined;
    };
    method: "session.unsubscribe";
}, {
    params: {
        events: string[];
        contexts?: string[] | undefined;
    };
    method: "session.unsubscribe";
}>>]>>;
export declare namespace Session {
    const ProxyConfigurationSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        proxyType: z.ZodLiteral<"autodetect">;
    }, "strip", z.ZodTypeAny, {
        proxyType: "autodetect";
    }, {
        proxyType: "autodetect";
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        proxyType: z.ZodLiteral<"direct">;
    }, "strip", z.ZodTypeAny, {
        proxyType: "direct";
    }, {
        proxyType: "direct";
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
        proxyType: z.ZodLiteral<"manual">;
        ftpProxy: z.ZodOptional<z.ZodString>;
        httpProxy: z.ZodOptional<z.ZodString>;
        sslProxy: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        proxyType: "manual";
        ftpProxy?: string | undefined;
        httpProxy?: string | undefined;
        sslProxy?: string | undefined;
    }, {
        proxyType: "manual";
        ftpProxy?: string | undefined;
        httpProxy?: string | undefined;
        sslProxy?: string | undefined;
    }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        socksProxy: z.ZodString;
        socksVersion: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        socksProxy: string;
        socksVersion: number;
    }, {
        socksProxy: string;
        socksVersion: number;
    }>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>, z.ZodObject<{
        noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        noProxy?: string[] | undefined;
    }, {
        noProxy?: string[] | undefined;
    }>>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        proxyType: z.ZodLiteral<"pac">;
        proxyAutoconfigUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        proxyType: "pac";
        proxyAutoconfigUrl: string;
    }, {
        proxyType: "pac";
        proxyAutoconfigUrl: string;
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        proxyType: z.ZodLiteral<"system">;
    }, "strip", z.ZodTypeAny, {
        proxyType: "system";
    }, {
        proxyType: "system";
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>;
}
export declare const SessionResultSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    sessionId: z.ZodString;
    capabilities: z.ZodIntersection<z.ZodObject<{
        acceptInsecureCerts: z.ZodBoolean;
        browserName: z.ZodString;
        browserVersion: z.ZodString;
        platformName: z.ZodString;
        setWindowRect: z.ZodBoolean;
        proxy: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            proxyType: z.ZodLiteral<"autodetect">;
        }, "strip", z.ZodTypeAny, {
            proxyType: "autodetect";
        }, {
            proxyType: "autodetect";
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            proxyType: z.ZodLiteral<"direct">;
        }, "strip", z.ZodTypeAny, {
            proxyType: "direct";
        }, {
            proxyType: "direct";
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            proxyType: z.ZodLiteral<"manual">;
            ftpProxy: z.ZodOptional<z.ZodString>;
            httpProxy: z.ZodOptional<z.ZodString>;
            sslProxy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            proxyType: "manual";
            ftpProxy?: string | undefined;
            httpProxy?: string | undefined;
            sslProxy?: string | undefined;
        }, {
            proxyType: "manual";
            ftpProxy?: string | undefined;
            httpProxy?: string | undefined;
            sslProxy?: string | undefined;
        }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            socksProxy: z.ZodString;
            socksVersion: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            socksProxy: string;
            socksVersion: number;
        }, {
            socksProxy: string;
            socksVersion: number;
        }>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>, z.ZodObject<{
            noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            noProxy?: string[] | undefined;
        }, {
            noProxy?: string[] | undefined;
        }>>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            proxyType: z.ZodLiteral<"pac">;
            proxyAutoconfigUrl: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            proxyType: "pac";
            proxyAutoconfigUrl: string;
        }, {
            proxyType: "pac";
            proxyAutoconfigUrl: string;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            proxyType: z.ZodLiteral<"system">;
        }, "strip", z.ZodTypeAny, {
            proxyType: "system";
        }, {
            proxyType: "system";
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>>;
        webSocketUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        acceptInsecureCerts: boolean;
        browserName: string;
        browserVersion: string;
        platformName: string;
        setWindowRect: boolean;
        proxy?: ({
            proxyType: "autodetect";
        } & Record<string, any>) | ({
            proxyType: "direct";
        } & Record<string, any>) | ((({
            proxyType: "manual";
            ftpProxy?: string | undefined;
            httpProxy?: string | undefined;
            sslProxy?: string | undefined;
        } & ({
            socksProxy: string;
            socksVersion: number;
        } | {})) & {
            noProxy?: string[] | undefined;
        }) & Record<string, any>) | ({
            proxyType: "pac";
            proxyAutoconfigUrl: string;
        } & Record<string, any>) | ({
            proxyType: "system";
        } & Record<string, any>) | {} | undefined;
        webSocketUrl?: string | undefined;
    }, {
        acceptInsecureCerts: boolean;
        browserName: string;
        browserVersion: string;
        platformName: string;
        setWindowRect: boolean;
        proxy?: ({
            proxyType: "autodetect";
        } & Record<string, any>) | ({
            proxyType: "direct";
        } & Record<string, any>) | ((({
            proxyType: "manual";
            ftpProxy?: string | undefined;
            httpProxy?: string | undefined;
            sslProxy?: string | undefined;
        } & ({
            socksProxy: string;
            socksVersion: number;
        } | {})) & {
            noProxy?: string[] | undefined;
        }) & Record<string, any>) | ({
            proxyType: "pac";
            proxyAutoconfigUrl: string;
        } & Record<string, any>) | ({
            proxyType: "system";
        } & Record<string, any>) | {} | undefined;
        webSocketUrl?: string | undefined;
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    capabilities: {
        acceptInsecureCerts: boolean;
        browserName: string;
        browserVersion: string;
        platformName: string;
        setWindowRect: boolean;
        proxy?: ({
            proxyType: "autodetect";
        } & Record<string, any>) | ({
            proxyType: "direct";
        } & Record<string, any>) | ((({
            proxyType: "manual";
            ftpProxy?: string | undefined;
            httpProxy?: string | undefined;
            sslProxy?: string | undefined;
        } & ({
            socksProxy: string;
            socksVersion: number;
        } | {})) & {
            noProxy?: string[] | undefined;
        }) & Record<string, any>) | ({
            proxyType: "pac";
            proxyAutoconfigUrl: string;
        } & Record<string, any>) | ({
            proxyType: "system";
        } & Record<string, any>) | {} | undefined;
        webSocketUrl?: string | undefined;
    } & Record<string, any>;
    sessionId: string;
}, {
    capabilities: {
        acceptInsecureCerts: boolean;
        browserName: string;
        browserVersion: string;
        platformName: string;
        setWindowRect: boolean;
        proxy?: ({
            proxyType: "autodetect";
        } & Record<string, any>) | ({
            proxyType: "direct";
        } & Record<string, any>) | ((({
            proxyType: "manual";
            ftpProxy?: string | undefined;
            httpProxy?: string | undefined;
            sslProxy?: string | undefined;
        } & ({
            socksProxy: string;
            socksVersion: number;
        } | {})) & {
            noProxy?: string[] | undefined;
        }) & Record<string, any>) | ({
            proxyType: "pac";
            proxyAutoconfigUrl: string;
        } & Record<string, any>) | ({
            proxyType: "system";
        } & Record<string, any>) | {} | undefined;
        webSocketUrl?: string | undefined;
    } & Record<string, any>;
    sessionId: string;
}>>, z.ZodLazy<z.ZodObject<{
    ready: z.ZodBoolean;
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    ready: boolean;
}, {
    message: string;
    ready: boolean;
}>>]>>;
export declare namespace Session {
    const CapabilitiesRequestSchema: z.ZodLazy<z.ZodObject<{
        alwaysMatch: z.ZodOptional<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            acceptInsecureCerts: z.ZodOptional<z.ZodBoolean>;
            browserName: z.ZodOptional<z.ZodString>;
            browserVersion: z.ZodOptional<z.ZodString>;
            platformName: z.ZodOptional<z.ZodString>;
            proxy: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"autodetect">;
            }, "strip", z.ZodTypeAny, {
                proxyType: "autodetect";
            }, {
                proxyType: "autodetect";
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"direct">;
            }, "strip", z.ZodTypeAny, {
                proxyType: "direct";
            }, {
                proxyType: "direct";
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"manual">;
                ftpProxy: z.ZodOptional<z.ZodString>;
                httpProxy: z.ZodOptional<z.ZodString>;
                sslProxy: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            }, {
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                socksProxy: z.ZodString;
                socksVersion: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                socksProxy: string;
                socksVersion: number;
            }, {
                socksProxy: string;
                socksVersion: number;
            }>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>, z.ZodObject<{
                noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                noProxy?: string[] | undefined;
            }, {
                noProxy?: string[] | undefined;
            }>>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"pac">;
                proxyAutoconfigUrl: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            }, {
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"system">;
            }, "strip", z.ZodTypeAny, {
                proxyType: "system";
            }, {
                proxyType: "system";
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>>;
            webSocketUrl: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            acceptInsecureCerts?: boolean | undefined;
            browserName?: string | undefined;
            browserVersion?: string | undefined;
            platformName?: string | undefined;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: boolean | undefined;
        }, {
            acceptInsecureCerts?: boolean | undefined;
            browserName?: string | undefined;
            browserVersion?: string | undefined;
            platformName?: string | undefined;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: boolean | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>>;
        firstMatch: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            acceptInsecureCerts: z.ZodOptional<z.ZodBoolean>;
            browserName: z.ZodOptional<z.ZodString>;
            browserVersion: z.ZodOptional<z.ZodString>;
            platformName: z.ZodOptional<z.ZodString>;
            proxy: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"autodetect">;
            }, "strip", z.ZodTypeAny, {
                proxyType: "autodetect";
            }, {
                proxyType: "autodetect";
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"direct">;
            }, "strip", z.ZodTypeAny, {
                proxyType: "direct";
            }, {
                proxyType: "direct";
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"manual">;
                ftpProxy: z.ZodOptional<z.ZodString>;
                httpProxy: z.ZodOptional<z.ZodString>;
                sslProxy: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            }, {
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                socksProxy: z.ZodString;
                socksVersion: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                socksProxy: string;
                socksVersion: number;
            }, {
                socksProxy: string;
                socksVersion: number;
            }>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>, z.ZodObject<{
                noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                noProxy?: string[] | undefined;
            }, {
                noProxy?: string[] | undefined;
            }>>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"pac">;
                proxyAutoconfigUrl: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            }, {
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"system">;
            }, "strip", z.ZodTypeAny, {
                proxyType: "system";
            }, {
                proxyType: "system";
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>>;
            webSocketUrl: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            acceptInsecureCerts?: boolean | undefined;
            browserName?: string | undefined;
            browserVersion?: string | undefined;
            platformName?: string | undefined;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: boolean | undefined;
        }, {
            acceptInsecureCerts?: boolean | undefined;
            browserName?: string | undefined;
            browserVersion?: string | undefined;
            platformName?: string | undefined;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: boolean | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">>;
    }, "strip", z.ZodTypeAny, {
        alwaysMatch?: ({
            acceptInsecureCerts?: boolean | undefined;
            browserName?: string | undefined;
            browserVersion?: string | undefined;
            platformName?: string | undefined;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: boolean | undefined;
        } & Record<string, any>) | undefined;
        firstMatch?: ({
            acceptInsecureCerts?: boolean | undefined;
            browserName?: string | undefined;
            browserVersion?: string | undefined;
            platformName?: string | undefined;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: boolean | undefined;
        } & Record<string, any>)[] | undefined;
    }, {
        alwaysMatch?: ({
            acceptInsecureCerts?: boolean | undefined;
            browserName?: string | undefined;
            browserVersion?: string | undefined;
            platformName?: string | undefined;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: boolean | undefined;
        } & Record<string, any>) | undefined;
        firstMatch?: ({
            acceptInsecureCerts?: boolean | undefined;
            browserName?: string | undefined;
            browserVersion?: string | undefined;
            platformName?: string | undefined;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: boolean | undefined;
        } & Record<string, any>)[] | undefined;
    }>>;
}
export declare namespace Session {
    const CapabilityRequestSchema: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        acceptInsecureCerts: z.ZodOptional<z.ZodBoolean>;
        browserName: z.ZodOptional<z.ZodString>;
        browserVersion: z.ZodOptional<z.ZodString>;
        platformName: z.ZodOptional<z.ZodString>;
        proxy: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            proxyType: z.ZodLiteral<"autodetect">;
        }, "strip", z.ZodTypeAny, {
            proxyType: "autodetect";
        }, {
            proxyType: "autodetect";
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            proxyType: z.ZodLiteral<"direct">;
        }, "strip", z.ZodTypeAny, {
            proxyType: "direct";
        }, {
            proxyType: "direct";
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            proxyType: z.ZodLiteral<"manual">;
            ftpProxy: z.ZodOptional<z.ZodString>;
            httpProxy: z.ZodOptional<z.ZodString>;
            sslProxy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            proxyType: "manual";
            ftpProxy?: string | undefined;
            httpProxy?: string | undefined;
            sslProxy?: string | undefined;
        }, {
            proxyType: "manual";
            ftpProxy?: string | undefined;
            httpProxy?: string | undefined;
            sslProxy?: string | undefined;
        }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            socksProxy: z.ZodString;
            socksVersion: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            socksProxy: string;
            socksVersion: number;
        }, {
            socksProxy: string;
            socksVersion: number;
        }>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>, z.ZodObject<{
            noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            noProxy?: string[] | undefined;
        }, {
            noProxy?: string[] | undefined;
        }>>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            proxyType: z.ZodLiteral<"pac">;
            proxyAutoconfigUrl: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            proxyType: "pac";
            proxyAutoconfigUrl: string;
        }, {
            proxyType: "pac";
            proxyAutoconfigUrl: string;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            proxyType: z.ZodLiteral<"system">;
        }, "strip", z.ZodTypeAny, {
            proxyType: "system";
        }, {
            proxyType: "system";
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>>;
        webSocketUrl: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        acceptInsecureCerts?: boolean | undefined;
        browserName?: string | undefined;
        browserVersion?: string | undefined;
        platformName?: string | undefined;
        proxy?: ({
            proxyType: "autodetect";
        } & Record<string, any>) | ({
            proxyType: "direct";
        } & Record<string, any>) | ((({
            proxyType: "manual";
            ftpProxy?: string | undefined;
            httpProxy?: string | undefined;
            sslProxy?: string | undefined;
        } & ({
            socksProxy: string;
            socksVersion: number;
        } | {})) & {
            noProxy?: string[] | undefined;
        }) & Record<string, any>) | ({
            proxyType: "pac";
            proxyAutoconfigUrl: string;
        } & Record<string, any>) | ({
            proxyType: "system";
        } & Record<string, any>) | {} | undefined;
        webSocketUrl?: boolean | undefined;
    }, {
        acceptInsecureCerts?: boolean | undefined;
        browserName?: string | undefined;
        browserVersion?: string | undefined;
        platformName?: string | undefined;
        proxy?: ({
            proxyType: "autodetect";
        } & Record<string, any>) | ({
            proxyType: "direct";
        } & Record<string, any>) | ((({
            proxyType: "manual";
            ftpProxy?: string | undefined;
            httpProxy?: string | undefined;
            sslProxy?: string | undefined;
        } & ({
            socksProxy: string;
            socksVersion: number;
        } | {})) & {
            noProxy?: string[] | undefined;
        }) & Record<string, any>) | ({
            proxyType: "pac";
            proxyAutoconfigUrl: string;
        } & Record<string, any>) | ({
            proxyType: "system";
        } & Record<string, any>) | {} | undefined;
        webSocketUrl?: boolean | undefined;
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
}
export declare namespace Session {
    const AutodetectProxyConfigurationSchema: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        proxyType: z.ZodLiteral<"autodetect">;
    }, "strip", z.ZodTypeAny, {
        proxyType: "autodetect";
    }, {
        proxyType: "autodetect";
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
}
export declare namespace Session {
    const DirectProxyConfigurationSchema: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        proxyType: z.ZodLiteral<"direct">;
    }, "strip", z.ZodTypeAny, {
        proxyType: "direct";
    }, {
        proxyType: "direct";
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
}
export declare namespace Session {
    const ManualProxyConfigurationSchema: z.ZodLazy<z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
        proxyType: z.ZodLiteral<"manual">;
        ftpProxy: z.ZodOptional<z.ZodString>;
        httpProxy: z.ZodOptional<z.ZodString>;
        sslProxy: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        proxyType: "manual";
        ftpProxy?: string | undefined;
        httpProxy?: string | undefined;
        sslProxy?: string | undefined;
    }, {
        proxyType: "manual";
        ftpProxy?: string | undefined;
        httpProxy?: string | undefined;
        sslProxy?: string | undefined;
    }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        socksProxy: z.ZodString;
        socksVersion: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        socksProxy: string;
        socksVersion: number;
    }, {
        socksProxy: string;
        socksVersion: number;
    }>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>, z.ZodObject<{
        noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        noProxy?: string[] | undefined;
    }, {
        noProxy?: string[] | undefined;
    }>>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
}
export declare namespace Session {
    const SocksProxyConfigurationSchema: z.ZodLazy<z.ZodObject<{
        socksProxy: z.ZodString;
        socksVersion: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        socksProxy: string;
        socksVersion: number;
    }, {
        socksProxy: string;
        socksVersion: number;
    }>>;
}
export declare namespace Session {
    const PacProxyConfigurationSchema: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        proxyType: z.ZodLiteral<"pac">;
        proxyAutoconfigUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        proxyType: "pac";
        proxyAutoconfigUrl: string;
    }, {
        proxyType: "pac";
        proxyAutoconfigUrl: string;
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
}
export declare namespace Session {
    const SystemProxyConfigurationSchema: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        proxyType: z.ZodLiteral<"system">;
    }, "strip", z.ZodTypeAny, {
        proxyType: "system";
    }, {
        proxyType: "system";
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
}
export declare namespace Session {
    const SubscriptionRequestSchema: z.ZodLazy<z.ZodObject<{
        events: z.ZodArray<z.ZodString, "many">;
        contexts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        events: string[];
        contexts?: string[] | undefined;
    }, {
        events: string[];
        contexts?: string[] | undefined;
    }>>;
}
export declare namespace Session {
    const StatusSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"session.status">;
        params: z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    }, "strip", z.ZodTypeAny, {
        params: Record<string, any>;
        method: "session.status";
    }, {
        params: Record<string, any>;
        method: "session.status";
    }>>;
}
export declare namespace Session {
    const StatusResultSchema: z.ZodLazy<z.ZodObject<{
        ready: z.ZodBoolean;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        ready: boolean;
    }, {
        message: string;
        ready: boolean;
    }>>;
}
export declare namespace Session {
    const NewSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"session.new">;
        params: z.ZodLazy<z.ZodObject<{
            capabilities: z.ZodLazy<z.ZodObject<{
                alwaysMatch: z.ZodOptional<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    acceptInsecureCerts: z.ZodOptional<z.ZodBoolean>;
                    browserName: z.ZodOptional<z.ZodString>;
                    browserVersion: z.ZodOptional<z.ZodString>;
                    platformName: z.ZodOptional<z.ZodString>;
                    proxy: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                        proxyType: z.ZodLiteral<"autodetect">;
                    }, "strip", z.ZodTypeAny, {
                        proxyType: "autodetect";
                    }, {
                        proxyType: "autodetect";
                    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                        proxyType: z.ZodLiteral<"direct">;
                    }, "strip", z.ZodTypeAny, {
                        proxyType: "direct";
                    }, {
                        proxyType: "direct";
                    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
                        proxyType: z.ZodLiteral<"manual">;
                        ftpProxy: z.ZodOptional<z.ZodString>;
                        httpProxy: z.ZodOptional<z.ZodString>;
                        sslProxy: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        proxyType: "manual";
                        ftpProxy?: string | undefined;
                        httpProxy?: string | undefined;
                        sslProxy?: string | undefined;
                    }, {
                        proxyType: "manual";
                        ftpProxy?: string | undefined;
                        httpProxy?: string | undefined;
                        sslProxy?: string | undefined;
                    }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                        socksProxy: z.ZodString;
                        socksVersion: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        socksProxy: string;
                        socksVersion: number;
                    }, {
                        socksProxy: string;
                        socksVersion: number;
                    }>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>, z.ZodObject<{
                        noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    }, "strip", z.ZodTypeAny, {
                        noProxy?: string[] | undefined;
                    }, {
                        noProxy?: string[] | undefined;
                    }>>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                        proxyType: z.ZodLiteral<"pac">;
                        proxyAutoconfigUrl: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        proxyType: "pac";
                        proxyAutoconfigUrl: string;
                    }, {
                        proxyType: "pac";
                        proxyAutoconfigUrl: string;
                    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                        proxyType: z.ZodLiteral<"system">;
                    }, "strip", z.ZodTypeAny, {
                        proxyType: "system";
                    }, {
                        proxyType: "system";
                    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>>;
                    webSocketUrl: z.ZodOptional<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    acceptInsecureCerts?: boolean | undefined;
                    browserName?: string | undefined;
                    browserVersion?: string | undefined;
                    platformName?: string | undefined;
                    proxy?: ({
                        proxyType: "autodetect";
                    } & Record<string, any>) | ({
                        proxyType: "direct";
                    } & Record<string, any>) | ((({
                        proxyType: "manual";
                        ftpProxy?: string | undefined;
                        httpProxy?: string | undefined;
                        sslProxy?: string | undefined;
                    } & ({
                        socksProxy: string;
                        socksVersion: number;
                    } | {})) & {
                        noProxy?: string[] | undefined;
                    }) & Record<string, any>) | ({
                        proxyType: "pac";
                        proxyAutoconfigUrl: string;
                    } & Record<string, any>) | ({
                        proxyType: "system";
                    } & Record<string, any>) | {} | undefined;
                    webSocketUrl?: boolean | undefined;
                }, {
                    acceptInsecureCerts?: boolean | undefined;
                    browserName?: string | undefined;
                    browserVersion?: string | undefined;
                    platformName?: string | undefined;
                    proxy?: ({
                        proxyType: "autodetect";
                    } & Record<string, any>) | ({
                        proxyType: "direct";
                    } & Record<string, any>) | ((({
                        proxyType: "manual";
                        ftpProxy?: string | undefined;
                        httpProxy?: string | undefined;
                        sslProxy?: string | undefined;
                    } & ({
                        socksProxy: string;
                        socksVersion: number;
                    } | {})) & {
                        noProxy?: string[] | undefined;
                    }) & Record<string, any>) | ({
                        proxyType: "pac";
                        proxyAutoconfigUrl: string;
                    } & Record<string, any>) | ({
                        proxyType: "system";
                    } & Record<string, any>) | {} | undefined;
                    webSocketUrl?: boolean | undefined;
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>>;
                firstMatch: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    acceptInsecureCerts: z.ZodOptional<z.ZodBoolean>;
                    browserName: z.ZodOptional<z.ZodString>;
                    browserVersion: z.ZodOptional<z.ZodString>;
                    platformName: z.ZodOptional<z.ZodString>;
                    proxy: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                        proxyType: z.ZodLiteral<"autodetect">;
                    }, "strip", z.ZodTypeAny, {
                        proxyType: "autodetect";
                    }, {
                        proxyType: "autodetect";
                    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                        proxyType: z.ZodLiteral<"direct">;
                    }, "strip", z.ZodTypeAny, {
                        proxyType: "direct";
                    }, {
                        proxyType: "direct";
                    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
                        proxyType: z.ZodLiteral<"manual">;
                        ftpProxy: z.ZodOptional<z.ZodString>;
                        httpProxy: z.ZodOptional<z.ZodString>;
                        sslProxy: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        proxyType: "manual";
                        ftpProxy?: string | undefined;
                        httpProxy?: string | undefined;
                        sslProxy?: string | undefined;
                    }, {
                        proxyType: "manual";
                        ftpProxy?: string | undefined;
                        httpProxy?: string | undefined;
                        sslProxy?: string | undefined;
                    }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                        socksProxy: z.ZodString;
                        socksVersion: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        socksProxy: string;
                        socksVersion: number;
                    }, {
                        socksProxy: string;
                        socksVersion: number;
                    }>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>, z.ZodObject<{
                        noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    }, "strip", z.ZodTypeAny, {
                        noProxy?: string[] | undefined;
                    }, {
                        noProxy?: string[] | undefined;
                    }>>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                        proxyType: z.ZodLiteral<"pac">;
                        proxyAutoconfigUrl: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        proxyType: "pac";
                        proxyAutoconfigUrl: string;
                    }, {
                        proxyType: "pac";
                        proxyAutoconfigUrl: string;
                    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                        proxyType: z.ZodLiteral<"system">;
                    }, "strip", z.ZodTypeAny, {
                        proxyType: "system";
                    }, {
                        proxyType: "system";
                    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>>;
                    webSocketUrl: z.ZodOptional<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    acceptInsecureCerts?: boolean | undefined;
                    browserName?: string | undefined;
                    browserVersion?: string | undefined;
                    platformName?: string | undefined;
                    proxy?: ({
                        proxyType: "autodetect";
                    } & Record<string, any>) | ({
                        proxyType: "direct";
                    } & Record<string, any>) | ((({
                        proxyType: "manual";
                        ftpProxy?: string | undefined;
                        httpProxy?: string | undefined;
                        sslProxy?: string | undefined;
                    } & ({
                        socksProxy: string;
                        socksVersion: number;
                    } | {})) & {
                        noProxy?: string[] | undefined;
                    }) & Record<string, any>) | ({
                        proxyType: "pac";
                        proxyAutoconfigUrl: string;
                    } & Record<string, any>) | ({
                        proxyType: "system";
                    } & Record<string, any>) | {} | undefined;
                    webSocketUrl?: boolean | undefined;
                }, {
                    acceptInsecureCerts?: boolean | undefined;
                    browserName?: string | undefined;
                    browserVersion?: string | undefined;
                    platformName?: string | undefined;
                    proxy?: ({
                        proxyType: "autodetect";
                    } & Record<string, any>) | ({
                        proxyType: "direct";
                    } & Record<string, any>) | ((({
                        proxyType: "manual";
                        ftpProxy?: string | undefined;
                        httpProxy?: string | undefined;
                        sslProxy?: string | undefined;
                    } & ({
                        socksProxy: string;
                        socksVersion: number;
                    } | {})) & {
                        noProxy?: string[] | undefined;
                    }) & Record<string, any>) | ({
                        proxyType: "pac";
                        proxyAutoconfigUrl: string;
                    } & Record<string, any>) | ({
                        proxyType: "system";
                    } & Record<string, any>) | {} | undefined;
                    webSocketUrl?: boolean | undefined;
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">>;
            }, "strip", z.ZodTypeAny, {
                alwaysMatch?: ({
                    acceptInsecureCerts?: boolean | undefined;
                    browserName?: string | undefined;
                    browserVersion?: string | undefined;
                    platformName?: string | undefined;
                    proxy?: ({
                        proxyType: "autodetect";
                    } & Record<string, any>) | ({
                        proxyType: "direct";
                    } & Record<string, any>) | ((({
                        proxyType: "manual";
                        ftpProxy?: string | undefined;
                        httpProxy?: string | undefined;
                        sslProxy?: string | undefined;
                    } & ({
                        socksProxy: string;
                        socksVersion: number;
                    } | {})) & {
                        noProxy?: string[] | undefined;
                    }) & Record<string, any>) | ({
                        proxyType: "pac";
                        proxyAutoconfigUrl: string;
                    } & Record<string, any>) | ({
                        proxyType: "system";
                    } & Record<string, any>) | {} | undefined;
                    webSocketUrl?: boolean | undefined;
                } & Record<string, any>) | undefined;
                firstMatch?: ({
                    acceptInsecureCerts?: boolean | undefined;
                    browserName?: string | undefined;
                    browserVersion?: string | undefined;
                    platformName?: string | undefined;
                    proxy?: ({
                        proxyType: "autodetect";
                    } & Record<string, any>) | ({
                        proxyType: "direct";
                    } & Record<string, any>) | ((({
                        proxyType: "manual";
                        ftpProxy?: string | undefined;
                        httpProxy?: string | undefined;
                        sslProxy?: string | undefined;
                    } & ({
                        socksProxy: string;
                        socksVersion: number;
                    } | {})) & {
                        noProxy?: string[] | undefined;
                    }) & Record<string, any>) | ({
                        proxyType: "pac";
                        proxyAutoconfigUrl: string;
                    } & Record<string, any>) | ({
                        proxyType: "system";
                    } & Record<string, any>) | {} | undefined;
                    webSocketUrl?: boolean | undefined;
                } & Record<string, any>)[] | undefined;
            }, {
                alwaysMatch?: ({
                    acceptInsecureCerts?: boolean | undefined;
                    browserName?: string | undefined;
                    browserVersion?: string | undefined;
                    platformName?: string | undefined;
                    proxy?: ({
                        proxyType: "autodetect";
                    } & Record<string, any>) | ({
                        proxyType: "direct";
                    } & Record<string, any>) | ((({
                        proxyType: "manual";
                        ftpProxy?: string | undefined;
                        httpProxy?: string | undefined;
                        sslProxy?: string | undefined;
                    } & ({
                        socksProxy: string;
                        socksVersion: number;
                    } | {})) & {
                        noProxy?: string[] | undefined;
                    }) & Record<string, any>) | ({
                        proxyType: "pac";
                        proxyAutoconfigUrl: string;
                    } & Record<string, any>) | ({
                        proxyType: "system";
                    } & Record<string, any>) | {} | undefined;
                    webSocketUrl?: boolean | undefined;
                } & Record<string, any>) | undefined;
                firstMatch?: ({
                    acceptInsecureCerts?: boolean | undefined;
                    browserName?: string | undefined;
                    browserVersion?: string | undefined;
                    platformName?: string | undefined;
                    proxy?: ({
                        proxyType: "autodetect";
                    } & Record<string, any>) | ({
                        proxyType: "direct";
                    } & Record<string, any>) | ((({
                        proxyType: "manual";
                        ftpProxy?: string | undefined;
                        httpProxy?: string | undefined;
                        sslProxy?: string | undefined;
                    } & ({
                        socksProxy: string;
                        socksVersion: number;
                    } | {})) & {
                        noProxy?: string[] | undefined;
                    }) & Record<string, any>) | ({
                        proxyType: "pac";
                        proxyAutoconfigUrl: string;
                    } & Record<string, any>) | ({
                        proxyType: "system";
                    } & Record<string, any>) | {} | undefined;
                    webSocketUrl?: boolean | undefined;
                } & Record<string, any>)[] | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            capabilities: {
                alwaysMatch?: ({
                    acceptInsecureCerts?: boolean | undefined;
                    browserName?: string | undefined;
                    browserVersion?: string | undefined;
                    platformName?: string | undefined;
                    proxy?: ({
                        proxyType: "autodetect";
                    } & Record<string, any>) | ({
                        proxyType: "direct";
                    } & Record<string, any>) | ((({
                        proxyType: "manual";
                        ftpProxy?: string | undefined;
                        httpProxy?: string | undefined;
                        sslProxy?: string | undefined;
                    } & ({
                        socksProxy: string;
                        socksVersion: number;
                    } | {})) & {
                        noProxy?: string[] | undefined;
                    }) & Record<string, any>) | ({
                        proxyType: "pac";
                        proxyAutoconfigUrl: string;
                    } & Record<string, any>) | ({
                        proxyType: "system";
                    } & Record<string, any>) | {} | undefined;
                    webSocketUrl?: boolean | undefined;
                } & Record<string, any>) | undefined;
                firstMatch?: ({
                    acceptInsecureCerts?: boolean | undefined;
                    browserName?: string | undefined;
                    browserVersion?: string | undefined;
                    platformName?: string | undefined;
                    proxy?: ({
                        proxyType: "autodetect";
                    } & Record<string, any>) | ({
                        proxyType: "direct";
                    } & Record<string, any>) | ((({
                        proxyType: "manual";
                        ftpProxy?: string | undefined;
                        httpProxy?: string | undefined;
                        sslProxy?: string | undefined;
                    } & ({
                        socksProxy: string;
                        socksVersion: number;
                    } | {})) & {
                        noProxy?: string[] | undefined;
                    }) & Record<string, any>) | ({
                        proxyType: "pac";
                        proxyAutoconfigUrl: string;
                    } & Record<string, any>) | ({
                        proxyType: "system";
                    } & Record<string, any>) | {} | undefined;
                    webSocketUrl?: boolean | undefined;
                } & Record<string, any>)[] | undefined;
            };
        }, {
            capabilities: {
                alwaysMatch?: ({
                    acceptInsecureCerts?: boolean | undefined;
                    browserName?: string | undefined;
                    browserVersion?: string | undefined;
                    platformName?: string | undefined;
                    proxy?: ({
                        proxyType: "autodetect";
                    } & Record<string, any>) | ({
                        proxyType: "direct";
                    } & Record<string, any>) | ((({
                        proxyType: "manual";
                        ftpProxy?: string | undefined;
                        httpProxy?: string | undefined;
                        sslProxy?: string | undefined;
                    } & ({
                        socksProxy: string;
                        socksVersion: number;
                    } | {})) & {
                        noProxy?: string[] | undefined;
                    }) & Record<string, any>) | ({
                        proxyType: "pac";
                        proxyAutoconfigUrl: string;
                    } & Record<string, any>) | ({
                        proxyType: "system";
                    } & Record<string, any>) | {} | undefined;
                    webSocketUrl?: boolean | undefined;
                } & Record<string, any>) | undefined;
                firstMatch?: ({
                    acceptInsecureCerts?: boolean | undefined;
                    browserName?: string | undefined;
                    browserVersion?: string | undefined;
                    platformName?: string | undefined;
                    proxy?: ({
                        proxyType: "autodetect";
                    } & Record<string, any>) | ({
                        proxyType: "direct";
                    } & Record<string, any>) | ((({
                        proxyType: "manual";
                        ftpProxy?: string | undefined;
                        httpProxy?: string | undefined;
                        sslProxy?: string | undefined;
                    } & ({
                        socksProxy: string;
                        socksVersion: number;
                    } | {})) & {
                        noProxy?: string[] | undefined;
                    }) & Record<string, any>) | ({
                        proxyType: "pac";
                        proxyAutoconfigUrl: string;
                    } & Record<string, any>) | ({
                        proxyType: "system";
                    } & Record<string, any>) | {} | undefined;
                    webSocketUrl?: boolean | undefined;
                } & Record<string, any>)[] | undefined;
            };
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            capabilities: {
                alwaysMatch?: ({
                    acceptInsecureCerts?: boolean | undefined;
                    browserName?: string | undefined;
                    browserVersion?: string | undefined;
                    platformName?: string | undefined;
                    proxy?: ({
                        proxyType: "autodetect";
                    } & Record<string, any>) | ({
                        proxyType: "direct";
                    } & Record<string, any>) | ((({
                        proxyType: "manual";
                        ftpProxy?: string | undefined;
                        httpProxy?: string | undefined;
                        sslProxy?: string | undefined;
                    } & ({
                        socksProxy: string;
                        socksVersion: number;
                    } | {})) & {
                        noProxy?: string[] | undefined;
                    }) & Record<string, any>) | ({
                        proxyType: "pac";
                        proxyAutoconfigUrl: string;
                    } & Record<string, any>) | ({
                        proxyType: "system";
                    } & Record<string, any>) | {} | undefined;
                    webSocketUrl?: boolean | undefined;
                } & Record<string, any>) | undefined;
                firstMatch?: ({
                    acceptInsecureCerts?: boolean | undefined;
                    browserName?: string | undefined;
                    browserVersion?: string | undefined;
                    platformName?: string | undefined;
                    proxy?: ({
                        proxyType: "autodetect";
                    } & Record<string, any>) | ({
                        proxyType: "direct";
                    } & Record<string, any>) | ((({
                        proxyType: "manual";
                        ftpProxy?: string | undefined;
                        httpProxy?: string | undefined;
                        sslProxy?: string | undefined;
                    } & ({
                        socksProxy: string;
                        socksVersion: number;
                    } | {})) & {
                        noProxy?: string[] | undefined;
                    }) & Record<string, any>) | ({
                        proxyType: "pac";
                        proxyAutoconfigUrl: string;
                    } & Record<string, any>) | ({
                        proxyType: "system";
                    } & Record<string, any>) | {} | undefined;
                    webSocketUrl?: boolean | undefined;
                } & Record<string, any>)[] | undefined;
            };
        };
        method: "session.new";
    }, {
        params: {
            capabilities: {
                alwaysMatch?: ({
                    acceptInsecureCerts?: boolean | undefined;
                    browserName?: string | undefined;
                    browserVersion?: string | undefined;
                    platformName?: string | undefined;
                    proxy?: ({
                        proxyType: "autodetect";
                    } & Record<string, any>) | ({
                        proxyType: "direct";
                    } & Record<string, any>) | ((({
                        proxyType: "manual";
                        ftpProxy?: string | undefined;
                        httpProxy?: string | undefined;
                        sslProxy?: string | undefined;
                    } & ({
                        socksProxy: string;
                        socksVersion: number;
                    } | {})) & {
                        noProxy?: string[] | undefined;
                    }) & Record<string, any>) | ({
                        proxyType: "pac";
                        proxyAutoconfigUrl: string;
                    } & Record<string, any>) | ({
                        proxyType: "system";
                    } & Record<string, any>) | {} | undefined;
                    webSocketUrl?: boolean | undefined;
                } & Record<string, any>) | undefined;
                firstMatch?: ({
                    acceptInsecureCerts?: boolean | undefined;
                    browserName?: string | undefined;
                    browserVersion?: string | undefined;
                    platformName?: string | undefined;
                    proxy?: ({
                        proxyType: "autodetect";
                    } & Record<string, any>) | ({
                        proxyType: "direct";
                    } & Record<string, any>) | ((({
                        proxyType: "manual";
                        ftpProxy?: string | undefined;
                        httpProxy?: string | undefined;
                        sslProxy?: string | undefined;
                    } & ({
                        socksProxy: string;
                        socksVersion: number;
                    } | {})) & {
                        noProxy?: string[] | undefined;
                    }) & Record<string, any>) | ({
                        proxyType: "pac";
                        proxyAutoconfigUrl: string;
                    } & Record<string, any>) | ({
                        proxyType: "system";
                    } & Record<string, any>) | {} | undefined;
                    webSocketUrl?: boolean | undefined;
                } & Record<string, any>)[] | undefined;
            };
        };
        method: "session.new";
    }>>;
}
export declare namespace Session {
    const NewParametersSchema: z.ZodLazy<z.ZodObject<{
        capabilities: z.ZodLazy<z.ZodObject<{
            alwaysMatch: z.ZodOptional<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                acceptInsecureCerts: z.ZodOptional<z.ZodBoolean>;
                browserName: z.ZodOptional<z.ZodString>;
                browserVersion: z.ZodOptional<z.ZodString>;
                platformName: z.ZodOptional<z.ZodString>;
                proxy: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"autodetect">;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "autodetect";
                }, {
                    proxyType: "autodetect";
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"direct">;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "direct";
                }, {
                    proxyType: "direct";
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"manual">;
                    ftpProxy: z.ZodOptional<z.ZodString>;
                    httpProxy: z.ZodOptional<z.ZodString>;
                    sslProxy: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                }, {
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    socksProxy: z.ZodString;
                    socksVersion: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    socksProxy: string;
                    socksVersion: number;
                }, {
                    socksProxy: string;
                    socksVersion: number;
                }>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>, z.ZodObject<{
                    noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, "strip", z.ZodTypeAny, {
                    noProxy?: string[] | undefined;
                }, {
                    noProxy?: string[] | undefined;
                }>>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"pac">;
                    proxyAutoconfigUrl: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                }, {
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"system">;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "system";
                }, {
                    proxyType: "system";
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>>;
                webSocketUrl: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            }, {
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>>;
            firstMatch: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                acceptInsecureCerts: z.ZodOptional<z.ZodBoolean>;
                browserName: z.ZodOptional<z.ZodString>;
                browserVersion: z.ZodOptional<z.ZodString>;
                platformName: z.ZodOptional<z.ZodString>;
                proxy: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"autodetect">;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "autodetect";
                }, {
                    proxyType: "autodetect";
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"direct">;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "direct";
                }, {
                    proxyType: "direct";
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"manual">;
                    ftpProxy: z.ZodOptional<z.ZodString>;
                    httpProxy: z.ZodOptional<z.ZodString>;
                    sslProxy: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                }, {
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    socksProxy: z.ZodString;
                    socksVersion: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    socksProxy: string;
                    socksVersion: number;
                }, {
                    socksProxy: string;
                    socksVersion: number;
                }>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>, z.ZodObject<{
                    noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, "strip", z.ZodTypeAny, {
                    noProxy?: string[] | undefined;
                }, {
                    noProxy?: string[] | undefined;
                }>>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"pac">;
                    proxyAutoconfigUrl: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                }, {
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    proxyType: z.ZodLiteral<"system">;
                }, "strip", z.ZodTypeAny, {
                    proxyType: "system";
                }, {
                    proxyType: "system";
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>>;
                webSocketUrl: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            }, {
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">>;
        }, "strip", z.ZodTypeAny, {
            alwaysMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>) | undefined;
            firstMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>)[] | undefined;
        }, {
            alwaysMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>) | undefined;
            firstMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>)[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        capabilities: {
            alwaysMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>) | undefined;
            firstMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>)[] | undefined;
        };
    }, {
        capabilities: {
            alwaysMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>) | undefined;
            firstMatch?: ({
                acceptInsecureCerts?: boolean | undefined;
                browserName?: string | undefined;
                browserVersion?: string | undefined;
                platformName?: string | undefined;
                proxy?: ({
                    proxyType: "autodetect";
                } & Record<string, any>) | ({
                    proxyType: "direct";
                } & Record<string, any>) | ((({
                    proxyType: "manual";
                    ftpProxy?: string | undefined;
                    httpProxy?: string | undefined;
                    sslProxy?: string | undefined;
                } & ({
                    socksProxy: string;
                    socksVersion: number;
                } | {})) & {
                    noProxy?: string[] | undefined;
                }) & Record<string, any>) | ({
                    proxyType: "pac";
                    proxyAutoconfigUrl: string;
                } & Record<string, any>) | ({
                    proxyType: "system";
                } & Record<string, any>) | {} | undefined;
                webSocketUrl?: boolean | undefined;
            } & Record<string, any>)[] | undefined;
        };
    }>>;
}
export declare namespace Session {
    const NewResultSchema: z.ZodLazy<z.ZodObject<{
        sessionId: z.ZodString;
        capabilities: z.ZodIntersection<z.ZodObject<{
            acceptInsecureCerts: z.ZodBoolean;
            browserName: z.ZodString;
            browserVersion: z.ZodString;
            platformName: z.ZodString;
            setWindowRect: z.ZodBoolean;
            proxy: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"autodetect">;
            }, "strip", z.ZodTypeAny, {
                proxyType: "autodetect";
            }, {
                proxyType: "autodetect";
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"direct">;
            }, "strip", z.ZodTypeAny, {
                proxyType: "direct";
            }, {
                proxyType: "direct";
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"manual">;
                ftpProxy: z.ZodOptional<z.ZodString>;
                httpProxy: z.ZodOptional<z.ZodString>;
                sslProxy: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            }, {
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                socksProxy: z.ZodString;
                socksVersion: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                socksProxy: string;
                socksVersion: number;
            }, {
                socksProxy: string;
                socksVersion: number;
            }>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>, z.ZodObject<{
                noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                noProxy?: string[] | undefined;
            }, {
                noProxy?: string[] | undefined;
            }>>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"pac">;
                proxyAutoconfigUrl: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            }, {
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                proxyType: z.ZodLiteral<"system">;
            }, "strip", z.ZodTypeAny, {
                proxyType: "system";
            }, {
                proxyType: "system";
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>>>;
            webSocketUrl: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        }, {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    }, "strip", z.ZodTypeAny, {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }, {
        capabilities: {
            acceptInsecureCerts: boolean;
            browserName: string;
            browserVersion: string;
            platformName: string;
            setWindowRect: boolean;
            proxy?: ({
                proxyType: "autodetect";
            } & Record<string, any>) | ({
                proxyType: "direct";
            } & Record<string, any>) | ((({
                proxyType: "manual";
                ftpProxy?: string | undefined;
                httpProxy?: string | undefined;
                sslProxy?: string | undefined;
            } & ({
                socksProxy: string;
                socksVersion: number;
            } | {})) & {
                noProxy?: string[] | undefined;
            }) & Record<string, any>) | ({
                proxyType: "pac";
                proxyAutoconfigUrl: string;
            } & Record<string, any>) | ({
                proxyType: "system";
            } & Record<string, any>) | {} | undefined;
            webSocketUrl?: string | undefined;
        } & Record<string, any>;
        sessionId: string;
    }>>;
}
export declare namespace Session {
    const EndSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"session.end">;
        params: z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    }, "strip", z.ZodTypeAny, {
        params: Record<string, any>;
        method: "session.end";
    }, {
        params: Record<string, any>;
        method: "session.end";
    }>>;
}
export declare namespace Session {
    const SubscribeSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"session.subscribe">;
        params: z.ZodLazy<z.ZodObject<{
            events: z.ZodArray<z.ZodString, "many">;
            contexts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
        }, "strip", z.ZodTypeAny, {
            events: string[];
            contexts?: string[] | undefined;
        }, {
            events: string[];
            contexts?: string[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            events: string[];
            contexts?: string[] | undefined;
        };
        method: "session.subscribe";
    }, {
        params: {
            events: string[];
            contexts?: string[] | undefined;
        };
        method: "session.subscribe";
    }>>;
}
export declare namespace Session {
    const UnsubscribeSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"session.unsubscribe">;
        params: z.ZodLazy<z.ZodObject<{
            events: z.ZodArray<z.ZodString, "many">;
            contexts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
        }, "strip", z.ZodTypeAny, {
            events: string[];
            contexts?: string[] | undefined;
        }, {
            events: string[];
            contexts?: string[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            events: string[];
            contexts?: string[] | undefined;
        };
        method: "session.unsubscribe";
    }, {
        params: {
            events: string[];
            contexts?: string[] | undefined;
        };
        method: "session.unsubscribe";
    }>>;
}
export declare const BrowserCommandSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browser.close">;
    params: z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    params: Record<string, any>;
    method: "browser.close";
}, {
    params: Record<string, any>;
    method: "browser.close";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browser.createUserContext">;
    params: z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    params: Record<string, any>;
    method: "browser.createUserContext";
}, {
    params: Record<string, any>;
    method: "browser.createUserContext";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browser.getUserContexts">;
    params: z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    params: Record<string, any>;
    method: "browser.getUserContexts";
}, {
    params: Record<string, any>;
    method: "browser.getUserContexts";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browser.removeUserContext">;
    params: z.ZodObject<{
        userContext: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        userContext: string;
    }, {
        userContext: string;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        userContext: string;
    };
    method: "browser.removeUserContext";
}, {
    params: {
        userContext: string;
    };
    method: "browser.removeUserContext";
}>>]>>;
export declare const BrowserResultSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodLazy<z.ZodObject<{
    userContext: z.ZodLazy<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    userContext: string;
}, {
    userContext: string;
}>>>, z.ZodLazy<z.ZodObject<{
    userContexts: z.ZodArray<z.ZodLazy<z.ZodObject<{
        userContext: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        userContext: string;
    }, {
        userContext: string;
    }>>, "many">;
}, "strip", z.ZodTypeAny, {
    userContexts: {
        userContext: string;
    }[];
}, {
    userContexts: {
        userContext: string;
    }[];
}>>]>>;
export declare namespace Browser {
    const UserContextSchema: z.ZodLazy<z.ZodString>;
}
export declare namespace Browser {
    const UserContextInfoSchema: z.ZodLazy<z.ZodObject<{
        userContext: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        userContext: string;
    }, {
        userContext: string;
    }>>;
}
export declare namespace Browser {
    const CloseSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browser.close">;
        params: z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    }, "strip", z.ZodTypeAny, {
        params: Record<string, any>;
        method: "browser.close";
    }, {
        params: Record<string, any>;
        method: "browser.close";
    }>>;
}
export declare namespace Browser {
    const CreateUserContextSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browser.createUserContext">;
        params: z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    }, "strip", z.ZodTypeAny, {
        params: Record<string, any>;
        method: "browser.createUserContext";
    }, {
        params: Record<string, any>;
        method: "browser.createUserContext";
    }>>;
}
export declare namespace Browser {
    const CreateUserContextResultSchema: z.ZodLazy<z.ZodLazy<z.ZodObject<{
        userContext: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        userContext: string;
    }, {
        userContext: string;
    }>>>;
}
export declare namespace Browser {
    const GetUserContextsSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browser.getUserContexts">;
        params: z.ZodLazy<z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    }, "strip", z.ZodTypeAny, {
        params: Record<string, any>;
        method: "browser.getUserContexts";
    }, {
        params: Record<string, any>;
        method: "browser.getUserContexts";
    }>>;
}
export declare namespace Browser {
    const GetUserContextsResultSchema: z.ZodLazy<z.ZodObject<{
        userContexts: z.ZodArray<z.ZodLazy<z.ZodObject<{
            userContext: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            userContext: string;
        }, {
            userContext: string;
        }>>, "many">;
    }, "strip", z.ZodTypeAny, {
        userContexts: {
            userContext: string;
        }[];
    }, {
        userContexts: {
            userContext: string;
        }[];
    }>>;
}
export declare namespace Browser {
    const RemoveUserContextSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browser.removeUserContext">;
        params: z.ZodObject<{
            userContext: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            userContext: string;
        }, {
            userContext: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        params: {
            userContext: string;
        };
        method: "browser.removeUserContext";
    }, {
        params: {
            userContext: string;
        };
        method: "browser.removeUserContext";
    }>>;
}
export declare const BrowsingContextCommandSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.activate">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        context: string;
    }, {
        context: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
    };
    method: "browsingContext.activate";
}, {
    params: {
        context: string;
    };
    method: "browsingContext.activate";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.captureScreenshot">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        origin: z.ZodOptional<z.ZodDefault<z.ZodEnum<["viewport", "document"]>>>;
        format: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            type: z.ZodString;
            quality: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: string;
            quality?: number | undefined;
        }, {
            type: string;
            quality?: number | undefined;
        }>>>;
        clip: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"box">;
            x: z.ZodNumber;
            y: z.ZodNumber;
            width: z.ZodNumber;
            height: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "box";
            x: number;
            y: number;
            width: number;
            height: number;
        }, {
            type: "box";
            x: number;
            y: number;
            width: number;
            height: number;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"element">;
            element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                sharedId: z.ZodLazy<z.ZodString>;
                handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                sharedId: string;
                handle?: string | undefined;
            }, {
                sharedId: string;
                handle?: string | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
        }, "strip", z.ZodTypeAny, {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        }, {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        }>>]>>>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        origin?: "viewport" | "document" | undefined;
        format?: {
            type: string;
            quality?: number | undefined;
        } | undefined;
        clip?: {
            type: "box";
            x: number;
            y: number;
            width: number;
            height: number;
        } | {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        } | undefined;
    }, {
        context: string;
        origin?: "viewport" | "document" | undefined;
        format?: {
            type: string;
            quality?: number | undefined;
        } | undefined;
        clip?: {
            type: "box";
            x: number;
            y: number;
            width: number;
            height: number;
        } | {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        origin?: "viewport" | "document" | undefined;
        format?: {
            type: string;
            quality?: number | undefined;
        } | undefined;
        clip?: {
            type: "box";
            x: number;
            y: number;
            width: number;
            height: number;
        } | {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        } | undefined;
    };
    method: "browsingContext.captureScreenshot";
}, {
    params: {
        context: string;
        origin?: "viewport" | "document" | undefined;
        format?: {
            type: string;
            quality?: number | undefined;
        } | undefined;
        clip?: {
            type: "box";
            x: number;
            y: number;
            width: number;
            height: number;
        } | {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        } | undefined;
    };
    method: "browsingContext.captureScreenshot";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.close">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        promptUnload: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        promptUnload?: boolean | undefined;
    }, {
        context: string;
        promptUnload?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        promptUnload?: boolean | undefined;
    };
    method: "browsingContext.close";
}, {
    params: {
        context: string;
        promptUnload?: boolean | undefined;
    };
    method: "browsingContext.close";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.create">;
    params: z.ZodLazy<z.ZodObject<{
        type: z.ZodLazy<z.ZodEnum<["tab", "window"]>>;
        referenceContext: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        background: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        userContext: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        type: "window" | "tab";
        referenceContext?: string | undefined;
        background?: boolean | undefined;
        userContext?: string | undefined;
    }, {
        type: "window" | "tab";
        referenceContext?: string | undefined;
        background?: boolean | undefined;
        userContext?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        type: "window" | "tab";
        referenceContext?: string | undefined;
        background?: boolean | undefined;
        userContext?: string | undefined;
    };
    method: "browsingContext.create";
}, {
    params: {
        type: "window" | "tab";
        referenceContext?: string | undefined;
        background?: boolean | undefined;
        userContext?: string | undefined;
    };
    method: "browsingContext.create";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.getTree">;
    params: z.ZodLazy<z.ZodObject<{
        maxDepth: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        root: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        maxDepth?: number | undefined;
        root?: string | undefined;
    }, {
        maxDepth?: number | undefined;
        root?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        maxDepth?: number | undefined;
        root?: string | undefined;
    };
    method: "browsingContext.getTree";
}, {
    params: {
        maxDepth?: number | undefined;
        root?: string | undefined;
    };
    method: "browsingContext.getTree";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.handleUserPrompt">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        accept: z.ZodOptional<z.ZodBoolean>;
        userText: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        accept?: boolean | undefined;
        userText?: string | undefined;
    }, {
        context: string;
        accept?: boolean | undefined;
        userText?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        accept?: boolean | undefined;
        userText?: string | undefined;
    };
    method: "browsingContext.handleUserPrompt";
}, {
    params: {
        context: string;
        accept?: boolean | undefined;
        userText?: string | undefined;
    };
    method: "browsingContext.handleUserPrompt";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.locateNodes">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        locator: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"css">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "css";
            value: string;
        }, {
            type: "css";
            value: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"innerText">;
            value: z.ZodString;
            ignoreCase: z.ZodOptional<z.ZodBoolean>;
            matchType: z.ZodOptional<z.ZodEnum<["full", "partial"]>>;
            maxDepth: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            type: "innerText";
            value: string;
            ignoreCase?: boolean | undefined;
            matchType?: "partial" | "full" | undefined;
            maxDepth?: number | undefined;
        }, {
            type: "innerText";
            value: string;
            ignoreCase?: boolean | undefined;
            matchType?: "partial" | "full" | undefined;
            maxDepth?: number | undefined;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"xpath">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "xpath";
            value: string;
        }, {
            type: "xpath";
            value: string;
        }>>]>>;
        maxNodeCount: any;
        ownership: z.ZodOptional<z.ZodLazy<z.ZodEnum<["root", "none"]>>>;
        sandbox: z.ZodOptional<z.ZodString>;
        serializationOptions: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            maxDomDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            maxObjectDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            includeShadowTree: z.ZodOptional<z.ZodDefault<z.ZodEnum<["none", "open", "all"]>>>;
        }, "strip", z.ZodTypeAny, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }>>>;
        startNodes: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            sharedId: z.ZodLazy<z.ZodString>;
            handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            sharedId: string;
            handle?: string | undefined;
        }, {
            sharedId: string;
            handle?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">>;
    }, "strip", z.ZodTypeAny, {
        [x: string]: any;
        context?: string | undefined;
        locator?: {
            type: "css";
            value: string;
        } | {
            type: "innerText";
            value: string;
            ignoreCase?: boolean | undefined;
            matchType?: "partial" | "full" | undefined;
            maxDepth?: number | undefined;
        } | {
            type: "xpath";
            value: string;
        } | undefined;
        maxNodeCount?: any;
        ownership?: "none" | "root" | undefined;
        sandbox?: string | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        startNodes?: ({
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>)[] | undefined;
    }, {
        [x: string]: any;
        context?: string | undefined;
        locator?: {
            type: "css";
            value: string;
        } | {
            type: "innerText";
            value: string;
            ignoreCase?: boolean | undefined;
            matchType?: "partial" | "full" | undefined;
            maxDepth?: number | undefined;
        } | {
            type: "xpath";
            value: string;
        } | undefined;
        maxNodeCount?: any;
        ownership?: "none" | "root" | undefined;
        sandbox?: string | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        startNodes?: ({
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>)[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        [x: string]: any;
        context?: string | undefined;
        locator?: {
            type: "css";
            value: string;
        } | {
            type: "innerText";
            value: string;
            ignoreCase?: boolean | undefined;
            matchType?: "partial" | "full" | undefined;
            maxDepth?: number | undefined;
        } | {
            type: "xpath";
            value: string;
        } | undefined;
        maxNodeCount?: any;
        ownership?: "none" | "root" | undefined;
        sandbox?: string | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        startNodes?: ({
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>)[] | undefined;
    };
    method: "browsingContext.locateNodes";
}, {
    params: {
        [x: string]: any;
        context?: string | undefined;
        locator?: {
            type: "css";
            value: string;
        } | {
            type: "innerText";
            value: string;
            ignoreCase?: boolean | undefined;
            matchType?: "partial" | "full" | undefined;
            maxDepth?: number | undefined;
        } | {
            type: "xpath";
            value: string;
        } | undefined;
        maxNodeCount?: any;
        ownership?: "none" | "root" | undefined;
        sandbox?: string | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        startNodes?: ({
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>)[] | undefined;
    };
    method: "browsingContext.locateNodes";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.navigate">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        url: z.ZodString;
        wait: z.ZodOptional<z.ZodLazy<z.ZodEnum<["none", "interactive", "complete"]>>>;
    }, "strip", z.ZodTypeAny, {
        url: string;
        context: string;
        wait?: "none" | "interactive" | "complete" | undefined;
    }, {
        url: string;
        context: string;
        wait?: "none" | "interactive" | "complete" | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        context: string;
        wait?: "none" | "interactive" | "complete" | undefined;
    };
    method: "browsingContext.navigate";
}, {
    params: {
        url: string;
        context: string;
        wait?: "none" | "interactive" | "complete" | undefined;
    };
    method: "browsingContext.navigate";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.print">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        background: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        margin: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            bottom: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            left: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            right: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            top: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            bottom?: number | undefined;
            left?: number | undefined;
            right?: number | undefined;
            top?: number | undefined;
        }, {
            bottom?: number | undefined;
            left?: number | undefined;
            right?: number | undefined;
            top?: number | undefined;
        }>>>;
        orientation: z.ZodOptional<z.ZodDefault<z.ZodEnum<["portrait", "landscape"]>>>;
        page: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            height: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            width: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            height?: number | undefined;
            width?: number | undefined;
        }, {
            height?: number | undefined;
            width?: number | undefined;
        }>>>;
        pageRanges: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodString]>, "many">>;
        scale: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        shrinkToFit: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        background?: boolean | undefined;
        margin?: {
            bottom?: number | undefined;
            left?: number | undefined;
            right?: number | undefined;
            top?: number | undefined;
        } | undefined;
        orientation?: "portrait" | "landscape" | undefined;
        page?: {
            height?: number | undefined;
            width?: number | undefined;
        } | undefined;
        pageRanges?: (string | number)[] | undefined;
        scale?: number | undefined;
        shrinkToFit?: boolean | undefined;
    }, {
        context: string;
        background?: boolean | undefined;
        margin?: {
            bottom?: number | undefined;
            left?: number | undefined;
            right?: number | undefined;
            top?: number | undefined;
        } | undefined;
        orientation?: "portrait" | "landscape" | undefined;
        page?: {
            height?: number | undefined;
            width?: number | undefined;
        } | undefined;
        pageRanges?: (string | number)[] | undefined;
        scale?: number | undefined;
        shrinkToFit?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        background?: boolean | undefined;
        margin?: {
            bottom?: number | undefined;
            left?: number | undefined;
            right?: number | undefined;
            top?: number | undefined;
        } | undefined;
        orientation?: "portrait" | "landscape" | undefined;
        page?: {
            height?: number | undefined;
            width?: number | undefined;
        } | undefined;
        pageRanges?: (string | number)[] | undefined;
        scale?: number | undefined;
        shrinkToFit?: boolean | undefined;
    };
    method: "browsingContext.print";
}, {
    params: {
        context: string;
        background?: boolean | undefined;
        margin?: {
            bottom?: number | undefined;
            left?: number | undefined;
            right?: number | undefined;
            top?: number | undefined;
        } | undefined;
        orientation?: "portrait" | "landscape" | undefined;
        page?: {
            height?: number | undefined;
            width?: number | undefined;
        } | undefined;
        pageRanges?: (string | number)[] | undefined;
        scale?: number | undefined;
        shrinkToFit?: boolean | undefined;
    };
    method: "browsingContext.print";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.reload">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        ignoreCache: z.ZodOptional<z.ZodBoolean>;
        wait: z.ZodOptional<z.ZodLazy<z.ZodEnum<["none", "interactive", "complete"]>>>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        ignoreCache?: boolean | undefined;
        wait?: "none" | "interactive" | "complete" | undefined;
    }, {
        context: string;
        ignoreCache?: boolean | undefined;
        wait?: "none" | "interactive" | "complete" | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        ignoreCache?: boolean | undefined;
        wait?: "none" | "interactive" | "complete" | undefined;
    };
    method: "browsingContext.reload";
}, {
    params: {
        context: string;
        ignoreCache?: boolean | undefined;
        wait?: "none" | "interactive" | "complete" | undefined;
    };
    method: "browsingContext.reload";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.setViewport">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        viewport: z.ZodOptional<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            width: z.ZodLazy<z.ZodNumber>;
            height: z.ZodLazy<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
        }, {
            width: number;
            height: number;
        }>>, z.ZodNull]>>;
        devicePixelRatio: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        viewport?: {
            width: number;
            height: number;
        } | null | undefined;
        devicePixelRatio?: number | null | undefined;
    }, {
        context: string;
        viewport?: {
            width: number;
            height: number;
        } | null | undefined;
        devicePixelRatio?: number | null | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        viewport?: {
            width: number;
            height: number;
        } | null | undefined;
        devicePixelRatio?: number | null | undefined;
    };
    method: "browsingContext.setViewport";
}, {
    params: {
        context: string;
        viewport?: {
            width: number;
            height: number;
        } | null | undefined;
        devicePixelRatio?: number | null | undefined;
    };
    method: "browsingContext.setViewport";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.traverseHistory">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        delta: z.ZodLazy<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        delta: number;
    }, {
        context: string;
        delta: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        delta: number;
    };
    method: "browsingContext.traverseHistory";
}, {
    params: {
        context: string;
        delta: number;
    };
    method: "browsingContext.traverseHistory";
}>>]>>;
export declare const BrowsingContextEventSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.contextCreated">;
    params: any;
}, "strip", z.ZodTypeAny, {
    method: "browsingContext.contextCreated";
    params?: any;
}, {
    method: "browsingContext.contextCreated";
    params?: any;
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.contextDestroyed">;
    params: any;
}, "strip", z.ZodTypeAny, {
    method: "browsingContext.contextDestroyed";
    params?: any;
}, {
    method: "browsingContext.contextDestroyed";
    params?: any;
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.domContentLoaded">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.domContentLoaded";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.domContentLoaded";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.downloadWillBegin">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.downloadWillBegin";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.downloadWillBegin";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.fragmentNavigated">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.fragmentNavigated";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.fragmentNavigated";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.load">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.load";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.load";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.navigationAborted">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.navigationAborted";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.navigationAborted";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.navigationFailed">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.navigationFailed";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.navigationFailed";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.navigationStarted">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.navigationStarted";
}, {
    params: {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    };
    method: "browsingContext.navigationStarted";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.userPromptClosed">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        accepted: z.ZodBoolean;
        userText: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        accepted: boolean;
        userText?: string | undefined;
    }, {
        context: string;
        accepted: boolean;
        userText?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        accepted: boolean;
        userText?: string | undefined;
    };
    method: "browsingContext.userPromptClosed";
}, {
    params: {
        context: string;
        accepted: boolean;
        userText?: string | undefined;
    };
    method: "browsingContext.userPromptClosed";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"browsingContext.userPromptOpened">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        type: z.ZodEnum<["alert", "confirm", "prompt", "beforeunload"]>;
        message: z.ZodString;
        defaultValue: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: "prompt" | "alert" | "confirm" | "beforeunload";
        context: string;
        defaultValue?: string | undefined;
    }, {
        message: string;
        type: "prompt" | "alert" | "confirm" | "beforeunload";
        context: string;
        defaultValue?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        message: string;
        type: "prompt" | "alert" | "confirm" | "beforeunload";
        context: string;
        defaultValue?: string | undefined;
    };
    method: "browsingContext.userPromptOpened";
}, {
    params: {
        message: string;
        type: "prompt" | "alert" | "confirm" | "beforeunload";
        context: string;
        defaultValue?: string | undefined;
    };
    method: "browsingContext.userPromptOpened";
}>>]>>;
export declare const BrowsingContextResultSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    data: z.ZodString;
}, "strip", z.ZodTypeAny, {
    data: string;
}, {
    data: string;
}>>, z.ZodLazy<z.ZodObject<{
    context: z.ZodLazy<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    context: string;
}, {
    context: string;
}>>, z.ZodLazy<z.ZodObject<{
    contexts: any;
}, "strip", z.ZodTypeAny, {
    contexts?: any;
}, {
    contexts?: any;
}>>, z.ZodLazy<z.ZodObject<{
    nodes: z.ZodArray<any, "many">;
}, "strip", z.ZodTypeAny, {
    nodes: any[];
}, {
    nodes: any[];
}>>, z.ZodLazy<z.ZodObject<{
    navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    url: string;
    navigation: string | null;
}, {
    url: string;
    navigation: string | null;
}>>, z.ZodLazy<z.ZodObject<{
    data: z.ZodString;
}, "strip", z.ZodTypeAny, {
    data: string;
}, {
    data: string;
}>>, z.ZodLazy<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>]>>;
export declare namespace BrowsingContext {
    const BrowsingContextSchema: z.ZodLazy<z.ZodString>;
}
export declare namespace BrowsingContext {
    const InfoListSchema: any;
}
export declare namespace BrowsingContext {
    const InfoSchema: any;
}
export declare namespace BrowsingContext {
    const LocatorSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"css">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "css";
        value: string;
    }, {
        type: "css";
        value: string;
    }>>, z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"innerText">;
        value: z.ZodString;
        ignoreCase: z.ZodOptional<z.ZodBoolean>;
        matchType: z.ZodOptional<z.ZodEnum<["full", "partial"]>>;
        maxDepth: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        type: "innerText";
        value: string;
        ignoreCase?: boolean | undefined;
        matchType?: "partial" | "full" | undefined;
        maxDepth?: number | undefined;
    }, {
        type: "innerText";
        value: string;
        ignoreCase?: boolean | undefined;
        matchType?: "partial" | "full" | undefined;
        maxDepth?: number | undefined;
    }>>, z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"xpath">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "xpath";
        value: string;
    }, {
        type: "xpath";
        value: string;
    }>>]>>;
}
export declare namespace BrowsingContext {
    const CssLocatorSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"css">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "css";
        value: string;
    }, {
        type: "css";
        value: string;
    }>>;
}
export declare namespace BrowsingContext {
    const InnerTextLocatorSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"innerText">;
        value: z.ZodString;
        ignoreCase: z.ZodOptional<z.ZodBoolean>;
        matchType: z.ZodOptional<z.ZodEnum<["full", "partial"]>>;
        maxDepth: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        type: "innerText";
        value: string;
        ignoreCase?: boolean | undefined;
        matchType?: "partial" | "full" | undefined;
        maxDepth?: number | undefined;
    }, {
        type: "innerText";
        value: string;
        ignoreCase?: boolean | undefined;
        matchType?: "partial" | "full" | undefined;
        maxDepth?: number | undefined;
    }>>;
}
export declare namespace BrowsingContext {
    const XPathLocatorSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"xpath">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "xpath";
        value: string;
    }, {
        type: "xpath";
        value: string;
    }>>;
}
export declare namespace BrowsingContext {
    const NavigationSchema: z.ZodLazy<z.ZodString>;
}
export declare namespace BrowsingContext {
    const NavigationInfoSchema: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }, {
        url: string;
        navigation: string | null;
        context: string;
        timestamp: number;
    }>>;
}
export declare namespace BrowsingContext {
    const ReadinessStateSchema: z.ZodLazy<z.ZodEnum<["none", "interactive", "complete"]>>;
}
export declare namespace BrowsingContext {
    const ActivateSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browsingContext.activate">;
        params: z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            context: string;
        }, {
            context: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            context: string;
        };
        method: "browsingContext.activate";
    }, {
        params: {
            context: string;
        };
        method: "browsingContext.activate";
    }>>;
}
export declare namespace BrowsingContext {
    const ActivateParametersSchema: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        context: string;
    }, {
        context: string;
    }>>;
}
export declare namespace BrowsingContext {
    const CaptureScreenshotParametersSchema: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        origin: z.ZodOptional<z.ZodDefault<z.ZodEnum<["viewport", "document"]>>>;
        format: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            type: z.ZodString;
            quality: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: string;
            quality?: number | undefined;
        }, {
            type: string;
            quality?: number | undefined;
        }>>>;
        clip: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"box">;
            x: z.ZodNumber;
            y: z.ZodNumber;
            width: z.ZodNumber;
            height: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "box";
            x: number;
            y: number;
            width: number;
            height: number;
        }, {
            type: "box";
            x: number;
            y: number;
            width: number;
            height: number;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"element">;
            element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                sharedId: z.ZodLazy<z.ZodString>;
                handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                sharedId: string;
                handle?: string | undefined;
            }, {
                sharedId: string;
                handle?: string | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
        }, "strip", z.ZodTypeAny, {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        }, {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        }>>]>>>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        origin?: "viewport" | "document" | undefined;
        format?: {
            type: string;
            quality?: number | undefined;
        } | undefined;
        clip?: {
            type: "box";
            x: number;
            y: number;
            width: number;
            height: number;
        } | {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        } | undefined;
    }, {
        context: string;
        origin?: "viewport" | "document" | undefined;
        format?: {
            type: string;
            quality?: number | undefined;
        } | undefined;
        clip?: {
            type: "box";
            x: number;
            y: number;
            width: number;
            height: number;
        } | {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        } | undefined;
    }>>;
}
export declare namespace BrowsingContext {
    const CaptureScreenshotSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browsingContext.captureScreenshot">;
        params: z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            origin: z.ZodOptional<z.ZodDefault<z.ZodEnum<["viewport", "document"]>>>;
            format: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                type: z.ZodString;
                quality: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: string;
                quality?: number | undefined;
            }, {
                type: string;
                quality?: number | undefined;
            }>>>;
            clip: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"box">;
                x: z.ZodNumber;
                y: z.ZodNumber;
                width: z.ZodNumber;
                height: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "box";
                x: number;
                y: number;
                width: number;
                height: number;
            }, {
                type: "box";
                x: number;
                y: number;
                width: number;
                height: number;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"element">;
                element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    sharedId: z.ZodLazy<z.ZodString>;
                    handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
                }, "strip", z.ZodTypeAny, {
                    sharedId: string;
                    handle?: string | undefined;
                }, {
                    sharedId: string;
                    handle?: string | undefined;
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
            }, "strip", z.ZodTypeAny, {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            }, {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            }>>]>>>;
        }, "strip", z.ZodTypeAny, {
            context: string;
            origin?: "viewport" | "document" | undefined;
            format?: {
                type: string;
                quality?: number | undefined;
            } | undefined;
            clip?: {
                type: "box";
                x: number;
                y: number;
                width: number;
                height: number;
            } | {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            } | undefined;
        }, {
            context: string;
            origin?: "viewport" | "document" | undefined;
            format?: {
                type: string;
                quality?: number | undefined;
            } | undefined;
            clip?: {
                type: "box";
                x: number;
                y: number;
                width: number;
                height: number;
            } | {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            context: string;
            origin?: "viewport" | "document" | undefined;
            format?: {
                type: string;
                quality?: number | undefined;
            } | undefined;
            clip?: {
                type: "box";
                x: number;
                y: number;
                width: number;
                height: number;
            } | {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            } | undefined;
        };
        method: "browsingContext.captureScreenshot";
    }, {
        params: {
            context: string;
            origin?: "viewport" | "document" | undefined;
            format?: {
                type: string;
                quality?: number | undefined;
            } | undefined;
            clip?: {
                type: "box";
                x: number;
                y: number;
                width: number;
                height: number;
            } | {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            } | undefined;
        };
        method: "browsingContext.captureScreenshot";
    }>>;
}
export declare namespace BrowsingContext {
    const ImageFormatSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodString;
        quality: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        quality?: number | undefined;
    }, {
        type: string;
        quality?: number | undefined;
    }>>;
}
export declare namespace BrowsingContext {
    const ClipRectangleSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"box">;
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "box";
        x: number;
        y: number;
        width: number;
        height: number;
    }, {
        type: "box";
        x: number;
        y: number;
        width: number;
        height: number;
    }>>, z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"element">;
        element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            sharedId: z.ZodLazy<z.ZodString>;
            handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            sharedId: string;
            handle?: string | undefined;
        }, {
            sharedId: string;
            handle?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
    }, "strip", z.ZodTypeAny, {
        type: "element";
        element: {
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>;
    }, {
        type: "element";
        element: {
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>;
    }>>]>>;
}
export declare namespace BrowsingContext {
    const ElementClipRectangleSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"element">;
        element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            sharedId: z.ZodLazy<z.ZodString>;
            handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            sharedId: string;
            handle?: string | undefined;
        }, {
            sharedId: string;
            handle?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
    }, "strip", z.ZodTypeAny, {
        type: "element";
        element: {
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>;
    }, {
        type: "element";
        element: {
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>;
    }>>;
}
export declare namespace BrowsingContext {
    const BoxClipRectangleSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"box">;
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "box";
        x: number;
        y: number;
        width: number;
        height: number;
    }, {
        type: "box";
        x: number;
        y: number;
        width: number;
        height: number;
    }>>;
}
export declare namespace BrowsingContext {
    const CaptureScreenshotResultSchema: z.ZodLazy<z.ZodObject<{
        data: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        data: string;
    }, {
        data: string;
    }>>;
}
export declare namespace BrowsingContext {
    const CloseSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browsingContext.close">;
        params: z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            promptUnload: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            context: string;
            promptUnload?: boolean | undefined;
        }, {
            context: string;
            promptUnload?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            context: string;
            promptUnload?: boolean | undefined;
        };
        method: "browsingContext.close";
    }, {
        params: {
            context: string;
            promptUnload?: boolean | undefined;
        };
        method: "browsingContext.close";
    }>>;
}
export declare namespace BrowsingContext {
    const CloseParametersSchema: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        promptUnload: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        promptUnload?: boolean | undefined;
    }, {
        context: string;
        promptUnload?: boolean | undefined;
    }>>;
}
export declare namespace BrowsingContext {
    const CreateSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browsingContext.create">;
        params: z.ZodLazy<z.ZodObject<{
            type: z.ZodLazy<z.ZodEnum<["tab", "window"]>>;
            referenceContext: z.ZodOptional<z.ZodLazy<z.ZodString>>;
            background: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
            userContext: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            type: "window" | "tab";
            referenceContext?: string | undefined;
            background?: boolean | undefined;
            userContext?: string | undefined;
        }, {
            type: "window" | "tab";
            referenceContext?: string | undefined;
            background?: boolean | undefined;
            userContext?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            type: "window" | "tab";
            referenceContext?: string | undefined;
            background?: boolean | undefined;
            userContext?: string | undefined;
        };
        method: "browsingContext.create";
    }, {
        params: {
            type: "window" | "tab";
            referenceContext?: string | undefined;
            background?: boolean | undefined;
            userContext?: string | undefined;
        };
        method: "browsingContext.create";
    }>>;
}
export declare namespace BrowsingContext {
    const CreateTypeSchema: z.ZodLazy<z.ZodEnum<["tab", "window"]>>;
}
export declare namespace BrowsingContext {
    const CreateParametersSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLazy<z.ZodEnum<["tab", "window"]>>;
        referenceContext: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        background: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        userContext: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        type: "window" | "tab";
        referenceContext?: string | undefined;
        background?: boolean | undefined;
        userContext?: string | undefined;
    }, {
        type: "window" | "tab";
        referenceContext?: string | undefined;
        background?: boolean | undefined;
        userContext?: string | undefined;
    }>>;
}
export declare namespace BrowsingContext {
    const CreateResultSchema: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        context: string;
    }, {
        context: string;
    }>>;
}
export declare namespace BrowsingContext {
    const GetTreeSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browsingContext.getTree">;
        params: z.ZodLazy<z.ZodObject<{
            maxDepth: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            root: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            maxDepth?: number | undefined;
            root?: string | undefined;
        }, {
            maxDepth?: number | undefined;
            root?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            maxDepth?: number | undefined;
            root?: string | undefined;
        };
        method: "browsingContext.getTree";
    }, {
        params: {
            maxDepth?: number | undefined;
            root?: string | undefined;
        };
        method: "browsingContext.getTree";
    }>>;
}
export declare namespace BrowsingContext {
    const GetTreeParametersSchema: z.ZodLazy<z.ZodObject<{
        maxDepth: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        root: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        maxDepth?: number | undefined;
        root?: string | undefined;
    }, {
        maxDepth?: number | undefined;
        root?: string | undefined;
    }>>;
}
export declare namespace BrowsingContext {
    const GetTreeResultSchema: z.ZodLazy<z.ZodObject<{
        contexts: any;
    }, "strip", z.ZodTypeAny, {
        contexts?: any;
    }, {
        contexts?: any;
    }>>;
}
export declare namespace BrowsingContext {
    const HandleUserPromptSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browsingContext.handleUserPrompt">;
        params: z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            accept: z.ZodOptional<z.ZodBoolean>;
            userText: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            context: string;
            accept?: boolean | undefined;
            userText?: string | undefined;
        }, {
            context: string;
            accept?: boolean | undefined;
            userText?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            context: string;
            accept?: boolean | undefined;
            userText?: string | undefined;
        };
        method: "browsingContext.handleUserPrompt";
    }, {
        params: {
            context: string;
            accept?: boolean | undefined;
            userText?: string | undefined;
        };
        method: "browsingContext.handleUserPrompt";
    }>>;
}
export declare namespace BrowsingContext {
    const HandleUserPromptParametersSchema: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        accept: z.ZodOptional<z.ZodBoolean>;
        userText: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        accept?: boolean | undefined;
        userText?: string | undefined;
    }, {
        context: string;
        accept?: boolean | undefined;
        userText?: string | undefined;
    }>>;
}
export declare namespace BrowsingContext {
    const LocateNodesParametersSchema: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        locator: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"css">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "css";
            value: string;
        }, {
            type: "css";
            value: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"innerText">;
            value: z.ZodString;
            ignoreCase: z.ZodOptional<z.ZodBoolean>;
            matchType: z.ZodOptional<z.ZodEnum<["full", "partial"]>>;
            maxDepth: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            type: "innerText";
            value: string;
            ignoreCase?: boolean | undefined;
            matchType?: "partial" | "full" | undefined;
            maxDepth?: number | undefined;
        }, {
            type: "innerText";
            value: string;
            ignoreCase?: boolean | undefined;
            matchType?: "partial" | "full" | undefined;
            maxDepth?: number | undefined;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"xpath">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "xpath";
            value: string;
        }, {
            type: "xpath";
            value: string;
        }>>]>>;
        maxNodeCount: any;
        ownership: z.ZodOptional<z.ZodLazy<z.ZodEnum<["root", "none"]>>>;
        sandbox: z.ZodOptional<z.ZodString>;
        serializationOptions: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            maxDomDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            maxObjectDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            includeShadowTree: z.ZodOptional<z.ZodDefault<z.ZodEnum<["none", "open", "all"]>>>;
        }, "strip", z.ZodTypeAny, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }>>>;
        startNodes: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            sharedId: z.ZodLazy<z.ZodString>;
            handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            sharedId: string;
            handle?: string | undefined;
        }, {
            sharedId: string;
            handle?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">>;
    }, "strip", z.ZodTypeAny, {
        [x: string]: any;
        context?: string | undefined;
        locator?: {
            type: "css";
            value: string;
        } | {
            type: "innerText";
            value: string;
            ignoreCase?: boolean | undefined;
            matchType?: "partial" | "full" | undefined;
            maxDepth?: number | undefined;
        } | {
            type: "xpath";
            value: string;
        } | undefined;
        maxNodeCount?: any;
        ownership?: "none" | "root" | undefined;
        sandbox?: string | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        startNodes?: ({
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>)[] | undefined;
    }, {
        [x: string]: any;
        context?: string | undefined;
        locator?: {
            type: "css";
            value: string;
        } | {
            type: "innerText";
            value: string;
            ignoreCase?: boolean | undefined;
            matchType?: "partial" | "full" | undefined;
            maxDepth?: number | undefined;
        } | {
            type: "xpath";
            value: string;
        } | undefined;
        maxNodeCount?: any;
        ownership?: "none" | "root" | undefined;
        sandbox?: string | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        startNodes?: ({
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>)[] | undefined;
    }>>;
}
export declare namespace BrowsingContext {
    const LocateNodesSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browsingContext.locateNodes">;
        params: z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            locator: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"css">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "css";
                value: string;
            }, {
                type: "css";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"innerText">;
                value: z.ZodString;
                ignoreCase: z.ZodOptional<z.ZodBoolean>;
                matchType: z.ZodOptional<z.ZodEnum<["full", "partial"]>>;
                maxDepth: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                type: "innerText";
                value: string;
                ignoreCase?: boolean | undefined;
                matchType?: "partial" | "full" | undefined;
                maxDepth?: number | undefined;
            }, {
                type: "innerText";
                value: string;
                ignoreCase?: boolean | undefined;
                matchType?: "partial" | "full" | undefined;
                maxDepth?: number | undefined;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"xpath">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "xpath";
                value: string;
            }, {
                type: "xpath";
                value: string;
            }>>]>>;
            maxNodeCount: any;
            ownership: z.ZodOptional<z.ZodLazy<z.ZodEnum<["root", "none"]>>>;
            sandbox: z.ZodOptional<z.ZodString>;
            serializationOptions: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                maxDomDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
                maxObjectDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
                includeShadowTree: z.ZodOptional<z.ZodDefault<z.ZodEnum<["none", "open", "all"]>>>;
            }, "strip", z.ZodTypeAny, {
                maxDomDepth?: number | null | undefined;
                maxObjectDepth?: number | null | undefined;
                includeShadowTree?: "none" | "all" | "open" | undefined;
            }, {
                maxDomDepth?: number | null | undefined;
                maxObjectDepth?: number | null | undefined;
                includeShadowTree?: "none" | "all" | "open" | undefined;
            }>>>;
            startNodes: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                sharedId: z.ZodLazy<z.ZodString>;
                handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                sharedId: string;
                handle?: string | undefined;
            }, {
                sharedId: string;
                handle?: string | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">>;
        }, "strip", z.ZodTypeAny, {
            [x: string]: any;
            context?: string | undefined;
            locator?: {
                type: "css";
                value: string;
            } | {
                type: "innerText";
                value: string;
                ignoreCase?: boolean | undefined;
                matchType?: "partial" | "full" | undefined;
                maxDepth?: number | undefined;
            } | {
                type: "xpath";
                value: string;
            } | undefined;
            maxNodeCount?: any;
            ownership?: "none" | "root" | undefined;
            sandbox?: string | undefined;
            serializationOptions?: {
                maxDomDepth?: number | null | undefined;
                maxObjectDepth?: number | null | undefined;
                includeShadowTree?: "none" | "all" | "open" | undefined;
            } | undefined;
            startNodes?: ({
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>)[] | undefined;
        }, {
            [x: string]: any;
            context?: string | undefined;
            locator?: {
                type: "css";
                value: string;
            } | {
                type: "innerText";
                value: string;
                ignoreCase?: boolean | undefined;
                matchType?: "partial" | "full" | undefined;
                maxDepth?: number | undefined;
            } | {
                type: "xpath";
                value: string;
            } | undefined;
            maxNodeCount?: any;
            ownership?: "none" | "root" | undefined;
            sandbox?: string | undefined;
            serializationOptions?: {
                maxDomDepth?: number | null | undefined;
                maxObjectDepth?: number | null | undefined;
                includeShadowTree?: "none" | "all" | "open" | undefined;
            } | undefined;
            startNodes?: ({
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>)[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            [x: string]: any;
            context?: string | undefined;
            locator?: {
                type: "css";
                value: string;
            } | {
                type: "innerText";
                value: string;
                ignoreCase?: boolean | undefined;
                matchType?: "partial" | "full" | undefined;
                maxDepth?: number | undefined;
            } | {
                type: "xpath";
                value: string;
            } | undefined;
            maxNodeCount?: any;
            ownership?: "none" | "root" | undefined;
            sandbox?: string | undefined;
            serializationOptions?: {
                maxDomDepth?: number | null | undefined;
                maxObjectDepth?: number | null | undefined;
                includeShadowTree?: "none" | "all" | "open" | undefined;
            } | undefined;
            startNodes?: ({
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>)[] | undefined;
        };
        method: "browsingContext.locateNodes";
    }, {
        params: {
            [x: string]: any;
            context?: string | undefined;
            locator?: {
                type: "css";
                value: string;
            } | {
                type: "innerText";
                value: string;
                ignoreCase?: boolean | undefined;
                matchType?: "partial" | "full" | undefined;
                maxDepth?: number | undefined;
            } | {
                type: "xpath";
                value: string;
            } | undefined;
            maxNodeCount?: any;
            ownership?: "none" | "root" | undefined;
            sandbox?: string | undefined;
            serializationOptions?: {
                maxDomDepth?: number | null | undefined;
                maxObjectDepth?: number | null | undefined;
                includeShadowTree?: "none" | "all" | "open" | undefined;
            } | undefined;
            startNodes?: ({
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>)[] | undefined;
        };
        method: "browsingContext.locateNodes";
    }>>;
}
export declare namespace BrowsingContext {
    const LocateNodesResultSchema: z.ZodLazy<z.ZodObject<{
        nodes: z.ZodArray<any, "many">;
    }, "strip", z.ZodTypeAny, {
        nodes: any[];
    }, {
        nodes: any[];
    }>>;
}
export declare namespace BrowsingContext {
    const NavigateSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browsingContext.navigate">;
        params: z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            wait: z.ZodOptional<z.ZodLazy<z.ZodEnum<["none", "interactive", "complete"]>>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            context: string;
            wait?: "none" | "interactive" | "complete" | undefined;
        }, {
            url: string;
            context: string;
            wait?: "none" | "interactive" | "complete" | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            url: string;
            context: string;
            wait?: "none" | "interactive" | "complete" | undefined;
        };
        method: "browsingContext.navigate";
    }, {
        params: {
            url: string;
            context: string;
            wait?: "none" | "interactive" | "complete" | undefined;
        };
        method: "browsingContext.navigate";
    }>>;
}
export declare namespace BrowsingContext {
    const NavigateParametersSchema: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        url: z.ZodString;
        wait: z.ZodOptional<z.ZodLazy<z.ZodEnum<["none", "interactive", "complete"]>>>;
    }, "strip", z.ZodTypeAny, {
        url: string;
        context: string;
        wait?: "none" | "interactive" | "complete" | undefined;
    }, {
        url: string;
        context: string;
        wait?: "none" | "interactive" | "complete" | undefined;
    }>>;
}
export declare namespace BrowsingContext {
    const NavigateResultSchema: z.ZodLazy<z.ZodObject<{
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        navigation: string | null;
    }, {
        url: string;
        navigation: string | null;
    }>>;
}
export declare namespace BrowsingContext {
    const PrintSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browsingContext.print">;
        params: z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            background: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
            margin: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                bottom: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                left: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                right: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                top: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                bottom?: number | undefined;
                left?: number | undefined;
                right?: number | undefined;
                top?: number | undefined;
            }, {
                bottom?: number | undefined;
                left?: number | undefined;
                right?: number | undefined;
                top?: number | undefined;
            }>>>;
            orientation: z.ZodOptional<z.ZodDefault<z.ZodEnum<["portrait", "landscape"]>>>;
            page: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                height: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                width: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                height?: number | undefined;
                width?: number | undefined;
            }, {
                height?: number | undefined;
                width?: number | undefined;
            }>>>;
            pageRanges: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodString]>, "many">>;
            scale: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            shrinkToFit: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            context: string;
            background?: boolean | undefined;
            margin?: {
                bottom?: number | undefined;
                left?: number | undefined;
                right?: number | undefined;
                top?: number | undefined;
            } | undefined;
            orientation?: "portrait" | "landscape" | undefined;
            page?: {
                height?: number | undefined;
                width?: number | undefined;
            } | undefined;
            pageRanges?: (string | number)[] | undefined;
            scale?: number | undefined;
            shrinkToFit?: boolean | undefined;
        }, {
            context: string;
            background?: boolean | undefined;
            margin?: {
                bottom?: number | undefined;
                left?: number | undefined;
                right?: number | undefined;
                top?: number | undefined;
            } | undefined;
            orientation?: "portrait" | "landscape" | undefined;
            page?: {
                height?: number | undefined;
                width?: number | undefined;
            } | undefined;
            pageRanges?: (string | number)[] | undefined;
            scale?: number | undefined;
            shrinkToFit?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            context: string;
            background?: boolean | undefined;
            margin?: {
                bottom?: number | undefined;
                left?: number | undefined;
                right?: number | undefined;
                top?: number | undefined;
            } | undefined;
            orientation?: "portrait" | "landscape" | undefined;
            page?: {
                height?: number | undefined;
                width?: number | undefined;
            } | undefined;
            pageRanges?: (string | number)[] | undefined;
            scale?: number | undefined;
            shrinkToFit?: boolean | undefined;
        };
        method: "browsingContext.print";
    }, {
        params: {
            context: string;
            background?: boolean | undefined;
            margin?: {
                bottom?: number | undefined;
                left?: number | undefined;
                right?: number | undefined;
                top?: number | undefined;
            } | undefined;
            orientation?: "portrait" | "landscape" | undefined;
            page?: {
                height?: number | undefined;
                width?: number | undefined;
            } | undefined;
            pageRanges?: (string | number)[] | undefined;
            scale?: number | undefined;
            shrinkToFit?: boolean | undefined;
        };
        method: "browsingContext.print";
    }>>;
}
export declare namespace BrowsingContext {
    const PrintParametersSchema: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        background: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        margin: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            bottom: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            left: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            right: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            top: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            bottom?: number | undefined;
            left?: number | undefined;
            right?: number | undefined;
            top?: number | undefined;
        }, {
            bottom?: number | undefined;
            left?: number | undefined;
            right?: number | undefined;
            top?: number | undefined;
        }>>>;
        orientation: z.ZodOptional<z.ZodDefault<z.ZodEnum<["portrait", "landscape"]>>>;
        page: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            height: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            width: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            height?: number | undefined;
            width?: number | undefined;
        }, {
            height?: number | undefined;
            width?: number | undefined;
        }>>>;
        pageRanges: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodString]>, "many">>;
        scale: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        shrinkToFit: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        background?: boolean | undefined;
        margin?: {
            bottom?: number | undefined;
            left?: number | undefined;
            right?: number | undefined;
            top?: number | undefined;
        } | undefined;
        orientation?: "portrait" | "landscape" | undefined;
        page?: {
            height?: number | undefined;
            width?: number | undefined;
        } | undefined;
        pageRanges?: (string | number)[] | undefined;
        scale?: number | undefined;
        shrinkToFit?: boolean | undefined;
    }, {
        context: string;
        background?: boolean | undefined;
        margin?: {
            bottom?: number | undefined;
            left?: number | undefined;
            right?: number | undefined;
            top?: number | undefined;
        } | undefined;
        orientation?: "portrait" | "landscape" | undefined;
        page?: {
            height?: number | undefined;
            width?: number | undefined;
        } | undefined;
        pageRanges?: (string | number)[] | undefined;
        scale?: number | undefined;
        shrinkToFit?: boolean | undefined;
    }>>;
}
export declare namespace BrowsingContext {
    const PrintMarginParametersSchema: z.ZodLazy<z.ZodObject<{
        bottom: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        left: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        right: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        top: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        bottom?: number | undefined;
        left?: number | undefined;
        right?: number | undefined;
        top?: number | undefined;
    }, {
        bottom?: number | undefined;
        left?: number | undefined;
        right?: number | undefined;
        top?: number | undefined;
    }>>;
}
export declare namespace BrowsingContext {
    const PrintPageParametersSchema: z.ZodLazy<z.ZodObject<{
        height: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        width: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        height?: number | undefined;
        width?: number | undefined;
    }, {
        height?: number | undefined;
        width?: number | undefined;
    }>>;
}
export declare namespace BrowsingContext {
    const PrintResultSchema: z.ZodLazy<z.ZodObject<{
        data: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        data: string;
    }, {
        data: string;
    }>>;
}
export declare namespace BrowsingContext {
    const ReloadSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browsingContext.reload">;
        params: z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            ignoreCache: z.ZodOptional<z.ZodBoolean>;
            wait: z.ZodOptional<z.ZodLazy<z.ZodEnum<["none", "interactive", "complete"]>>>;
        }, "strip", z.ZodTypeAny, {
            context: string;
            ignoreCache?: boolean | undefined;
            wait?: "none" | "interactive" | "complete" | undefined;
        }, {
            context: string;
            ignoreCache?: boolean | undefined;
            wait?: "none" | "interactive" | "complete" | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            context: string;
            ignoreCache?: boolean | undefined;
            wait?: "none" | "interactive" | "complete" | undefined;
        };
        method: "browsingContext.reload";
    }, {
        params: {
            context: string;
            ignoreCache?: boolean | undefined;
            wait?: "none" | "interactive" | "complete" | undefined;
        };
        method: "browsingContext.reload";
    }>>;
}
export declare namespace BrowsingContext {
    const ReloadParametersSchema: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        ignoreCache: z.ZodOptional<z.ZodBoolean>;
        wait: z.ZodOptional<z.ZodLazy<z.ZodEnum<["none", "interactive", "complete"]>>>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        ignoreCache?: boolean | undefined;
        wait?: "none" | "interactive" | "complete" | undefined;
    }, {
        context: string;
        ignoreCache?: boolean | undefined;
        wait?: "none" | "interactive" | "complete" | undefined;
    }>>;
}
export declare namespace BrowsingContext {
    const SetViewportSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browsingContext.setViewport">;
        params: z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            viewport: z.ZodOptional<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                width: z.ZodLazy<z.ZodNumber>;
                height: z.ZodLazy<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                width: number;
                height: number;
            }, {
                width: number;
                height: number;
            }>>, z.ZodNull]>>;
            devicePixelRatio: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull]>>;
        }, "strip", z.ZodTypeAny, {
            context: string;
            viewport?: {
                width: number;
                height: number;
            } | null | undefined;
            devicePixelRatio?: number | null | undefined;
        }, {
            context: string;
            viewport?: {
                width: number;
                height: number;
            } | null | undefined;
            devicePixelRatio?: number | null | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            context: string;
            viewport?: {
                width: number;
                height: number;
            } | null | undefined;
            devicePixelRatio?: number | null | undefined;
        };
        method: "browsingContext.setViewport";
    }, {
        params: {
            context: string;
            viewport?: {
                width: number;
                height: number;
            } | null | undefined;
            devicePixelRatio?: number | null | undefined;
        };
        method: "browsingContext.setViewport";
    }>>;
}
export declare namespace BrowsingContext {
    const SetViewportParametersSchema: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        viewport: z.ZodOptional<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            width: z.ZodLazy<z.ZodNumber>;
            height: z.ZodLazy<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
        }, {
            width: number;
            height: number;
        }>>, z.ZodNull]>>;
        devicePixelRatio: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        viewport?: {
            width: number;
            height: number;
        } | null | undefined;
        devicePixelRatio?: number | null | undefined;
    }, {
        context: string;
        viewport?: {
            width: number;
            height: number;
        } | null | undefined;
        devicePixelRatio?: number | null | undefined;
    }>>;
}
export declare namespace BrowsingContext {
    const ViewportSchema: z.ZodLazy<z.ZodObject<{
        width: z.ZodLazy<z.ZodNumber>;
        height: z.ZodLazy<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        width: number;
        height: number;
    }, {
        width: number;
        height: number;
    }>>;
}
export declare namespace BrowsingContext {
    const TraverseHistorySchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browsingContext.traverseHistory">;
        params: z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            delta: z.ZodLazy<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            context: string;
            delta: number;
        }, {
            context: string;
            delta: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            context: string;
            delta: number;
        };
        method: "browsingContext.traverseHistory";
    }, {
        params: {
            context: string;
            delta: number;
        };
        method: "browsingContext.traverseHistory";
    }>>;
}
export declare namespace BrowsingContext {
    const TraverseHistoryParametersSchema: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        delta: z.ZodLazy<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        delta: number;
    }, {
        context: string;
        delta: number;
    }>>;
}
export declare namespace BrowsingContext {
    const TraverseHistoryResultSchema: z.ZodLazy<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}
export declare namespace BrowsingContext {
    const ContextCreatedSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browsingContext.contextCreated">;
        params: any;
    }, "strip", z.ZodTypeAny, {
        method: "browsingContext.contextCreated";
        params?: any;
    }, {
        method: "browsingContext.contextCreated";
        params?: any;
    }>>;
}
export declare namespace BrowsingContext {
    const ContextDestroyedSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browsingContext.contextDestroyed">;
        params: any;
    }, "strip", z.ZodTypeAny, {
        method: "browsingContext.contextDestroyed";
        params?: any;
    }, {
        method: "browsingContext.contextDestroyed";
        params?: any;
    }>>;
}
export declare namespace BrowsingContext {
    const NavigationStartedSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browsingContext.navigationStarted">;
        params: z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
            timestamp: z.ZodLazy<z.ZodNumber>;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        }, {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        };
        method: "browsingContext.navigationStarted";
    }, {
        params: {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        };
        method: "browsingContext.navigationStarted";
    }>>;
}
export declare namespace BrowsingContext {
    const FragmentNavigatedSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browsingContext.fragmentNavigated">;
        params: z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
            timestamp: z.ZodLazy<z.ZodNumber>;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        }, {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        };
        method: "browsingContext.fragmentNavigated";
    }, {
        params: {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        };
        method: "browsingContext.fragmentNavigated";
    }>>;
}
export declare namespace BrowsingContext {
    const DomContentLoadedSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browsingContext.domContentLoaded">;
        params: z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
            timestamp: z.ZodLazy<z.ZodNumber>;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        }, {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        };
        method: "browsingContext.domContentLoaded";
    }, {
        params: {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        };
        method: "browsingContext.domContentLoaded";
    }>>;
}
export declare namespace BrowsingContext {
    const LoadSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browsingContext.load">;
        params: z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
            timestamp: z.ZodLazy<z.ZodNumber>;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        }, {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        };
        method: "browsingContext.load";
    }, {
        params: {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        };
        method: "browsingContext.load";
    }>>;
}
export declare namespace BrowsingContext {
    const DownloadWillBeginSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browsingContext.downloadWillBegin">;
        params: z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
            timestamp: z.ZodLazy<z.ZodNumber>;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        }, {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        };
        method: "browsingContext.downloadWillBegin";
    }, {
        params: {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        };
        method: "browsingContext.downloadWillBegin";
    }>>;
}
export declare namespace BrowsingContext {
    const NavigationAbortedSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browsingContext.navigationAborted">;
        params: z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
            timestamp: z.ZodLazy<z.ZodNumber>;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        }, {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        };
        method: "browsingContext.navigationAborted";
    }, {
        params: {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        };
        method: "browsingContext.navigationAborted";
    }>>;
}
export declare namespace BrowsingContext {
    const NavigationFailedSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browsingContext.navigationFailed">;
        params: z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
            timestamp: z.ZodLazy<z.ZodNumber>;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        }, {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        };
        method: "browsingContext.navigationFailed";
    }, {
        params: {
            url: string;
            navigation: string | null;
            context: string;
            timestamp: number;
        };
        method: "browsingContext.navigationFailed";
    }>>;
}
export declare namespace BrowsingContext {
    const UserPromptClosedSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browsingContext.userPromptClosed">;
        params: z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            accepted: z.ZodBoolean;
            userText: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            context: string;
            accepted: boolean;
            userText?: string | undefined;
        }, {
            context: string;
            accepted: boolean;
            userText?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            context: string;
            accepted: boolean;
            userText?: string | undefined;
        };
        method: "browsingContext.userPromptClosed";
    }, {
        params: {
            context: string;
            accepted: boolean;
            userText?: string | undefined;
        };
        method: "browsingContext.userPromptClosed";
    }>>;
}
export declare namespace BrowsingContext {
    const UserPromptClosedParametersSchema: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        accepted: z.ZodBoolean;
        userText: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        accepted: boolean;
        userText?: string | undefined;
    }, {
        context: string;
        accepted: boolean;
        userText?: string | undefined;
    }>>;
}
export declare namespace BrowsingContext {
    const UserPromptOpenedSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"browsingContext.userPromptOpened">;
        params: z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            type: z.ZodEnum<["alert", "confirm", "prompt", "beforeunload"]>;
            message: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            message: string;
            type: "prompt" | "alert" | "confirm" | "beforeunload";
            context: string;
            defaultValue?: string | undefined;
        }, {
            message: string;
            type: "prompt" | "alert" | "confirm" | "beforeunload";
            context: string;
            defaultValue?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            message: string;
            type: "prompt" | "alert" | "confirm" | "beforeunload";
            context: string;
            defaultValue?: string | undefined;
        };
        method: "browsingContext.userPromptOpened";
    }, {
        params: {
            message: string;
            type: "prompt" | "alert" | "confirm" | "beforeunload";
            context: string;
            defaultValue?: string | undefined;
        };
        method: "browsingContext.userPromptOpened";
    }>>;
}
export declare namespace BrowsingContext {
    const UserPromptOpenedParametersSchema: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        type: z.ZodEnum<["alert", "confirm", "prompt", "beforeunload"]>;
        message: z.ZodString;
        defaultValue: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: "prompt" | "alert" | "confirm" | "beforeunload";
        context: string;
        defaultValue?: string | undefined;
    }, {
        message: string;
        type: "prompt" | "alert" | "confirm" | "beforeunload";
        context: string;
        defaultValue?: string | undefined;
    }>>;
}
export declare const NetworkCommandSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.addIntercept">;
    params: z.ZodLazy<z.ZodObject<{
        phases: z.ZodArray<z.ZodLazy<z.ZodEnum<["beforeRequestSent", "responseStarted", "authRequired"]>>, "many">;
        contexts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
        urlPatterns: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"pattern">;
            protocol: z.ZodOptional<z.ZodString>;
            hostname: z.ZodOptional<z.ZodString>;
            port: z.ZodOptional<z.ZodString>;
            pathname: z.ZodOptional<z.ZodString>;
            search: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "pattern";
            protocol?: string | undefined;
            hostname?: string | undefined;
            port?: string | undefined;
            pathname?: string | undefined;
            search?: string | undefined;
        }, {
            type: "pattern";
            protocol?: string | undefined;
            hostname?: string | undefined;
            port?: string | undefined;
            pathname?: string | undefined;
            search?: string | undefined;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"string">;
            pattern: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "string";
            pattern: string;
        }, {
            type: "string";
            pattern: string;
        }>>]>>, "many">>;
    }, "strip", z.ZodTypeAny, {
        phases: ("beforeRequestSent" | "responseStarted" | "authRequired")[];
        contexts?: string[] | undefined;
        urlPatterns?: ({
            type: "pattern";
            protocol?: string | undefined;
            hostname?: string | undefined;
            port?: string | undefined;
            pathname?: string | undefined;
            search?: string | undefined;
        } | {
            type: "string";
            pattern: string;
        })[] | undefined;
    }, {
        phases: ("beforeRequestSent" | "responseStarted" | "authRequired")[];
        contexts?: string[] | undefined;
        urlPatterns?: ({
            type: "pattern";
            protocol?: string | undefined;
            hostname?: string | undefined;
            port?: string | undefined;
            pathname?: string | undefined;
            search?: string | undefined;
        } | {
            type: "string";
            pattern: string;
        })[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        phases: ("beforeRequestSent" | "responseStarted" | "authRequired")[];
        contexts?: string[] | undefined;
        urlPatterns?: ({
            type: "pattern";
            protocol?: string | undefined;
            hostname?: string | undefined;
            port?: string | undefined;
            pathname?: string | undefined;
            search?: string | undefined;
        } | {
            type: "string";
            pattern: string;
        })[] | undefined;
    };
    method: "network.addIntercept";
}, {
    params: {
        phases: ("beforeRequestSent" | "responseStarted" | "authRequired")[];
        contexts?: string[] | undefined;
        urlPatterns?: ({
            type: "pattern";
            protocol?: string | undefined;
            hostname?: string | undefined;
            port?: string | undefined;
            pathname?: string | undefined;
            search?: string | undefined;
        } | {
            type: "string";
            pattern: string;
        })[] | undefined;
    };
    method: "network.addIntercept";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.continueRequest">;
    params: z.ZodLazy<z.ZodObject<{
        request: z.ZodLazy<z.ZodString>;
        body: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"string">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "string";
            value: string;
        }, {
            type: "string";
            value: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            value: string;
        }, {
            type: "base64";
            value: string;
        }>>]>>>;
        cookies: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }>>, "many">>;
        headers: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }>>, "many">>;
        method: z.ZodOptional<z.ZodString>;
        url: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        method?: string | undefined;
        url?: string | undefined;
    }, {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        method?: string | undefined;
        url?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        method?: string | undefined;
        url?: string | undefined;
    };
    method: "network.continueRequest";
}, {
    params: {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        method?: string | undefined;
        url?: string | undefined;
    };
    method: "network.continueRequest";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.continueResponse">;
    params: z.ZodLazy<z.ZodObject<{
        request: z.ZodLazy<z.ZodString>;
        cookies: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
            domain: z.ZodOptional<z.ZodString>;
            httpOnly: z.ZodOptional<z.ZodBoolean>;
            expiry: z.ZodOptional<z.ZodString>;
            maxAge: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            path: z.ZodOptional<z.ZodString>;
            sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
            secure: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }>>, "many">>;
        credentials: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"password">;
            username: z.ZodString;
            password: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "password";
            password: string;
            username: string;
        }, {
            type: "password";
            password: string;
            username: string;
        }>>>;
        headers: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }>>, "many">>;
        reasonPhrase: z.ZodOptional<z.ZodString>;
        statusCode: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        request: string;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        credentials?: {
            type: "password";
            password: string;
            username: string;
        } | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    }, {
        request: string;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        credentials?: {
            type: "password";
            password: string;
            username: string;
        } | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        request: string;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        credentials?: {
            type: "password";
            password: string;
            username: string;
        } | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    };
    method: "network.continueResponse";
}, {
    params: {
        request: string;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        credentials?: {
            type: "password";
            password: string;
            username: string;
        } | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    };
    method: "network.continueResponse";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.continueWithAuth">;
    params: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        request: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        request: string;
    }, {
        request: string;
    }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        action: z.ZodLiteral<"provideCredentials">;
        credentials: z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"password">;
            username: z.ZodString;
            password: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "password";
            password: string;
            username: string;
        }, {
            type: "password";
            password: string;
            username: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        credentials: {
            type: "password";
            password: string;
            username: string;
        };
        action: "provideCredentials";
    }, {
        credentials: {
            type: "password";
            password: string;
            username: string;
        };
        action: "provideCredentials";
    }>>, z.ZodLazy<z.ZodObject<{
        action: z.ZodEnum<["default", "cancel"]>;
    }, "strip", z.ZodTypeAny, {
        action: "default" | "cancel";
    }, {
        action: "default" | "cancel";
    }>>]>>>;
}, "strip", z.ZodTypeAny, {
    params: ({
        request: string;
    } & {
        credentials: {
            type: "password";
            password: string;
            username: string;
        };
        action: "provideCredentials";
    }) | ({
        request: string;
    } & {
        action: "default" | "cancel";
    });
    method: "network.continueWithAuth";
}, {
    params: ({
        request: string;
    } & {
        credentials: {
            type: "password";
            password: string;
            username: string;
        };
        action: "provideCredentials";
    }) | ({
        request: string;
    } & {
        action: "default" | "cancel";
    });
    method: "network.continueWithAuth";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.failRequest">;
    params: z.ZodLazy<z.ZodObject<{
        request: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        request: string;
    }, {
        request: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        request: string;
    };
    method: "network.failRequest";
}, {
    params: {
        request: string;
    };
    method: "network.failRequest";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.provideResponse">;
    params: z.ZodLazy<z.ZodObject<{
        request: z.ZodLazy<z.ZodString>;
        body: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"string">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "string";
            value: string;
        }, {
            type: "string";
            value: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            value: string;
        }, {
            type: "base64";
            value: string;
        }>>]>>>;
        cookies: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
            domain: z.ZodOptional<z.ZodString>;
            httpOnly: z.ZodOptional<z.ZodBoolean>;
            expiry: z.ZodOptional<z.ZodString>;
            maxAge: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            path: z.ZodOptional<z.ZodString>;
            sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
            secure: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }>>, "many">>;
        headers: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }>>, "many">>;
        reasonPhrase: z.ZodOptional<z.ZodString>;
        statusCode: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    }, {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    };
    method: "network.provideResponse";
}, {
    params: {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    };
    method: "network.provideResponse";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.removeIntercept">;
    params: z.ZodLazy<z.ZodObject<{
        intercept: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        intercept: string;
    }, {
        intercept: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        intercept: string;
    };
    method: "network.removeIntercept";
}, {
    params: {
        intercept: string;
    };
    method: "network.removeIntercept";
}>>]>>;
export declare const NetworkEventSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.authRequired">;
    params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        response: z.ZodLazy<z.ZodObject<{
            url: z.ZodString;
            protocol: z.ZodString;
            status: z.ZodLazy<z.ZodNumber>;
            statusText: z.ZodString;
            fromCache: z.ZodBoolean;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            mimeType: z.ZodString;
            bytesReceived: z.ZodLazy<z.ZodNumber>;
            headersSize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            content: z.ZodLazy<z.ZodObject<{
                size: z.ZodLazy<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                size: number;
            }, {
                size: number;
            }>>;
            authChallenge: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                scheme: z.ZodString;
                realm: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                realm: string;
                scheme: string;
            }, {
                realm: string;
                scheme: string;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }>>>;
}, "strip", z.ZodTypeAny, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    };
    method: "network.authRequired";
}, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    };
    method: "network.authRequired";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.beforeRequestSent">;
    params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        initiator: z.ZodLazy<z.ZodObject<{
            type: z.ZodEnum<["parser", "script", "preflight", "other"]>;
            columnNumber: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            lineNumber: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                    columnNumber: z.ZodLazy<z.ZodNumber>;
                    functionName: z.ZodString;
                    lineNumber: z.ZodLazy<z.ZodNumber>;
                    url: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }, {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }>>, "many">;
            }, "strip", z.ZodTypeAny, {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            }, {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            }>>>;
            request: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        }, {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        initiator: {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        };
    }, {
        initiator: {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        };
    }>>>;
}, "strip", z.ZodTypeAny, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        initiator: {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        };
    };
    method: "network.beforeRequestSent";
}, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        initiator: {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        };
    };
    method: "network.beforeRequestSent";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.fetchError">;
    params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        errorText: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        errorText: string;
    }, {
        errorText: string;
    }>>>;
}, "strip", z.ZodTypeAny, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        errorText: string;
    };
    method: "network.fetchError";
}, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        errorText: string;
    };
    method: "network.fetchError";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.responseCompleted">;
    params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        response: z.ZodLazy<z.ZodObject<{
            url: z.ZodString;
            protocol: z.ZodString;
            status: z.ZodLazy<z.ZodNumber>;
            statusText: z.ZodString;
            fromCache: z.ZodBoolean;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            mimeType: z.ZodString;
            bytesReceived: z.ZodLazy<z.ZodNumber>;
            headersSize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            content: z.ZodLazy<z.ZodObject<{
                size: z.ZodLazy<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                size: number;
            }, {
                size: number;
            }>>;
            authChallenge: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                scheme: z.ZodString;
                realm: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                realm: string;
                scheme: string;
            }, {
                realm: string;
                scheme: string;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }>>>;
}, "strip", z.ZodTypeAny, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    };
    method: "network.responseCompleted";
}, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    };
    method: "network.responseCompleted";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"network.responseStarted">;
    params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        response: z.ZodLazy<z.ZodObject<{
            url: z.ZodString;
            protocol: z.ZodString;
            status: z.ZodLazy<z.ZodNumber>;
            statusText: z.ZodString;
            fromCache: z.ZodBoolean;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            mimeType: z.ZodString;
            bytesReceived: z.ZodLazy<z.ZodNumber>;
            headersSize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            content: z.ZodLazy<z.ZodObject<{
                size: z.ZodLazy<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                size: number;
            }, {
                size: number;
            }>>;
            authChallenge: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                scheme: z.ZodString;
                realm: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                realm: string;
                scheme: string;
            }, {
                realm: string;
                scheme: string;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }>>>;
}, "strip", z.ZodTypeAny, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    };
    method: "network.responseStarted";
}, {
    params: {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    } & {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    };
    method: "network.responseStarted";
}>>]>>;
export declare const NetworkResultSchema: z.ZodLazy<z.ZodLazy<z.ZodObject<{
    intercept: z.ZodLazy<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    intercept: string;
}, {
    intercept: string;
}>>>;
export declare namespace Network {
    const AuthChallengeSchema: z.ZodLazy<z.ZodObject<{
        scheme: z.ZodString;
        realm: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        realm: string;
        scheme: string;
    }, {
        realm: string;
        scheme: string;
    }>>;
}
export declare namespace Network {
    const AuthCredentialsSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"password">;
        username: z.ZodString;
        password: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "password";
        password: string;
        username: string;
    }, {
        type: "password";
        password: string;
        username: string;
    }>>;
}
export declare namespace Network {
    const BaseParametersSchema: z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>;
}
export declare namespace Network {
    const BytesValueSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"string">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "string";
        value: string;
    }, {
        type: "string";
        value: string;
    }>>, z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"base64">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "base64";
        value: string;
    }, {
        type: "base64";
        value: string;
    }>>]>>;
}
export declare namespace Network {
    const StringValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"string">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "string";
        value: string;
    }, {
        type: "string";
        value: string;
    }>>;
}
export declare namespace Network {
    const Base64ValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"base64">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "base64";
        value: string;
    }, {
        type: "base64";
        value: string;
    }>>;
}
export declare namespace Network {
    const SameSiteSchema: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
}
export declare namespace Network {
    const CookieSchema: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"string">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "string";
            value: string;
        }, {
            type: "string";
            value: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            value: string;
        }, {
            type: "base64";
            value: string;
        }>>]>>;
        domain: z.ZodString;
        path: z.ZodString;
        size: z.ZodLazy<z.ZodNumber>;
        httpOnly: z.ZodBoolean;
        secure: z.ZodBoolean;
        sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
        expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        path: string;
        value: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        };
        size: number;
        secure: boolean;
        name: string;
        domain: string;
        httpOnly: boolean;
        sameSite: "strict" | "none" | "lax";
        expiry?: number | undefined;
    }, {
        path: string;
        value: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        };
        size: number;
        secure: boolean;
        name: string;
        domain: string;
        httpOnly: boolean;
        sameSite: "strict" | "none" | "lax";
        expiry?: number | undefined;
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
}
export declare namespace Network {
    const CookieHeaderSchema: z.ZodLazy<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"string">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "string";
            value: string;
        }, {
            type: "string";
            value: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            value: string;
        }, {
            type: "base64";
            value: string;
        }>>]>>;
    }, "strip", z.ZodTypeAny, {
        value: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        };
        name: string;
    }, {
        value: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        };
        name: string;
    }>>;
}
export declare namespace Network {
    const FetchTimingInfoSchema: z.ZodLazy<z.ZodObject<{
        timeOrigin: z.ZodNumber;
        requestTime: z.ZodNumber;
        redirectStart: z.ZodNumber;
        redirectEnd: z.ZodNumber;
        fetchStart: z.ZodNumber;
        dnsStart: z.ZodNumber;
        dnsEnd: z.ZodNumber;
        connectStart: z.ZodNumber;
        connectEnd: z.ZodNumber;
        tlsStart: z.ZodNumber;
        requestStart: z.ZodNumber;
        responseStart: z.ZodNumber;
        responseEnd: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        timeOrigin: number;
        requestTime: number;
        redirectStart: number;
        redirectEnd: number;
        fetchStart: number;
        dnsStart: number;
        dnsEnd: number;
        connectStart: number;
        connectEnd: number;
        tlsStart: number;
        requestStart: number;
        responseStart: number;
        responseEnd: number;
    }, {
        timeOrigin: number;
        requestTime: number;
        redirectStart: number;
        redirectEnd: number;
        fetchStart: number;
        dnsStart: number;
        dnsEnd: number;
        connectStart: number;
        connectEnd: number;
        tlsStart: number;
        requestStart: number;
        responseStart: number;
        responseEnd: number;
    }>>;
}
export declare namespace Network {
    const HeaderSchema: z.ZodLazy<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"string">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "string";
            value: string;
        }, {
            type: "string";
            value: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            value: string;
        }, {
            type: "base64";
            value: string;
        }>>]>>;
    }, "strip", z.ZodTypeAny, {
        value: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        };
        name: string;
    }, {
        value: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        };
        name: string;
    }>>;
}
export declare namespace Network {
    const InitiatorSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodEnum<["parser", "script", "preflight", "other"]>;
        columnNumber: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        lineNumber: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                columnNumber: z.ZodLazy<z.ZodNumber>;
                functionName: z.ZodString;
                lineNumber: z.ZodLazy<z.ZodNumber>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }>>, "many">;
        }, "strip", z.ZodTypeAny, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }>>>;
        request: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        type: "other" | "script" | "parser" | "preflight";
        columnNumber?: number | undefined;
        lineNumber?: number | undefined;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
        request?: string | undefined;
    }, {
        type: "other" | "script" | "parser" | "preflight";
        columnNumber?: number | undefined;
        lineNumber?: number | undefined;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
        request?: string | undefined;
    }>>;
}
export declare namespace Network {
    const InterceptSchema: z.ZodLazy<z.ZodString>;
}
export declare namespace Network {
    const RequestSchema: z.ZodLazy<z.ZodString>;
}
export declare namespace Network {
    const RequestDataSchema: z.ZodLazy<z.ZodObject<{
        request: z.ZodLazy<z.ZodString>;
        url: z.ZodString;
        method: z.ZodString;
        headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }>>, "many">;
        cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
            domain: z.ZodString;
            path: z.ZodString;
            size: z.ZodLazy<z.ZodNumber>;
            httpOnly: z.ZodBoolean;
            secure: z.ZodBoolean;
            sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
            expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        }, {
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
        headersSize: z.ZodLazy<z.ZodNumber>;
        bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
        timings: z.ZodLazy<z.ZodObject<{
            timeOrigin: z.ZodNumber;
            requestTime: z.ZodNumber;
            redirectStart: z.ZodNumber;
            redirectEnd: z.ZodNumber;
            fetchStart: z.ZodNumber;
            dnsStart: z.ZodNumber;
            dnsEnd: z.ZodNumber;
            connectStart: z.ZodNumber;
            connectEnd: z.ZodNumber;
            tlsStart: z.ZodNumber;
            requestStart: z.ZodNumber;
            responseStart: z.ZodNumber;
            responseEnd: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            timeOrigin: number;
            requestTime: number;
            redirectStart: number;
            redirectEnd: number;
            fetchStart: number;
            dnsStart: number;
            dnsEnd: number;
            connectStart: number;
            connectEnd: number;
            tlsStart: number;
            requestStart: number;
            responseStart: number;
            responseEnd: number;
        }, {
            timeOrigin: number;
            requestTime: number;
            redirectStart: number;
            redirectEnd: number;
            fetchStart: number;
            dnsStart: number;
            dnsEnd: number;
            connectStart: number;
            connectEnd: number;
            tlsStart: number;
            requestStart: number;
            responseStart: number;
            responseEnd: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        url: string;
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        method: string;
        request: string;
        headers: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[];
        headersSize: number;
        bodySize: number | null;
        timings: {
            timeOrigin: number;
            requestTime: number;
            redirectStart: number;
            redirectEnd: number;
            fetchStart: number;
            dnsStart: number;
            dnsEnd: number;
            connectStart: number;
            connectEnd: number;
            tlsStart: number;
            requestStart: number;
            responseStart: number;
            responseEnd: number;
        };
    }, {
        url: string;
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        method: string;
        request: string;
        headers: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[];
        headersSize: number;
        bodySize: number | null;
        timings: {
            timeOrigin: number;
            requestTime: number;
            redirectStart: number;
            redirectEnd: number;
            fetchStart: number;
            dnsStart: number;
            dnsEnd: number;
            connectStart: number;
            connectEnd: number;
            tlsStart: number;
            requestStart: number;
            responseStart: number;
            responseEnd: number;
        };
    }>>;
}
export declare namespace Network {
    const ResponseContentSchema: z.ZodLazy<z.ZodObject<{
        size: z.ZodLazy<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        size: number;
    }, {
        size: number;
    }>>;
}
export declare namespace Network {
    const ResponseDataSchema: z.ZodLazy<z.ZodObject<{
        url: z.ZodString;
        protocol: z.ZodString;
        status: z.ZodLazy<z.ZodNumber>;
        statusText: z.ZodString;
        fromCache: z.ZodBoolean;
        headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }>>, "many">;
        mimeType: z.ZodString;
        bytesReceived: z.ZodLazy<z.ZodNumber>;
        headersSize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
        bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
        content: z.ZodLazy<z.ZodObject<{
            size: z.ZodLazy<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            size: number;
        }, {
            size: number;
        }>>;
        authChallenge: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            scheme: z.ZodString;
            realm: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            scheme: string;
        }, {
            realm: string;
            scheme: string;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        url: string;
        status: number;
        protocol: string;
        headers: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[];
        content: {
            size: number;
        };
        headersSize: number | null;
        bodySize: number | null;
        statusText: string;
        fromCache: boolean;
        mimeType: string;
        bytesReceived: number;
        authChallenge?: {
            realm: string;
            scheme: string;
        } | undefined;
    }, {
        url: string;
        status: number;
        protocol: string;
        headers: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[];
        content: {
            size: number;
        };
        headersSize: number | null;
        bodySize: number | null;
        statusText: string;
        fromCache: boolean;
        mimeType: string;
        bytesReceived: number;
        authChallenge?: {
            realm: string;
            scheme: string;
        } | undefined;
    }>>;
}
export declare namespace Network {
    const SetCookieHeaderSchema: z.ZodLazy<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"string">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "string";
            value: string;
        }, {
            type: "string";
            value: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            value: string;
        }, {
            type: "base64";
            value: string;
        }>>]>>;
        domain: z.ZodOptional<z.ZodString>;
        httpOnly: z.ZodOptional<z.ZodBoolean>;
        expiry: z.ZodOptional<z.ZodString>;
        maxAge: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        path: z.ZodOptional<z.ZodString>;
        sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
        secure: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        value: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        };
        name: string;
        domain?: string | undefined;
        httpOnly?: boolean | undefined;
        expiry?: string | undefined;
        maxAge?: number | undefined;
        path?: string | undefined;
        sameSite?: "strict" | "none" | "lax" | undefined;
        secure?: boolean | undefined;
    }, {
        value: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        };
        name: string;
        domain?: string | undefined;
        httpOnly?: boolean | undefined;
        expiry?: string | undefined;
        maxAge?: number | undefined;
        path?: string | undefined;
        sameSite?: "strict" | "none" | "lax" | undefined;
        secure?: boolean | undefined;
    }>>;
}
export declare namespace Network {
    const UrlPatternSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"pattern">;
        protocol: z.ZodOptional<z.ZodString>;
        hostname: z.ZodOptional<z.ZodString>;
        port: z.ZodOptional<z.ZodString>;
        pathname: z.ZodOptional<z.ZodString>;
        search: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "pattern";
        protocol?: string | undefined;
        hostname?: string | undefined;
        port?: string | undefined;
        pathname?: string | undefined;
        search?: string | undefined;
    }, {
        type: "pattern";
        protocol?: string | undefined;
        hostname?: string | undefined;
        port?: string | undefined;
        pathname?: string | undefined;
        search?: string | undefined;
    }>>, z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"string">;
        pattern: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "string";
        pattern: string;
    }, {
        type: "string";
        pattern: string;
    }>>]>>;
}
export declare namespace Network {
    const UrlPatternPatternSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"pattern">;
        protocol: z.ZodOptional<z.ZodString>;
        hostname: z.ZodOptional<z.ZodString>;
        port: z.ZodOptional<z.ZodString>;
        pathname: z.ZodOptional<z.ZodString>;
        search: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "pattern";
        protocol?: string | undefined;
        hostname?: string | undefined;
        port?: string | undefined;
        pathname?: string | undefined;
        search?: string | undefined;
    }, {
        type: "pattern";
        protocol?: string | undefined;
        hostname?: string | undefined;
        port?: string | undefined;
        pathname?: string | undefined;
        search?: string | undefined;
    }>>;
}
export declare namespace Network {
    const UrlPatternStringSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"string">;
        pattern: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "string";
        pattern: string;
    }, {
        type: "string";
        pattern: string;
    }>>;
}
export declare namespace Network {
    const AddInterceptParametersSchema: z.ZodLazy<z.ZodObject<{
        phases: z.ZodArray<z.ZodLazy<z.ZodEnum<["beforeRequestSent", "responseStarted", "authRequired"]>>, "many">;
        contexts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
        urlPatterns: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"pattern">;
            protocol: z.ZodOptional<z.ZodString>;
            hostname: z.ZodOptional<z.ZodString>;
            port: z.ZodOptional<z.ZodString>;
            pathname: z.ZodOptional<z.ZodString>;
            search: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "pattern";
            protocol?: string | undefined;
            hostname?: string | undefined;
            port?: string | undefined;
            pathname?: string | undefined;
            search?: string | undefined;
        }, {
            type: "pattern";
            protocol?: string | undefined;
            hostname?: string | undefined;
            port?: string | undefined;
            pathname?: string | undefined;
            search?: string | undefined;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"string">;
            pattern: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "string";
            pattern: string;
        }, {
            type: "string";
            pattern: string;
        }>>]>>, "many">>;
    }, "strip", z.ZodTypeAny, {
        phases: ("beforeRequestSent" | "responseStarted" | "authRequired")[];
        contexts?: string[] | undefined;
        urlPatterns?: ({
            type: "pattern";
            protocol?: string | undefined;
            hostname?: string | undefined;
            port?: string | undefined;
            pathname?: string | undefined;
            search?: string | undefined;
        } | {
            type: "string";
            pattern: string;
        })[] | undefined;
    }, {
        phases: ("beforeRequestSent" | "responseStarted" | "authRequired")[];
        contexts?: string[] | undefined;
        urlPatterns?: ({
            type: "pattern";
            protocol?: string | undefined;
            hostname?: string | undefined;
            port?: string | undefined;
            pathname?: string | undefined;
            search?: string | undefined;
        } | {
            type: "string";
            pattern: string;
        })[] | undefined;
    }>>;
}
export declare namespace Network {
    const AddInterceptSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"network.addIntercept">;
        params: z.ZodLazy<z.ZodObject<{
            phases: z.ZodArray<z.ZodLazy<z.ZodEnum<["beforeRequestSent", "responseStarted", "authRequired"]>>, "many">;
            contexts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
            urlPatterns: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"pattern">;
                protocol: z.ZodOptional<z.ZodString>;
                hostname: z.ZodOptional<z.ZodString>;
                port: z.ZodOptional<z.ZodString>;
                pathname: z.ZodOptional<z.ZodString>;
                search: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                type: "pattern";
                protocol?: string | undefined;
                hostname?: string | undefined;
                port?: string | undefined;
                pathname?: string | undefined;
                search?: string | undefined;
            }, {
                type: "pattern";
                protocol?: string | undefined;
                hostname?: string | undefined;
                port?: string | undefined;
                pathname?: string | undefined;
                search?: string | undefined;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                pattern: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                pattern: string;
            }, {
                type: "string";
                pattern: string;
            }>>]>>, "many">>;
        }, "strip", z.ZodTypeAny, {
            phases: ("beforeRequestSent" | "responseStarted" | "authRequired")[];
            contexts?: string[] | undefined;
            urlPatterns?: ({
                type: "pattern";
                protocol?: string | undefined;
                hostname?: string | undefined;
                port?: string | undefined;
                pathname?: string | undefined;
                search?: string | undefined;
            } | {
                type: "string";
                pattern: string;
            })[] | undefined;
        }, {
            phases: ("beforeRequestSent" | "responseStarted" | "authRequired")[];
            contexts?: string[] | undefined;
            urlPatterns?: ({
                type: "pattern";
                protocol?: string | undefined;
                hostname?: string | undefined;
                port?: string | undefined;
                pathname?: string | undefined;
                search?: string | undefined;
            } | {
                type: "string";
                pattern: string;
            })[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            phases: ("beforeRequestSent" | "responseStarted" | "authRequired")[];
            contexts?: string[] | undefined;
            urlPatterns?: ({
                type: "pattern";
                protocol?: string | undefined;
                hostname?: string | undefined;
                port?: string | undefined;
                pathname?: string | undefined;
                search?: string | undefined;
            } | {
                type: "string";
                pattern: string;
            })[] | undefined;
        };
        method: "network.addIntercept";
    }, {
        params: {
            phases: ("beforeRequestSent" | "responseStarted" | "authRequired")[];
            contexts?: string[] | undefined;
            urlPatterns?: ({
                type: "pattern";
                protocol?: string | undefined;
                hostname?: string | undefined;
                port?: string | undefined;
                pathname?: string | undefined;
                search?: string | undefined;
            } | {
                type: "string";
                pattern: string;
            })[] | undefined;
        };
        method: "network.addIntercept";
    }>>;
}
export declare namespace Network {
    const InterceptPhaseSchema: z.ZodLazy<z.ZodEnum<["beforeRequestSent", "responseStarted", "authRequired"]>>;
}
export declare namespace Network {
    const AddInterceptResultSchema: z.ZodLazy<z.ZodObject<{
        intercept: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        intercept: string;
    }, {
        intercept: string;
    }>>;
}
export declare namespace Network {
    const ContinueRequestSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"network.continueRequest">;
        params: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            body: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>>;
            cookies: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">>;
            headers: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">>;
            method: z.ZodOptional<z.ZodString>;
            url: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            request: string;
            body?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            cookies?: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[] | undefined;
            headers?: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[] | undefined;
            method?: string | undefined;
            url?: string | undefined;
        }, {
            request: string;
            body?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            cookies?: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[] | undefined;
            headers?: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[] | undefined;
            method?: string | undefined;
            url?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            request: string;
            body?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            cookies?: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[] | undefined;
            headers?: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[] | undefined;
            method?: string | undefined;
            url?: string | undefined;
        };
        method: "network.continueRequest";
    }, {
        params: {
            request: string;
            body?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            cookies?: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[] | undefined;
            headers?: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[] | undefined;
            method?: string | undefined;
            url?: string | undefined;
        };
        method: "network.continueRequest";
    }>>;
}
export declare namespace Network {
    const ContinueRequestParametersSchema: z.ZodLazy<z.ZodObject<{
        request: z.ZodLazy<z.ZodString>;
        body: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"string">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "string";
            value: string;
        }, {
            type: "string";
            value: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            value: string;
        }, {
            type: "base64";
            value: string;
        }>>]>>>;
        cookies: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }>>, "many">>;
        headers: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }>>, "many">>;
        method: z.ZodOptional<z.ZodString>;
        url: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        method?: string | undefined;
        url?: string | undefined;
    }, {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        method?: string | undefined;
        url?: string | undefined;
    }>>;
}
export declare namespace Network {
    const ContinueResponseSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"network.continueResponse">;
        params: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            cookies: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodOptional<z.ZodString>;
                httpOnly: z.ZodOptional<z.ZodBoolean>;
                expiry: z.ZodOptional<z.ZodString>;
                maxAge: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                path: z.ZodOptional<z.ZodString>;
                sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
                secure: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
                domain?: string | undefined;
                httpOnly?: boolean | undefined;
                expiry?: string | undefined;
                maxAge?: number | undefined;
                path?: string | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                secure?: boolean | undefined;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
                domain?: string | undefined;
                httpOnly?: boolean | undefined;
                expiry?: string | undefined;
                maxAge?: number | undefined;
                path?: string | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                secure?: boolean | undefined;
            }>>, "many">>;
            credentials: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"password">;
                username: z.ZodString;
                password: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "password";
                password: string;
                username: string;
            }, {
                type: "password";
                password: string;
                username: string;
            }>>>;
            headers: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">>;
            reasonPhrase: z.ZodOptional<z.ZodString>;
            statusCode: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            request: string;
            cookies?: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
                domain?: string | undefined;
                httpOnly?: boolean | undefined;
                expiry?: string | undefined;
                maxAge?: number | undefined;
                path?: string | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                secure?: boolean | undefined;
            }[] | undefined;
            credentials?: {
                type: "password";
                password: string;
                username: string;
            } | undefined;
            headers?: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[] | undefined;
            reasonPhrase?: string | undefined;
            statusCode?: number | undefined;
        }, {
            request: string;
            cookies?: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
                domain?: string | undefined;
                httpOnly?: boolean | undefined;
                expiry?: string | undefined;
                maxAge?: number | undefined;
                path?: string | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                secure?: boolean | undefined;
            }[] | undefined;
            credentials?: {
                type: "password";
                password: string;
                username: string;
            } | undefined;
            headers?: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[] | undefined;
            reasonPhrase?: string | undefined;
            statusCode?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            request: string;
            cookies?: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
                domain?: string | undefined;
                httpOnly?: boolean | undefined;
                expiry?: string | undefined;
                maxAge?: number | undefined;
                path?: string | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                secure?: boolean | undefined;
            }[] | undefined;
            credentials?: {
                type: "password";
                password: string;
                username: string;
            } | undefined;
            headers?: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[] | undefined;
            reasonPhrase?: string | undefined;
            statusCode?: number | undefined;
        };
        method: "network.continueResponse";
    }, {
        params: {
            request: string;
            cookies?: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
                domain?: string | undefined;
                httpOnly?: boolean | undefined;
                expiry?: string | undefined;
                maxAge?: number | undefined;
                path?: string | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                secure?: boolean | undefined;
            }[] | undefined;
            credentials?: {
                type: "password";
                password: string;
                username: string;
            } | undefined;
            headers?: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[] | undefined;
            reasonPhrase?: string | undefined;
            statusCode?: number | undefined;
        };
        method: "network.continueResponse";
    }>>;
}
export declare namespace Network {
    const ContinueResponseParametersSchema: z.ZodLazy<z.ZodObject<{
        request: z.ZodLazy<z.ZodString>;
        cookies: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
            domain: z.ZodOptional<z.ZodString>;
            httpOnly: z.ZodOptional<z.ZodBoolean>;
            expiry: z.ZodOptional<z.ZodString>;
            maxAge: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            path: z.ZodOptional<z.ZodString>;
            sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
            secure: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }>>, "many">>;
        credentials: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"password">;
            username: z.ZodString;
            password: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "password";
            password: string;
            username: string;
        }, {
            type: "password";
            password: string;
            username: string;
        }>>>;
        headers: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }>>, "many">>;
        reasonPhrase: z.ZodOptional<z.ZodString>;
        statusCode: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        request: string;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        credentials?: {
            type: "password";
            password: string;
            username: string;
        } | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    }, {
        request: string;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        credentials?: {
            type: "password";
            password: string;
            username: string;
        } | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    }>>;
}
export declare namespace Network {
    const ContinueWithAuthSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"network.continueWithAuth">;
        params: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            request: string;
        }, {
            request: string;
        }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            action: z.ZodLiteral<"provideCredentials">;
            credentials: z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"password">;
                username: z.ZodString;
                password: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "password";
                password: string;
                username: string;
            }, {
                type: "password";
                password: string;
                username: string;
            }>>;
        }, "strip", z.ZodTypeAny, {
            credentials: {
                type: "password";
                password: string;
                username: string;
            };
            action: "provideCredentials";
        }, {
            credentials: {
                type: "password";
                password: string;
                username: string;
            };
            action: "provideCredentials";
        }>>, z.ZodLazy<z.ZodObject<{
            action: z.ZodEnum<["default", "cancel"]>;
        }, "strip", z.ZodTypeAny, {
            action: "default" | "cancel";
        }, {
            action: "default" | "cancel";
        }>>]>>>;
    }, "strip", z.ZodTypeAny, {
        params: ({
            request: string;
        } & {
            credentials: {
                type: "password";
                password: string;
                username: string;
            };
            action: "provideCredentials";
        }) | ({
            request: string;
        } & {
            action: "default" | "cancel";
        });
        method: "network.continueWithAuth";
    }, {
        params: ({
            request: string;
        } & {
            credentials: {
                type: "password";
                password: string;
                username: string;
            };
            action: "provideCredentials";
        }) | ({
            request: string;
        } & {
            action: "default" | "cancel";
        });
        method: "network.continueWithAuth";
    }>>;
}
export declare namespace Network {
    const ContinueWithAuthParametersSchema: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        request: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        request: string;
    }, {
        request: string;
    }>, z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        action: z.ZodLiteral<"provideCredentials">;
        credentials: z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"password">;
            username: z.ZodString;
            password: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "password";
            password: string;
            username: string;
        }, {
            type: "password";
            password: string;
            username: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        credentials: {
            type: "password";
            password: string;
            username: string;
        };
        action: "provideCredentials";
    }, {
        credentials: {
            type: "password";
            password: string;
            username: string;
        };
        action: "provideCredentials";
    }>>, z.ZodLazy<z.ZodObject<{
        action: z.ZodEnum<["default", "cancel"]>;
    }, "strip", z.ZodTypeAny, {
        action: "default" | "cancel";
    }, {
        action: "default" | "cancel";
    }>>]>>>;
}
export declare namespace Network {
    const ContinueWithAuthCredentialsSchema: z.ZodLazy<z.ZodObject<{
        action: z.ZodLiteral<"provideCredentials">;
        credentials: z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"password">;
            username: z.ZodString;
            password: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "password";
            password: string;
            username: string;
        }, {
            type: "password";
            password: string;
            username: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        credentials: {
            type: "password";
            password: string;
            username: string;
        };
        action: "provideCredentials";
    }, {
        credentials: {
            type: "password";
            password: string;
            username: string;
        };
        action: "provideCredentials";
    }>>;
}
export declare namespace Network {
    const ContinueWithAuthNoCredentialsSchema: z.ZodLazy<z.ZodObject<{
        action: z.ZodEnum<["default", "cancel"]>;
    }, "strip", z.ZodTypeAny, {
        action: "default" | "cancel";
    }, {
        action: "default" | "cancel";
    }>>;
}
export declare namespace Network {
    const FailRequestSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"network.failRequest">;
        params: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            request: string;
        }, {
            request: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            request: string;
        };
        method: "network.failRequest";
    }, {
        params: {
            request: string;
        };
        method: "network.failRequest";
    }>>;
}
export declare namespace Network {
    const FailRequestParametersSchema: z.ZodLazy<z.ZodObject<{
        request: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        request: string;
    }, {
        request: string;
    }>>;
}
export declare namespace Network {
    const ProvideResponseSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"network.provideResponse">;
        params: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            body: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>>;
            cookies: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodOptional<z.ZodString>;
                httpOnly: z.ZodOptional<z.ZodBoolean>;
                expiry: z.ZodOptional<z.ZodString>;
                maxAge: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                path: z.ZodOptional<z.ZodString>;
                sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
                secure: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
                domain?: string | undefined;
                httpOnly?: boolean | undefined;
                expiry?: string | undefined;
                maxAge?: number | undefined;
                path?: string | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                secure?: boolean | undefined;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
                domain?: string | undefined;
                httpOnly?: boolean | undefined;
                expiry?: string | undefined;
                maxAge?: number | undefined;
                path?: string | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                secure?: boolean | undefined;
            }>>, "many">>;
            headers: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">>;
            reasonPhrase: z.ZodOptional<z.ZodString>;
            statusCode: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            request: string;
            body?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            cookies?: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
                domain?: string | undefined;
                httpOnly?: boolean | undefined;
                expiry?: string | undefined;
                maxAge?: number | undefined;
                path?: string | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                secure?: boolean | undefined;
            }[] | undefined;
            headers?: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[] | undefined;
            reasonPhrase?: string | undefined;
            statusCode?: number | undefined;
        }, {
            request: string;
            body?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            cookies?: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
                domain?: string | undefined;
                httpOnly?: boolean | undefined;
                expiry?: string | undefined;
                maxAge?: number | undefined;
                path?: string | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                secure?: boolean | undefined;
            }[] | undefined;
            headers?: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[] | undefined;
            reasonPhrase?: string | undefined;
            statusCode?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            request: string;
            body?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            cookies?: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
                domain?: string | undefined;
                httpOnly?: boolean | undefined;
                expiry?: string | undefined;
                maxAge?: number | undefined;
                path?: string | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                secure?: boolean | undefined;
            }[] | undefined;
            headers?: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[] | undefined;
            reasonPhrase?: string | undefined;
            statusCode?: number | undefined;
        };
        method: "network.provideResponse";
    }, {
        params: {
            request: string;
            body?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            cookies?: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
                domain?: string | undefined;
                httpOnly?: boolean | undefined;
                expiry?: string | undefined;
                maxAge?: number | undefined;
                path?: string | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                secure?: boolean | undefined;
            }[] | undefined;
            headers?: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[] | undefined;
            reasonPhrase?: string | undefined;
            statusCode?: number | undefined;
        };
        method: "network.provideResponse";
    }>>;
}
export declare namespace Network {
    const ProvideResponseParametersSchema: z.ZodLazy<z.ZodObject<{
        request: z.ZodLazy<z.ZodString>;
        body: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"string">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "string";
            value: string;
        }, {
            type: "string";
            value: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            value: string;
        }, {
            type: "base64";
            value: string;
        }>>]>>>;
        cookies: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
            domain: z.ZodOptional<z.ZodString>;
            httpOnly: z.ZodOptional<z.ZodBoolean>;
            expiry: z.ZodOptional<z.ZodString>;
            maxAge: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            path: z.ZodOptional<z.ZodString>;
            sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
            secure: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }>>, "many">>;
        headers: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }>>, "many">>;
        reasonPhrase: z.ZodOptional<z.ZodString>;
        statusCode: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    }, {
        request: string;
        body?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        cookies?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain?: string | undefined;
            httpOnly?: boolean | undefined;
            expiry?: string | undefined;
            maxAge?: number | undefined;
            path?: string | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            secure?: boolean | undefined;
        }[] | undefined;
        headers?: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
        }[] | undefined;
        reasonPhrase?: string | undefined;
        statusCode?: number | undefined;
    }>>;
}
export declare namespace Network {
    const RemoveInterceptSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"network.removeIntercept">;
        params: z.ZodLazy<z.ZodObject<{
            intercept: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            intercept: string;
        }, {
            intercept: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            intercept: string;
        };
        method: "network.removeIntercept";
    }, {
        params: {
            intercept: string;
        };
        method: "network.removeIntercept";
    }>>;
}
export declare namespace Network {
    const RemoveInterceptParametersSchema: z.ZodLazy<z.ZodObject<{
        intercept: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        intercept: string;
    }, {
        intercept: string;
    }>>;
}
export declare const ScriptEventSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.message">;
    params: z.ZodLazy<z.ZodObject<{
        channel: z.ZodLazy<z.ZodString>;
        data: any;
        source: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            context?: string | undefined;
        }, {
            realm: string;
            context?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        channel: string;
        source: {
            realm: string;
            context?: string | undefined;
        };
        data?: any;
    }, {
        channel: string;
        source: {
            realm: string;
            context?: string | undefined;
        };
        data?: any;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        channel: string;
        source: {
            realm: string;
            context?: string | undefined;
        };
        data?: any;
    };
    method: "script.message";
}, {
    params: {
        channel: string;
        source: {
            realm: string;
            context?: string | undefined;
        };
        data?: any;
    };
    method: "script.message";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.realmCreated">;
    params: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"window">;
        context: z.ZodLazy<z.ZodString>;
        sandbox: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }, {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"dedicated-worker">;
        owners: z.ZodTuple<[z.ZodLazy<z.ZodString>], null>;
    }, "strip", z.ZodTypeAny, {
        type: "dedicated-worker";
        owners: [string];
    }, {
        type: "dedicated-worker";
        owners: [string];
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"shared-worker">;
    }, "strip", z.ZodTypeAny, {
        type: "shared-worker";
    }, {
        type: "shared-worker";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"service-worker">;
    }, "strip", z.ZodTypeAny, {
        type: "service-worker";
    }, {
        type: "service-worker";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"worker">;
    }, "strip", z.ZodTypeAny, {
        type: "worker";
    }, {
        type: "worker";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"paint-worklet">;
    }, "strip", z.ZodTypeAny, {
        type: "paint-worklet";
    }, {
        type: "paint-worklet";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"audio-worklet">;
    }, "strip", z.ZodTypeAny, {
        type: "audio-worklet";
    }, {
        type: "audio-worklet";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"worklet">;
    }, "strip", z.ZodTypeAny, {
        type: "worklet";
    }, {
        type: "worklet";
    }>>>]>>;
}, "strip", z.ZodTypeAny, {
    params: ({
        origin: string;
        realm: string;
    } & {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "dedicated-worker";
        owners: [string];
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "shared-worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "service-worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "paint-worklet";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "audio-worklet";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "worklet";
    });
    method: "script.realmCreated";
}, {
    params: ({
        origin: string;
        realm: string;
    } & {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "dedicated-worker";
        owners: [string];
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "shared-worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "service-worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "paint-worklet";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "audio-worklet";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "worklet";
    });
    method: "script.realmCreated";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.realmDestroyed">;
    params: z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        realm: string;
    }, {
        realm: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        realm: string;
    };
    method: "script.realmDestroyed";
}, {
    params: {
        realm: string;
    };
    method: "script.realmDestroyed";
}>>]>>;
export declare namespace Network {
    const AuthRequiredParametersSchema: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        response: z.ZodLazy<z.ZodObject<{
            url: z.ZodString;
            protocol: z.ZodString;
            status: z.ZodLazy<z.ZodNumber>;
            statusText: z.ZodString;
            fromCache: z.ZodBoolean;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            mimeType: z.ZodString;
            bytesReceived: z.ZodLazy<z.ZodNumber>;
            headersSize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            content: z.ZodLazy<z.ZodObject<{
                size: z.ZodLazy<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                size: number;
            }, {
                size: number;
            }>>;
            authChallenge: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                scheme: z.ZodString;
                realm: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                realm: string;
                scheme: string;
            }, {
                realm: string;
                scheme: string;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }>>>;
}
export declare namespace Network {
    const BeforeRequestSentParametersSchema: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        initiator: z.ZodLazy<z.ZodObject<{
            type: z.ZodEnum<["parser", "script", "preflight", "other"]>;
            columnNumber: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            lineNumber: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                    columnNumber: z.ZodLazy<z.ZodNumber>;
                    functionName: z.ZodString;
                    lineNumber: z.ZodLazy<z.ZodNumber>;
                    url: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }, {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }>>, "many">;
            }, "strip", z.ZodTypeAny, {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            }, {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            }>>>;
            request: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        }, {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        initiator: {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        };
    }, {
        initiator: {
            type: "other" | "script" | "parser" | "preflight";
            columnNumber?: number | undefined;
            lineNumber?: number | undefined;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
            request?: string | undefined;
        };
    }>>>;
}
export declare namespace Network {
    const FetchErrorParametersSchema: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        errorText: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        errorText: string;
    }, {
        errorText: string;
    }>>>;
}
export declare namespace Network {
    const ResponseCompletedParametersSchema: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        response: z.ZodLazy<z.ZodObject<{
            url: z.ZodString;
            protocol: z.ZodString;
            status: z.ZodLazy<z.ZodNumber>;
            statusText: z.ZodString;
            fromCache: z.ZodBoolean;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            mimeType: z.ZodString;
            bytesReceived: z.ZodLazy<z.ZodNumber>;
            headersSize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            content: z.ZodLazy<z.ZodObject<{
                size: z.ZodLazy<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                size: number;
            }, {
                size: number;
            }>>;
            authChallenge: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                scheme: z.ZodString;
                realm: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                realm: string;
                scheme: string;
            }, {
                realm: string;
                scheme: string;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }>>>;
}
export declare namespace Network {
    const ResponseStartedParametersSchema: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        isBlocked: z.ZodBoolean;
        navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
        redirectCount: z.ZodLazy<z.ZodNumber>;
        request: z.ZodLazy<z.ZodObject<{
            request: z.ZodLazy<z.ZodString>;
            url: z.ZodString;
            method: z.ZodString;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodString;
                size: z.ZodLazy<z.ZodNumber>;
                httpOnly: z.ZodBoolean;
                secure: z.ZodBoolean;
                sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }, {
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
            headersSize: z.ZodLazy<z.ZodNumber>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            timings: z.ZodLazy<z.ZodObject<{
                timeOrigin: z.ZodNumber;
                requestTime: z.ZodNumber;
                redirectStart: z.ZodNumber;
                redirectEnd: z.ZodNumber;
                fetchStart: z.ZodNumber;
                dnsStart: z.ZodNumber;
                dnsEnd: z.ZodNumber;
                connectStart: z.ZodNumber;
                connectEnd: z.ZodNumber;
                tlsStart: z.ZodNumber;
                requestStart: z.ZodNumber;
                responseStart: z.ZodNumber;
                responseEnd: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }, {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }, {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        }>>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
    }, "strip", z.ZodTypeAny, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }, {
        navigation: string | null;
        context: string | null;
        request: {
            url: string;
            cookies: ({
                path: string;
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                size: number;
                secure: boolean;
                name: string;
                domain: string;
                httpOnly: boolean;
                sameSite: "strict" | "none" | "lax";
                expiry?: number | undefined;
            } & Record<string, any>)[];
            method: string;
            request: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            headersSize: number;
            bodySize: number | null;
            timings: {
                timeOrigin: number;
                requestTime: number;
                redirectStart: number;
                redirectEnd: number;
                fetchStart: number;
                dnsStart: number;
                dnsEnd: number;
                connectStart: number;
                connectEnd: number;
                tlsStart: number;
                requestStart: number;
                responseStart: number;
                responseEnd: number;
            };
        };
        timestamp: number;
        isBlocked: boolean;
        redirectCount: number;
        intercepts?: string[] | undefined;
    }>>, z.ZodObject<{
        response: z.ZodLazy<z.ZodObject<{
            url: z.ZodString;
            protocol: z.ZodString;
            status: z.ZodLazy<z.ZodNumber>;
            statusText: z.ZodString;
            fromCache: z.ZodBoolean;
            headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }>>, "many">;
            mimeType: z.ZodString;
            bytesReceived: z.ZodLazy<z.ZodNumber>;
            headersSize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
            content: z.ZodLazy<z.ZodObject<{
                size: z.ZodLazy<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                size: number;
            }, {
                size: number;
            }>>;
            authChallenge: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                scheme: z.ZodString;
                realm: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                realm: string;
                scheme: string;
            }, {
                realm: string;
                scheme: string;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }, {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }, {
        response: {
            url: string;
            status: number;
            protocol: string;
            headers: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
            }[];
            content: {
                size: number;
            };
            headersSize: number | null;
            bodySize: number | null;
            statusText: string;
            fromCache: boolean;
            mimeType: string;
            bytesReceived: number;
            authChallenge?: {
                realm: string;
                scheme: string;
            } | undefined;
        };
    }>>>;
}
export declare const ScriptCommandSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.addPreloadScript">;
    params: z.ZodLazy<z.ZodObject<{
        functionDeclaration: z.ZodString;
        arguments: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"channel">;
            value: z.ZodLazy<z.ZodObject<{
                channel: z.ZodLazy<z.ZodString>;
                serializationOptions: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                    maxDomDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
                    maxObjectDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
                    includeShadowTree: z.ZodOptional<z.ZodDefault<z.ZodEnum<["none", "open", "all"]>>>;
                }, "strip", z.ZodTypeAny, {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                }, {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                }>>>;
                ownership: z.ZodOptional<z.ZodLazy<z.ZodEnum<["root", "none"]>>>;
            }, "strip", z.ZodTypeAny, {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            }, {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "channel";
            value: {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            };
        }, {
            type: "channel";
            value: {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            };
        }>>, "many">>;
        contexts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
        sandbox: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        functionDeclaration: string;
        arguments?: {
            type: "channel";
            value: {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            };
        }[] | undefined;
        contexts?: string[] | undefined;
        sandbox?: string | undefined;
    }, {
        functionDeclaration: string;
        arguments?: {
            type: "channel";
            value: {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            };
        }[] | undefined;
        contexts?: string[] | undefined;
        sandbox?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        functionDeclaration: string;
        arguments?: {
            type: "channel";
            value: {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            };
        }[] | undefined;
        contexts?: string[] | undefined;
        sandbox?: string | undefined;
    };
    method: "script.addPreloadScript";
}, {
    params: {
        functionDeclaration: string;
        arguments?: {
            type: "channel";
            value: {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            };
        }[] | undefined;
        contexts?: string[] | undefined;
        sandbox?: string | undefined;
    };
    method: "script.addPreloadScript";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.callFunction">;
    params: z.ZodLazy<z.ZodObject<{
        functionDeclaration: z.ZodString;
        awaitPromise: z.ZodBoolean;
        target: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
        }, {
            realm: string;
        }>>, z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            sandbox: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            context: string;
            sandbox?: string | undefined;
        }, {
            context: string;
            sandbox?: string | undefined;
        }>>]>>;
        arguments: z.ZodOptional<z.ZodArray<any, "many">>;
        resultOwnership: z.ZodOptional<z.ZodLazy<z.ZodEnum<["root", "none"]>>>;
        serializationOptions: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            maxDomDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            maxObjectDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            includeShadowTree: z.ZodOptional<z.ZodDefault<z.ZodEnum<["none", "open", "all"]>>>;
        }, "strip", z.ZodTypeAny, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }>>>;
        this: any;
        userActivation: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        functionDeclaration: string;
        arguments?: any[] | undefined;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        this?: any;
        userActivation?: boolean | undefined;
    }, {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        functionDeclaration: string;
        arguments?: any[] | undefined;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        this?: any;
        userActivation?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        functionDeclaration: string;
        arguments?: any[] | undefined;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        this?: any;
        userActivation?: boolean | undefined;
    };
    method: "script.callFunction";
}, {
    params: {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        functionDeclaration: string;
        arguments?: any[] | undefined;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        this?: any;
        userActivation?: boolean | undefined;
    };
    method: "script.callFunction";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.disown">;
    params: z.ZodLazy<z.ZodObject<{
        handles: z.ZodArray<z.ZodLazy<z.ZodString>, "many">;
        target: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
        }, {
            realm: string;
        }>>, z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            sandbox: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            context: string;
            sandbox?: string | undefined;
        }, {
            context: string;
            sandbox?: string | undefined;
        }>>]>>;
    }, "strip", z.ZodTypeAny, {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        handles: string[];
    }, {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        handles: string[];
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        handles: string[];
    };
    method: "script.disown";
}, {
    params: {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        handles: string[];
    };
    method: "script.disown";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.evaluate">;
    params: z.ZodLazy<z.ZodObject<{
        expression: z.ZodString;
        target: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
        }, {
            realm: string;
        }>>, z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            sandbox: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            context: string;
            sandbox?: string | undefined;
        }, {
            context: string;
            sandbox?: string | undefined;
        }>>]>>;
        awaitPromise: z.ZodBoolean;
        resultOwnership: z.ZodOptional<z.ZodLazy<z.ZodEnum<["root", "none"]>>>;
        serializationOptions: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            maxDomDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            maxObjectDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            includeShadowTree: z.ZodOptional<z.ZodDefault<z.ZodEnum<["none", "open", "all"]>>>;
        }, "strip", z.ZodTypeAny, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }>>>;
        userActivation: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        expression: string;
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        userActivation?: boolean | undefined;
    }, {
        expression: string;
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        userActivation?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        expression: string;
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        userActivation?: boolean | undefined;
    };
    method: "script.evaluate";
}, {
    params: {
        expression: string;
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        userActivation?: boolean | undefined;
    };
    method: "script.evaluate";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.getRealms">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        type: z.ZodOptional<z.ZodLazy<z.ZodEnum<["window", "dedicated-worker", "shared-worker", "service-worker", "worker", "paint-worklet", "audio-worklet", "worklet"]>>>;
    }, "strip", z.ZodTypeAny, {
        context?: string | undefined;
        type?: "worker" | "window" | "dedicated-worker" | "shared-worker" | "service-worker" | "paint-worklet" | "audio-worklet" | "worklet" | undefined;
    }, {
        context?: string | undefined;
        type?: "worker" | "window" | "dedicated-worker" | "shared-worker" | "service-worker" | "paint-worklet" | "audio-worklet" | "worklet" | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context?: string | undefined;
        type?: "worker" | "window" | "dedicated-worker" | "shared-worker" | "service-worker" | "paint-worklet" | "audio-worklet" | "worklet" | undefined;
    };
    method: "script.getRealms";
}, {
    params: {
        context?: string | undefined;
        type?: "worker" | "window" | "dedicated-worker" | "shared-worker" | "service-worker" | "paint-worklet" | "audio-worklet" | "worklet" | undefined;
    };
    method: "script.getRealms";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"script.removePreloadScript">;
    params: z.ZodLazy<z.ZodObject<{
        script: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        script: string;
    }, {
        script: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        script: string;
    };
    method: "script.removePreloadScript";
}, {
    params: {
        script: string;
    };
    method: "script.removePreloadScript";
}>>]>>;
export declare const ScriptResultSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    script: z.ZodLazy<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    script: string;
}, {
    script: string;
}>>, z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    type: z.ZodLiteral<"success">;
    result: any;
    realm: z.ZodLazy<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "success";
    realm: string;
    result?: any;
}, {
    type: "success";
    realm: string;
    result?: any;
}>>, z.ZodLazy<z.ZodObject<{
    type: z.ZodLiteral<"exception">;
    exceptionDetails: z.ZodLazy<z.ZodObject<{
        columnNumber: z.ZodLazy<z.ZodNumber>;
        exception: any;
        lineNumber: z.ZodLazy<z.ZodNumber>;
        stackTrace: z.ZodLazy<z.ZodObject<{
            callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                columnNumber: z.ZodLazy<z.ZodNumber>;
                functionName: z.ZodString;
                lineNumber: z.ZodLazy<z.ZodNumber>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }>>, "many">;
        }, "strip", z.ZodTypeAny, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }>>;
        text: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        columnNumber: number;
        lineNumber: number;
        text: string;
        stackTrace: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        };
        exception?: any;
    }, {
        columnNumber: number;
        lineNumber: number;
        text: string;
        stackTrace: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        };
        exception?: any;
    }>>;
    realm: z.ZodLazy<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "exception";
    realm: string;
    exceptionDetails: {
        columnNumber: number;
        lineNumber: number;
        text: string;
        stackTrace: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        };
        exception?: any;
    };
}, {
    type: "exception";
    realm: string;
    exceptionDetails: {
        columnNumber: number;
        lineNumber: number;
        text: string;
        stackTrace: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        };
        exception?: any;
    };
}>>]>>, z.ZodLazy<z.ZodObject<{
    realms: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"window">;
        context: z.ZodLazy<z.ZodString>;
        sandbox: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }, {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"dedicated-worker">;
        owners: z.ZodTuple<[z.ZodLazy<z.ZodString>], null>;
    }, "strip", z.ZodTypeAny, {
        type: "dedicated-worker";
        owners: [string];
    }, {
        type: "dedicated-worker";
        owners: [string];
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"shared-worker">;
    }, "strip", z.ZodTypeAny, {
        type: "shared-worker";
    }, {
        type: "shared-worker";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"service-worker">;
    }, "strip", z.ZodTypeAny, {
        type: "service-worker";
    }, {
        type: "service-worker";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"worker">;
    }, "strip", z.ZodTypeAny, {
        type: "worker";
    }, {
        type: "worker";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"paint-worklet">;
    }, "strip", z.ZodTypeAny, {
        type: "paint-worklet";
    }, {
        type: "paint-worklet";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"audio-worklet">;
    }, "strip", z.ZodTypeAny, {
        type: "audio-worklet";
    }, {
        type: "audio-worklet";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"worklet">;
    }, "strip", z.ZodTypeAny, {
        type: "worklet";
    }, {
        type: "worklet";
    }>>>]>>, "many">;
}, "strip", z.ZodTypeAny, {
    realms: (({
        origin: string;
        realm: string;
    } & {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "dedicated-worker";
        owners: [string];
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "shared-worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "service-worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "paint-worklet";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "audio-worklet";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "worklet";
    }))[];
}, {
    realms: (({
        origin: string;
        realm: string;
    } & {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "dedicated-worker";
        owners: [string];
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "shared-worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "service-worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "worker";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "paint-worklet";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "audio-worklet";
    }) | ({
        origin: string;
        realm: string;
    } & {
        type: "worklet";
    }))[];
}>>]>>;
export declare namespace Network {
    const AuthRequiredSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"network.authRequired">;
        params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
            isBlocked: z.ZodBoolean;
            navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
            redirectCount: z.ZodLazy<z.ZodNumber>;
            request: z.ZodLazy<z.ZodObject<{
                request: z.ZodLazy<z.ZodString>;
                url: z.ZodString;
                method: z.ZodString;
                headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                    name: z.ZodString;
                    value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"string">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "string";
                        value: string;
                    }, {
                        type: "string";
                        value: string;
                    }>>, z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"base64">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "base64";
                        value: string;
                    }, {
                        type: "base64";
                        value: string;
                    }>>]>>;
                }, "strip", z.ZodTypeAny, {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }, {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }>>, "many">;
                cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    name: z.ZodString;
                    value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"string">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "string";
                        value: string;
                    }, {
                        type: "string";
                        value: string;
                    }>>, z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"base64">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "base64";
                        value: string;
                    }, {
                        type: "base64";
                        value: string;
                    }>>]>>;
                    domain: z.ZodString;
                    path: z.ZodString;
                    size: z.ZodLazy<z.ZodNumber>;
                    httpOnly: z.ZodBoolean;
                    secure: z.ZodBoolean;
                    sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                    expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                }, "strip", z.ZodTypeAny, {
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                }, {
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
                headersSize: z.ZodLazy<z.ZodNumber>;
                bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
                timings: z.ZodLazy<z.ZodObject<{
                    timeOrigin: z.ZodNumber;
                    requestTime: z.ZodNumber;
                    redirectStart: z.ZodNumber;
                    redirectEnd: z.ZodNumber;
                    fetchStart: z.ZodNumber;
                    dnsStart: z.ZodNumber;
                    dnsEnd: z.ZodNumber;
                    connectStart: z.ZodNumber;
                    connectEnd: z.ZodNumber;
                    tlsStart: z.ZodNumber;
                    requestStart: z.ZodNumber;
                    responseStart: z.ZodNumber;
                    responseEnd: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                }, {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            }, {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            }>>;
            timestamp: z.ZodLazy<z.ZodNumber>;
            intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
        }, "strip", z.ZodTypeAny, {
            navigation: string | null;
            context: string | null;
            request: {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            };
            timestamp: number;
            isBlocked: boolean;
            redirectCount: number;
            intercepts?: string[] | undefined;
        }, {
            navigation: string | null;
            context: string | null;
            request: {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            };
            timestamp: number;
            isBlocked: boolean;
            redirectCount: number;
            intercepts?: string[] | undefined;
        }>>, z.ZodObject<{
            response: z.ZodLazy<z.ZodObject<{
                url: z.ZodString;
                protocol: z.ZodString;
                status: z.ZodLazy<z.ZodNumber>;
                statusText: z.ZodString;
                fromCache: z.ZodBoolean;
                headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                    name: z.ZodString;
                    value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"string">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "string";
                        value: string;
                    }, {
                        type: "string";
                        value: string;
                    }>>, z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"base64">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "base64";
                        value: string;
                    }, {
                        type: "base64";
                        value: string;
                    }>>]>>;
                }, "strip", z.ZodTypeAny, {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }, {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }>>, "many">;
                mimeType: z.ZodString;
                bytesReceived: z.ZodLazy<z.ZodNumber>;
                headersSize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
                bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
                content: z.ZodLazy<z.ZodObject<{
                    size: z.ZodLazy<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    size: number;
                }, {
                    size: number;
                }>>;
                authChallenge: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                    scheme: z.ZodString;
                    realm: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    realm: string;
                    scheme: string;
                }, {
                    realm: string;
                    scheme: string;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                url: string;
                status: number;
                protocol: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                content: {
                    size: number;
                };
                headersSize: number | null;
                bodySize: number | null;
                statusText: string;
                fromCache: boolean;
                mimeType: string;
                bytesReceived: number;
                authChallenge?: {
                    realm: string;
                    scheme: string;
                } | undefined;
            }, {
                url: string;
                status: number;
                protocol: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                content: {
                    size: number;
                };
                headersSize: number | null;
                bodySize: number | null;
                statusText: string;
                fromCache: boolean;
                mimeType: string;
                bytesReceived: number;
                authChallenge?: {
                    realm: string;
                    scheme: string;
                } | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            response: {
                url: string;
                status: number;
                protocol: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                content: {
                    size: number;
                };
                headersSize: number | null;
                bodySize: number | null;
                statusText: string;
                fromCache: boolean;
                mimeType: string;
                bytesReceived: number;
                authChallenge?: {
                    realm: string;
                    scheme: string;
                } | undefined;
            };
        }, {
            response: {
                url: string;
                status: number;
                protocol: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                content: {
                    size: number;
                };
                headersSize: number | null;
                bodySize: number | null;
                statusText: string;
                fromCache: boolean;
                mimeType: string;
                bytesReceived: number;
                authChallenge?: {
                    realm: string;
                    scheme: string;
                } | undefined;
            };
        }>>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            navigation: string | null;
            context: string | null;
            request: {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            };
            timestamp: number;
            isBlocked: boolean;
            redirectCount: number;
            intercepts?: string[] | undefined;
        } & {
            response: {
                url: string;
                status: number;
                protocol: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                content: {
                    size: number;
                };
                headersSize: number | null;
                bodySize: number | null;
                statusText: string;
                fromCache: boolean;
                mimeType: string;
                bytesReceived: number;
                authChallenge?: {
                    realm: string;
                    scheme: string;
                } | undefined;
            };
        };
        method: "network.authRequired";
    }, {
        params: {
            navigation: string | null;
            context: string | null;
            request: {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            };
            timestamp: number;
            isBlocked: boolean;
            redirectCount: number;
            intercepts?: string[] | undefined;
        } & {
            response: {
                url: string;
                status: number;
                protocol: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                content: {
                    size: number;
                };
                headersSize: number | null;
                bodySize: number | null;
                statusText: string;
                fromCache: boolean;
                mimeType: string;
                bytesReceived: number;
                authChallenge?: {
                    realm: string;
                    scheme: string;
                } | undefined;
            };
        };
        method: "network.authRequired";
    }>>;
}
export declare namespace Network {
    const BeforeRequestSentSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"network.beforeRequestSent">;
        params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
            isBlocked: z.ZodBoolean;
            navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
            redirectCount: z.ZodLazy<z.ZodNumber>;
            request: z.ZodLazy<z.ZodObject<{
                request: z.ZodLazy<z.ZodString>;
                url: z.ZodString;
                method: z.ZodString;
                headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                    name: z.ZodString;
                    value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"string">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "string";
                        value: string;
                    }, {
                        type: "string";
                        value: string;
                    }>>, z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"base64">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "base64";
                        value: string;
                    }, {
                        type: "base64";
                        value: string;
                    }>>]>>;
                }, "strip", z.ZodTypeAny, {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }, {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }>>, "many">;
                cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    name: z.ZodString;
                    value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"string">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "string";
                        value: string;
                    }, {
                        type: "string";
                        value: string;
                    }>>, z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"base64">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "base64";
                        value: string;
                    }, {
                        type: "base64";
                        value: string;
                    }>>]>>;
                    domain: z.ZodString;
                    path: z.ZodString;
                    size: z.ZodLazy<z.ZodNumber>;
                    httpOnly: z.ZodBoolean;
                    secure: z.ZodBoolean;
                    sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                    expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                }, "strip", z.ZodTypeAny, {
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                }, {
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
                headersSize: z.ZodLazy<z.ZodNumber>;
                bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
                timings: z.ZodLazy<z.ZodObject<{
                    timeOrigin: z.ZodNumber;
                    requestTime: z.ZodNumber;
                    redirectStart: z.ZodNumber;
                    redirectEnd: z.ZodNumber;
                    fetchStart: z.ZodNumber;
                    dnsStart: z.ZodNumber;
                    dnsEnd: z.ZodNumber;
                    connectStart: z.ZodNumber;
                    connectEnd: z.ZodNumber;
                    tlsStart: z.ZodNumber;
                    requestStart: z.ZodNumber;
                    responseStart: z.ZodNumber;
                    responseEnd: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                }, {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            }, {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            }>>;
            timestamp: z.ZodLazy<z.ZodNumber>;
            intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
        }, "strip", z.ZodTypeAny, {
            navigation: string | null;
            context: string | null;
            request: {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            };
            timestamp: number;
            isBlocked: boolean;
            redirectCount: number;
            intercepts?: string[] | undefined;
        }, {
            navigation: string | null;
            context: string | null;
            request: {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            };
            timestamp: number;
            isBlocked: boolean;
            redirectCount: number;
            intercepts?: string[] | undefined;
        }>>, z.ZodObject<{
            initiator: z.ZodLazy<z.ZodObject<{
                type: z.ZodEnum<["parser", "script", "preflight", "other"]>;
                columnNumber: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                lineNumber: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                    callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                        columnNumber: z.ZodLazy<z.ZodNumber>;
                        functionName: z.ZodString;
                        lineNumber: z.ZodLazy<z.ZodNumber>;
                        url: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        url: string;
                        columnNumber: number;
                        lineNumber: number;
                        functionName: string;
                    }, {
                        url: string;
                        columnNumber: number;
                        lineNumber: number;
                        functionName: string;
                    }>>, "many">;
                }, "strip", z.ZodTypeAny, {
                    callFrames: {
                        url: string;
                        columnNumber: number;
                        lineNumber: number;
                        functionName: string;
                    }[];
                }, {
                    callFrames: {
                        url: string;
                        columnNumber: number;
                        lineNumber: number;
                        functionName: string;
                    }[];
                }>>>;
                request: z.ZodOptional<z.ZodLazy<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                type: "other" | "script" | "parser" | "preflight";
                columnNumber?: number | undefined;
                lineNumber?: number | undefined;
                stackTrace?: {
                    callFrames: {
                        url: string;
                        columnNumber: number;
                        lineNumber: number;
                        functionName: string;
                    }[];
                } | undefined;
                request?: string | undefined;
            }, {
                type: "other" | "script" | "parser" | "preflight";
                columnNumber?: number | undefined;
                lineNumber?: number | undefined;
                stackTrace?: {
                    callFrames: {
                        url: string;
                        columnNumber: number;
                        lineNumber: number;
                        functionName: string;
                    }[];
                } | undefined;
                request?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            initiator: {
                type: "other" | "script" | "parser" | "preflight";
                columnNumber?: number | undefined;
                lineNumber?: number | undefined;
                stackTrace?: {
                    callFrames: {
                        url: string;
                        columnNumber: number;
                        lineNumber: number;
                        functionName: string;
                    }[];
                } | undefined;
                request?: string | undefined;
            };
        }, {
            initiator: {
                type: "other" | "script" | "parser" | "preflight";
                columnNumber?: number | undefined;
                lineNumber?: number | undefined;
                stackTrace?: {
                    callFrames: {
                        url: string;
                        columnNumber: number;
                        lineNumber: number;
                        functionName: string;
                    }[];
                } | undefined;
                request?: string | undefined;
            };
        }>>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            navigation: string | null;
            context: string | null;
            request: {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            };
            timestamp: number;
            isBlocked: boolean;
            redirectCount: number;
            intercepts?: string[] | undefined;
        } & {
            initiator: {
                type: "other" | "script" | "parser" | "preflight";
                columnNumber?: number | undefined;
                lineNumber?: number | undefined;
                stackTrace?: {
                    callFrames: {
                        url: string;
                        columnNumber: number;
                        lineNumber: number;
                        functionName: string;
                    }[];
                } | undefined;
                request?: string | undefined;
            };
        };
        method: "network.beforeRequestSent";
    }, {
        params: {
            navigation: string | null;
            context: string | null;
            request: {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            };
            timestamp: number;
            isBlocked: boolean;
            redirectCount: number;
            intercepts?: string[] | undefined;
        } & {
            initiator: {
                type: "other" | "script" | "parser" | "preflight";
                columnNumber?: number | undefined;
                lineNumber?: number | undefined;
                stackTrace?: {
                    callFrames: {
                        url: string;
                        columnNumber: number;
                        lineNumber: number;
                        functionName: string;
                    }[];
                } | undefined;
                request?: string | undefined;
            };
        };
        method: "network.beforeRequestSent";
    }>>;
}
export declare namespace Network {
    const FetchErrorSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"network.fetchError">;
        params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
            isBlocked: z.ZodBoolean;
            navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
            redirectCount: z.ZodLazy<z.ZodNumber>;
            request: z.ZodLazy<z.ZodObject<{
                request: z.ZodLazy<z.ZodString>;
                url: z.ZodString;
                method: z.ZodString;
                headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                    name: z.ZodString;
                    value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"string">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "string";
                        value: string;
                    }, {
                        type: "string";
                        value: string;
                    }>>, z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"base64">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "base64";
                        value: string;
                    }, {
                        type: "base64";
                        value: string;
                    }>>]>>;
                }, "strip", z.ZodTypeAny, {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }, {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }>>, "many">;
                cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    name: z.ZodString;
                    value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"string">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "string";
                        value: string;
                    }, {
                        type: "string";
                        value: string;
                    }>>, z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"base64">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "base64";
                        value: string;
                    }, {
                        type: "base64";
                        value: string;
                    }>>]>>;
                    domain: z.ZodString;
                    path: z.ZodString;
                    size: z.ZodLazy<z.ZodNumber>;
                    httpOnly: z.ZodBoolean;
                    secure: z.ZodBoolean;
                    sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                    expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                }, "strip", z.ZodTypeAny, {
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                }, {
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
                headersSize: z.ZodLazy<z.ZodNumber>;
                bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
                timings: z.ZodLazy<z.ZodObject<{
                    timeOrigin: z.ZodNumber;
                    requestTime: z.ZodNumber;
                    redirectStart: z.ZodNumber;
                    redirectEnd: z.ZodNumber;
                    fetchStart: z.ZodNumber;
                    dnsStart: z.ZodNumber;
                    dnsEnd: z.ZodNumber;
                    connectStart: z.ZodNumber;
                    connectEnd: z.ZodNumber;
                    tlsStart: z.ZodNumber;
                    requestStart: z.ZodNumber;
                    responseStart: z.ZodNumber;
                    responseEnd: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                }, {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            }, {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            }>>;
            timestamp: z.ZodLazy<z.ZodNumber>;
            intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
        }, "strip", z.ZodTypeAny, {
            navigation: string | null;
            context: string | null;
            request: {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            };
            timestamp: number;
            isBlocked: boolean;
            redirectCount: number;
            intercepts?: string[] | undefined;
        }, {
            navigation: string | null;
            context: string | null;
            request: {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            };
            timestamp: number;
            isBlocked: boolean;
            redirectCount: number;
            intercepts?: string[] | undefined;
        }>>, z.ZodObject<{
            errorText: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            errorText: string;
        }, {
            errorText: string;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            navigation: string | null;
            context: string | null;
            request: {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            };
            timestamp: number;
            isBlocked: boolean;
            redirectCount: number;
            intercepts?: string[] | undefined;
        } & {
            errorText: string;
        };
        method: "network.fetchError";
    }, {
        params: {
            navigation: string | null;
            context: string | null;
            request: {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            };
            timestamp: number;
            isBlocked: boolean;
            redirectCount: number;
            intercepts?: string[] | undefined;
        } & {
            errorText: string;
        };
        method: "network.fetchError";
    }>>;
}
export declare namespace Network {
    const ResponseCompletedSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"network.responseCompleted">;
        params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
            isBlocked: z.ZodBoolean;
            navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
            redirectCount: z.ZodLazy<z.ZodNumber>;
            request: z.ZodLazy<z.ZodObject<{
                request: z.ZodLazy<z.ZodString>;
                url: z.ZodString;
                method: z.ZodString;
                headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                    name: z.ZodString;
                    value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"string">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "string";
                        value: string;
                    }, {
                        type: "string";
                        value: string;
                    }>>, z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"base64">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "base64";
                        value: string;
                    }, {
                        type: "base64";
                        value: string;
                    }>>]>>;
                }, "strip", z.ZodTypeAny, {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }, {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }>>, "many">;
                cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    name: z.ZodString;
                    value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"string">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "string";
                        value: string;
                    }, {
                        type: "string";
                        value: string;
                    }>>, z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"base64">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "base64";
                        value: string;
                    }, {
                        type: "base64";
                        value: string;
                    }>>]>>;
                    domain: z.ZodString;
                    path: z.ZodString;
                    size: z.ZodLazy<z.ZodNumber>;
                    httpOnly: z.ZodBoolean;
                    secure: z.ZodBoolean;
                    sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                    expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                }, "strip", z.ZodTypeAny, {
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                }, {
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
                headersSize: z.ZodLazy<z.ZodNumber>;
                bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
                timings: z.ZodLazy<z.ZodObject<{
                    timeOrigin: z.ZodNumber;
                    requestTime: z.ZodNumber;
                    redirectStart: z.ZodNumber;
                    redirectEnd: z.ZodNumber;
                    fetchStart: z.ZodNumber;
                    dnsStart: z.ZodNumber;
                    dnsEnd: z.ZodNumber;
                    connectStart: z.ZodNumber;
                    connectEnd: z.ZodNumber;
                    tlsStart: z.ZodNumber;
                    requestStart: z.ZodNumber;
                    responseStart: z.ZodNumber;
                    responseEnd: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                }, {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            }, {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            }>>;
            timestamp: z.ZodLazy<z.ZodNumber>;
            intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
        }, "strip", z.ZodTypeAny, {
            navigation: string | null;
            context: string | null;
            request: {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            };
            timestamp: number;
            isBlocked: boolean;
            redirectCount: number;
            intercepts?: string[] | undefined;
        }, {
            navigation: string | null;
            context: string | null;
            request: {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            };
            timestamp: number;
            isBlocked: boolean;
            redirectCount: number;
            intercepts?: string[] | undefined;
        }>>, z.ZodObject<{
            response: z.ZodLazy<z.ZodObject<{
                url: z.ZodString;
                protocol: z.ZodString;
                status: z.ZodLazy<z.ZodNumber>;
                statusText: z.ZodString;
                fromCache: z.ZodBoolean;
                headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                    name: z.ZodString;
                    value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"string">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "string";
                        value: string;
                    }, {
                        type: "string";
                        value: string;
                    }>>, z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"base64">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "base64";
                        value: string;
                    }, {
                        type: "base64";
                        value: string;
                    }>>]>>;
                }, "strip", z.ZodTypeAny, {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }, {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }>>, "many">;
                mimeType: z.ZodString;
                bytesReceived: z.ZodLazy<z.ZodNumber>;
                headersSize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
                bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
                content: z.ZodLazy<z.ZodObject<{
                    size: z.ZodLazy<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    size: number;
                }, {
                    size: number;
                }>>;
                authChallenge: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                    scheme: z.ZodString;
                    realm: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    realm: string;
                    scheme: string;
                }, {
                    realm: string;
                    scheme: string;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                url: string;
                status: number;
                protocol: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                content: {
                    size: number;
                };
                headersSize: number | null;
                bodySize: number | null;
                statusText: string;
                fromCache: boolean;
                mimeType: string;
                bytesReceived: number;
                authChallenge?: {
                    realm: string;
                    scheme: string;
                } | undefined;
            }, {
                url: string;
                status: number;
                protocol: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                content: {
                    size: number;
                };
                headersSize: number | null;
                bodySize: number | null;
                statusText: string;
                fromCache: boolean;
                mimeType: string;
                bytesReceived: number;
                authChallenge?: {
                    realm: string;
                    scheme: string;
                } | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            response: {
                url: string;
                status: number;
                protocol: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                content: {
                    size: number;
                };
                headersSize: number | null;
                bodySize: number | null;
                statusText: string;
                fromCache: boolean;
                mimeType: string;
                bytesReceived: number;
                authChallenge?: {
                    realm: string;
                    scheme: string;
                } | undefined;
            };
        }, {
            response: {
                url: string;
                status: number;
                protocol: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                content: {
                    size: number;
                };
                headersSize: number | null;
                bodySize: number | null;
                statusText: string;
                fromCache: boolean;
                mimeType: string;
                bytesReceived: number;
                authChallenge?: {
                    realm: string;
                    scheme: string;
                } | undefined;
            };
        }>>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            navigation: string | null;
            context: string | null;
            request: {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            };
            timestamp: number;
            isBlocked: boolean;
            redirectCount: number;
            intercepts?: string[] | undefined;
        } & {
            response: {
                url: string;
                status: number;
                protocol: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                content: {
                    size: number;
                };
                headersSize: number | null;
                bodySize: number | null;
                statusText: string;
                fromCache: boolean;
                mimeType: string;
                bytesReceived: number;
                authChallenge?: {
                    realm: string;
                    scheme: string;
                } | undefined;
            };
        };
        method: "network.responseCompleted";
    }, {
        params: {
            navigation: string | null;
            context: string | null;
            request: {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            };
            timestamp: number;
            isBlocked: boolean;
            redirectCount: number;
            intercepts?: string[] | undefined;
        } & {
            response: {
                url: string;
                status: number;
                protocol: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                content: {
                    size: number;
                };
                headersSize: number | null;
                bodySize: number | null;
                statusText: string;
                fromCache: boolean;
                mimeType: string;
                bytesReceived: number;
                authChallenge?: {
                    realm: string;
                    scheme: string;
                } | undefined;
            };
        };
        method: "network.responseCompleted";
    }>>;
}
export declare namespace Network {
    const ResponseStartedSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"network.responseStarted">;
        params: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            context: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
            isBlocked: z.ZodBoolean;
            navigation: z.ZodUnion<[z.ZodLazy<z.ZodString>, z.ZodNull]>;
            redirectCount: z.ZodLazy<z.ZodNumber>;
            request: z.ZodLazy<z.ZodObject<{
                request: z.ZodLazy<z.ZodString>;
                url: z.ZodString;
                method: z.ZodString;
                headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                    name: z.ZodString;
                    value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"string">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "string";
                        value: string;
                    }, {
                        type: "string";
                        value: string;
                    }>>, z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"base64">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "base64";
                        value: string;
                    }, {
                        type: "base64";
                        value: string;
                    }>>]>>;
                }, "strip", z.ZodTypeAny, {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }, {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }>>, "many">;
                cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    name: z.ZodString;
                    value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"string">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "string";
                        value: string;
                    }, {
                        type: "string";
                        value: string;
                    }>>, z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"base64">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "base64";
                        value: string;
                    }, {
                        type: "base64";
                        value: string;
                    }>>]>>;
                    domain: z.ZodString;
                    path: z.ZodString;
                    size: z.ZodLazy<z.ZodNumber>;
                    httpOnly: z.ZodBoolean;
                    secure: z.ZodBoolean;
                    sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
                    expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                }, "strip", z.ZodTypeAny, {
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                }, {
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
                headersSize: z.ZodLazy<z.ZodNumber>;
                bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
                timings: z.ZodLazy<z.ZodObject<{
                    timeOrigin: z.ZodNumber;
                    requestTime: z.ZodNumber;
                    redirectStart: z.ZodNumber;
                    redirectEnd: z.ZodNumber;
                    fetchStart: z.ZodNumber;
                    dnsStart: z.ZodNumber;
                    dnsEnd: z.ZodNumber;
                    connectStart: z.ZodNumber;
                    connectEnd: z.ZodNumber;
                    tlsStart: z.ZodNumber;
                    requestStart: z.ZodNumber;
                    responseStart: z.ZodNumber;
                    responseEnd: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                }, {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            }, {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            }>>;
            timestamp: z.ZodLazy<z.ZodNumber>;
            intercepts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
        }, "strip", z.ZodTypeAny, {
            navigation: string | null;
            context: string | null;
            request: {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            };
            timestamp: number;
            isBlocked: boolean;
            redirectCount: number;
            intercepts?: string[] | undefined;
        }, {
            navigation: string | null;
            context: string | null;
            request: {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            };
            timestamp: number;
            isBlocked: boolean;
            redirectCount: number;
            intercepts?: string[] | undefined;
        }>>, z.ZodObject<{
            response: z.ZodLazy<z.ZodObject<{
                url: z.ZodString;
                protocol: z.ZodString;
                status: z.ZodLazy<z.ZodNumber>;
                statusText: z.ZodString;
                fromCache: z.ZodBoolean;
                headers: z.ZodArray<z.ZodLazy<z.ZodObject<{
                    name: z.ZodString;
                    value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"string">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "string";
                        value: string;
                    }, {
                        type: "string";
                        value: string;
                    }>>, z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"base64">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "base64";
                        value: string;
                    }, {
                        type: "base64";
                        value: string;
                    }>>]>>;
                }, "strip", z.ZodTypeAny, {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }, {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }>>, "many">;
                mimeType: z.ZodString;
                bytesReceived: z.ZodLazy<z.ZodNumber>;
                headersSize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
                bodySize: z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>;
                content: z.ZodLazy<z.ZodObject<{
                    size: z.ZodLazy<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    size: number;
                }, {
                    size: number;
                }>>;
                authChallenge: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                    scheme: z.ZodString;
                    realm: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    realm: string;
                    scheme: string;
                }, {
                    realm: string;
                    scheme: string;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                url: string;
                status: number;
                protocol: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                content: {
                    size: number;
                };
                headersSize: number | null;
                bodySize: number | null;
                statusText: string;
                fromCache: boolean;
                mimeType: string;
                bytesReceived: number;
                authChallenge?: {
                    realm: string;
                    scheme: string;
                } | undefined;
            }, {
                url: string;
                status: number;
                protocol: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                content: {
                    size: number;
                };
                headersSize: number | null;
                bodySize: number | null;
                statusText: string;
                fromCache: boolean;
                mimeType: string;
                bytesReceived: number;
                authChallenge?: {
                    realm: string;
                    scheme: string;
                } | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            response: {
                url: string;
                status: number;
                protocol: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                content: {
                    size: number;
                };
                headersSize: number | null;
                bodySize: number | null;
                statusText: string;
                fromCache: boolean;
                mimeType: string;
                bytesReceived: number;
                authChallenge?: {
                    realm: string;
                    scheme: string;
                } | undefined;
            };
        }, {
            response: {
                url: string;
                status: number;
                protocol: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                content: {
                    size: number;
                };
                headersSize: number | null;
                bodySize: number | null;
                statusText: string;
                fromCache: boolean;
                mimeType: string;
                bytesReceived: number;
                authChallenge?: {
                    realm: string;
                    scheme: string;
                } | undefined;
            };
        }>>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            navigation: string | null;
            context: string | null;
            request: {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            };
            timestamp: number;
            isBlocked: boolean;
            redirectCount: number;
            intercepts?: string[] | undefined;
        } & {
            response: {
                url: string;
                status: number;
                protocol: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                content: {
                    size: number;
                };
                headersSize: number | null;
                bodySize: number | null;
                statusText: string;
                fromCache: boolean;
                mimeType: string;
                bytesReceived: number;
                authChallenge?: {
                    realm: string;
                    scheme: string;
                } | undefined;
            };
        };
        method: "network.responseStarted";
    }, {
        params: {
            navigation: string | null;
            context: string | null;
            request: {
                url: string;
                cookies: ({
                    path: string;
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    size: number;
                    secure: boolean;
                    name: string;
                    domain: string;
                    httpOnly: boolean;
                    sameSite: "strict" | "none" | "lax";
                    expiry?: number | undefined;
                } & Record<string, any>)[];
                method: string;
                request: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                headersSize: number;
                bodySize: number | null;
                timings: {
                    timeOrigin: number;
                    requestTime: number;
                    redirectStart: number;
                    redirectEnd: number;
                    fetchStart: number;
                    dnsStart: number;
                    dnsEnd: number;
                    connectStart: number;
                    connectEnd: number;
                    tlsStart: number;
                    requestStart: number;
                    responseStart: number;
                    responseEnd: number;
                };
            };
            timestamp: number;
            isBlocked: boolean;
            redirectCount: number;
            intercepts?: string[] | undefined;
        } & {
            response: {
                url: string;
                status: number;
                protocol: string;
                headers: {
                    value: {
                        type: "string";
                        value: string;
                    } | {
                        type: "base64";
                        value: string;
                    };
                    name: string;
                }[];
                content: {
                    size: number;
                };
                headersSize: number | null;
                bodySize: number | null;
                statusText: string;
                fromCache: boolean;
                mimeType: string;
                bytesReceived: number;
                authChallenge?: {
                    realm: string;
                    scheme: string;
                } | undefined;
            };
        };
        method: "network.responseStarted";
    }>>;
}
export declare namespace Script {
    const ChannelSchema: z.ZodLazy<z.ZodString>;
}
export declare namespace Script {
    const EvaluateResultSuccessSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"success">;
        result: any;
        realm: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "success";
        realm: string;
        result?: any;
    }, {
        type: "success";
        realm: string;
        result?: any;
    }>>;
}
export declare namespace Script {
    const ExceptionDetailsSchema: z.ZodLazy<z.ZodObject<{
        columnNumber: z.ZodLazy<z.ZodNumber>;
        exception: any;
        lineNumber: z.ZodLazy<z.ZodNumber>;
        stackTrace: z.ZodLazy<z.ZodObject<{
            callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                columnNumber: z.ZodLazy<z.ZodNumber>;
                functionName: z.ZodString;
                lineNumber: z.ZodLazy<z.ZodNumber>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }>>, "many">;
        }, "strip", z.ZodTypeAny, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }>>;
        text: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        columnNumber: number;
        lineNumber: number;
        text: string;
        stackTrace: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        };
        exception?: any;
    }, {
        columnNumber: number;
        lineNumber: number;
        text: string;
        stackTrace: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        };
        exception?: any;
    }>>;
}
export declare namespace Script {
    const ChannelValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"channel">;
        value: z.ZodLazy<z.ZodObject<{
            channel: z.ZodLazy<z.ZodString>;
            serializationOptions: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                maxDomDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
                maxObjectDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
                includeShadowTree: z.ZodOptional<z.ZodDefault<z.ZodEnum<["none", "open", "all"]>>>;
            }, "strip", z.ZodTypeAny, {
                maxDomDepth?: number | null | undefined;
                maxObjectDepth?: number | null | undefined;
                includeShadowTree?: "none" | "all" | "open" | undefined;
            }, {
                maxDomDepth?: number | null | undefined;
                maxObjectDepth?: number | null | undefined;
                includeShadowTree?: "none" | "all" | "open" | undefined;
            }>>>;
            ownership: z.ZodOptional<z.ZodLazy<z.ZodEnum<["root", "none"]>>>;
        }, "strip", z.ZodTypeAny, {
            channel: string;
            serializationOptions?: {
                maxDomDepth?: number | null | undefined;
                maxObjectDepth?: number | null | undefined;
                includeShadowTree?: "none" | "all" | "open" | undefined;
            } | undefined;
            ownership?: "none" | "root" | undefined;
        }, {
            channel: string;
            serializationOptions?: {
                maxDomDepth?: number | null | undefined;
                maxObjectDepth?: number | null | undefined;
                includeShadowTree?: "none" | "all" | "open" | undefined;
            } | undefined;
            ownership?: "none" | "root" | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "channel";
        value: {
            channel: string;
            serializationOptions?: {
                maxDomDepth?: number | null | undefined;
                maxObjectDepth?: number | null | undefined;
                includeShadowTree?: "none" | "all" | "open" | undefined;
            } | undefined;
            ownership?: "none" | "root" | undefined;
        };
    }, {
        type: "channel";
        value: {
            channel: string;
            serializationOptions?: {
                maxDomDepth?: number | null | undefined;
                maxObjectDepth?: number | null | undefined;
                includeShadowTree?: "none" | "all" | "open" | undefined;
            } | undefined;
            ownership?: "none" | "root" | undefined;
        };
    }>>;
}
export declare namespace Script {
    const ChannelPropertiesSchema: z.ZodLazy<z.ZodObject<{
        channel: z.ZodLazy<z.ZodString>;
        serializationOptions: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            maxDomDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            maxObjectDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            includeShadowTree: z.ZodOptional<z.ZodDefault<z.ZodEnum<["none", "open", "all"]>>>;
        }, "strip", z.ZodTypeAny, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }>>>;
        ownership: z.ZodOptional<z.ZodLazy<z.ZodEnum<["root", "none"]>>>;
    }, "strip", z.ZodTypeAny, {
        channel: string;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        ownership?: "none" | "root" | undefined;
    }, {
        channel: string;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        ownership?: "none" | "root" | undefined;
    }>>;
}
export declare namespace Script {
    const EvaluateResultSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"success">;
        result: any;
        realm: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "success";
        realm: string;
        result?: any;
    }, {
        type: "success";
        realm: string;
        result?: any;
    }>>, z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"exception">;
        exceptionDetails: z.ZodLazy<z.ZodObject<{
            columnNumber: z.ZodLazy<z.ZodNumber>;
            exception: any;
            lineNumber: z.ZodLazy<z.ZodNumber>;
            stackTrace: z.ZodLazy<z.ZodObject<{
                callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                    columnNumber: z.ZodLazy<z.ZodNumber>;
                    functionName: z.ZodString;
                    lineNumber: z.ZodLazy<z.ZodNumber>;
                    url: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }, {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }>>, "many">;
            }, "strip", z.ZodTypeAny, {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            }, {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            }>>;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        }, {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        }>>;
        realm: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }, {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }>>]>>;
}
export declare namespace Script {
    const EvaluateResultExceptionSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"exception">;
        exceptionDetails: z.ZodLazy<z.ZodObject<{
            columnNumber: z.ZodLazy<z.ZodNumber>;
            exception: any;
            lineNumber: z.ZodLazy<z.ZodNumber>;
            stackTrace: z.ZodLazy<z.ZodObject<{
                callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                    columnNumber: z.ZodLazy<z.ZodNumber>;
                    functionName: z.ZodString;
                    lineNumber: z.ZodLazy<z.ZodNumber>;
                    url: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }, {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }>>, "many">;
            }, "strip", z.ZodTypeAny, {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            }, {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            }>>;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        }, {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        }>>;
        realm: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }, {
        type: "exception";
        realm: string;
        exceptionDetails: {
            columnNumber: number;
            lineNumber: number;
            text: string;
            stackTrace: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            };
            exception?: any;
        };
    }>>;
}
export declare namespace Script {
    const HandleSchema: z.ZodLazy<z.ZodString>;
}
export declare namespace Script {
    const InternalIdSchema: z.ZodLazy<z.ZodString>;
}
export declare namespace Script {
    const ListLocalValueSchema: any;
}
export declare namespace Script {
    const LocalValueSchema: any;
}
export declare namespace Script {
    const ArrayLocalValueSchema: any;
}
export declare namespace Script {
    const DateLocalValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"date">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "date";
        value: string;
    }, {
        type: "date";
        value: string;
    }>>;
}
export declare namespace Script {
    const MappingLocalValueSchema: z.ZodLazy<z.ZodArray<z.ZodTuple<[z.ZodUnion<[any, z.ZodString]>, any], null>, "many">>;
}
export declare namespace Script {
    const MapLocalValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"map">;
        value: z.ZodLazy<z.ZodArray<z.ZodTuple<[z.ZodUnion<[any, z.ZodString]>, any], null>, "many">>;
    }, "strip", z.ZodTypeAny, {
        type: "map";
        value: [any, any][];
    }, {
        type: "map";
        value: [any, any][];
    }>>;
}
export declare namespace Script {
    const ObjectLocalValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"object">;
        value: z.ZodLazy<z.ZodArray<z.ZodTuple<[z.ZodUnion<[any, z.ZodString]>, any], null>, "many">>;
    }, "strip", z.ZodTypeAny, {
        type: "object";
        value: [any, any][];
    }, {
        type: "object";
        value: [any, any][];
    }>>;
}
export declare namespace Script {
    const RegExpValueSchema: z.ZodLazy<z.ZodObject<{
        pattern: z.ZodString;
        flags: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        pattern: string;
        flags?: string | undefined;
    }, {
        pattern: string;
        flags?: string | undefined;
    }>>;
}
export declare namespace Script {
    const RegExpLocalValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"regexp">;
        value: z.ZodLazy<z.ZodObject<{
            pattern: z.ZodString;
            flags: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            pattern: string;
            flags?: string | undefined;
        }, {
            pattern: string;
            flags?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "regexp";
        value: {
            pattern: string;
            flags?: string | undefined;
        };
    }, {
        type: "regexp";
        value: {
            pattern: string;
            flags?: string | undefined;
        };
    }>>;
}
export declare namespace Script {
    const SetLocalValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"set">;
        value: any;
    }, "strip", z.ZodTypeAny, {
        type: "set";
        value?: any;
    }, {
        type: "set";
        value?: any;
    }>>;
}
export declare namespace Script {
    const PreloadScriptSchema: z.ZodLazy<z.ZodString>;
}
export declare namespace Script {
    const RealmSchema: z.ZodLazy<z.ZodString>;
}
export declare namespace Script {
    const PrimitiveProtocolValueSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"undefined">;
    }, "strip", z.ZodTypeAny, {
        type: "undefined";
    }, {
        type: "undefined";
    }>>, z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"null">;
    }, "strip", z.ZodTypeAny, {
        type: "null";
    }, {
        type: "null";
    }>>, z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"string">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "string";
        value: string;
    }, {
        type: "string";
        value: string;
    }>>, z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"number">;
        value: z.ZodUnion<[z.ZodNumber, z.ZodLazy<z.ZodEnum<["NaN", "-0", "Infinity", "-Infinity"]>>]>;
    }, "strip", z.ZodTypeAny, {
        type: "number";
        value: number | "NaN" | "-0" | "Infinity" | "-Infinity";
    }, {
        type: "number";
        value: number | "NaN" | "-0" | "Infinity" | "-Infinity";
    }>>, z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"boolean">;
        value: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        type: "boolean";
        value: boolean;
    }, {
        type: "boolean";
        value: boolean;
    }>>, z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"bigint">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "bigint";
        value: string;
    }, {
        type: "bigint";
        value: string;
    }>>]>>;
}
export declare namespace Script {
    const UndefinedValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"undefined">;
    }, "strip", z.ZodTypeAny, {
        type: "undefined";
    }, {
        type: "undefined";
    }>>;
}
export declare namespace Script {
    const NullValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"null">;
    }, "strip", z.ZodTypeAny, {
        type: "null";
    }, {
        type: "null";
    }>>;
}
export declare namespace Script {
    const StringValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"string">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "string";
        value: string;
    }, {
        type: "string";
        value: string;
    }>>;
}
export declare namespace Script {
    const SpecialNumberSchema: z.ZodLazy<z.ZodEnum<["NaN", "-0", "Infinity", "-Infinity"]>>;
}
export declare namespace Script {
    const NumberValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"number">;
        value: z.ZodUnion<[z.ZodNumber, z.ZodLazy<z.ZodEnum<["NaN", "-0", "Infinity", "-Infinity"]>>]>;
    }, "strip", z.ZodTypeAny, {
        type: "number";
        value: number | "NaN" | "-0" | "Infinity" | "-Infinity";
    }, {
        type: "number";
        value: number | "NaN" | "-0" | "Infinity" | "-Infinity";
    }>>;
}
export declare namespace Script {
    const BooleanValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"boolean">;
        value: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        type: "boolean";
        value: boolean;
    }, {
        type: "boolean";
        value: boolean;
    }>>;
}
export declare namespace Script {
    const BigIntValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"bigint">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "bigint";
        value: string;
    }, {
        type: "bigint";
        value: string;
    }>>;
}
export declare namespace Script {
    const RealmInfoSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"window">;
        context: z.ZodLazy<z.ZodString>;
        sandbox: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }, {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"dedicated-worker">;
        owners: z.ZodTuple<[z.ZodLazy<z.ZodString>], null>;
    }, "strip", z.ZodTypeAny, {
        type: "dedicated-worker";
        owners: [string];
    }, {
        type: "dedicated-worker";
        owners: [string];
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"shared-worker">;
    }, "strip", z.ZodTypeAny, {
        type: "shared-worker";
    }, {
        type: "shared-worker";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"service-worker">;
    }, "strip", z.ZodTypeAny, {
        type: "service-worker";
    }, {
        type: "service-worker";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"worker">;
    }, "strip", z.ZodTypeAny, {
        type: "worker";
    }, {
        type: "worker";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"paint-worklet">;
    }, "strip", z.ZodTypeAny, {
        type: "paint-worklet";
    }, {
        type: "paint-worklet";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"audio-worklet">;
    }, "strip", z.ZodTypeAny, {
        type: "audio-worklet";
    }, {
        type: "audio-worklet";
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"worklet">;
    }, "strip", z.ZodTypeAny, {
        type: "worklet";
    }, {
        type: "worklet";
    }>>>]>>;
}
export declare namespace Script {
    const BaseRealmInfoSchema: z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>;
}
export declare namespace Script {
    const WindowRealmInfoSchema: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"window">;
        context: z.ZodLazy<z.ZodString>;
        sandbox: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }, {
        type: "window";
        context: string;
        sandbox?: string | undefined;
    }>>>;
}
export declare namespace Script {
    const DedicatedWorkerRealmInfoSchema: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"dedicated-worker">;
        owners: z.ZodTuple<[z.ZodLazy<z.ZodString>], null>;
    }, "strip", z.ZodTypeAny, {
        type: "dedicated-worker";
        owners: [string];
    }, {
        type: "dedicated-worker";
        owners: [string];
    }>>>;
}
export declare namespace Script {
    const SharedWorkerRealmInfoSchema: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"shared-worker">;
    }, "strip", z.ZodTypeAny, {
        type: "shared-worker";
    }, {
        type: "shared-worker";
    }>>>;
}
export declare namespace Script {
    const ServiceWorkerRealmInfoSchema: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"service-worker">;
    }, "strip", z.ZodTypeAny, {
        type: "service-worker";
    }, {
        type: "service-worker";
    }>>>;
}
export declare namespace Script {
    const WorkerRealmInfoSchema: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"worker">;
    }, "strip", z.ZodTypeAny, {
        type: "worker";
    }, {
        type: "worker";
    }>>>;
}
export declare namespace Script {
    const PaintWorkletRealmInfoSchema: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"paint-worklet">;
    }, "strip", z.ZodTypeAny, {
        type: "paint-worklet";
    }, {
        type: "paint-worklet";
    }>>>;
}
export declare namespace Script {
    const AudioWorkletRealmInfoSchema: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"audio-worklet">;
    }, "strip", z.ZodTypeAny, {
        type: "audio-worklet";
    }, {
        type: "audio-worklet";
    }>>>;
}
export declare namespace Script {
    const WorkletRealmInfoSchema: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        origin: string;
        realm: string;
    }, {
        origin: string;
        realm: string;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"worklet">;
    }, "strip", z.ZodTypeAny, {
        type: "worklet";
    }, {
        type: "worklet";
    }>>>;
}
export declare namespace Script {
    const RealmTypeSchema: z.ZodLazy<z.ZodEnum<["window", "dedicated-worker", "shared-worker", "service-worker", "worker", "paint-worklet", "audio-worklet", "worklet"]>>;
}
export declare namespace Script {
    const ListRemoteValueSchema: any;
}
export declare namespace Script {
    const MappingRemoteValueSchema: z.ZodLazy<z.ZodArray<z.ZodTuple<[z.ZodUnion<[any, z.ZodString]>, any], null>, "many">>;
}
export declare namespace Script {
    const RemoteValueSchema: any;
}
export declare namespace Script {
    const RemoteReferenceSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        sharedId: z.ZodLazy<z.ZodString>;
        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        sharedId: string;
        handle?: string | undefined;
    }, {
        sharedId: string;
        handle?: string | undefined;
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        handle: z.ZodLazy<z.ZodString>;
        sharedId: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        handle: string;
        sharedId?: string | undefined;
    }, {
        handle: string;
        sharedId?: string | undefined;
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>]>>;
}
export declare namespace Script {
    const SharedReferenceSchema: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        sharedId: z.ZodLazy<z.ZodString>;
        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        sharedId: string;
        handle?: string | undefined;
    }, {
        sharedId: string;
        handle?: string | undefined;
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
}
export declare namespace Script {
    const RemoteObjectReferenceSchema: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        handle: z.ZodLazy<z.ZodString>;
        sharedId: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        handle: string;
        sharedId?: string | undefined;
    }, {
        handle: string;
        sharedId?: string | undefined;
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
}
export declare namespace Script {
    const SymbolRemoteValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"symbol">;
        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        internalId: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        type: "symbol";
        handle?: string | undefined;
        internalId?: string | undefined;
    }, {
        type: "symbol";
        handle?: string | undefined;
        internalId?: string | undefined;
    }>>;
}
export declare namespace Script {
    const ArrayRemoteValueSchema: any;
}
export declare namespace Script {
    const ObjectRemoteValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"object">;
        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        internalId: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        value: z.ZodOptional<z.ZodLazy<z.ZodArray<z.ZodTuple<[z.ZodUnion<[any, z.ZodString]>, any], null>, "many">>>;
    }, "strip", z.ZodTypeAny, {
        type: "object";
        handle?: string | undefined;
        internalId?: string | undefined;
        value?: [any, any][] | undefined;
    }, {
        type: "object";
        handle?: string | undefined;
        internalId?: string | undefined;
        value?: [any, any][] | undefined;
    }>>;
}
export declare namespace Script {
    const FunctionRemoteValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"function">;
        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        internalId: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        type: "function";
        handle?: string | undefined;
        internalId?: string | undefined;
    }, {
        type: "function";
        handle?: string | undefined;
        internalId?: string | undefined;
    }>>;
}
export declare namespace Script {
    const RegExpRemoteValueSchema: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        internalId: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        handle?: string | undefined;
        internalId?: string | undefined;
    }, {
        handle?: string | undefined;
        internalId?: string | undefined;
    }>, z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"regexp">;
        value: z.ZodLazy<z.ZodObject<{
            pattern: z.ZodString;
            flags: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            pattern: string;
            flags?: string | undefined;
        }, {
            pattern: string;
            flags?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "regexp";
        value: {
            pattern: string;
            flags?: string | undefined;
        };
    }, {
        type: "regexp";
        value: {
            pattern: string;
            flags?: string | undefined;
        };
    }>>>>;
}
export declare namespace Script {
    const DateRemoteValueSchema: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        internalId: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        handle?: string | undefined;
        internalId?: string | undefined;
    }, {
        handle?: string | undefined;
        internalId?: string | undefined;
    }>, z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"date">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "date";
        value: string;
    }, {
        type: "date";
        value: string;
    }>>>>;
}
export declare namespace Script {
    const MapRemoteValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"map">;
        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        internalId: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        value: z.ZodOptional<z.ZodLazy<z.ZodArray<z.ZodTuple<[z.ZodUnion<[any, z.ZodString]>, any], null>, "many">>>;
    }, "strip", z.ZodTypeAny, {
        type: "map";
        handle?: string | undefined;
        internalId?: string | undefined;
        value?: [any, any][] | undefined;
    }, {
        type: "map";
        handle?: string | undefined;
        internalId?: string | undefined;
        value?: [any, any][] | undefined;
    }>>;
}
export declare namespace Script {
    const SetRemoteValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"set">;
        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        internalId: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        value: any;
    }, "strip", z.ZodTypeAny, {
        type: "set";
        handle?: string | undefined;
        internalId?: string | undefined;
        value?: any;
    }, {
        type: "set";
        handle?: string | undefined;
        internalId?: string | undefined;
        value?: any;
    }>>;
}
export declare namespace Script {
    const WeakMapRemoteValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"weakmap">;
        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        internalId: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        type: "weakmap";
        handle?: string | undefined;
        internalId?: string | undefined;
    }, {
        type: "weakmap";
        handle?: string | undefined;
        internalId?: string | undefined;
    }>>;
}
export declare namespace Script {
    const WeakSetRemoteValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"weakset">;
        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        internalId: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        type: "weakset";
        handle?: string | undefined;
        internalId?: string | undefined;
    }, {
        type: "weakset";
        handle?: string | undefined;
        internalId?: string | undefined;
    }>>;
}
export declare namespace Script {
    const IteratorRemoteValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"iterator">;
        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        internalId: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        type: "iterator";
        handle?: string | undefined;
        internalId?: string | undefined;
    }, {
        type: "iterator";
        handle?: string | undefined;
        internalId?: string | undefined;
    }>>;
}
export declare namespace Script {
    const GeneratorRemoteValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"generator">;
        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        internalId: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        type: "generator";
        handle?: string | undefined;
        internalId?: string | undefined;
    }, {
        type: "generator";
        handle?: string | undefined;
        internalId?: string | undefined;
    }>>;
}
export declare namespace Script {
    const ErrorRemoteValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"error">;
        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        internalId: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        type: "error";
        handle?: string | undefined;
        internalId?: string | undefined;
    }, {
        type: "error";
        handle?: string | undefined;
        internalId?: string | undefined;
    }>>;
}
export declare namespace Script {
    const ProxyRemoteValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"proxy">;
        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        internalId: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        type: "proxy";
        handle?: string | undefined;
        internalId?: string | undefined;
    }, {
        type: "proxy";
        handle?: string | undefined;
        internalId?: string | undefined;
    }>>;
}
export declare namespace Script {
    const PromiseRemoteValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"promise">;
        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        internalId: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        type: "promise";
        handle?: string | undefined;
        internalId?: string | undefined;
    }, {
        type: "promise";
        handle?: string | undefined;
        internalId?: string | undefined;
    }>>;
}
export declare namespace Script {
    const TypedArrayRemoteValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"typedarray">;
        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        internalId: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        type: "typedarray";
        handle?: string | undefined;
        internalId?: string | undefined;
    }, {
        type: "typedarray";
        handle?: string | undefined;
        internalId?: string | undefined;
    }>>;
}
export declare namespace Script {
    const ArrayBufferRemoteValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"arraybuffer">;
        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        internalId: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        type: "arraybuffer";
        handle?: string | undefined;
        internalId?: string | undefined;
    }, {
        type: "arraybuffer";
        handle?: string | undefined;
        internalId?: string | undefined;
    }>>;
}
export declare namespace Script {
    const NodeListRemoteValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"nodelist">;
        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        internalId: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        value: any;
    }, "strip", z.ZodTypeAny, {
        type: "nodelist";
        handle?: string | undefined;
        internalId?: string | undefined;
        value?: any;
    }, {
        type: "nodelist";
        handle?: string | undefined;
        internalId?: string | undefined;
        value?: any;
    }>>;
}
export declare namespace Script {
    const HtmlCollectionRemoteValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"htmlcollection">;
        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        internalId: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        value: any;
    }, "strip", z.ZodTypeAny, {
        type: "htmlcollection";
        handle?: string | undefined;
        internalId?: string | undefined;
        value?: any;
    }, {
        type: "htmlcollection";
        handle?: string | undefined;
        internalId?: string | undefined;
        value?: any;
    }>>;
}
export declare namespace Script {
    const NodeRemoteValueSchema: any;
}
export declare namespace Script {
    const NodePropertiesSchema: any;
}
export declare namespace Script {
    const WindowProxyRemoteValueSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"window">;
        value: z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            context: string;
        }, {
            context: string;
        }>>;
        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        internalId: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        type: "window";
        value: {
            context: string;
        };
        handle?: string | undefined;
        internalId?: string | undefined;
    }, {
        type: "window";
        value: {
            context: string;
        };
        handle?: string | undefined;
        internalId?: string | undefined;
    }>>;
}
export declare namespace Script {
    const WindowProxyPropertiesSchema: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        context: string;
    }, {
        context: string;
    }>>;
}
export declare namespace Script {
    const ResultOwnershipSchema: z.ZodLazy<z.ZodEnum<["root", "none"]>>;
}
export declare namespace Script {
    const SerializationOptionsSchema: z.ZodLazy<z.ZodObject<{
        maxDomDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
        maxObjectDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
        includeShadowTree: z.ZodOptional<z.ZodDefault<z.ZodEnum<["none", "open", "all"]>>>;
    }, "strip", z.ZodTypeAny, {
        maxDomDepth?: number | null | undefined;
        maxObjectDepth?: number | null | undefined;
        includeShadowTree?: "none" | "all" | "open" | undefined;
    }, {
        maxDomDepth?: number | null | undefined;
        maxObjectDepth?: number | null | undefined;
        includeShadowTree?: "none" | "all" | "open" | undefined;
    }>>;
}
export declare namespace Script {
    const SharedIdSchema: z.ZodLazy<z.ZodString>;
}
export declare namespace Script {
    const StackFrameSchema: z.ZodLazy<z.ZodObject<{
        columnNumber: z.ZodLazy<z.ZodNumber>;
        functionName: z.ZodString;
        lineNumber: z.ZodLazy<z.ZodNumber>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        columnNumber: number;
        lineNumber: number;
        functionName: string;
    }, {
        url: string;
        columnNumber: number;
        lineNumber: number;
        functionName: string;
    }>>;
}
export declare namespace Script {
    const StackTraceSchema: z.ZodLazy<z.ZodObject<{
        callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
            columnNumber: z.ZodLazy<z.ZodNumber>;
            functionName: z.ZodString;
            lineNumber: z.ZodLazy<z.ZodNumber>;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            url: string;
            columnNumber: number;
            lineNumber: number;
            functionName: string;
        }, {
            url: string;
            columnNumber: number;
            lineNumber: number;
            functionName: string;
        }>>, "many">;
    }, "strip", z.ZodTypeAny, {
        callFrames: {
            url: string;
            columnNumber: number;
            lineNumber: number;
            functionName: string;
        }[];
    }, {
        callFrames: {
            url: string;
            columnNumber: number;
            lineNumber: number;
            functionName: string;
        }[];
    }>>;
}
export declare namespace Script {
    const SourceSchema: z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
        context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        realm: string;
        context?: string | undefined;
    }, {
        realm: string;
        context?: string | undefined;
    }>>;
}
export declare namespace Script {
    const RealmTargetSchema: z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        realm: string;
    }, {
        realm: string;
    }>>;
}
export declare namespace Script {
    const ContextTargetSchema: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        sandbox: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        sandbox?: string | undefined;
    }, {
        context: string;
        sandbox?: string | undefined;
    }>>;
}
export declare namespace Script {
    const TargetSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        realm: string;
    }, {
        realm: string;
    }>>, z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        sandbox: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        context: string;
        sandbox?: string | undefined;
    }, {
        context: string;
        sandbox?: string | undefined;
    }>>]>>;
}
export declare namespace Script {
    const AddPreloadScriptSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"script.addPreloadScript">;
        params: z.ZodLazy<z.ZodObject<{
            functionDeclaration: z.ZodString;
            arguments: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"channel">;
                value: z.ZodLazy<z.ZodObject<{
                    channel: z.ZodLazy<z.ZodString>;
                    serializationOptions: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                        maxDomDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
                        maxObjectDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
                        includeShadowTree: z.ZodOptional<z.ZodDefault<z.ZodEnum<["none", "open", "all"]>>>;
                    }, "strip", z.ZodTypeAny, {
                        maxDomDepth?: number | null | undefined;
                        maxObjectDepth?: number | null | undefined;
                        includeShadowTree?: "none" | "all" | "open" | undefined;
                    }, {
                        maxDomDepth?: number | null | undefined;
                        maxObjectDepth?: number | null | undefined;
                        includeShadowTree?: "none" | "all" | "open" | undefined;
                    }>>>;
                    ownership: z.ZodOptional<z.ZodLazy<z.ZodEnum<["root", "none"]>>>;
                }, "strip", z.ZodTypeAny, {
                    channel: string;
                    serializationOptions?: {
                        maxDomDepth?: number | null | undefined;
                        maxObjectDepth?: number | null | undefined;
                        includeShadowTree?: "none" | "all" | "open" | undefined;
                    } | undefined;
                    ownership?: "none" | "root" | undefined;
                }, {
                    channel: string;
                    serializationOptions?: {
                        maxDomDepth?: number | null | undefined;
                        maxObjectDepth?: number | null | undefined;
                        includeShadowTree?: "none" | "all" | "open" | undefined;
                    } | undefined;
                    ownership?: "none" | "root" | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                type: "channel";
                value: {
                    channel: string;
                    serializationOptions?: {
                        maxDomDepth?: number | null | undefined;
                        maxObjectDepth?: number | null | undefined;
                        includeShadowTree?: "none" | "all" | "open" | undefined;
                    } | undefined;
                    ownership?: "none" | "root" | undefined;
                };
            }, {
                type: "channel";
                value: {
                    channel: string;
                    serializationOptions?: {
                        maxDomDepth?: number | null | undefined;
                        maxObjectDepth?: number | null | undefined;
                        includeShadowTree?: "none" | "all" | "open" | undefined;
                    } | undefined;
                    ownership?: "none" | "root" | undefined;
                };
            }>>, "many">>;
            contexts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
            sandbox: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            functionDeclaration: string;
            arguments?: {
                type: "channel";
                value: {
                    channel: string;
                    serializationOptions?: {
                        maxDomDepth?: number | null | undefined;
                        maxObjectDepth?: number | null | undefined;
                        includeShadowTree?: "none" | "all" | "open" | undefined;
                    } | undefined;
                    ownership?: "none" | "root" | undefined;
                };
            }[] | undefined;
            contexts?: string[] | undefined;
            sandbox?: string | undefined;
        }, {
            functionDeclaration: string;
            arguments?: {
                type: "channel";
                value: {
                    channel: string;
                    serializationOptions?: {
                        maxDomDepth?: number | null | undefined;
                        maxObjectDepth?: number | null | undefined;
                        includeShadowTree?: "none" | "all" | "open" | undefined;
                    } | undefined;
                    ownership?: "none" | "root" | undefined;
                };
            }[] | undefined;
            contexts?: string[] | undefined;
            sandbox?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            functionDeclaration: string;
            arguments?: {
                type: "channel";
                value: {
                    channel: string;
                    serializationOptions?: {
                        maxDomDepth?: number | null | undefined;
                        maxObjectDepth?: number | null | undefined;
                        includeShadowTree?: "none" | "all" | "open" | undefined;
                    } | undefined;
                    ownership?: "none" | "root" | undefined;
                };
            }[] | undefined;
            contexts?: string[] | undefined;
            sandbox?: string | undefined;
        };
        method: "script.addPreloadScript";
    }, {
        params: {
            functionDeclaration: string;
            arguments?: {
                type: "channel";
                value: {
                    channel: string;
                    serializationOptions?: {
                        maxDomDepth?: number | null | undefined;
                        maxObjectDepth?: number | null | undefined;
                        includeShadowTree?: "none" | "all" | "open" | undefined;
                    } | undefined;
                    ownership?: "none" | "root" | undefined;
                };
            }[] | undefined;
            contexts?: string[] | undefined;
            sandbox?: string | undefined;
        };
        method: "script.addPreloadScript";
    }>>;
}
export declare namespace Script {
    const AddPreloadScriptParametersSchema: z.ZodLazy<z.ZodObject<{
        functionDeclaration: z.ZodString;
        arguments: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"channel">;
            value: z.ZodLazy<z.ZodObject<{
                channel: z.ZodLazy<z.ZodString>;
                serializationOptions: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                    maxDomDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
                    maxObjectDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
                    includeShadowTree: z.ZodOptional<z.ZodDefault<z.ZodEnum<["none", "open", "all"]>>>;
                }, "strip", z.ZodTypeAny, {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                }, {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                }>>>;
                ownership: z.ZodOptional<z.ZodLazy<z.ZodEnum<["root", "none"]>>>;
            }, "strip", z.ZodTypeAny, {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            }, {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "channel";
            value: {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            };
        }, {
            type: "channel";
            value: {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            };
        }>>, "many">>;
        contexts: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodString>, "many">>;
        sandbox: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        functionDeclaration: string;
        arguments?: {
            type: "channel";
            value: {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            };
        }[] | undefined;
        contexts?: string[] | undefined;
        sandbox?: string | undefined;
    }, {
        functionDeclaration: string;
        arguments?: {
            type: "channel";
            value: {
                channel: string;
                serializationOptions?: {
                    maxDomDepth?: number | null | undefined;
                    maxObjectDepth?: number | null | undefined;
                    includeShadowTree?: "none" | "all" | "open" | undefined;
                } | undefined;
                ownership?: "none" | "root" | undefined;
            };
        }[] | undefined;
        contexts?: string[] | undefined;
        sandbox?: string | undefined;
    }>>;
}
export declare namespace Script {
    const AddPreloadScriptResultSchema: z.ZodLazy<z.ZodObject<{
        script: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        script: string;
    }, {
        script: string;
    }>>;
}
export declare namespace Script {
    const DisownSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"script.disown">;
        params: z.ZodLazy<z.ZodObject<{
            handles: z.ZodArray<z.ZodLazy<z.ZodString>, "many">;
            target: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                realm: z.ZodLazy<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                realm: string;
            }, {
                realm: string;
            }>>, z.ZodLazy<z.ZodObject<{
                context: z.ZodLazy<z.ZodString>;
                sandbox: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                context: string;
                sandbox?: string | undefined;
            }, {
                context: string;
                sandbox?: string | undefined;
            }>>]>>;
        }, "strip", z.ZodTypeAny, {
            target: ({
                realm: string;
            } | {
                context: string;
                sandbox?: string | undefined;
            }) & ({
                realm: string;
            } | {
                context: string;
                sandbox?: string | undefined;
            } | undefined);
            handles: string[];
        }, {
            target: ({
                realm: string;
            } | {
                context: string;
                sandbox?: string | undefined;
            }) & ({
                realm: string;
            } | {
                context: string;
                sandbox?: string | undefined;
            } | undefined);
            handles: string[];
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            target: ({
                realm: string;
            } | {
                context: string;
                sandbox?: string | undefined;
            }) & ({
                realm: string;
            } | {
                context: string;
                sandbox?: string | undefined;
            } | undefined);
            handles: string[];
        };
        method: "script.disown";
    }, {
        params: {
            target: ({
                realm: string;
            } | {
                context: string;
                sandbox?: string | undefined;
            }) & ({
                realm: string;
            } | {
                context: string;
                sandbox?: string | undefined;
            } | undefined);
            handles: string[];
        };
        method: "script.disown";
    }>>;
}
export declare namespace Script {
    const DisownParametersSchema: z.ZodLazy<z.ZodObject<{
        handles: z.ZodArray<z.ZodLazy<z.ZodString>, "many">;
        target: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
        }, {
            realm: string;
        }>>, z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            sandbox: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            context: string;
            sandbox?: string | undefined;
        }, {
            context: string;
            sandbox?: string | undefined;
        }>>]>>;
    }, "strip", z.ZodTypeAny, {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        handles: string[];
    }, {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        handles: string[];
    }>>;
}
export declare namespace Script {
    const CallFunctionParametersSchema: z.ZodLazy<z.ZodObject<{
        functionDeclaration: z.ZodString;
        awaitPromise: z.ZodBoolean;
        target: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
        }, {
            realm: string;
        }>>, z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            sandbox: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            context: string;
            sandbox?: string | undefined;
        }, {
            context: string;
            sandbox?: string | undefined;
        }>>]>>;
        arguments: z.ZodOptional<z.ZodArray<any, "many">>;
        resultOwnership: z.ZodOptional<z.ZodLazy<z.ZodEnum<["root", "none"]>>>;
        serializationOptions: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            maxDomDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            maxObjectDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            includeShadowTree: z.ZodOptional<z.ZodDefault<z.ZodEnum<["none", "open", "all"]>>>;
        }, "strip", z.ZodTypeAny, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }>>>;
        this: any;
        userActivation: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        functionDeclaration: string;
        arguments?: any[] | undefined;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        this?: any;
        userActivation?: boolean | undefined;
    }, {
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        functionDeclaration: string;
        arguments?: any[] | undefined;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        this?: any;
        userActivation?: boolean | undefined;
    }>>;
}
export declare namespace Script {
    const CallFunctionSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"script.callFunction">;
        params: z.ZodLazy<z.ZodObject<{
            functionDeclaration: z.ZodString;
            awaitPromise: z.ZodBoolean;
            target: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                realm: z.ZodLazy<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                realm: string;
            }, {
                realm: string;
            }>>, z.ZodLazy<z.ZodObject<{
                context: z.ZodLazy<z.ZodString>;
                sandbox: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                context: string;
                sandbox?: string | undefined;
            }, {
                context: string;
                sandbox?: string | undefined;
            }>>]>>;
            arguments: z.ZodOptional<z.ZodArray<any, "many">>;
            resultOwnership: z.ZodOptional<z.ZodLazy<z.ZodEnum<["root", "none"]>>>;
            serializationOptions: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                maxDomDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
                maxObjectDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
                includeShadowTree: z.ZodOptional<z.ZodDefault<z.ZodEnum<["none", "open", "all"]>>>;
            }, "strip", z.ZodTypeAny, {
                maxDomDepth?: number | null | undefined;
                maxObjectDepth?: number | null | undefined;
                includeShadowTree?: "none" | "all" | "open" | undefined;
            }, {
                maxDomDepth?: number | null | undefined;
                maxObjectDepth?: number | null | undefined;
                includeShadowTree?: "none" | "all" | "open" | undefined;
            }>>>;
            this: any;
            userActivation: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            target: ({
                realm: string;
            } | {
                context: string;
                sandbox?: string | undefined;
            }) & ({
                realm: string;
            } | {
                context: string;
                sandbox?: string | undefined;
            } | undefined);
            awaitPromise: boolean;
            functionDeclaration: string;
            arguments?: any[] | undefined;
            resultOwnership?: "none" | "root" | undefined;
            serializationOptions?: {
                maxDomDepth?: number | null | undefined;
                maxObjectDepth?: number | null | undefined;
                includeShadowTree?: "none" | "all" | "open" | undefined;
            } | undefined;
            this?: any;
            userActivation?: boolean | undefined;
        }, {
            target: ({
                realm: string;
            } | {
                context: string;
                sandbox?: string | undefined;
            }) & ({
                realm: string;
            } | {
                context: string;
                sandbox?: string | undefined;
            } | undefined);
            awaitPromise: boolean;
            functionDeclaration: string;
            arguments?: any[] | undefined;
            resultOwnership?: "none" | "root" | undefined;
            serializationOptions?: {
                maxDomDepth?: number | null | undefined;
                maxObjectDepth?: number | null | undefined;
                includeShadowTree?: "none" | "all" | "open" | undefined;
            } | undefined;
            this?: any;
            userActivation?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            target: ({
                realm: string;
            } | {
                context: string;
                sandbox?: string | undefined;
            }) & ({
                realm: string;
            } | {
                context: string;
                sandbox?: string | undefined;
            } | undefined);
            awaitPromise: boolean;
            functionDeclaration: string;
            arguments?: any[] | undefined;
            resultOwnership?: "none" | "root" | undefined;
            serializationOptions?: {
                maxDomDepth?: number | null | undefined;
                maxObjectDepth?: number | null | undefined;
                includeShadowTree?: "none" | "all" | "open" | undefined;
            } | undefined;
            this?: any;
            userActivation?: boolean | undefined;
        };
        method: "script.callFunction";
    }, {
        params: {
            target: ({
                realm: string;
            } | {
                context: string;
                sandbox?: string | undefined;
            }) & ({
                realm: string;
            } | {
                context: string;
                sandbox?: string | undefined;
            } | undefined);
            awaitPromise: boolean;
            functionDeclaration: string;
            arguments?: any[] | undefined;
            resultOwnership?: "none" | "root" | undefined;
            serializationOptions?: {
                maxDomDepth?: number | null | undefined;
                maxObjectDepth?: number | null | undefined;
                includeShadowTree?: "none" | "all" | "open" | undefined;
            } | undefined;
            this?: any;
            userActivation?: boolean | undefined;
        };
        method: "script.callFunction";
    }>>;
}
export declare namespace Script {
    const EvaluateSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"script.evaluate">;
        params: z.ZodLazy<z.ZodObject<{
            expression: z.ZodString;
            target: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                realm: z.ZodLazy<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                realm: string;
            }, {
                realm: string;
            }>>, z.ZodLazy<z.ZodObject<{
                context: z.ZodLazy<z.ZodString>;
                sandbox: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                context: string;
                sandbox?: string | undefined;
            }, {
                context: string;
                sandbox?: string | undefined;
            }>>]>>;
            awaitPromise: z.ZodBoolean;
            resultOwnership: z.ZodOptional<z.ZodLazy<z.ZodEnum<["root", "none"]>>>;
            serializationOptions: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                maxDomDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
                maxObjectDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
                includeShadowTree: z.ZodOptional<z.ZodDefault<z.ZodEnum<["none", "open", "all"]>>>;
            }, "strip", z.ZodTypeAny, {
                maxDomDepth?: number | null | undefined;
                maxObjectDepth?: number | null | undefined;
                includeShadowTree?: "none" | "all" | "open" | undefined;
            }, {
                maxDomDepth?: number | null | undefined;
                maxObjectDepth?: number | null | undefined;
                includeShadowTree?: "none" | "all" | "open" | undefined;
            }>>>;
            userActivation: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            expression: string;
            target: ({
                realm: string;
            } | {
                context: string;
                sandbox?: string | undefined;
            }) & ({
                realm: string;
            } | {
                context: string;
                sandbox?: string | undefined;
            } | undefined);
            awaitPromise: boolean;
            resultOwnership?: "none" | "root" | undefined;
            serializationOptions?: {
                maxDomDepth?: number | null | undefined;
                maxObjectDepth?: number | null | undefined;
                includeShadowTree?: "none" | "all" | "open" | undefined;
            } | undefined;
            userActivation?: boolean | undefined;
        }, {
            expression: string;
            target: ({
                realm: string;
            } | {
                context: string;
                sandbox?: string | undefined;
            }) & ({
                realm: string;
            } | {
                context: string;
                sandbox?: string | undefined;
            } | undefined);
            awaitPromise: boolean;
            resultOwnership?: "none" | "root" | undefined;
            serializationOptions?: {
                maxDomDepth?: number | null | undefined;
                maxObjectDepth?: number | null | undefined;
                includeShadowTree?: "none" | "all" | "open" | undefined;
            } | undefined;
            userActivation?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            expression: string;
            target: ({
                realm: string;
            } | {
                context: string;
                sandbox?: string | undefined;
            }) & ({
                realm: string;
            } | {
                context: string;
                sandbox?: string | undefined;
            } | undefined);
            awaitPromise: boolean;
            resultOwnership?: "none" | "root" | undefined;
            serializationOptions?: {
                maxDomDepth?: number | null | undefined;
                maxObjectDepth?: number | null | undefined;
                includeShadowTree?: "none" | "all" | "open" | undefined;
            } | undefined;
            userActivation?: boolean | undefined;
        };
        method: "script.evaluate";
    }, {
        params: {
            expression: string;
            target: ({
                realm: string;
            } | {
                context: string;
                sandbox?: string | undefined;
            }) & ({
                realm: string;
            } | {
                context: string;
                sandbox?: string | undefined;
            } | undefined);
            awaitPromise: boolean;
            resultOwnership?: "none" | "root" | undefined;
            serializationOptions?: {
                maxDomDepth?: number | null | undefined;
                maxObjectDepth?: number | null | undefined;
                includeShadowTree?: "none" | "all" | "open" | undefined;
            } | undefined;
            userActivation?: boolean | undefined;
        };
        method: "script.evaluate";
    }>>;
}
export declare namespace Script {
    const EvaluateParametersSchema: z.ZodLazy<z.ZodObject<{
        expression: z.ZodString;
        target: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
        }, {
            realm: string;
        }>>, z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            sandbox: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            context: string;
            sandbox?: string | undefined;
        }, {
            context: string;
            sandbox?: string | undefined;
        }>>]>>;
        awaitPromise: z.ZodBoolean;
        resultOwnership: z.ZodOptional<z.ZodLazy<z.ZodEnum<["root", "none"]>>>;
        serializationOptions: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            maxDomDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            maxObjectDepth: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLazy<z.ZodNumber>, z.ZodNull]>>>;
            includeShadowTree: z.ZodOptional<z.ZodDefault<z.ZodEnum<["none", "open", "all"]>>>;
        }, "strip", z.ZodTypeAny, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }, {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        }>>>;
        userActivation: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        expression: string;
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        userActivation?: boolean | undefined;
    }, {
        expression: string;
        target: ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        }) & ({
            realm: string;
        } | {
            context: string;
            sandbox?: string | undefined;
        } | undefined);
        awaitPromise: boolean;
        resultOwnership?: "none" | "root" | undefined;
        serializationOptions?: {
            maxDomDepth?: number | null | undefined;
            maxObjectDepth?: number | null | undefined;
            includeShadowTree?: "none" | "all" | "open" | undefined;
        } | undefined;
        userActivation?: boolean | undefined;
    }>>;
}
export declare namespace Script {
    const GetRealmsSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"script.getRealms">;
        params: z.ZodLazy<z.ZodObject<{
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
            type: z.ZodOptional<z.ZodLazy<z.ZodEnum<["window", "dedicated-worker", "shared-worker", "service-worker", "worker", "paint-worklet", "audio-worklet", "worklet"]>>>;
        }, "strip", z.ZodTypeAny, {
            context?: string | undefined;
            type?: "worker" | "window" | "dedicated-worker" | "shared-worker" | "service-worker" | "paint-worklet" | "audio-worklet" | "worklet" | undefined;
        }, {
            context?: string | undefined;
            type?: "worker" | "window" | "dedicated-worker" | "shared-worker" | "service-worker" | "paint-worklet" | "audio-worklet" | "worklet" | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            context?: string | undefined;
            type?: "worker" | "window" | "dedicated-worker" | "shared-worker" | "service-worker" | "paint-worklet" | "audio-worklet" | "worklet" | undefined;
        };
        method: "script.getRealms";
    }, {
        params: {
            context?: string | undefined;
            type?: "worker" | "window" | "dedicated-worker" | "shared-worker" | "service-worker" | "paint-worklet" | "audio-worklet" | "worklet" | undefined;
        };
        method: "script.getRealms";
    }>>;
}
export declare namespace Script {
    const GetRealmsParametersSchema: z.ZodLazy<z.ZodObject<{
        context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        type: z.ZodOptional<z.ZodLazy<z.ZodEnum<["window", "dedicated-worker", "shared-worker", "service-worker", "worker", "paint-worklet", "audio-worklet", "worklet"]>>>;
    }, "strip", z.ZodTypeAny, {
        context?: string | undefined;
        type?: "worker" | "window" | "dedicated-worker" | "shared-worker" | "service-worker" | "paint-worklet" | "audio-worklet" | "worklet" | undefined;
    }, {
        context?: string | undefined;
        type?: "worker" | "window" | "dedicated-worker" | "shared-worker" | "service-worker" | "paint-worklet" | "audio-worklet" | "worklet" | undefined;
    }>>;
}
export declare namespace Script {
    const GetRealmsResultSchema: z.ZodLazy<z.ZodObject<{
        realms: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"window">;
            context: z.ZodLazy<z.ZodString>;
            sandbox: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }, {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"dedicated-worker">;
            owners: z.ZodTuple<[z.ZodLazy<z.ZodString>], null>;
        }, "strip", z.ZodTypeAny, {
            type: "dedicated-worker";
            owners: [string];
        }, {
            type: "dedicated-worker";
            owners: [string];
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"shared-worker">;
        }, "strip", z.ZodTypeAny, {
            type: "shared-worker";
        }, {
            type: "shared-worker";
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"service-worker">;
        }, "strip", z.ZodTypeAny, {
            type: "service-worker";
        }, {
            type: "service-worker";
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"worker">;
        }, "strip", z.ZodTypeAny, {
            type: "worker";
        }, {
            type: "worker";
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"paint-worklet">;
        }, "strip", z.ZodTypeAny, {
            type: "paint-worklet";
        }, {
            type: "paint-worklet";
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"audio-worklet">;
        }, "strip", z.ZodTypeAny, {
            type: "audio-worklet";
        }, {
            type: "audio-worklet";
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"worklet">;
        }, "strip", z.ZodTypeAny, {
            type: "worklet";
        }, {
            type: "worklet";
        }>>>]>>, "many">;
    }, "strip", z.ZodTypeAny, {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }, {
        realms: (({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        }))[];
    }>>;
}
export declare namespace Script {
    const RemovePreloadScriptSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"script.removePreloadScript">;
        params: z.ZodLazy<z.ZodObject<{
            script: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            script: string;
        }, {
            script: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            script: string;
        };
        method: "script.removePreloadScript";
    }, {
        params: {
            script: string;
        };
        method: "script.removePreloadScript";
    }>>;
}
export declare namespace Script {
    const RemovePreloadScriptParametersSchema: z.ZodLazy<z.ZodObject<{
        script: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        script: string;
    }, {
        script: string;
    }>>;
}
export declare namespace Script {
    const MessageParametersSchema: z.ZodLazy<z.ZodObject<{
        channel: z.ZodLazy<z.ZodString>;
        data: any;
        source: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            context?: string | undefined;
        }, {
            realm: string;
            context?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        channel: string;
        source: {
            realm: string;
            context?: string | undefined;
        };
        data?: any;
    }, {
        channel: string;
        source: {
            realm: string;
            context?: string | undefined;
        };
        data?: any;
    }>>;
}
export declare namespace Script {
    const RealmCreatedSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"script.realmCreated">;
        params: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"window">;
            context: z.ZodLazy<z.ZodString>;
            sandbox: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }, {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"dedicated-worker">;
            owners: z.ZodTuple<[z.ZodLazy<z.ZodString>], null>;
        }, "strip", z.ZodTypeAny, {
            type: "dedicated-worker";
            owners: [string];
        }, {
            type: "dedicated-worker";
            owners: [string];
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"shared-worker">;
        }, "strip", z.ZodTypeAny, {
            type: "shared-worker";
        }, {
            type: "shared-worker";
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"service-worker">;
        }, "strip", z.ZodTypeAny, {
            type: "service-worker";
        }, {
            type: "service-worker";
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"worker">;
        }, "strip", z.ZodTypeAny, {
            type: "worker";
        }, {
            type: "worker";
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"paint-worklet">;
        }, "strip", z.ZodTypeAny, {
            type: "paint-worklet";
        }, {
            type: "paint-worklet";
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"audio-worklet">;
        }, "strip", z.ZodTypeAny, {
            type: "audio-worklet";
        }, {
            type: "audio-worklet";
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            origin: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            origin: string;
            realm: string;
        }, {
            origin: string;
            realm: string;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"worklet">;
        }, "strip", z.ZodTypeAny, {
            type: "worklet";
        }, {
            type: "worklet";
        }>>>]>>;
    }, "strip", z.ZodTypeAny, {
        params: ({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        });
        method: "script.realmCreated";
    }, {
        params: ({
            origin: string;
            realm: string;
        } & {
            type: "window";
            context: string;
            sandbox?: string | undefined;
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "dedicated-worker";
            owners: [string];
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "shared-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "service-worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worker";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "paint-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "audio-worklet";
        }) | ({
            origin: string;
            realm: string;
        } & {
            type: "worklet";
        });
        method: "script.realmCreated";
    }>>;
}
export declare namespace Script {
    const MessageSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"script.message">;
        params: z.ZodLazy<z.ZodObject<{
            channel: z.ZodLazy<z.ZodString>;
            data: any;
            source: z.ZodLazy<z.ZodObject<{
                realm: z.ZodLazy<z.ZodString>;
                context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                realm: string;
                context?: string | undefined;
            }, {
                realm: string;
                context?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            channel: string;
            source: {
                realm: string;
                context?: string | undefined;
            };
            data?: any;
        }, {
            channel: string;
            source: {
                realm: string;
                context?: string | undefined;
            };
            data?: any;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            channel: string;
            source: {
                realm: string;
                context?: string | undefined;
            };
            data?: any;
        };
        method: "script.message";
    }, {
        params: {
            channel: string;
            source: {
                realm: string;
                context?: string | undefined;
            };
            data?: any;
        };
        method: "script.message";
    }>>;
}
export declare namespace Script {
    const RealmDestroyedSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"script.realmDestroyed">;
        params: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
        }, {
            realm: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            realm: string;
        };
        method: "script.realmDestroyed";
    }, {
        params: {
            realm: string;
        };
        method: "script.realmDestroyed";
    }>>;
}
export declare namespace Script {
    const RealmDestroyedParametersSchema: z.ZodLazy<z.ZodObject<{
        realm: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        realm: string;
    }, {
        realm: string;
    }>>;
}
export declare const StorageCommandSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"storage.deleteCookies">;
    params: z.ZodLazy<z.ZodObject<{
        filter: z.ZodOptional<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            value: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>>;
            domain: z.ZodOptional<z.ZodString>;
            path: z.ZodOptional<z.ZodString>;
            size: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            httpOnly: z.ZodOptional<z.ZodBoolean>;
            secure: z.ZodOptional<z.ZodBoolean>;
            sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
            expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        }, {
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>>;
        partition: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"context">;
            context: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "context";
            context: string;
        }, {
            type: "context";
            context: string;
        }>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            type: z.ZodLiteral<"storageKey">;
            userContext: z.ZodOptional<z.ZodString>;
            sourceOrigin: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }, {
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>]>>>;
    }, "strip", z.ZodTypeAny, {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    }, {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    };
    method: "storage.deleteCookies";
}, {
    params: {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    };
    method: "storage.deleteCookies";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"storage.getCookies">;
    params: z.ZodLazy<z.ZodObject<{
        filter: z.ZodOptional<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            value: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>>;
            domain: z.ZodOptional<z.ZodString>;
            path: z.ZodOptional<z.ZodString>;
            size: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            httpOnly: z.ZodOptional<z.ZodBoolean>;
            secure: z.ZodOptional<z.ZodBoolean>;
            sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
            expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        }, {
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>>;
        partition: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"context">;
            context: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "context";
            context: string;
        }, {
            type: "context";
            context: string;
        }>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            type: z.ZodLiteral<"storageKey">;
            userContext: z.ZodOptional<z.ZodString>;
            sourceOrigin: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }, {
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>]>>>;
    }, "strip", z.ZodTypeAny, {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    }, {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    };
    method: "storage.getCookies";
}, {
    params: {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    };
    method: "storage.getCookies";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"storage.setCookie">;
    params: z.ZodLazy<z.ZodObject<{
        cookie: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
            domain: z.ZodString;
            path: z.ZodOptional<z.ZodString>;
            httpOnly: z.ZodOptional<z.ZodBoolean>;
            secure: z.ZodOptional<z.ZodBoolean>;
            sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
            expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain: string;
            path?: string | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain: string;
            path?: string | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
        partition: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"context">;
            context: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "context";
            context: string;
        }, {
            type: "context";
            context: string;
        }>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            type: z.ZodLiteral<"storageKey">;
            userContext: z.ZodOptional<z.ZodString>;
            sourceOrigin: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }, {
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>]>>>;
    }, "strip", z.ZodTypeAny, {
        cookie: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain: string;
            path?: string | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    }, {
        cookie: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain: string;
            path?: string | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        cookie: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain: string;
            path?: string | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    };
    method: "storage.setCookie";
}, {
    params: {
        cookie: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain: string;
            path?: string | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    };
    method: "storage.setCookie";
}>>]>>;
export declare const StorageResultSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    partitionKey: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        userContext: z.ZodOptional<z.ZodString>;
        sourceOrigin: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    }, {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
}, "strip", z.ZodTypeAny, {
    partitionKey: {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    } & Record<string, any>;
}, {
    partitionKey: {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    } & Record<string, any>;
}>>, z.ZodLazy<z.ZodObject<{
    cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"string">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "string";
            value: string;
        }, {
            type: "string";
            value: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            value: string;
        }, {
            type: "base64";
            value: string;
        }>>]>>;
        domain: z.ZodString;
        path: z.ZodString;
        size: z.ZodLazy<z.ZodNumber>;
        httpOnly: z.ZodBoolean;
        secure: z.ZodBoolean;
        sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
        expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        path: string;
        value: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        };
        size: number;
        secure: boolean;
        name: string;
        domain: string;
        httpOnly: boolean;
        sameSite: "strict" | "none" | "lax";
        expiry?: number | undefined;
    }, {
        path: string;
        value: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        };
        size: number;
        secure: boolean;
        name: string;
        domain: string;
        httpOnly: boolean;
        sameSite: "strict" | "none" | "lax";
        expiry?: number | undefined;
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
    partitionKey: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        userContext: z.ZodOptional<z.ZodString>;
        sourceOrigin: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    }, {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
}, "strip", z.ZodTypeAny, {
    cookies: ({
        path: string;
        value: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        };
        size: number;
        secure: boolean;
        name: string;
        domain: string;
        httpOnly: boolean;
        sameSite: "strict" | "none" | "lax";
        expiry?: number | undefined;
    } & Record<string, any>)[];
    partitionKey: {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    } & Record<string, any>;
}, {
    cookies: ({
        path: string;
        value: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        };
        size: number;
        secure: boolean;
        name: string;
        domain: string;
        httpOnly: boolean;
        sameSite: "strict" | "none" | "lax";
        expiry?: number | undefined;
    } & Record<string, any>)[];
    partitionKey: {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    } & Record<string, any>;
}>>, z.ZodLazy<z.ZodObject<{
    partitionKey: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        userContext: z.ZodOptional<z.ZodString>;
        sourceOrigin: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    }, {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
}, "strip", z.ZodTypeAny, {
    partitionKey: {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    } & Record<string, any>;
}, {
    partitionKey: {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    } & Record<string, any>;
}>>]>>;
export declare namespace Storage {
    const PartitionKeySchema: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        userContext: z.ZodOptional<z.ZodString>;
        sourceOrigin: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    }, {
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
}
export declare namespace Storage {
    const GetCookiesSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"storage.getCookies">;
        params: z.ZodLazy<z.ZodObject<{
            filter: z.ZodOptional<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                value: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>>;
                domain: z.ZodOptional<z.ZodString>;
                path: z.ZodOptional<z.ZodString>;
                size: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                httpOnly: z.ZodOptional<z.ZodBoolean>;
                secure: z.ZodOptional<z.ZodBoolean>;
                sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                value?: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                } | undefined;
                domain?: string | undefined;
                path?: string | undefined;
                size?: number | undefined;
                httpOnly?: boolean | undefined;
                secure?: boolean | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                expiry?: number | undefined;
            }, {
                name?: string | undefined;
                value?: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                } | undefined;
                domain?: string | undefined;
                path?: string | undefined;
                size?: number | undefined;
                httpOnly?: boolean | undefined;
                secure?: boolean | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>>;
            partition: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"context">;
                context: z.ZodLazy<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                type: "context";
                context: string;
            }, {
                type: "context";
                context: string;
            }>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                type: z.ZodLiteral<"storageKey">;
                userContext: z.ZodOptional<z.ZodString>;
                sourceOrigin: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                type: "storageKey";
                userContext?: string | undefined;
                sourceOrigin?: string | undefined;
            }, {
                type: "storageKey";
                userContext?: string | undefined;
                sourceOrigin?: string | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>]>>>;
        }, "strip", z.ZodTypeAny, {
            filter?: ({
                name?: string | undefined;
                value?: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                } | undefined;
                domain?: string | undefined;
                path?: string | undefined;
                size?: number | undefined;
                httpOnly?: boolean | undefined;
                secure?: boolean | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                expiry?: number | undefined;
            } & Record<string, any>) | undefined;
            partition?: {
                type: "context";
                context: string;
            } | ({
                type: "storageKey";
                userContext?: string | undefined;
                sourceOrigin?: string | undefined;
            } & Record<string, any>) | undefined;
        }, {
            filter?: ({
                name?: string | undefined;
                value?: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                } | undefined;
                domain?: string | undefined;
                path?: string | undefined;
                size?: number | undefined;
                httpOnly?: boolean | undefined;
                secure?: boolean | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                expiry?: number | undefined;
            } & Record<string, any>) | undefined;
            partition?: {
                type: "context";
                context: string;
            } | ({
                type: "storageKey";
                userContext?: string | undefined;
                sourceOrigin?: string | undefined;
            } & Record<string, any>) | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            filter?: ({
                name?: string | undefined;
                value?: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                } | undefined;
                domain?: string | undefined;
                path?: string | undefined;
                size?: number | undefined;
                httpOnly?: boolean | undefined;
                secure?: boolean | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                expiry?: number | undefined;
            } & Record<string, any>) | undefined;
            partition?: {
                type: "context";
                context: string;
            } | ({
                type: "storageKey";
                userContext?: string | undefined;
                sourceOrigin?: string | undefined;
            } & Record<string, any>) | undefined;
        };
        method: "storage.getCookies";
    }, {
        params: {
            filter?: ({
                name?: string | undefined;
                value?: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                } | undefined;
                domain?: string | undefined;
                path?: string | undefined;
                size?: number | undefined;
                httpOnly?: boolean | undefined;
                secure?: boolean | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                expiry?: number | undefined;
            } & Record<string, any>) | undefined;
            partition?: {
                type: "context";
                context: string;
            } | ({
                type: "storageKey";
                userContext?: string | undefined;
                sourceOrigin?: string | undefined;
            } & Record<string, any>) | undefined;
        };
        method: "storage.getCookies";
    }>>;
}
export declare namespace Storage {
    const CookieFilterSchema: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        value: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"string">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "string";
            value: string;
        }, {
            type: "string";
            value: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            value: string;
        }, {
            type: "base64";
            value: string;
        }>>]>>>;
        domain: z.ZodOptional<z.ZodString>;
        path: z.ZodOptional<z.ZodString>;
        size: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        httpOnly: z.ZodOptional<z.ZodBoolean>;
        secure: z.ZodOptional<z.ZodBoolean>;
        sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
        expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        value?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        domain?: string | undefined;
        path?: string | undefined;
        size?: number | undefined;
        httpOnly?: boolean | undefined;
        secure?: boolean | undefined;
        sameSite?: "strict" | "none" | "lax" | undefined;
        expiry?: number | undefined;
    }, {
        name?: string | undefined;
        value?: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        } | undefined;
        domain?: string | undefined;
        path?: string | undefined;
        size?: number | undefined;
        httpOnly?: boolean | undefined;
        secure?: boolean | undefined;
        sameSite?: "strict" | "none" | "lax" | undefined;
        expiry?: number | undefined;
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
}
export declare namespace Storage {
    const BrowsingContextPartitionDescriptorSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"context">;
        context: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "context";
        context: string;
    }, {
        type: "context";
        context: string;
    }>>;
}
export declare namespace Storage {
    const StorageKeyPartitionDescriptorSchema: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        type: z.ZodLiteral<"storageKey">;
        userContext: z.ZodOptional<z.ZodString>;
        sourceOrigin: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "storageKey";
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    }, {
        type: "storageKey";
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
}
export declare namespace Storage {
    const PartitionDescriptorSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"context">;
        context: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "context";
        context: string;
    }, {
        type: "context";
        context: string;
    }>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        type: z.ZodLiteral<"storageKey">;
        userContext: z.ZodOptional<z.ZodString>;
        sourceOrigin: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "storageKey";
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    }, {
        type: "storageKey";
        userContext?: string | undefined;
        sourceOrigin?: string | undefined;
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>]>>;
}
export declare namespace Storage {
    const GetCookiesParametersSchema: z.ZodLazy<z.ZodObject<{
        filter: z.ZodOptional<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            value: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>>;
            domain: z.ZodOptional<z.ZodString>;
            path: z.ZodOptional<z.ZodString>;
            size: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            httpOnly: z.ZodOptional<z.ZodBoolean>;
            secure: z.ZodOptional<z.ZodBoolean>;
            sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
            expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        }, {
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>>;
        partition: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"context">;
            context: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "context";
            context: string;
        }, {
            type: "context";
            context: string;
        }>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            type: z.ZodLiteral<"storageKey">;
            userContext: z.ZodOptional<z.ZodString>;
            sourceOrigin: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }, {
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>]>>>;
    }, "strip", z.ZodTypeAny, {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    }, {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    }>>;
}
export declare namespace Storage {
    const GetCookiesResultSchema: z.ZodLazy<z.ZodObject<{
        cookies: z.ZodArray<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
            domain: z.ZodString;
            path: z.ZodString;
            size: z.ZodLazy<z.ZodNumber>;
            httpOnly: z.ZodBoolean;
            secure: z.ZodBoolean;
            sameSite: z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>;
            expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        }, {
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>, "many">;
        partitionKey: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            userContext: z.ZodOptional<z.ZodString>;
            sourceOrigin: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }, {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
    }, "strip", z.ZodTypeAny, {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }, {
        cookies: ({
            path: string;
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            size: number;
            secure: boolean;
            name: string;
            domain: string;
            httpOnly: boolean;
            sameSite: "strict" | "none" | "lax";
            expiry?: number | undefined;
        } & Record<string, any>)[];
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }>>;
}
export declare namespace Storage {
    const SetCookieSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"storage.setCookie">;
        params: z.ZodLazy<z.ZodObject<{
            cookie: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>;
                domain: z.ZodString;
                path: z.ZodOptional<z.ZodString>;
                httpOnly: z.ZodOptional<z.ZodBoolean>;
                secure: z.ZodOptional<z.ZodBoolean>;
                sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
                domain: string;
                path?: string | undefined;
                httpOnly?: boolean | undefined;
                secure?: boolean | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                expiry?: number | undefined;
            }, {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
                domain: string;
                path?: string | undefined;
                httpOnly?: boolean | undefined;
                secure?: boolean | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
            partition: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"context">;
                context: z.ZodLazy<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                type: "context";
                context: string;
            }, {
                type: "context";
                context: string;
            }>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                type: z.ZodLiteral<"storageKey">;
                userContext: z.ZodOptional<z.ZodString>;
                sourceOrigin: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                type: "storageKey";
                userContext?: string | undefined;
                sourceOrigin?: string | undefined;
            }, {
                type: "storageKey";
                userContext?: string | undefined;
                sourceOrigin?: string | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>]>>>;
        }, "strip", z.ZodTypeAny, {
            cookie: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
                domain: string;
                path?: string | undefined;
                httpOnly?: boolean | undefined;
                secure?: boolean | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                expiry?: number | undefined;
            } & Record<string, any>;
            partition?: {
                type: "context";
                context: string;
            } | ({
                type: "storageKey";
                userContext?: string | undefined;
                sourceOrigin?: string | undefined;
            } & Record<string, any>) | undefined;
        }, {
            cookie: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
                domain: string;
                path?: string | undefined;
                httpOnly?: boolean | undefined;
                secure?: boolean | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                expiry?: number | undefined;
            } & Record<string, any>;
            partition?: {
                type: "context";
                context: string;
            } | ({
                type: "storageKey";
                userContext?: string | undefined;
                sourceOrigin?: string | undefined;
            } & Record<string, any>) | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            cookie: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
                domain: string;
                path?: string | undefined;
                httpOnly?: boolean | undefined;
                secure?: boolean | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                expiry?: number | undefined;
            } & Record<string, any>;
            partition?: {
                type: "context";
                context: string;
            } | ({
                type: "storageKey";
                userContext?: string | undefined;
                sourceOrigin?: string | undefined;
            } & Record<string, any>) | undefined;
        };
        method: "storage.setCookie";
    }, {
        params: {
            cookie: {
                value: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                };
                name: string;
                domain: string;
                path?: string | undefined;
                httpOnly?: boolean | undefined;
                secure?: boolean | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                expiry?: number | undefined;
            } & Record<string, any>;
            partition?: {
                type: "context";
                context: string;
            } | ({
                type: "storageKey";
                userContext?: string | undefined;
                sourceOrigin?: string | undefined;
            } & Record<string, any>) | undefined;
        };
        method: "storage.setCookie";
    }>>;
}
export declare namespace Storage {
    const PartialCookieSchema: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"string">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "string";
            value: string;
        }, {
            type: "string";
            value: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            value: string;
        }, {
            type: "base64";
            value: string;
        }>>]>>;
        domain: z.ZodString;
        path: z.ZodOptional<z.ZodString>;
        httpOnly: z.ZodOptional<z.ZodBoolean>;
        secure: z.ZodOptional<z.ZodBoolean>;
        sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
        expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        value: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        };
        name: string;
        domain: string;
        path?: string | undefined;
        httpOnly?: boolean | undefined;
        secure?: boolean | undefined;
        sameSite?: "strict" | "none" | "lax" | undefined;
        expiry?: number | undefined;
    }, {
        value: {
            type: "string";
            value: string;
        } | {
            type: "base64";
            value: string;
        };
        name: string;
        domain: string;
        path?: string | undefined;
        httpOnly?: boolean | undefined;
        secure?: boolean | undefined;
        sameSite?: "strict" | "none" | "lax" | undefined;
        expiry?: number | undefined;
    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
}
export declare namespace Storage {
    const SetCookieParametersSchema: z.ZodLazy<z.ZodObject<{
        cookie: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>;
            domain: z.ZodString;
            path: z.ZodOptional<z.ZodString>;
            httpOnly: z.ZodOptional<z.ZodBoolean>;
            secure: z.ZodOptional<z.ZodBoolean>;
            sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
            expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain: string;
            path?: string | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        }, {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain: string;
            path?: string | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
        partition: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"context">;
            context: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "context";
            context: string;
        }, {
            type: "context";
            context: string;
        }>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            type: z.ZodLiteral<"storageKey">;
            userContext: z.ZodOptional<z.ZodString>;
            sourceOrigin: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }, {
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>]>>>;
    }, "strip", z.ZodTypeAny, {
        cookie: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain: string;
            path?: string | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    }, {
        cookie: {
            value: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            };
            name: string;
            domain: string;
            path?: string | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    }>>;
}
export declare namespace Storage {
    const SetCookieResultSchema: z.ZodLazy<z.ZodObject<{
        partitionKey: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            userContext: z.ZodOptional<z.ZodString>;
            sourceOrigin: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }, {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
    }, "strip", z.ZodTypeAny, {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }, {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }>>;
}
export declare namespace Storage {
    const DeleteCookiesSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"storage.deleteCookies">;
        params: z.ZodLazy<z.ZodObject<{
            filter: z.ZodOptional<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                value: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"string">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string";
                    value: string;
                }, {
                    type: "string";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"base64">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "base64";
                    value: string;
                }, {
                    type: "base64";
                    value: string;
                }>>]>>>;
                domain: z.ZodOptional<z.ZodString>;
                path: z.ZodOptional<z.ZodString>;
                size: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                httpOnly: z.ZodOptional<z.ZodBoolean>;
                secure: z.ZodOptional<z.ZodBoolean>;
                sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
                expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                value?: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                } | undefined;
                domain?: string | undefined;
                path?: string | undefined;
                size?: number | undefined;
                httpOnly?: boolean | undefined;
                secure?: boolean | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                expiry?: number | undefined;
            }, {
                name?: string | undefined;
                value?: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                } | undefined;
                domain?: string | undefined;
                path?: string | undefined;
                size?: number | undefined;
                httpOnly?: boolean | undefined;
                secure?: boolean | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                expiry?: number | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>>;
            partition: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"context">;
                context: z.ZodLazy<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                type: "context";
                context: string;
            }, {
                type: "context";
                context: string;
            }>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                type: z.ZodLiteral<"storageKey">;
                userContext: z.ZodOptional<z.ZodString>;
                sourceOrigin: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                type: "storageKey";
                userContext?: string | undefined;
                sourceOrigin?: string | undefined;
            }, {
                type: "storageKey";
                userContext?: string | undefined;
                sourceOrigin?: string | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>]>>>;
        }, "strip", z.ZodTypeAny, {
            filter?: ({
                name?: string | undefined;
                value?: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                } | undefined;
                domain?: string | undefined;
                path?: string | undefined;
                size?: number | undefined;
                httpOnly?: boolean | undefined;
                secure?: boolean | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                expiry?: number | undefined;
            } & Record<string, any>) | undefined;
            partition?: {
                type: "context";
                context: string;
            } | ({
                type: "storageKey";
                userContext?: string | undefined;
                sourceOrigin?: string | undefined;
            } & Record<string, any>) | undefined;
        }, {
            filter?: ({
                name?: string | undefined;
                value?: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                } | undefined;
                domain?: string | undefined;
                path?: string | undefined;
                size?: number | undefined;
                httpOnly?: boolean | undefined;
                secure?: boolean | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                expiry?: number | undefined;
            } & Record<string, any>) | undefined;
            partition?: {
                type: "context";
                context: string;
            } | ({
                type: "storageKey";
                userContext?: string | undefined;
                sourceOrigin?: string | undefined;
            } & Record<string, any>) | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            filter?: ({
                name?: string | undefined;
                value?: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                } | undefined;
                domain?: string | undefined;
                path?: string | undefined;
                size?: number | undefined;
                httpOnly?: boolean | undefined;
                secure?: boolean | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                expiry?: number | undefined;
            } & Record<string, any>) | undefined;
            partition?: {
                type: "context";
                context: string;
            } | ({
                type: "storageKey";
                userContext?: string | undefined;
                sourceOrigin?: string | undefined;
            } & Record<string, any>) | undefined;
        };
        method: "storage.deleteCookies";
    }, {
        params: {
            filter?: ({
                name?: string | undefined;
                value?: {
                    type: "string";
                    value: string;
                } | {
                    type: "base64";
                    value: string;
                } | undefined;
                domain?: string | undefined;
                path?: string | undefined;
                size?: number | undefined;
                httpOnly?: boolean | undefined;
                secure?: boolean | undefined;
                sameSite?: "strict" | "none" | "lax" | undefined;
                expiry?: number | undefined;
            } & Record<string, any>) | undefined;
            partition?: {
                type: "context";
                context: string;
            } | ({
                type: "storageKey";
                userContext?: string | undefined;
                sourceOrigin?: string | undefined;
            } & Record<string, any>) | undefined;
        };
        method: "storage.deleteCookies";
    }>>;
}
export declare namespace Storage {
    const DeleteCookiesParametersSchema: z.ZodLazy<z.ZodObject<{
        filter: z.ZodOptional<z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            value: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"string">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string";
                value: string;
            }, {
                type: "string";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                value: string;
            }, {
                type: "base64";
                value: string;
            }>>]>>>;
            domain: z.ZodOptional<z.ZodString>;
            path: z.ZodOptional<z.ZodString>;
            size: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            httpOnly: z.ZodOptional<z.ZodBoolean>;
            secure: z.ZodOptional<z.ZodBoolean>;
            sameSite: z.ZodOptional<z.ZodLazy<z.ZodEnum<["strict", "lax", "none"]>>>;
            expiry: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        }, {
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>>;
        partition: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"context">;
            context: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "context";
            context: string;
        }, {
            type: "context";
            context: string;
        }>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            type: z.ZodLiteral<"storageKey">;
            userContext: z.ZodOptional<z.ZodString>;
            sourceOrigin: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }, {
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>]>>>;
    }, "strip", z.ZodTypeAny, {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    }, {
        filter?: ({
            name?: string | undefined;
            value?: {
                type: "string";
                value: string;
            } | {
                type: "base64";
                value: string;
            } | undefined;
            domain?: string | undefined;
            path?: string | undefined;
            size?: number | undefined;
            httpOnly?: boolean | undefined;
            secure?: boolean | undefined;
            sameSite?: "strict" | "none" | "lax" | undefined;
            expiry?: number | undefined;
        } & Record<string, any>) | undefined;
        partition?: {
            type: "context";
            context: string;
        } | ({
            type: "storageKey";
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>) | undefined;
    }>>;
}
export declare namespace Storage {
    const DeleteCookiesResultSchema: z.ZodLazy<z.ZodObject<{
        partitionKey: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            userContext: z.ZodOptional<z.ZodString>;
            sourceOrigin: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }, {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
    }, "strip", z.ZodTypeAny, {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }, {
        partitionKey: {
            userContext?: string | undefined;
            sourceOrigin?: string | undefined;
        } & Record<string, any>;
    }>>;
}
export declare const LogEventSchema: z.ZodLazy<z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"log.entryAdded">;
    params: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        level: z.ZodLazy<z.ZodEnum<["debug", "info", "warn", "error"]>>;
        source: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            context?: string | undefined;
        }, {
            realm: string;
            context?: string | undefined;
        }>>;
        text: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                columnNumber: z.ZodLazy<z.ZodNumber>;
                functionName: z.ZodString;
                lineNumber: z.ZodLazy<z.ZodNumber>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }>>, "many">;
        }, "strip", z.ZodTypeAny, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }>>>;
    }, "strip", z.ZodTypeAny, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }>>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        level: z.ZodLazy<z.ZodEnum<["debug", "info", "warn", "error"]>>;
        source: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            context?: string | undefined;
        }, {
            realm: string;
            context?: string | undefined;
        }>>;
        text: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                columnNumber: z.ZodLazy<z.ZodNumber>;
                functionName: z.ZodString;
                lineNumber: z.ZodLazy<z.ZodNumber>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }>>, "many">;
        }, "strip", z.ZodTypeAny, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }>>>;
    }, "strip", z.ZodTypeAny, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"console">;
        method: z.ZodString;
        args: z.ZodArray<any, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "console";
        args: any[];
        method: string;
    }, {
        type: "console";
        args: any[];
        method: string;
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        level: z.ZodLazy<z.ZodEnum<["debug", "info", "warn", "error"]>>;
        source: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            context?: string | undefined;
        }, {
            realm: string;
            context?: string | undefined;
        }>>;
        text: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                columnNumber: z.ZodLazy<z.ZodNumber>;
                functionName: z.ZodString;
                lineNumber: z.ZodLazy<z.ZodNumber>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }>>, "many">;
        }, "strip", z.ZodTypeAny, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }>>>;
    }, "strip", z.ZodTypeAny, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"javascript">;
    }, "strip", z.ZodTypeAny, {
        type: "javascript";
    }, {
        type: "javascript";
    }>>>]>>;
}, "strip", z.ZodTypeAny, {
    params: ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "console";
        args: any[];
        method: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "javascript";
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: string;
    } & {
        type: "console";
        args: any[];
        method: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: string;
    } & {
        type: "javascript";
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "console";
        args: any[];
        method: string;
    } & {
        type: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "javascript";
    } & {
        type: string;
    });
    method: "log.entryAdded";
}, {
    params: ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "console";
        args: any[];
        method: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "javascript";
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: string;
    } & {
        type: "console";
        args: any[];
        method: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: string;
    } & {
        type: "javascript";
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "console";
        args: any[];
        method: string;
    } & {
        type: string;
    }) | ({
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    } & {
        type: "javascript";
    } & {
        type: string;
    });
    method: "log.entryAdded";
}>>>;
export declare namespace Log {
    const LevelSchema: z.ZodLazy<z.ZodEnum<["debug", "info", "warn", "error"]>>;
}
export declare namespace Log {
    const EntrySchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        level: z.ZodLazy<z.ZodEnum<["debug", "info", "warn", "error"]>>;
        source: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            context?: string | undefined;
        }, {
            realm: string;
            context?: string | undefined;
        }>>;
        text: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                columnNumber: z.ZodLazy<z.ZodNumber>;
                functionName: z.ZodString;
                lineNumber: z.ZodLazy<z.ZodNumber>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }>>, "many">;
        }, "strip", z.ZodTypeAny, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }>>>;
    }, "strip", z.ZodTypeAny, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }>>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        level: z.ZodLazy<z.ZodEnum<["debug", "info", "warn", "error"]>>;
        source: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            context?: string | undefined;
        }, {
            realm: string;
            context?: string | undefined;
        }>>;
        text: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                columnNumber: z.ZodLazy<z.ZodNumber>;
                functionName: z.ZodString;
                lineNumber: z.ZodLazy<z.ZodNumber>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }>>, "many">;
        }, "strip", z.ZodTypeAny, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }>>>;
    }, "strip", z.ZodTypeAny, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"console">;
        method: z.ZodString;
        args: z.ZodArray<any, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "console";
        args: any[];
        method: string;
    }, {
        type: "console";
        args: any[];
        method: string;
    }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        level: z.ZodLazy<z.ZodEnum<["debug", "info", "warn", "error"]>>;
        source: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            context?: string | undefined;
        }, {
            realm: string;
            context?: string | undefined;
        }>>;
        text: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                columnNumber: z.ZodLazy<z.ZodNumber>;
                functionName: z.ZodString;
                lineNumber: z.ZodLazy<z.ZodNumber>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }>>, "many">;
        }, "strip", z.ZodTypeAny, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }>>>;
    }, "strip", z.ZodTypeAny, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"javascript">;
    }, "strip", z.ZodTypeAny, {
        type: "javascript";
    }, {
        type: "javascript";
    }>>>]>>;
}
export declare namespace Log {
    const BaseLogEntrySchema: z.ZodLazy<z.ZodObject<{
        level: z.ZodLazy<z.ZodEnum<["debug", "info", "warn", "error"]>>;
        source: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            context?: string | undefined;
        }, {
            realm: string;
            context?: string | undefined;
        }>>;
        text: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                columnNumber: z.ZodLazy<z.ZodNumber>;
                functionName: z.ZodString;
                lineNumber: z.ZodLazy<z.ZodNumber>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }>>, "many">;
        }, "strip", z.ZodTypeAny, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }>>>;
    }, "strip", z.ZodTypeAny, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }>>;
}
export declare namespace Log {
    const GenericLogEntrySchema: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        level: z.ZodLazy<z.ZodEnum<["debug", "info", "warn", "error"]>>;
        source: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            context?: string | undefined;
        }, {
            realm: string;
            context?: string | undefined;
        }>>;
        text: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                columnNumber: z.ZodLazy<z.ZodNumber>;
                functionName: z.ZodString;
                lineNumber: z.ZodLazy<z.ZodNumber>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }>>, "many">;
        }, "strip", z.ZodTypeAny, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }>>>;
    }, "strip", z.ZodTypeAny, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }>>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>>>;
}
export declare namespace Log {
    const ConsoleLogEntrySchema: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        level: z.ZodLazy<z.ZodEnum<["debug", "info", "warn", "error"]>>;
        source: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            context?: string | undefined;
        }, {
            realm: string;
            context?: string | undefined;
        }>>;
        text: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                columnNumber: z.ZodLazy<z.ZodNumber>;
                functionName: z.ZodString;
                lineNumber: z.ZodLazy<z.ZodNumber>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }>>, "many">;
        }, "strip", z.ZodTypeAny, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }>>>;
    }, "strip", z.ZodTypeAny, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"console">;
        method: z.ZodString;
        args: z.ZodArray<any, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "console";
        args: any[];
        method: string;
    }, {
        type: "console";
        args: any[];
        method: string;
    }>>>;
}
export declare namespace Log {
    const JavascriptLogEntrySchema: z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
        level: z.ZodLazy<z.ZodEnum<["debug", "info", "warn", "error"]>>;
        source: z.ZodLazy<z.ZodObject<{
            realm: z.ZodLazy<z.ZodString>;
            context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            realm: string;
            context?: string | undefined;
        }, {
            realm: string;
            context?: string | undefined;
        }>>;
        text: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        timestamp: z.ZodLazy<z.ZodNumber>;
        stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                columnNumber: z.ZodLazy<z.ZodNumber>;
                functionName: z.ZodString;
                lineNumber: z.ZodLazy<z.ZodNumber>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }, {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }>>, "many">;
        }, "strip", z.ZodTypeAny, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }, {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        }>>>;
    }, "strip", z.ZodTypeAny, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }, {
        level: "error" | "debug" | "info" | "warn";
        source: {
            realm: string;
            context?: string | undefined;
        };
        text: string | null;
        timestamp: number;
        stackTrace?: {
            callFrames: {
                url: string;
                columnNumber: number;
                lineNumber: number;
                functionName: string;
            }[];
        } | undefined;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"javascript">;
    }, "strip", z.ZodTypeAny, {
        type: "javascript";
    }, {
        type: "javascript";
    }>>>;
}
export declare namespace Log {
    const EntryAddedSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"log.entryAdded">;
        params: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            level: z.ZodLazy<z.ZodEnum<["debug", "info", "warn", "error"]>>;
            source: z.ZodLazy<z.ZodObject<{
                realm: z.ZodLazy<z.ZodString>;
                context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                realm: string;
                context?: string | undefined;
            }, {
                realm: string;
                context?: string | undefined;
            }>>;
            text: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            timestamp: z.ZodLazy<z.ZodNumber>;
            stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                    columnNumber: z.ZodLazy<z.ZodNumber>;
                    functionName: z.ZodString;
                    lineNumber: z.ZodLazy<z.ZodNumber>;
                    url: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }, {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }>>, "many">;
            }, "strip", z.ZodTypeAny, {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            }, {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            }>>>;
        }, "strip", z.ZodTypeAny, {
            level: "error" | "debug" | "info" | "warn";
            source: {
                realm: string;
                context?: string | undefined;
            };
            text: string | null;
            timestamp: number;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
        }, {
            level: "error" | "debug" | "info" | "warn";
            source: {
                realm: string;
                context?: string | undefined;
            };
            text: string | null;
            timestamp: number;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
        }>>, z.ZodObject<{
            type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
        }, {
            type: string;
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            level: z.ZodLazy<z.ZodEnum<["debug", "info", "warn", "error"]>>;
            source: z.ZodLazy<z.ZodObject<{
                realm: z.ZodLazy<z.ZodString>;
                context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                realm: string;
                context?: string | undefined;
            }, {
                realm: string;
                context?: string | undefined;
            }>>;
            text: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            timestamp: z.ZodLazy<z.ZodNumber>;
            stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                    columnNumber: z.ZodLazy<z.ZodNumber>;
                    functionName: z.ZodString;
                    lineNumber: z.ZodLazy<z.ZodNumber>;
                    url: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }, {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }>>, "many">;
            }, "strip", z.ZodTypeAny, {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            }, {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            }>>>;
        }, "strip", z.ZodTypeAny, {
            level: "error" | "debug" | "info" | "warn";
            source: {
                realm: string;
                context?: string | undefined;
            };
            text: string | null;
            timestamp: number;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
        }, {
            level: "error" | "debug" | "info" | "warn";
            source: {
                realm: string;
                context?: string | undefined;
            };
            text: string | null;
            timestamp: number;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"console">;
            method: z.ZodString;
            args: z.ZodArray<any, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "console";
            args: any[];
            method: string;
        }, {
            type: "console";
            args: any[];
            method: string;
        }>>>, z.ZodLazy<z.ZodIntersection<z.ZodLazy<z.ZodObject<{
            level: z.ZodLazy<z.ZodEnum<["debug", "info", "warn", "error"]>>;
            source: z.ZodLazy<z.ZodObject<{
                realm: z.ZodLazy<z.ZodString>;
                context: z.ZodOptional<z.ZodLazy<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                realm: string;
                context?: string | undefined;
            }, {
                realm: string;
                context?: string | undefined;
            }>>;
            text: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            timestamp: z.ZodLazy<z.ZodNumber>;
            stackTrace: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                callFrames: z.ZodArray<z.ZodLazy<z.ZodObject<{
                    columnNumber: z.ZodLazy<z.ZodNumber>;
                    functionName: z.ZodString;
                    lineNumber: z.ZodLazy<z.ZodNumber>;
                    url: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }, {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }>>, "many">;
            }, "strip", z.ZodTypeAny, {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            }, {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            }>>>;
        }, "strip", z.ZodTypeAny, {
            level: "error" | "debug" | "info" | "warn";
            source: {
                realm: string;
                context?: string | undefined;
            };
            text: string | null;
            timestamp: number;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
        }, {
            level: "error" | "debug" | "info" | "warn";
            source: {
                realm: string;
                context?: string | undefined;
            };
            text: string | null;
            timestamp: number;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"javascript">;
        }, "strip", z.ZodTypeAny, {
            type: "javascript";
        }, {
            type: "javascript";
        }>>>]>>;
    }, "strip", z.ZodTypeAny, {
        params: ({
            level: "error" | "debug" | "info" | "warn";
            source: {
                realm: string;
                context?: string | undefined;
            };
            text: string | null;
            timestamp: number;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
        } & {
            type: string;
        }) | ({
            level: "error" | "debug" | "info" | "warn";
            source: {
                realm: string;
                context?: string | undefined;
            };
            text: string | null;
            timestamp: number;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
        } & {
            type: "console";
            args: any[];
            method: string;
        }) | ({
            level: "error" | "debug" | "info" | "warn";
            source: {
                realm: string;
                context?: string | undefined;
            };
            text: string | null;
            timestamp: number;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
        } & {
            type: "javascript";
        }) | ({
            level: "error" | "debug" | "info" | "warn";
            source: {
                realm: string;
                context?: string | undefined;
            };
            text: string | null;
            timestamp: number;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
        } & {
            type: string;
        } & {
            type: "console";
            args: any[];
            method: string;
        }) | ({
            level: "error" | "debug" | "info" | "warn";
            source: {
                realm: string;
                context?: string | undefined;
            };
            text: string | null;
            timestamp: number;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
        } & {
            type: string;
        } & {
            type: "javascript";
        }) | ({
            level: "error" | "debug" | "info" | "warn";
            source: {
                realm: string;
                context?: string | undefined;
            };
            text: string | null;
            timestamp: number;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
        } & {
            type: "console";
            args: any[];
            method: string;
        } & {
            type: string;
        }) | ({
            level: "error" | "debug" | "info" | "warn";
            source: {
                realm: string;
                context?: string | undefined;
            };
            text: string | null;
            timestamp: number;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
        } & {
            type: "javascript";
        } & {
            type: string;
        });
        method: "log.entryAdded";
    }, {
        params: ({
            level: "error" | "debug" | "info" | "warn";
            source: {
                realm: string;
                context?: string | undefined;
            };
            text: string | null;
            timestamp: number;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
        } & {
            type: string;
        }) | ({
            level: "error" | "debug" | "info" | "warn";
            source: {
                realm: string;
                context?: string | undefined;
            };
            text: string | null;
            timestamp: number;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
        } & {
            type: "console";
            args: any[];
            method: string;
        }) | ({
            level: "error" | "debug" | "info" | "warn";
            source: {
                realm: string;
                context?: string | undefined;
            };
            text: string | null;
            timestamp: number;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
        } & {
            type: "javascript";
        }) | ({
            level: "error" | "debug" | "info" | "warn";
            source: {
                realm: string;
                context?: string | undefined;
            };
            text: string | null;
            timestamp: number;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
        } & {
            type: string;
        } & {
            type: "console";
            args: any[];
            method: string;
        }) | ({
            level: "error" | "debug" | "info" | "warn";
            source: {
                realm: string;
                context?: string | undefined;
            };
            text: string | null;
            timestamp: number;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
        } & {
            type: string;
        } & {
            type: "javascript";
        }) | ({
            level: "error" | "debug" | "info" | "warn";
            source: {
                realm: string;
                context?: string | undefined;
            };
            text: string | null;
            timestamp: number;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
        } & {
            type: "console";
            args: any[];
            method: string;
        } & {
            type: string;
        }) | ({
            level: "error" | "debug" | "info" | "warn";
            source: {
                realm: string;
                context?: string | undefined;
            };
            text: string | null;
            timestamp: number;
            stackTrace?: {
                callFrames: {
                    url: string;
                    columnNumber: number;
                    lineNumber: number;
                    functionName: string;
                }[];
            } | undefined;
        } & {
            type: "javascript";
        } & {
            type: string;
        });
        method: "log.entryAdded";
    }>>;
}
export declare const InputCommandSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"input.performActions">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"none">;
            id: z.ZodString;
            actions: z.ZodArray<z.ZodLazy<z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"pause">;
                duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                type: "pause";
                duration?: number | undefined;
            }, {
                type: "pause";
                duration?: number | undefined;
            }>>>, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "none";
            actions: {
                type: "pause";
                duration?: number | undefined;
            }[];
            id: string;
        }, {
            type: "none";
            actions: {
                type: "pause";
                duration?: number | undefined;
            }[];
            id: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"key">;
            id: z.ZodString;
            actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"pause">;
                duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                type: "pause";
                duration?: number | undefined;
            }, {
                type: "pause";
                duration?: number | undefined;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"keyDown">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "keyDown";
                value: string;
            }, {
                type: "keyDown";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"keyUp">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "keyUp";
                value: string;
            }, {
                type: "keyUp";
                value: string;
            }>>]>>, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "key";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "keyDown";
                value: string;
            } | {
                type: "keyUp";
                value: string;
            })[];
            id: string;
        }, {
            type: "key";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "keyDown";
                value: string;
            } | {
                type: "keyUp";
                value: string;
            })[];
            id: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"pointer">;
            id: z.ZodString;
            parameters: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                pointerType: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodEnum<["mouse", "pen", "touch"]>>>>;
            }, "strip", z.ZodTypeAny, {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            }, {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            }>>>;
            actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"pause">;
                duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                type: "pause";
                duration?: number | undefined;
            }, {
                type: "pause";
                duration?: number | undefined;
            }>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                type: z.ZodLiteral<"pointerDown">;
                button: z.ZodLazy<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: "pointerDown";
                button: number;
            }, {
                type: "pointerDown";
                button: number;
            }>, z.ZodLazy<z.ZodObject<{
                width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }, {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                type: z.ZodLiteral<"pointerUp">;
                button: z.ZodLazy<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: "pointerUp";
                button: number;
            }, {
                type: "pointerUp";
                button: number;
            }>, z.ZodLazy<z.ZodObject<{
                width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }, {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                type: z.ZodLiteral<"pointerMove">;
                x: z.ZodLazy<z.ZodNumber>;
                y: z.ZodLazy<z.ZodNumber>;
                duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                origin: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLiteral<"viewport">, z.ZodLiteral<"pointer">, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"element">;
                    element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                        sharedId: z.ZodLazy<z.ZodString>;
                        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
                    }, "strip", z.ZodTypeAny, {
                        sharedId: string;
                        handle?: string | undefined;
                    }, {
                        sharedId: string;
                        handle?: string | undefined;
                    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                }, {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                }>>]>>>;
            }, "strip", z.ZodTypeAny, {
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            }, {
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            }>, z.ZodLazy<z.ZodObject<{
                width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }, {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }>>>>]>>, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "pointer";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | ({
                type: "pointerDown";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerUp";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }))[];
            id: string;
            parameters?: {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            } | undefined;
        }, {
            type: "pointer";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | ({
                type: "pointerDown";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerUp";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }))[];
            id: string;
            parameters?: {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            } | undefined;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"wheel">;
            id: z.ZodString;
            actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"pause">;
                duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                type: "pause";
                duration?: number | undefined;
            }, {
                type: "pause";
                duration?: number | undefined;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"scroll">;
                x: z.ZodLazy<z.ZodNumber>;
                y: z.ZodLazy<z.ZodNumber>;
                deltaX: z.ZodLazy<z.ZodNumber>;
                deltaY: z.ZodLazy<z.ZodNumber>;
                duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                origin: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodUnion<[z.ZodLiteral<"viewport">, z.ZodLiteral<"pointer">, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"element">;
                    element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                        sharedId: z.ZodLazy<z.ZodString>;
                        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
                    }, "strip", z.ZodTypeAny, {
                        sharedId: string;
                        handle?: string | undefined;
                    }, {
                        sharedId: string;
                        handle?: string | undefined;
                    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                }, {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                }>>]>>>>;
            }, "strip", z.ZodTypeAny, {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            }, {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            }>>]>>, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "wheel";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            })[];
            id: string;
        }, {
            type: "wheel";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            })[];
            id: string;
        }>>]>>, "many">;
    }, "strip", z.ZodTypeAny, {
        context: string;
        actions: ({
            type: "none";
            actions: {
                type: "pause";
                duration?: number | undefined;
            }[];
            id: string;
        } | {
            type: "key";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "keyDown";
                value: string;
            } | {
                type: "keyUp";
                value: string;
            })[];
            id: string;
        } | {
            type: "pointer";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | ({
                type: "pointerDown";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerUp";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }))[];
            id: string;
            parameters?: {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            } | undefined;
        } | {
            type: "wheel";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            })[];
            id: string;
        })[];
    }, {
        context: string;
        actions: ({
            type: "none";
            actions: {
                type: "pause";
                duration?: number | undefined;
            }[];
            id: string;
        } | {
            type: "key";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "keyDown";
                value: string;
            } | {
                type: "keyUp";
                value: string;
            })[];
            id: string;
        } | {
            type: "pointer";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | ({
                type: "pointerDown";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerUp";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }))[];
            id: string;
            parameters?: {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            } | undefined;
        } | {
            type: "wheel";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            })[];
            id: string;
        })[];
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
        actions: ({
            type: "none";
            actions: {
                type: "pause";
                duration?: number | undefined;
            }[];
            id: string;
        } | {
            type: "key";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "keyDown";
                value: string;
            } | {
                type: "keyUp";
                value: string;
            })[];
            id: string;
        } | {
            type: "pointer";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | ({
                type: "pointerDown";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerUp";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }))[];
            id: string;
            parameters?: {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            } | undefined;
        } | {
            type: "wheel";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            })[];
            id: string;
        })[];
    };
    method: "input.performActions";
}, {
    params: {
        context: string;
        actions: ({
            type: "none";
            actions: {
                type: "pause";
                duration?: number | undefined;
            }[];
            id: string;
        } | {
            type: "key";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "keyDown";
                value: string;
            } | {
                type: "keyUp";
                value: string;
            })[];
            id: string;
        } | {
            type: "pointer";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | ({
                type: "pointerDown";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerUp";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }))[];
            id: string;
            parameters?: {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            } | undefined;
        } | {
            type: "wheel";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            })[];
            id: string;
        })[];
    };
    method: "input.performActions";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"input.releaseActions">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        context: string;
    }, {
        context: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        context: string;
    };
    method: "input.releaseActions";
}, {
    params: {
        context: string;
    };
    method: "input.releaseActions";
}>>, z.ZodLazy<z.ZodObject<{
    method: z.ZodLiteral<"input.setFiles">;
    params: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            sharedId: z.ZodLazy<z.ZodString>;
            handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            sharedId: string;
            handle?: string | undefined;
        }, {
            sharedId: string;
            handle?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
        files: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        element: {
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>;
        context: string;
        files: string[];
    }, {
        element: {
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>;
        context: string;
        files: string[];
    }>>;
}, "strip", z.ZodTypeAny, {
    params: {
        element: {
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>;
        context: string;
        files: string[];
    };
    method: "input.setFiles";
}, {
    params: {
        element: {
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>;
        context: string;
        files: string[];
    };
    method: "input.setFiles";
}>>]>>;
export declare namespace Input {
    const ElementOriginSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"element">;
        element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            sharedId: z.ZodLazy<z.ZodString>;
            handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            sharedId: string;
            handle?: string | undefined;
        }, {
            sharedId: string;
            handle?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
    }, "strip", z.ZodTypeAny, {
        type: "element";
        element: {
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>;
    }, {
        type: "element";
        element: {
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>;
    }>>;
}
export declare namespace Input {
    const PerformActionsParametersSchema: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"none">;
            id: z.ZodString;
            actions: z.ZodArray<z.ZodLazy<z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"pause">;
                duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                type: "pause";
                duration?: number | undefined;
            }, {
                type: "pause";
                duration?: number | undefined;
            }>>>, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "none";
            actions: {
                type: "pause";
                duration?: number | undefined;
            }[];
            id: string;
        }, {
            type: "none";
            actions: {
                type: "pause";
                duration?: number | undefined;
            }[];
            id: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"key">;
            id: z.ZodString;
            actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"pause">;
                duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                type: "pause";
                duration?: number | undefined;
            }, {
                type: "pause";
                duration?: number | undefined;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"keyDown">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "keyDown";
                value: string;
            }, {
                type: "keyDown";
                value: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"keyUp">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "keyUp";
                value: string;
            }, {
                type: "keyUp";
                value: string;
            }>>]>>, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "key";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "keyDown";
                value: string;
            } | {
                type: "keyUp";
                value: string;
            })[];
            id: string;
        }, {
            type: "key";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "keyDown";
                value: string;
            } | {
                type: "keyUp";
                value: string;
            })[];
            id: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"pointer">;
            id: z.ZodString;
            parameters: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                pointerType: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodEnum<["mouse", "pen", "touch"]>>>>;
            }, "strip", z.ZodTypeAny, {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            }, {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            }>>>;
            actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"pause">;
                duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                type: "pause";
                duration?: number | undefined;
            }, {
                type: "pause";
                duration?: number | undefined;
            }>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                type: z.ZodLiteral<"pointerDown">;
                button: z.ZodLazy<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: "pointerDown";
                button: number;
            }, {
                type: "pointerDown";
                button: number;
            }>, z.ZodLazy<z.ZodObject<{
                width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }, {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                type: z.ZodLiteral<"pointerUp">;
                button: z.ZodLazy<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: "pointerUp";
                button: number;
            }, {
                type: "pointerUp";
                button: number;
            }>, z.ZodLazy<z.ZodObject<{
                width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }, {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                type: z.ZodLiteral<"pointerMove">;
                x: z.ZodLazy<z.ZodNumber>;
                y: z.ZodLazy<z.ZodNumber>;
                duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                origin: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLiteral<"viewport">, z.ZodLiteral<"pointer">, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"element">;
                    element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                        sharedId: z.ZodLazy<z.ZodString>;
                        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
                    }, "strip", z.ZodTypeAny, {
                        sharedId: string;
                        handle?: string | undefined;
                    }, {
                        sharedId: string;
                        handle?: string | undefined;
                    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                }, {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                }>>]>>>;
            }, "strip", z.ZodTypeAny, {
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            }, {
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            }>, z.ZodLazy<z.ZodObject<{
                width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }, {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }>>>>]>>, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "pointer";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | ({
                type: "pointerDown";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerUp";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }))[];
            id: string;
            parameters?: {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            } | undefined;
        }, {
            type: "pointer";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | ({
                type: "pointerDown";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerUp";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }))[];
            id: string;
            parameters?: {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            } | undefined;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"wheel">;
            id: z.ZodString;
            actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"pause">;
                duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                type: "pause";
                duration?: number | undefined;
            }, {
                type: "pause";
                duration?: number | undefined;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"scroll">;
                x: z.ZodLazy<z.ZodNumber>;
                y: z.ZodLazy<z.ZodNumber>;
                deltaX: z.ZodLazy<z.ZodNumber>;
                deltaY: z.ZodLazy<z.ZodNumber>;
                duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                origin: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodUnion<[z.ZodLiteral<"viewport">, z.ZodLiteral<"pointer">, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"element">;
                    element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                        sharedId: z.ZodLazy<z.ZodString>;
                        handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
                    }, "strip", z.ZodTypeAny, {
                        sharedId: string;
                        handle?: string | undefined;
                    }, {
                        sharedId: string;
                        handle?: string | undefined;
                    }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                }, {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                }>>]>>>>;
            }, "strip", z.ZodTypeAny, {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            }, {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            }>>]>>, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "wheel";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            })[];
            id: string;
        }, {
            type: "wheel";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            })[];
            id: string;
        }>>]>>, "many">;
    }, "strip", z.ZodTypeAny, {
        context: string;
        actions: ({
            type: "none";
            actions: {
                type: "pause";
                duration?: number | undefined;
            }[];
            id: string;
        } | {
            type: "key";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "keyDown";
                value: string;
            } | {
                type: "keyUp";
                value: string;
            })[];
            id: string;
        } | {
            type: "pointer";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | ({
                type: "pointerDown";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerUp";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }))[];
            id: string;
            parameters?: {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            } | undefined;
        } | {
            type: "wheel";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            })[];
            id: string;
        })[];
    }, {
        context: string;
        actions: ({
            type: "none";
            actions: {
                type: "pause";
                duration?: number | undefined;
            }[];
            id: string;
        } | {
            type: "key";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "keyDown";
                value: string;
            } | {
                type: "keyUp";
                value: string;
            })[];
            id: string;
        } | {
            type: "pointer";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | ({
                type: "pointerDown";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerUp";
                button: number;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }) | ({
                type: "pointerMove";
                x: number;
                y: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            } & {
                width?: number | undefined;
                height?: number | undefined;
                pressure?: number | undefined;
                tangentialPressure?: number | undefined;
                twist?: number | undefined;
                altitudeAngle?: number | undefined;
                azimuthAngle?: number | undefined;
            }))[];
            id: string;
            parameters?: {
                pointerType?: "touch" | "mouse" | "pen" | undefined;
            } | undefined;
        } | {
            type: "wheel";
            actions: ({
                type: "pause";
                duration?: number | undefined;
            } | {
                type: "scroll";
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
                duration?: number | undefined;
                origin?: "viewport" | "pointer" | {
                    type: "element";
                    element: {
                        sharedId: string;
                        handle?: string | undefined;
                    } & Record<string, any>;
                } | undefined;
            })[];
            id: string;
        })[];
    }>>;
}
export declare namespace Input {
    const NoneSourceActionsSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"none">;
        id: z.ZodString;
        actions: z.ZodArray<z.ZodLazy<z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"pause">;
            duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            type: "pause";
            duration?: number | undefined;
        }, {
            type: "pause";
            duration?: number | undefined;
        }>>>, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "none";
        actions: {
            type: "pause";
            duration?: number | undefined;
        }[];
        id: string;
    }, {
        type: "none";
        actions: {
            type: "pause";
            duration?: number | undefined;
        }[];
        id: string;
    }>>;
}
export declare namespace Input {
    const KeySourceActionsSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"key">;
        id: z.ZodString;
        actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"pause">;
            duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            type: "pause";
            duration?: number | undefined;
        }, {
            type: "pause";
            duration?: number | undefined;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"keyDown">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "keyDown";
            value: string;
        }, {
            type: "keyDown";
            value: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"keyUp">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "keyUp";
            value: string;
        }, {
            type: "keyUp";
            value: string;
        }>>]>>, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "key";
        actions: ({
            type: "pause";
            duration?: number | undefined;
        } | {
            type: "keyDown";
            value: string;
        } | {
            type: "keyUp";
            value: string;
        })[];
        id: string;
    }, {
        type: "key";
        actions: ({
            type: "pause";
            duration?: number | undefined;
        } | {
            type: "keyDown";
            value: string;
        } | {
            type: "keyUp";
            value: string;
        })[];
        id: string;
    }>>;
}
export declare namespace Input {
    const PointerSourceActionsSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"pointer">;
        id: z.ZodString;
        parameters: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            pointerType: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodEnum<["mouse", "pen", "touch"]>>>>;
        }, "strip", z.ZodTypeAny, {
            pointerType?: "touch" | "mouse" | "pen" | undefined;
        }, {
            pointerType?: "touch" | "mouse" | "pen" | undefined;
        }>>>;
        actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"pause">;
            duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            type: "pause";
            duration?: number | undefined;
        }, {
            type: "pause";
            duration?: number | undefined;
        }>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            type: z.ZodLiteral<"pointerDown">;
            button: z.ZodLazy<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "pointerDown";
            button: number;
        }, {
            type: "pointerDown";
            button: number;
        }>, z.ZodLazy<z.ZodObject<{
            width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
            height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
            pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            width?: number | undefined;
            height?: number | undefined;
            pressure?: number | undefined;
            tangentialPressure?: number | undefined;
            twist?: number | undefined;
            altitudeAngle?: number | undefined;
            azimuthAngle?: number | undefined;
        }, {
            width?: number | undefined;
            height?: number | undefined;
            pressure?: number | undefined;
            tangentialPressure?: number | undefined;
            twist?: number | undefined;
            altitudeAngle?: number | undefined;
            azimuthAngle?: number | undefined;
        }>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            type: z.ZodLiteral<"pointerUp">;
            button: z.ZodLazy<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "pointerUp";
            button: number;
        }, {
            type: "pointerUp";
            button: number;
        }>, z.ZodLazy<z.ZodObject<{
            width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
            height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
            pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            width?: number | undefined;
            height?: number | undefined;
            pressure?: number | undefined;
            tangentialPressure?: number | undefined;
            twist?: number | undefined;
            altitudeAngle?: number | undefined;
            azimuthAngle?: number | undefined;
        }, {
            width?: number | undefined;
            height?: number | undefined;
            pressure?: number | undefined;
            tangentialPressure?: number | undefined;
            twist?: number | undefined;
            altitudeAngle?: number | undefined;
            azimuthAngle?: number | undefined;
        }>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            type: z.ZodLiteral<"pointerMove">;
            x: z.ZodLazy<z.ZodNumber>;
            y: z.ZodLazy<z.ZodNumber>;
            duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            origin: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLiteral<"viewport">, z.ZodLiteral<"pointer">, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"element">;
                element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    sharedId: z.ZodLazy<z.ZodString>;
                    handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
                }, "strip", z.ZodTypeAny, {
                    sharedId: string;
                    handle?: string | undefined;
                }, {
                    sharedId: string;
                    handle?: string | undefined;
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
            }, "strip", z.ZodTypeAny, {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            }, {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            }>>]>>>;
        }, "strip", z.ZodTypeAny, {
            type: "pointerMove";
            x: number;
            y: number;
            duration?: number | undefined;
            origin?: "viewport" | "pointer" | {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            } | undefined;
        }, {
            type: "pointerMove";
            x: number;
            y: number;
            duration?: number | undefined;
            origin?: "viewport" | "pointer" | {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            } | undefined;
        }>, z.ZodLazy<z.ZodObject<{
            width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
            height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
            pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            width?: number | undefined;
            height?: number | undefined;
            pressure?: number | undefined;
            tangentialPressure?: number | undefined;
            twist?: number | undefined;
            altitudeAngle?: number | undefined;
            azimuthAngle?: number | undefined;
        }, {
            width?: number | undefined;
            height?: number | undefined;
            pressure?: number | undefined;
            tangentialPressure?: number | undefined;
            twist?: number | undefined;
            altitudeAngle?: number | undefined;
            azimuthAngle?: number | undefined;
        }>>>>]>>, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "pointer";
        actions: ({
            type: "pause";
            duration?: number | undefined;
        } | ({
            type: "pointerDown";
            button: number;
        } & {
            width?: number | undefined;
            height?: number | undefined;
            pressure?: number | undefined;
            tangentialPressure?: number | undefined;
            twist?: number | undefined;
            altitudeAngle?: number | undefined;
            azimuthAngle?: number | undefined;
        }) | ({
            type: "pointerUp";
            button: number;
        } & {
            width?: number | undefined;
            height?: number | undefined;
            pressure?: number | undefined;
            tangentialPressure?: number | undefined;
            twist?: number | undefined;
            altitudeAngle?: number | undefined;
            azimuthAngle?: number | undefined;
        }) | ({
            type: "pointerMove";
            x: number;
            y: number;
            duration?: number | undefined;
            origin?: "viewport" | "pointer" | {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            } | undefined;
        } & {
            width?: number | undefined;
            height?: number | undefined;
            pressure?: number | undefined;
            tangentialPressure?: number | undefined;
            twist?: number | undefined;
            altitudeAngle?: number | undefined;
            azimuthAngle?: number | undefined;
        }))[];
        id: string;
        parameters?: {
            pointerType?: "touch" | "mouse" | "pen" | undefined;
        } | undefined;
    }, {
        type: "pointer";
        actions: ({
            type: "pause";
            duration?: number | undefined;
        } | ({
            type: "pointerDown";
            button: number;
        } & {
            width?: number | undefined;
            height?: number | undefined;
            pressure?: number | undefined;
            tangentialPressure?: number | undefined;
            twist?: number | undefined;
            altitudeAngle?: number | undefined;
            azimuthAngle?: number | undefined;
        }) | ({
            type: "pointerUp";
            button: number;
        } & {
            width?: number | undefined;
            height?: number | undefined;
            pressure?: number | undefined;
            tangentialPressure?: number | undefined;
            twist?: number | undefined;
            altitudeAngle?: number | undefined;
            azimuthAngle?: number | undefined;
        }) | ({
            type: "pointerMove";
            x: number;
            y: number;
            duration?: number | undefined;
            origin?: "viewport" | "pointer" | {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            } | undefined;
        } & {
            width?: number | undefined;
            height?: number | undefined;
            pressure?: number | undefined;
            tangentialPressure?: number | undefined;
            twist?: number | undefined;
            altitudeAngle?: number | undefined;
            azimuthAngle?: number | undefined;
        }))[];
        id: string;
        parameters?: {
            pointerType?: "touch" | "mouse" | "pen" | undefined;
        } | undefined;
    }>>;
}
export declare namespace Input {
    const PerformActionsSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"input.performActions">;
        params: z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"none">;
                id: z.ZodString;
                actions: z.ZodArray<z.ZodLazy<z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"pause">;
                    duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                }, "strip", z.ZodTypeAny, {
                    type: "pause";
                    duration?: number | undefined;
                }, {
                    type: "pause";
                    duration?: number | undefined;
                }>>>, "many">;
            }, "strip", z.ZodTypeAny, {
                type: "none";
                actions: {
                    type: "pause";
                    duration?: number | undefined;
                }[];
                id: string;
            }, {
                type: "none";
                actions: {
                    type: "pause";
                    duration?: number | undefined;
                }[];
                id: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"key">;
                id: z.ZodString;
                actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"pause">;
                    duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                }, "strip", z.ZodTypeAny, {
                    type: "pause";
                    duration?: number | undefined;
                }, {
                    type: "pause";
                    duration?: number | undefined;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"keyDown">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "keyDown";
                    value: string;
                }, {
                    type: "keyDown";
                    value: string;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"keyUp">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "keyUp";
                    value: string;
                }, {
                    type: "keyUp";
                    value: string;
                }>>]>>, "many">;
            }, "strip", z.ZodTypeAny, {
                type: "key";
                actions: ({
                    type: "pause";
                    duration?: number | undefined;
                } | {
                    type: "keyDown";
                    value: string;
                } | {
                    type: "keyUp";
                    value: string;
                })[];
                id: string;
            }, {
                type: "key";
                actions: ({
                    type: "pause";
                    duration?: number | undefined;
                } | {
                    type: "keyDown";
                    value: string;
                } | {
                    type: "keyUp";
                    value: string;
                })[];
                id: string;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"pointer">;
                id: z.ZodString;
                parameters: z.ZodOptional<z.ZodLazy<z.ZodObject<{
                    pointerType: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodEnum<["mouse", "pen", "touch"]>>>>;
                }, "strip", z.ZodTypeAny, {
                    pointerType?: "touch" | "mouse" | "pen" | undefined;
                }, {
                    pointerType?: "touch" | "mouse" | "pen" | undefined;
                }>>>;
                actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"pause">;
                    duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                }, "strip", z.ZodTypeAny, {
                    type: "pause";
                    duration?: number | undefined;
                }, {
                    type: "pause";
                    duration?: number | undefined;
                }>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    type: z.ZodLiteral<"pointerDown">;
                    button: z.ZodLazy<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    type: "pointerDown";
                    button: number;
                }, {
                    type: "pointerDown";
                    button: number;
                }>, z.ZodLazy<z.ZodObject<{
                    width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                    height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                    pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                }, "strip", z.ZodTypeAny, {
                    width?: number | undefined;
                    height?: number | undefined;
                    pressure?: number | undefined;
                    tangentialPressure?: number | undefined;
                    twist?: number | undefined;
                    altitudeAngle?: number | undefined;
                    azimuthAngle?: number | undefined;
                }, {
                    width?: number | undefined;
                    height?: number | undefined;
                    pressure?: number | undefined;
                    tangentialPressure?: number | undefined;
                    twist?: number | undefined;
                    altitudeAngle?: number | undefined;
                    azimuthAngle?: number | undefined;
                }>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    type: z.ZodLiteral<"pointerUp">;
                    button: z.ZodLazy<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    type: "pointerUp";
                    button: number;
                }, {
                    type: "pointerUp";
                    button: number;
                }>, z.ZodLazy<z.ZodObject<{
                    width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                    height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                    pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                }, "strip", z.ZodTypeAny, {
                    width?: number | undefined;
                    height?: number | undefined;
                    pressure?: number | undefined;
                    tangentialPressure?: number | undefined;
                    twist?: number | undefined;
                    altitudeAngle?: number | undefined;
                    azimuthAngle?: number | undefined;
                }, {
                    width?: number | undefined;
                    height?: number | undefined;
                    pressure?: number | undefined;
                    tangentialPressure?: number | undefined;
                    twist?: number | undefined;
                    altitudeAngle?: number | undefined;
                    azimuthAngle?: number | undefined;
                }>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    type: z.ZodLiteral<"pointerMove">;
                    x: z.ZodLazy<z.ZodNumber>;
                    y: z.ZodLazy<z.ZodNumber>;
                    duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                    origin: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLiteral<"viewport">, z.ZodLiteral<"pointer">, z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"element">;
                        element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                            sharedId: z.ZodLazy<z.ZodString>;
                            handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
                        }, "strip", z.ZodTypeAny, {
                            sharedId: string;
                            handle?: string | undefined;
                        }, {
                            sharedId: string;
                            handle?: string | undefined;
                        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
                    }, "strip", z.ZodTypeAny, {
                        type: "element";
                        element: {
                            sharedId: string;
                            handle?: string | undefined;
                        } & Record<string, any>;
                    }, {
                        type: "element";
                        element: {
                            sharedId: string;
                            handle?: string | undefined;
                        } & Record<string, any>;
                    }>>]>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "pointerMove";
                    x: number;
                    y: number;
                    duration?: number | undefined;
                    origin?: "viewport" | "pointer" | {
                        type: "element";
                        element: {
                            sharedId: string;
                            handle?: string | undefined;
                        } & Record<string, any>;
                    } | undefined;
                }, {
                    type: "pointerMove";
                    x: number;
                    y: number;
                    duration?: number | undefined;
                    origin?: "viewport" | "pointer" | {
                        type: "element";
                        element: {
                            sharedId: string;
                            handle?: string | undefined;
                        } & Record<string, any>;
                    } | undefined;
                }>, z.ZodLazy<z.ZodObject<{
                    width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                    height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
                    pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                }, "strip", z.ZodTypeAny, {
                    width?: number | undefined;
                    height?: number | undefined;
                    pressure?: number | undefined;
                    tangentialPressure?: number | undefined;
                    twist?: number | undefined;
                    altitudeAngle?: number | undefined;
                    azimuthAngle?: number | undefined;
                }, {
                    width?: number | undefined;
                    height?: number | undefined;
                    pressure?: number | undefined;
                    tangentialPressure?: number | undefined;
                    twist?: number | undefined;
                    altitudeAngle?: number | undefined;
                    azimuthAngle?: number | undefined;
                }>>>>]>>, "many">;
            }, "strip", z.ZodTypeAny, {
                type: "pointer";
                actions: ({
                    type: "pause";
                    duration?: number | undefined;
                } | ({
                    type: "pointerDown";
                    button: number;
                } & {
                    width?: number | undefined;
                    height?: number | undefined;
                    pressure?: number | undefined;
                    tangentialPressure?: number | undefined;
                    twist?: number | undefined;
                    altitudeAngle?: number | undefined;
                    azimuthAngle?: number | undefined;
                }) | ({
                    type: "pointerUp";
                    button: number;
                } & {
                    width?: number | undefined;
                    height?: number | undefined;
                    pressure?: number | undefined;
                    tangentialPressure?: number | undefined;
                    twist?: number | undefined;
                    altitudeAngle?: number | undefined;
                    azimuthAngle?: number | undefined;
                }) | ({
                    type: "pointerMove";
                    x: number;
                    y: number;
                    duration?: number | undefined;
                    origin?: "viewport" | "pointer" | {
                        type: "element";
                        element: {
                            sharedId: string;
                            handle?: string | undefined;
                        } & Record<string, any>;
                    } | undefined;
                } & {
                    width?: number | undefined;
                    height?: number | undefined;
                    pressure?: number | undefined;
                    tangentialPressure?: number | undefined;
                    twist?: number | undefined;
                    altitudeAngle?: number | undefined;
                    azimuthAngle?: number | undefined;
                }))[];
                id: string;
                parameters?: {
                    pointerType?: "touch" | "mouse" | "pen" | undefined;
                } | undefined;
            }, {
                type: "pointer";
                actions: ({
                    type: "pause";
                    duration?: number | undefined;
                } | ({
                    type: "pointerDown";
                    button: number;
                } & {
                    width?: number | undefined;
                    height?: number | undefined;
                    pressure?: number | undefined;
                    tangentialPressure?: number | undefined;
                    twist?: number | undefined;
                    altitudeAngle?: number | undefined;
                    azimuthAngle?: number | undefined;
                }) | ({
                    type: "pointerUp";
                    button: number;
                } & {
                    width?: number | undefined;
                    height?: number | undefined;
                    pressure?: number | undefined;
                    tangentialPressure?: number | undefined;
                    twist?: number | undefined;
                    altitudeAngle?: number | undefined;
                    azimuthAngle?: number | undefined;
                }) | ({
                    type: "pointerMove";
                    x: number;
                    y: number;
                    duration?: number | undefined;
                    origin?: "viewport" | "pointer" | {
                        type: "element";
                        element: {
                            sharedId: string;
                            handle?: string | undefined;
                        } & Record<string, any>;
                    } | undefined;
                } & {
                    width?: number | undefined;
                    height?: number | undefined;
                    pressure?: number | undefined;
                    tangentialPressure?: number | undefined;
                    twist?: number | undefined;
                    altitudeAngle?: number | undefined;
                    azimuthAngle?: number | undefined;
                }))[];
                id: string;
                parameters?: {
                    pointerType?: "touch" | "mouse" | "pen" | undefined;
                } | undefined;
            }>>, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"wheel">;
                id: z.ZodString;
                actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"pause">;
                    duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                }, "strip", z.ZodTypeAny, {
                    type: "pause";
                    duration?: number | undefined;
                }, {
                    type: "pause";
                    duration?: number | undefined;
                }>>, z.ZodLazy<z.ZodObject<{
                    type: z.ZodLiteral<"scroll">;
                    x: z.ZodLazy<z.ZodNumber>;
                    y: z.ZodLazy<z.ZodNumber>;
                    deltaX: z.ZodLazy<z.ZodNumber>;
                    deltaY: z.ZodLazy<z.ZodNumber>;
                    duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
                    origin: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodUnion<[z.ZodLiteral<"viewport">, z.ZodLiteral<"pointer">, z.ZodLazy<z.ZodObject<{
                        type: z.ZodLiteral<"element">;
                        element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                            sharedId: z.ZodLazy<z.ZodString>;
                            handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
                        }, "strip", z.ZodTypeAny, {
                            sharedId: string;
                            handle?: string | undefined;
                        }, {
                            sharedId: string;
                            handle?: string | undefined;
                        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
                    }, "strip", z.ZodTypeAny, {
                        type: "element";
                        element: {
                            sharedId: string;
                            handle?: string | undefined;
                        } & Record<string, any>;
                    }, {
                        type: "element";
                        element: {
                            sharedId: string;
                            handle?: string | undefined;
                        } & Record<string, any>;
                    }>>]>>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "scroll";
                    x: number;
                    y: number;
                    deltaX: number;
                    deltaY: number;
                    duration?: number | undefined;
                    origin?: "viewport" | "pointer" | {
                        type: "element";
                        element: {
                            sharedId: string;
                            handle?: string | undefined;
                        } & Record<string, any>;
                    } | undefined;
                }, {
                    type: "scroll";
                    x: number;
                    y: number;
                    deltaX: number;
                    deltaY: number;
                    duration?: number | undefined;
                    origin?: "viewport" | "pointer" | {
                        type: "element";
                        element: {
                            sharedId: string;
                            handle?: string | undefined;
                        } & Record<string, any>;
                    } | undefined;
                }>>]>>, "many">;
            }, "strip", z.ZodTypeAny, {
                type: "wheel";
                actions: ({
                    type: "pause";
                    duration?: number | undefined;
                } | {
                    type: "scroll";
                    x: number;
                    y: number;
                    deltaX: number;
                    deltaY: number;
                    duration?: number | undefined;
                    origin?: "viewport" | "pointer" | {
                        type: "element";
                        element: {
                            sharedId: string;
                            handle?: string | undefined;
                        } & Record<string, any>;
                    } | undefined;
                })[];
                id: string;
            }, {
                type: "wheel";
                actions: ({
                    type: "pause";
                    duration?: number | undefined;
                } | {
                    type: "scroll";
                    x: number;
                    y: number;
                    deltaX: number;
                    deltaY: number;
                    duration?: number | undefined;
                    origin?: "viewport" | "pointer" | {
                        type: "element";
                        element: {
                            sharedId: string;
                            handle?: string | undefined;
                        } & Record<string, any>;
                    } | undefined;
                })[];
                id: string;
            }>>]>>, "many">;
        }, "strip", z.ZodTypeAny, {
            context: string;
            actions: ({
                type: "none";
                actions: {
                    type: "pause";
                    duration?: number | undefined;
                }[];
                id: string;
            } | {
                type: "key";
                actions: ({
                    type: "pause";
                    duration?: number | undefined;
                } | {
                    type: "keyDown";
                    value: string;
                } | {
                    type: "keyUp";
                    value: string;
                })[];
                id: string;
            } | {
                type: "pointer";
                actions: ({
                    type: "pause";
                    duration?: number | undefined;
                } | ({
                    type: "pointerDown";
                    button: number;
                } & {
                    width?: number | undefined;
                    height?: number | undefined;
                    pressure?: number | undefined;
                    tangentialPressure?: number | undefined;
                    twist?: number | undefined;
                    altitudeAngle?: number | undefined;
                    azimuthAngle?: number | undefined;
                }) | ({
                    type: "pointerUp";
                    button: number;
                } & {
                    width?: number | undefined;
                    height?: number | undefined;
                    pressure?: number | undefined;
                    tangentialPressure?: number | undefined;
                    twist?: number | undefined;
                    altitudeAngle?: number | undefined;
                    azimuthAngle?: number | undefined;
                }) | ({
                    type: "pointerMove";
                    x: number;
                    y: number;
                    duration?: number | undefined;
                    origin?: "viewport" | "pointer" | {
                        type: "element";
                        element: {
                            sharedId: string;
                            handle?: string | undefined;
                        } & Record<string, any>;
                    } | undefined;
                } & {
                    width?: number | undefined;
                    height?: number | undefined;
                    pressure?: number | undefined;
                    tangentialPressure?: number | undefined;
                    twist?: number | undefined;
                    altitudeAngle?: number | undefined;
                    azimuthAngle?: number | undefined;
                }))[];
                id: string;
                parameters?: {
                    pointerType?: "touch" | "mouse" | "pen" | undefined;
                } | undefined;
            } | {
                type: "wheel";
                actions: ({
                    type: "pause";
                    duration?: number | undefined;
                } | {
                    type: "scroll";
                    x: number;
                    y: number;
                    deltaX: number;
                    deltaY: number;
                    duration?: number | undefined;
                    origin?: "viewport" | "pointer" | {
                        type: "element";
                        element: {
                            sharedId: string;
                            handle?: string | undefined;
                        } & Record<string, any>;
                    } | undefined;
                })[];
                id: string;
            })[];
        }, {
            context: string;
            actions: ({
                type: "none";
                actions: {
                    type: "pause";
                    duration?: number | undefined;
                }[];
                id: string;
            } | {
                type: "key";
                actions: ({
                    type: "pause";
                    duration?: number | undefined;
                } | {
                    type: "keyDown";
                    value: string;
                } | {
                    type: "keyUp";
                    value: string;
                })[];
                id: string;
            } | {
                type: "pointer";
                actions: ({
                    type: "pause";
                    duration?: number | undefined;
                } | ({
                    type: "pointerDown";
                    button: number;
                } & {
                    width?: number | undefined;
                    height?: number | undefined;
                    pressure?: number | undefined;
                    tangentialPressure?: number | undefined;
                    twist?: number | undefined;
                    altitudeAngle?: number | undefined;
                    azimuthAngle?: number | undefined;
                }) | ({
                    type: "pointerUp";
                    button: number;
                } & {
                    width?: number | undefined;
                    height?: number | undefined;
                    pressure?: number | undefined;
                    tangentialPressure?: number | undefined;
                    twist?: number | undefined;
                    altitudeAngle?: number | undefined;
                    azimuthAngle?: number | undefined;
                }) | ({
                    type: "pointerMove";
                    x: number;
                    y: number;
                    duration?: number | undefined;
                    origin?: "viewport" | "pointer" | {
                        type: "element";
                        element: {
                            sharedId: string;
                            handle?: string | undefined;
                        } & Record<string, any>;
                    } | undefined;
                } & {
                    width?: number | undefined;
                    height?: number | undefined;
                    pressure?: number | undefined;
                    tangentialPressure?: number | undefined;
                    twist?: number | undefined;
                    altitudeAngle?: number | undefined;
                    azimuthAngle?: number | undefined;
                }))[];
                id: string;
                parameters?: {
                    pointerType?: "touch" | "mouse" | "pen" | undefined;
                } | undefined;
            } | {
                type: "wheel";
                actions: ({
                    type: "pause";
                    duration?: number | undefined;
                } | {
                    type: "scroll";
                    x: number;
                    y: number;
                    deltaX: number;
                    deltaY: number;
                    duration?: number | undefined;
                    origin?: "viewport" | "pointer" | {
                        type: "element";
                        element: {
                            sharedId: string;
                            handle?: string | undefined;
                        } & Record<string, any>;
                    } | undefined;
                })[];
                id: string;
            })[];
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            context: string;
            actions: ({
                type: "none";
                actions: {
                    type: "pause";
                    duration?: number | undefined;
                }[];
                id: string;
            } | {
                type: "key";
                actions: ({
                    type: "pause";
                    duration?: number | undefined;
                } | {
                    type: "keyDown";
                    value: string;
                } | {
                    type: "keyUp";
                    value: string;
                })[];
                id: string;
            } | {
                type: "pointer";
                actions: ({
                    type: "pause";
                    duration?: number | undefined;
                } | ({
                    type: "pointerDown";
                    button: number;
                } & {
                    width?: number | undefined;
                    height?: number | undefined;
                    pressure?: number | undefined;
                    tangentialPressure?: number | undefined;
                    twist?: number | undefined;
                    altitudeAngle?: number | undefined;
                    azimuthAngle?: number | undefined;
                }) | ({
                    type: "pointerUp";
                    button: number;
                } & {
                    width?: number | undefined;
                    height?: number | undefined;
                    pressure?: number | undefined;
                    tangentialPressure?: number | undefined;
                    twist?: number | undefined;
                    altitudeAngle?: number | undefined;
                    azimuthAngle?: number | undefined;
                }) | ({
                    type: "pointerMove";
                    x: number;
                    y: number;
                    duration?: number | undefined;
                    origin?: "viewport" | "pointer" | {
                        type: "element";
                        element: {
                            sharedId: string;
                            handle?: string | undefined;
                        } & Record<string, any>;
                    } | undefined;
                } & {
                    width?: number | undefined;
                    height?: number | undefined;
                    pressure?: number | undefined;
                    tangentialPressure?: number | undefined;
                    twist?: number | undefined;
                    altitudeAngle?: number | undefined;
                    azimuthAngle?: number | undefined;
                }))[];
                id: string;
                parameters?: {
                    pointerType?: "touch" | "mouse" | "pen" | undefined;
                } | undefined;
            } | {
                type: "wheel";
                actions: ({
                    type: "pause";
                    duration?: number | undefined;
                } | {
                    type: "scroll";
                    x: number;
                    y: number;
                    deltaX: number;
                    deltaY: number;
                    duration?: number | undefined;
                    origin?: "viewport" | "pointer" | {
                        type: "element";
                        element: {
                            sharedId: string;
                            handle?: string | undefined;
                        } & Record<string, any>;
                    } | undefined;
                })[];
                id: string;
            })[];
        };
        method: "input.performActions";
    }, {
        params: {
            context: string;
            actions: ({
                type: "none";
                actions: {
                    type: "pause";
                    duration?: number | undefined;
                }[];
                id: string;
            } | {
                type: "key";
                actions: ({
                    type: "pause";
                    duration?: number | undefined;
                } | {
                    type: "keyDown";
                    value: string;
                } | {
                    type: "keyUp";
                    value: string;
                })[];
                id: string;
            } | {
                type: "pointer";
                actions: ({
                    type: "pause";
                    duration?: number | undefined;
                } | ({
                    type: "pointerDown";
                    button: number;
                } & {
                    width?: number | undefined;
                    height?: number | undefined;
                    pressure?: number | undefined;
                    tangentialPressure?: number | undefined;
                    twist?: number | undefined;
                    altitudeAngle?: number | undefined;
                    azimuthAngle?: number | undefined;
                }) | ({
                    type: "pointerUp";
                    button: number;
                } & {
                    width?: number | undefined;
                    height?: number | undefined;
                    pressure?: number | undefined;
                    tangentialPressure?: number | undefined;
                    twist?: number | undefined;
                    altitudeAngle?: number | undefined;
                    azimuthAngle?: number | undefined;
                }) | ({
                    type: "pointerMove";
                    x: number;
                    y: number;
                    duration?: number | undefined;
                    origin?: "viewport" | "pointer" | {
                        type: "element";
                        element: {
                            sharedId: string;
                            handle?: string | undefined;
                        } & Record<string, any>;
                    } | undefined;
                } & {
                    width?: number | undefined;
                    height?: number | undefined;
                    pressure?: number | undefined;
                    tangentialPressure?: number | undefined;
                    twist?: number | undefined;
                    altitudeAngle?: number | undefined;
                    azimuthAngle?: number | undefined;
                }))[];
                id: string;
                parameters?: {
                    pointerType?: "touch" | "mouse" | "pen" | undefined;
                } | undefined;
            } | {
                type: "wheel";
                actions: ({
                    type: "pause";
                    duration?: number | undefined;
                } | {
                    type: "scroll";
                    x: number;
                    y: number;
                    deltaX: number;
                    deltaY: number;
                    duration?: number | undefined;
                    origin?: "viewport" | "pointer" | {
                        type: "element";
                        element: {
                            sharedId: string;
                            handle?: string | undefined;
                        } & Record<string, any>;
                    } | undefined;
                })[];
                id: string;
            })[];
        };
        method: "input.performActions";
    }>>;
}
export declare namespace Input {
    const SourceActionsSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"none">;
        id: z.ZodString;
        actions: z.ZodArray<z.ZodLazy<z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"pause">;
            duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            type: "pause";
            duration?: number | undefined;
        }, {
            type: "pause";
            duration?: number | undefined;
        }>>>, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "none";
        actions: {
            type: "pause";
            duration?: number | undefined;
        }[];
        id: string;
    }, {
        type: "none";
        actions: {
            type: "pause";
            duration?: number | undefined;
        }[];
        id: string;
    }>>, z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"key">;
        id: z.ZodString;
        actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"pause">;
            duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            type: "pause";
            duration?: number | undefined;
        }, {
            type: "pause";
            duration?: number | undefined;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"keyDown">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "keyDown";
            value: string;
        }, {
            type: "keyDown";
            value: string;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"keyUp">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "keyUp";
            value: string;
        }, {
            type: "keyUp";
            value: string;
        }>>]>>, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "key";
        actions: ({
            type: "pause";
            duration?: number | undefined;
        } | {
            type: "keyDown";
            value: string;
        } | {
            type: "keyUp";
            value: string;
        })[];
        id: string;
    }, {
        type: "key";
        actions: ({
            type: "pause";
            duration?: number | undefined;
        } | {
            type: "keyDown";
            value: string;
        } | {
            type: "keyUp";
            value: string;
        })[];
        id: string;
    }>>, z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"pointer">;
        id: z.ZodString;
        parameters: z.ZodOptional<z.ZodLazy<z.ZodObject<{
            pointerType: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodEnum<["mouse", "pen", "touch"]>>>>;
        }, "strip", z.ZodTypeAny, {
            pointerType?: "touch" | "mouse" | "pen" | undefined;
        }, {
            pointerType?: "touch" | "mouse" | "pen" | undefined;
        }>>>;
        actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"pause">;
            duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            type: "pause";
            duration?: number | undefined;
        }, {
            type: "pause";
            duration?: number | undefined;
        }>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            type: z.ZodLiteral<"pointerDown">;
            button: z.ZodLazy<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "pointerDown";
            button: number;
        }, {
            type: "pointerDown";
            button: number;
        }>, z.ZodLazy<z.ZodObject<{
            width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
            height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
            pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            width?: number | undefined;
            height?: number | undefined;
            pressure?: number | undefined;
            tangentialPressure?: number | undefined;
            twist?: number | undefined;
            altitudeAngle?: number | undefined;
            azimuthAngle?: number | undefined;
        }, {
            width?: number | undefined;
            height?: number | undefined;
            pressure?: number | undefined;
            tangentialPressure?: number | undefined;
            twist?: number | undefined;
            altitudeAngle?: number | undefined;
            azimuthAngle?: number | undefined;
        }>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            type: z.ZodLiteral<"pointerUp">;
            button: z.ZodLazy<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "pointerUp";
            button: number;
        }, {
            type: "pointerUp";
            button: number;
        }>, z.ZodLazy<z.ZodObject<{
            width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
            height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
            pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            width?: number | undefined;
            height?: number | undefined;
            pressure?: number | undefined;
            tangentialPressure?: number | undefined;
            twist?: number | undefined;
            altitudeAngle?: number | undefined;
            azimuthAngle?: number | undefined;
        }, {
            width?: number | undefined;
            height?: number | undefined;
            pressure?: number | undefined;
            tangentialPressure?: number | undefined;
            twist?: number | undefined;
            altitudeAngle?: number | undefined;
            azimuthAngle?: number | undefined;
        }>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            type: z.ZodLiteral<"pointerMove">;
            x: z.ZodLazy<z.ZodNumber>;
            y: z.ZodLazy<z.ZodNumber>;
            duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            origin: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLiteral<"viewport">, z.ZodLiteral<"pointer">, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"element">;
                element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    sharedId: z.ZodLazy<z.ZodString>;
                    handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
                }, "strip", z.ZodTypeAny, {
                    sharedId: string;
                    handle?: string | undefined;
                }, {
                    sharedId: string;
                    handle?: string | undefined;
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
            }, "strip", z.ZodTypeAny, {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            }, {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            }>>]>>>;
        }, "strip", z.ZodTypeAny, {
            type: "pointerMove";
            x: number;
            y: number;
            duration?: number | undefined;
            origin?: "viewport" | "pointer" | {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            } | undefined;
        }, {
            type: "pointerMove";
            x: number;
            y: number;
            duration?: number | undefined;
            origin?: "viewport" | "pointer" | {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            } | undefined;
        }>, z.ZodLazy<z.ZodObject<{
            width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
            height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
            pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
            azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            width?: number | undefined;
            height?: number | undefined;
            pressure?: number | undefined;
            tangentialPressure?: number | undefined;
            twist?: number | undefined;
            altitudeAngle?: number | undefined;
            azimuthAngle?: number | undefined;
        }, {
            width?: number | undefined;
            height?: number | undefined;
            pressure?: number | undefined;
            tangentialPressure?: number | undefined;
            twist?: number | undefined;
            altitudeAngle?: number | undefined;
            azimuthAngle?: number | undefined;
        }>>>>]>>, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "pointer";
        actions: ({
            type: "pause";
            duration?: number | undefined;
        } | ({
            type: "pointerDown";
            button: number;
        } & {
            width?: number | undefined;
            height?: number | undefined;
            pressure?: number | undefined;
            tangentialPressure?: number | undefined;
            twist?: number | undefined;
            altitudeAngle?: number | undefined;
            azimuthAngle?: number | undefined;
        }) | ({
            type: "pointerUp";
            button: number;
        } & {
            width?: number | undefined;
            height?: number | undefined;
            pressure?: number | undefined;
            tangentialPressure?: number | undefined;
            twist?: number | undefined;
            altitudeAngle?: number | undefined;
            azimuthAngle?: number | undefined;
        }) | ({
            type: "pointerMove";
            x: number;
            y: number;
            duration?: number | undefined;
            origin?: "viewport" | "pointer" | {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            } | undefined;
        } & {
            width?: number | undefined;
            height?: number | undefined;
            pressure?: number | undefined;
            tangentialPressure?: number | undefined;
            twist?: number | undefined;
            altitudeAngle?: number | undefined;
            azimuthAngle?: number | undefined;
        }))[];
        id: string;
        parameters?: {
            pointerType?: "touch" | "mouse" | "pen" | undefined;
        } | undefined;
    }, {
        type: "pointer";
        actions: ({
            type: "pause";
            duration?: number | undefined;
        } | ({
            type: "pointerDown";
            button: number;
        } & {
            width?: number | undefined;
            height?: number | undefined;
            pressure?: number | undefined;
            tangentialPressure?: number | undefined;
            twist?: number | undefined;
            altitudeAngle?: number | undefined;
            azimuthAngle?: number | undefined;
        }) | ({
            type: "pointerUp";
            button: number;
        } & {
            width?: number | undefined;
            height?: number | undefined;
            pressure?: number | undefined;
            tangentialPressure?: number | undefined;
            twist?: number | undefined;
            altitudeAngle?: number | undefined;
            azimuthAngle?: number | undefined;
        }) | ({
            type: "pointerMove";
            x: number;
            y: number;
            duration?: number | undefined;
            origin?: "viewport" | "pointer" | {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            } | undefined;
        } & {
            width?: number | undefined;
            height?: number | undefined;
            pressure?: number | undefined;
            tangentialPressure?: number | undefined;
            twist?: number | undefined;
            altitudeAngle?: number | undefined;
            azimuthAngle?: number | undefined;
        }))[];
        id: string;
        parameters?: {
            pointerType?: "touch" | "mouse" | "pen" | undefined;
        } | undefined;
    }>>, z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"wheel">;
        id: z.ZodString;
        actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"pause">;
            duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            type: "pause";
            duration?: number | undefined;
        }, {
            type: "pause";
            duration?: number | undefined;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"scroll">;
            x: z.ZodLazy<z.ZodNumber>;
            y: z.ZodLazy<z.ZodNumber>;
            deltaX: z.ZodLazy<z.ZodNumber>;
            deltaY: z.ZodLazy<z.ZodNumber>;
            duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            origin: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodUnion<[z.ZodLiteral<"viewport">, z.ZodLiteral<"pointer">, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"element">;
                element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    sharedId: z.ZodLazy<z.ZodString>;
                    handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
                }, "strip", z.ZodTypeAny, {
                    sharedId: string;
                    handle?: string | undefined;
                }, {
                    sharedId: string;
                    handle?: string | undefined;
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
            }, "strip", z.ZodTypeAny, {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            }, {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            }>>]>>>>;
        }, "strip", z.ZodTypeAny, {
            type: "scroll";
            x: number;
            y: number;
            deltaX: number;
            deltaY: number;
            duration?: number | undefined;
            origin?: "viewport" | "pointer" | {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            } | undefined;
        }, {
            type: "scroll";
            x: number;
            y: number;
            deltaX: number;
            deltaY: number;
            duration?: number | undefined;
            origin?: "viewport" | "pointer" | {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            } | undefined;
        }>>]>>, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "wheel";
        actions: ({
            type: "pause";
            duration?: number | undefined;
        } | {
            type: "scroll";
            x: number;
            y: number;
            deltaX: number;
            deltaY: number;
            duration?: number | undefined;
            origin?: "viewport" | "pointer" | {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            } | undefined;
        })[];
        id: string;
    }, {
        type: "wheel";
        actions: ({
            type: "pause";
            duration?: number | undefined;
        } | {
            type: "scroll";
            x: number;
            y: number;
            deltaX: number;
            deltaY: number;
            duration?: number | undefined;
            origin?: "viewport" | "pointer" | {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            } | undefined;
        })[];
        id: string;
    }>>]>>;
}
export declare namespace Input {
    const NoneSourceActionSchema: z.ZodLazy<z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"pause">;
        duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        type: "pause";
        duration?: number | undefined;
    }, {
        type: "pause";
        duration?: number | undefined;
    }>>>;
}
export declare namespace Input {
    const KeySourceActionSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"pause">;
        duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        type: "pause";
        duration?: number | undefined;
    }, {
        type: "pause";
        duration?: number | undefined;
    }>>, z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"keyDown">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "keyDown";
        value: string;
    }, {
        type: "keyDown";
        value: string;
    }>>, z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"keyUp">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "keyUp";
        value: string;
    }, {
        type: "keyUp";
        value: string;
    }>>]>>;
}
export declare namespace Input {
    const PointerTypeSchema: z.ZodLazy<z.ZodEnum<["mouse", "pen", "touch"]>>;
}
export declare namespace Input {
    const PointerParametersSchema: z.ZodLazy<z.ZodObject<{
        pointerType: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodEnum<["mouse", "pen", "touch"]>>>>;
    }, "strip", z.ZodTypeAny, {
        pointerType?: "touch" | "mouse" | "pen" | undefined;
    }, {
        pointerType?: "touch" | "mouse" | "pen" | undefined;
    }>>;
}
export declare namespace Input {
    const WheelSourceActionsSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"wheel">;
        id: z.ZodString;
        actions: z.ZodArray<z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"pause">;
            duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            type: "pause";
            duration?: number | undefined;
        }, {
            type: "pause";
            duration?: number | undefined;
        }>>, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"scroll">;
            x: z.ZodLazy<z.ZodNumber>;
            y: z.ZodLazy<z.ZodNumber>;
            deltaX: z.ZodLazy<z.ZodNumber>;
            deltaY: z.ZodLazy<z.ZodNumber>;
            duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
            origin: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodUnion<[z.ZodLiteral<"viewport">, z.ZodLiteral<"pointer">, z.ZodLazy<z.ZodObject<{
                type: z.ZodLiteral<"element">;
                element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                    sharedId: z.ZodLazy<z.ZodString>;
                    handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
                }, "strip", z.ZodTypeAny, {
                    sharedId: string;
                    handle?: string | undefined;
                }, {
                    sharedId: string;
                    handle?: string | undefined;
                }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
            }, "strip", z.ZodTypeAny, {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            }, {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            }>>]>>>>;
        }, "strip", z.ZodTypeAny, {
            type: "scroll";
            x: number;
            y: number;
            deltaX: number;
            deltaY: number;
            duration?: number | undefined;
            origin?: "viewport" | "pointer" | {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            } | undefined;
        }, {
            type: "scroll";
            x: number;
            y: number;
            deltaX: number;
            deltaY: number;
            duration?: number | undefined;
            origin?: "viewport" | "pointer" | {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            } | undefined;
        }>>]>>, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "wheel";
        actions: ({
            type: "pause";
            duration?: number | undefined;
        } | {
            type: "scroll";
            x: number;
            y: number;
            deltaX: number;
            deltaY: number;
            duration?: number | undefined;
            origin?: "viewport" | "pointer" | {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            } | undefined;
        })[];
        id: string;
    }, {
        type: "wheel";
        actions: ({
            type: "pause";
            duration?: number | undefined;
        } | {
            type: "scroll";
            x: number;
            y: number;
            deltaX: number;
            deltaY: number;
            duration?: number | undefined;
            origin?: "viewport" | "pointer" | {
                type: "element";
                element: {
                    sharedId: string;
                    handle?: string | undefined;
                } & Record<string, any>;
            } | undefined;
        })[];
        id: string;
    }>>;
}
export declare namespace Input {
    const PointerSourceActionSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"pause">;
        duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        type: "pause";
        duration?: number | undefined;
    }, {
        type: "pause";
        duration?: number | undefined;
    }>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        type: z.ZodLiteral<"pointerDown">;
        button: z.ZodLazy<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "pointerDown";
        button: number;
    }, {
        type: "pointerDown";
        button: number;
    }>, z.ZodLazy<z.ZodObject<{
        width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
        height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
        pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        width?: number | undefined;
        height?: number | undefined;
        pressure?: number | undefined;
        tangentialPressure?: number | undefined;
        twist?: number | undefined;
        altitudeAngle?: number | undefined;
        azimuthAngle?: number | undefined;
    }, {
        width?: number | undefined;
        height?: number | undefined;
        pressure?: number | undefined;
        tangentialPressure?: number | undefined;
        twist?: number | undefined;
        altitudeAngle?: number | undefined;
        azimuthAngle?: number | undefined;
    }>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        type: z.ZodLiteral<"pointerUp">;
        button: z.ZodLazy<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "pointerUp";
        button: number;
    }, {
        type: "pointerUp";
        button: number;
    }>, z.ZodLazy<z.ZodObject<{
        width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
        height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
        pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        width?: number | undefined;
        height?: number | undefined;
        pressure?: number | undefined;
        tangentialPressure?: number | undefined;
        twist?: number | undefined;
        altitudeAngle?: number | undefined;
        azimuthAngle?: number | undefined;
    }, {
        width?: number | undefined;
        height?: number | undefined;
        pressure?: number | undefined;
        tangentialPressure?: number | undefined;
        twist?: number | undefined;
        altitudeAngle?: number | undefined;
        azimuthAngle?: number | undefined;
    }>>>>, z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        type: z.ZodLiteral<"pointerMove">;
        x: z.ZodLazy<z.ZodNumber>;
        y: z.ZodLazy<z.ZodNumber>;
        duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        origin: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLiteral<"viewport">, z.ZodLiteral<"pointer">, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"element">;
            element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                sharedId: z.ZodLazy<z.ZodString>;
                handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                sharedId: string;
                handle?: string | undefined;
            }, {
                sharedId: string;
                handle?: string | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
        }, "strip", z.ZodTypeAny, {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        }, {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        }>>]>>>;
    }, "strip", z.ZodTypeAny, {
        type: "pointerMove";
        x: number;
        y: number;
        duration?: number | undefined;
        origin?: "viewport" | "pointer" | {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        } | undefined;
    }, {
        type: "pointerMove";
        x: number;
        y: number;
        duration?: number | undefined;
        origin?: "viewport" | "pointer" | {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        } | undefined;
    }>, z.ZodLazy<z.ZodObject<{
        width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
        height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
        pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        width?: number | undefined;
        height?: number | undefined;
        pressure?: number | undefined;
        tangentialPressure?: number | undefined;
        twist?: number | undefined;
        altitudeAngle?: number | undefined;
        azimuthAngle?: number | undefined;
    }, {
        width?: number | undefined;
        height?: number | undefined;
        pressure?: number | undefined;
        tangentialPressure?: number | undefined;
        twist?: number | undefined;
        altitudeAngle?: number | undefined;
        azimuthAngle?: number | undefined;
    }>>>>]>>;
}
export declare namespace Input {
    const WheelSourceActionSchema: z.ZodLazy<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"pause">;
        duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        type: "pause";
        duration?: number | undefined;
    }, {
        type: "pause";
        duration?: number | undefined;
    }>>, z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"scroll">;
        x: z.ZodLazy<z.ZodNumber>;
        y: z.ZodLazy<z.ZodNumber>;
        deltaX: z.ZodLazy<z.ZodNumber>;
        deltaY: z.ZodLazy<z.ZodNumber>;
        duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        origin: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodUnion<[z.ZodLiteral<"viewport">, z.ZodLiteral<"pointer">, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"element">;
            element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                sharedId: z.ZodLazy<z.ZodString>;
                handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                sharedId: string;
                handle?: string | undefined;
            }, {
                sharedId: string;
                handle?: string | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
        }, "strip", z.ZodTypeAny, {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        }, {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        }>>]>>>>;
    }, "strip", z.ZodTypeAny, {
        type: "scroll";
        x: number;
        y: number;
        deltaX: number;
        deltaY: number;
        duration?: number | undefined;
        origin?: "viewport" | "pointer" | {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        } | undefined;
    }, {
        type: "scroll";
        x: number;
        y: number;
        deltaX: number;
        deltaY: number;
        duration?: number | undefined;
        origin?: "viewport" | "pointer" | {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        } | undefined;
    }>>]>>;
}
export declare namespace Input {
    const PauseActionSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"pause">;
        duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        type: "pause";
        duration?: number | undefined;
    }, {
        type: "pause";
        duration?: number | undefined;
    }>>;
}
export declare namespace Input {
    const KeyDownActionSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"keyDown">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "keyDown";
        value: string;
    }, {
        type: "keyDown";
        value: string;
    }>>;
}
export declare namespace Input {
    const KeyUpActionSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"keyUp">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "keyUp";
        value: string;
    }, {
        type: "keyUp";
        value: string;
    }>>;
}
export declare namespace Input {
    const PointerUpActionSchema: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        type: z.ZodLiteral<"pointerUp">;
        button: z.ZodLazy<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "pointerUp";
        button: number;
    }, {
        type: "pointerUp";
        button: number;
    }>, z.ZodLazy<z.ZodObject<{
        width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
        height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
        pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        width?: number | undefined;
        height?: number | undefined;
        pressure?: number | undefined;
        tangentialPressure?: number | undefined;
        twist?: number | undefined;
        altitudeAngle?: number | undefined;
        azimuthAngle?: number | undefined;
    }, {
        width?: number | undefined;
        height?: number | undefined;
        pressure?: number | undefined;
        tangentialPressure?: number | undefined;
        twist?: number | undefined;
        altitudeAngle?: number | undefined;
        azimuthAngle?: number | undefined;
    }>>>>;
}
export declare namespace Input {
    const PointerDownActionSchema: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        type: z.ZodLiteral<"pointerDown">;
        button: z.ZodLazy<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "pointerDown";
        button: number;
    }, {
        type: "pointerDown";
        button: number;
    }>, z.ZodLazy<z.ZodObject<{
        width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
        height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
        pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        width?: number | undefined;
        height?: number | undefined;
        pressure?: number | undefined;
        tangentialPressure?: number | undefined;
        twist?: number | undefined;
        altitudeAngle?: number | undefined;
        azimuthAngle?: number | undefined;
    }, {
        width?: number | undefined;
        height?: number | undefined;
        pressure?: number | undefined;
        tangentialPressure?: number | undefined;
        twist?: number | undefined;
        altitudeAngle?: number | undefined;
        azimuthAngle?: number | undefined;
    }>>>>;
}
export declare namespace Input {
    const PointerMoveActionSchema: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
        type: z.ZodLiteral<"pointerMove">;
        x: z.ZodLazy<z.ZodNumber>;
        y: z.ZodLazy<z.ZodNumber>;
        duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        origin: z.ZodOptional<z.ZodLazy<z.ZodUnion<[z.ZodLiteral<"viewport">, z.ZodLiteral<"pointer">, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"element">;
            element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                sharedId: z.ZodLazy<z.ZodString>;
                handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                sharedId: string;
                handle?: string | undefined;
            }, {
                sharedId: string;
                handle?: string | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
        }, "strip", z.ZodTypeAny, {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        }, {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        }>>]>>>;
    }, "strip", z.ZodTypeAny, {
        type: "pointerMove";
        x: number;
        y: number;
        duration?: number | undefined;
        origin?: "viewport" | "pointer" | {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        } | undefined;
    }, {
        type: "pointerMove";
        x: number;
        y: number;
        duration?: number | undefined;
        origin?: "viewport" | "pointer" | {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        } | undefined;
    }>, z.ZodLazy<z.ZodObject<{
        width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
        height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
        pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        width?: number | undefined;
        height?: number | undefined;
        pressure?: number | undefined;
        tangentialPressure?: number | undefined;
        twist?: number | undefined;
        altitudeAngle?: number | undefined;
        azimuthAngle?: number | undefined;
    }, {
        width?: number | undefined;
        height?: number | undefined;
        pressure?: number | undefined;
        tangentialPressure?: number | undefined;
        twist?: number | undefined;
        altitudeAngle?: number | undefined;
        azimuthAngle?: number | undefined;
    }>>>>;
}
export declare namespace Input {
    const WheelScrollActionSchema: z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"scroll">;
        x: z.ZodLazy<z.ZodNumber>;
        y: z.ZodLazy<z.ZodNumber>;
        deltaX: z.ZodLazy<z.ZodNumber>;
        deltaY: z.ZodLazy<z.ZodNumber>;
        duration: z.ZodOptional<z.ZodLazy<z.ZodNumber>>;
        origin: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodUnion<[z.ZodLiteral<"viewport">, z.ZodLiteral<"pointer">, z.ZodLazy<z.ZodObject<{
            type: z.ZodLiteral<"element">;
            element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                sharedId: z.ZodLazy<z.ZodString>;
                handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                sharedId: string;
                handle?: string | undefined;
            }, {
                sharedId: string;
                handle?: string | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
        }, "strip", z.ZodTypeAny, {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        }, {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        }>>]>>>>;
    }, "strip", z.ZodTypeAny, {
        type: "scroll";
        x: number;
        y: number;
        deltaX: number;
        deltaY: number;
        duration?: number | undefined;
        origin?: "viewport" | "pointer" | {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        } | undefined;
    }, {
        type: "scroll";
        x: number;
        y: number;
        deltaX: number;
        deltaY: number;
        duration?: number | undefined;
        origin?: "viewport" | "pointer" | {
            type: "element";
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
        } | undefined;
    }>>;
}
export declare namespace Input {
    const PointerCommonPropertiesSchema: z.ZodLazy<z.ZodObject<{
        width: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
        height: z.ZodOptional<z.ZodDefault<z.ZodLazy<z.ZodNumber>>>;
        pressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        tangentialPressure: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        twist: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        altitudeAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        azimuthAngle: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        width?: number | undefined;
        height?: number | undefined;
        pressure?: number | undefined;
        tangentialPressure?: number | undefined;
        twist?: number | undefined;
        altitudeAngle?: number | undefined;
        azimuthAngle?: number | undefined;
    }, {
        width?: number | undefined;
        height?: number | undefined;
        pressure?: number | undefined;
        tangentialPressure?: number | undefined;
        twist?: number | undefined;
        altitudeAngle?: number | undefined;
        azimuthAngle?: number | undefined;
    }>>;
}
export declare namespace Input {
    const OriginSchema: z.ZodLazy<z.ZodUnion<[z.ZodLiteral<"viewport">, z.ZodLiteral<"pointer">, z.ZodLazy<z.ZodObject<{
        type: z.ZodLiteral<"element">;
        element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            sharedId: z.ZodLazy<z.ZodString>;
            handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            sharedId: string;
            handle?: string | undefined;
        }, {
            sharedId: string;
            handle?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
    }, "strip", z.ZodTypeAny, {
        type: "element";
        element: {
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>;
    }, {
        type: "element";
        element: {
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>;
    }>>]>>;
}
export declare namespace Input {
    const ReleaseActionsSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"input.releaseActions">;
        params: z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            context: string;
        }, {
            context: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            context: string;
        };
        method: "input.releaseActions";
    }, {
        params: {
            context: string;
        };
        method: "input.releaseActions";
    }>>;
}
export declare namespace Input {
    const ReleaseActionsParametersSchema: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        context: string;
    }, {
        context: string;
    }>>;
}
export declare namespace Input {
    const SetFilesSchema: z.ZodLazy<z.ZodObject<{
        method: z.ZodLiteral<"input.setFiles">;
        params: z.ZodLazy<z.ZodObject<{
            context: z.ZodLazy<z.ZodString>;
            element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
                sharedId: z.ZodLazy<z.ZodString>;
                handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                sharedId: string;
                handle?: string | undefined;
            }, {
                sharedId: string;
                handle?: string | undefined;
            }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
            files: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
            context: string;
            files: string[];
        }, {
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
            context: string;
            files: string[];
        }>>;
    }, "strip", z.ZodTypeAny, {
        params: {
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
            context: string;
            files: string[];
        };
        method: "input.setFiles";
    }, {
        params: {
            element: {
                sharedId: string;
                handle?: string | undefined;
            } & Record<string, any>;
            context: string;
            files: string[];
        };
        method: "input.setFiles";
    }>>;
}
export declare namespace Input {
    const SetFilesParametersSchema: z.ZodLazy<z.ZodObject<{
        context: z.ZodLazy<z.ZodString>;
        element: z.ZodLazy<z.ZodIntersection<z.ZodObject<{
            sharedId: z.ZodLazy<z.ZodString>;
            handle: z.ZodOptional<z.ZodLazy<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            sharedId: string;
            handle?: string | undefined;
        }, {
            sharedId: string;
            handle?: string | undefined;
        }>, z.ZodLazy<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
        files: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        element: {
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>;
        context: string;
        files: string[];
    }, {
        element: {
            sharedId: string;
            handle?: string | undefined;
        } & Record<string, any>;
        context: string;
        files: string[];
    }>>;
}
