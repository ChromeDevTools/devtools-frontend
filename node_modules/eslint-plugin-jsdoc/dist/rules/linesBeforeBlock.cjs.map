{"version":3,"file":"linesBeforeBlock.cjs","names":["_iterateJsdoc","_interopRequireDefault","require","e","__esModule","default","startPunctuators","Set","_default","exports","iterateJsdoc","context","jsdocNode","report","sourceCode","utils","checkBlockStarts","excludedTags","ignoreSameLine","ignoreSingleLines","lines","options","hasATag","tokensBefore","getTokensBefore","includeComments","tokenBefore","at","type","has","value","loc","end","line","start","startLine","sameLine","fix","fixer","indent","spaceDiff","column","match","slice","tokenPrior","startColumn","pop","repeat","insertTextAfter","iterateAllJsdocs","meta","docs","description","url","fixable","schema","additionalProperties","properties","items","module"],"sources":["../../src/rules/linesBeforeBlock.js"],"sourcesContent":["import iterateJsdoc from '../iterateJsdoc.js';\n\n/**\n * Punctuators that begin a logical group should not require a line before it skipped. Specifically\n * `[` starts an array, `{` starts an object or block, `(` starts a grouping, and `=` starts a\n * declaration (like a variable or a type alias).\n */\nconst startPunctuators = new Set([\n  '(', '=', '[', '{',\n]);\n\nexport default iterateJsdoc(({\n  context,\n  jsdocNode,\n  report,\n  sourceCode,\n  utils,\n}) => {\n  const {\n    checkBlockStarts,\n    excludedTags = [\n      'type',\n    ],\n    ignoreSameLine = true,\n    ignoreSingleLines = true,\n    lines = 1,\n  } = context.options[0] || {};\n\n  if (utils.hasATag(excludedTags)) {\n    return;\n  }\n\n  const tokensBefore = sourceCode.getTokensBefore(jsdocNode, {\n    includeComments: true,\n  });\n  const tokenBefore = tokensBefore.at(-1);\n  if (\n    !tokenBefore || (\n      tokenBefore.type === 'Punctuator' &&\n      !checkBlockStarts &&\n      startPunctuators.has(tokenBefore.value)\n    )\n  ) {\n    return;\n  }\n\n  if (tokenBefore.loc?.end?.line + lines >=\n  /** @type {number} */\n      (jsdocNode.loc?.start?.line)\n  ) {\n    const startLine = jsdocNode.loc?.start?.line;\n    const sameLine = tokenBefore.loc?.end?.line === startLine;\n\n    if (sameLine && ignoreSameLine) {\n      return;\n    }\n\n    if (ignoreSingleLines && jsdocNode.loc?.start.line === jsdocNode.loc?.end.line) {\n      return;\n    }\n\n    /** @type {import('eslint').Rule.ReportFixer} */\n    const fix = (fixer) => {\n      let indent = '';\n      if (sameLine) {\n        const spaceDiff = /** @type {number} */ (jsdocNode.loc?.start?.column) -\n        /** @type {number} */ (tokenBefore.loc?.end?.column);\n        // @ts-expect-error Should be a comment\n        indent = /** @type {import('estree').Comment} */ (\n          jsdocNode\n        ).value.match(/^\\*\\n([\\t ]*) \\*/u)?.[1]?.slice(spaceDiff);\n        if (!indent) {\n          /** @type {import('eslint').AST.Token|import('estree').Comment|undefined} */\n          let tokenPrior = tokenBefore;\n          let startColumn;\n          while (tokenPrior && tokenPrior?.loc?.start?.line === startLine) {\n            startColumn = tokenPrior.loc?.start?.column;\n            tokenPrior = tokensBefore.pop();\n          }\n\n          indent = ' '.repeat(\n            /* c8 ignore next */\n            /** @type {number} */ (startColumn ? startColumn - 1 : 0),\n          );\n        }\n      }\n\n      return fixer.insertTextAfter(\n        /** @type {import('eslint').AST.Token} */\n        (tokenBefore),\n        '\\n'.repeat(lines) +\n        (sameLine ? '\\n' + indent : ''),\n      );\n    };\n\n    report(`Required ${lines} line(s) before JSDoc block`, fix);\n  }\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    docs: {\n      description: 'Enforces minimum number of newlines before JSDoc comment blocks',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/lines-before-block.md#repos-sticky-header',\n    },\n    fixable: 'code',\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          checkBlockStarts: {\n            type: 'boolean',\n          },\n          excludedTags: {\n            items: {\n              type: 'string',\n            },\n            type: 'array',\n          },\n          ignoreSameLine: {\n            type: 'boolean',\n          },\n          ignoreSingleLines: {\n            type: 'boolean',\n          },\n          lines: {\n            type: 'integer',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"mappings":"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","ignoreList":[]}