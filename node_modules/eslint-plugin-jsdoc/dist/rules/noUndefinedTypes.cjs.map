{"version":3,"file":"noUndefinedTypes.cjs","names":["_iterateJsdoc","_interopRequireWildcard","require","_jsdoccomment","_parseImportsExports","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","extraTypes","typescriptGlobals","stripPseudoTypes","str","replace","_default","exports","iterateJsdoc","context","node","report","settings","sourceCode","utils","scopeManager","globalScope","definedTypes","disableReporting","markVariablesAsUsed","options","definedPreferredTypes","mode","preferredTypes","structuredTags","keys","length","values","map","preferredType","undefined","reportSettings","replacement","filter","Boolean","allComments","getAllComments","comments","comment","test","value","commentNode","parseComment","globals","flatMap","trim","split","concat","languageOptions","typedefDeclarations","doc","tags","tag","isNamepathDefiningTag","name","importTags","description","type","typePart","imprt","importsExports","parseImportsExports","types","namedImports","push","names","namespaceImports","namespace","ancestorNodes","currentNode","parent","getTemplateTags","ancestorNode","getJSDocComment","jsdoc","templateTags","getPresentTags","closureGenericTypes","parseClosureTemplateTag","cjsOrESMScope","childScopes","block","getValidRuntimeIdentifiers","scope","result","Set","scp","variables","add","upper","imports","allDefinedTypes","identifiers","globalItem","body","item","property","key","init","callee","id","methodOrProp","getScope","tagToParsedType","propertyName","potentialType","parsedType","tryParseType","parseType","typeTags","filterTags","tagMightHaveTypePosition","namepathReferencingTags","isNamepathReferencingTag","namepathOrUrlReferencingTags","filterAllTags","isNamepathOrUrlReferencingTag","tagsWithTypes","traverse","nde","parentNode","_parent","val","currNode","includes","right","structuredTypes","Array","isArray","markVariableAsUsed","iterateAllJsdocs","meta","docs","url","schema","additionalProperties","properties","items","module"],"sources":["../../src/rules/noUndefinedTypes.js"],"sourcesContent":["import iterateJsdoc, {\n  parseComment,\n} from '../iterateJsdoc.js';\nimport {\n  getJSDocComment,\n  parse as parseType,\n  traverse,\n  tryParse as tryParseType,\n} from '@es-joy/jsdoccomment';\nimport {\n  parseImportsExports,\n} from 'parse-imports-exports';\n\nconst extraTypes = [\n  'null', 'undefined', 'void', 'string', 'boolean', 'object',\n  'function', 'symbol',\n  'number', 'bigint', 'NaN', 'Infinity',\n  'any', '*', 'never', 'unknown', 'const',\n  'this', 'true', 'false',\n  'Array', 'Object', 'RegExp', 'Date', 'Function', 'Intl',\n];\n\nconst typescriptGlobals = [\n  // https://www.typescriptlang.org/docs/handbook/utility-types.html\n  'Awaited',\n  'Partial',\n  'Required',\n  'Readonly',\n  'Record',\n  'Pick',\n  'Omit',\n  'Exclude',\n  'Extract',\n  'NonNullable',\n  'Parameters',\n  'ConstructorParameters',\n  'ReturnType',\n  'InstanceType',\n  'ThisParameterType',\n  'OmitThisParameter',\n  'ThisType',\n  'Uppercase',\n  'Lowercase',\n  'Capitalize',\n  'Uncapitalize',\n];\n\n/**\n * @param {string|false|undefined} [str]\n * @returns {undefined|string|false}\n */\nconst stripPseudoTypes = (str) => {\n  return str && str.replace(/(?:\\.|<>|\\.<>|\\[\\])$/u, '');\n};\n\nexport default iterateJsdoc(({\n  context,\n  node,\n  report,\n  settings,\n  sourceCode,\n  utils,\n}) => {\n  const {\n    scopeManager,\n  } = sourceCode;\n\n  // When is this ever `null`?\n  const globalScope = /** @type {import('eslint').Scope.Scope} */ (\n    scopeManager.globalScope\n  );\n\n  const\n    /**\n     * @type {{\n     *   definedTypes: string[],\n     *   disableReporting: boolean,\n     *   markVariablesAsUsed: boolean\n     * }}\n     */ {\n      definedTypes = [],\n      disableReporting = false,\n      markVariablesAsUsed = true,\n    } = context.options[0] || {};\n\n  /** @type {(string|undefined)[]} */\n  let definedPreferredTypes = [];\n  const {\n    mode,\n    preferredTypes,\n    structuredTags,\n  } = settings;\n  if (Object.keys(preferredTypes).length) {\n    definedPreferredTypes = /** @type {string[]} */ (Object.values(preferredTypes).map((preferredType) => {\n      if (typeof preferredType === 'string') {\n        // May become an empty string but will be filtered out below\n        return stripPseudoTypes(preferredType);\n      }\n\n      if (!preferredType) {\n        return undefined;\n      }\n\n      if (typeof preferredType !== 'object') {\n        utils.reportSettings(\n          'Invalid `settings.jsdoc.preferredTypes`. Values must be falsy, a string, or an object.',\n        );\n      }\n\n      return stripPseudoTypes(preferredType.replacement);\n    })\n      .filter(Boolean));\n  }\n\n  const allComments = sourceCode.getAllComments();\n  const comments = allComments\n    .filter((comment) => {\n      return (/^\\*\\s/u).test(comment.value);\n    })\n    .map((commentNode) => {\n      return parseComment(commentNode, '');\n    });\n\n  const globals = allComments\n    .filter((comment) => {\n      return (/^\\s*globals/u).test(comment.value);\n    }).flatMap((commentNode) => {\n      return commentNode.value.replace(/^\\s*globals/u, '').trim().split(/,\\s*/u);\n    }).concat(Object.keys(context.languageOptions.globals ?? []));\n\n  const typedefDeclarations = comments\n    .flatMap((doc) => {\n      return doc.tags.filter(({\n        tag,\n      }) => {\n        return utils.isNamepathDefiningTag(tag);\n      });\n    })\n    .map((tag) => {\n      return tag.name;\n    });\n\n  const importTags = settings.mode === 'typescript' ? /** @type {string[]} */ (comments.flatMap((doc) => {\n    return doc.tags.filter(({\n      tag,\n    }) => {\n      return tag === 'import';\n    });\n  }).flatMap((tag) => {\n    const {\n      description,\n      name,\n      type,\n    } = tag;\n    const typePart = type ? `{${type}} ` : '';\n    const imprt = 'import ' + (description ?\n      `${typePart}${name} ${description}` :\n      `${typePart}${name}`);\n\n    const importsExports = parseImportsExports(imprt.trim());\n\n    const types = [];\n    const namedImports = Object.values(importsExports.namedImports || {})[0]?.[0];\n    if (namedImports) {\n      if (namedImports.default) {\n        types.push(namedImports.default);\n      }\n\n      if (namedImports.names) {\n        types.push(...Object.keys(namedImports.names));\n      }\n    }\n\n    const namespaceImports = Object.values(importsExports.namespaceImports || {})[0]?.[0];\n    if (namespaceImports) {\n      if (namespaceImports.namespace) {\n        types.push(namespaceImports.namespace);\n      }\n\n      if (namespaceImports.default) {\n        types.push(namespaceImports.default);\n      }\n    }\n\n    return types;\n  }).filter(Boolean)) : [];\n\n  const ancestorNodes = [];\n\n  let currentNode = node;\n  // No need for Program node?\n  while (currentNode?.parent) {\n    ancestorNodes.push(currentNode);\n    currentNode = currentNode.parent;\n  }\n\n  /**\n   * @param {import('eslint').Rule.Node} ancestorNode\n   * @returns {import('comment-parser').Spec[]}\n   */\n  const getTemplateTags = function (ancestorNode) {\n    const commentNode = getJSDocComment(sourceCode, ancestorNode, settings);\n    if (!commentNode) {\n      return [];\n    }\n\n    const jsdoc = parseComment(commentNode, '');\n\n    return jsdoc.tags.filter((tag) => {\n      return tag.tag === 'template';\n    });\n  };\n\n  // `currentScope` may be `null` or `Program`, so in such a case,\n  //  we look to present tags instead\n  const templateTags = ancestorNodes.length ?\n    ancestorNodes.flatMap((ancestorNode) => {\n      return getTemplateTags(ancestorNode);\n    }) :\n    utils.getPresentTags([\n      'template',\n    ]);\n\n  const closureGenericTypes = templateTags.flatMap((tag) => {\n    return utils.parseClosureTemplateTag(tag);\n  });\n\n  // In modules, including Node, there is a global scope at top with the\n  //  Program scope inside\n  const cjsOrESMScope = globalScope.childScopes[0]?.block?.type === 'Program';\n\n  /**\n   * @param {import(\"eslint\").Scope.Scope | null} scope\n   * @returns {Set<string>}\n   */\n  const getValidRuntimeIdentifiers = (scope) => {\n    const result = new Set();\n\n    let scp = scope;\n    while (scp) {\n      for (const {\n        name,\n      } of scp.variables) {\n        result.add(name);\n      }\n\n      scp = scp.upper;\n    }\n\n    return result;\n  };\n\n  /**\n   * We treat imports differently as we can't introspect their children.\n   * @type {string[]}\n   */\n  const imports = [];\n\n  const allDefinedTypes = new Set(globalScope.variables.map(({\n    name,\n  }) => {\n    return name;\n  })\n\n    // If the file is a module, concat the variables from the module scope.\n    .concat(\n      cjsOrESMScope ?\n        globalScope.childScopes.flatMap(({\n          variables,\n        }) => {\n          return variables;\n        }).flatMap(({\n          identifiers,\n          name,\n        }) => {\n          const globalItem = /** @type {import('estree').Identifier & {parent: import('@typescript-eslint/types').TSESTree.Node}} */ (\n            identifiers?.[0]\n          )?.parent;\n          switch (globalItem?.type) {\n            case 'ClassDeclaration':\n              return [\n                name,\n                ...globalItem.body.body.map((item) => {\n                  const property = /** @type {import('@typescript-eslint/types').TSESTree.Identifier} */ (\n                    /** @type {import('@typescript-eslint/types').TSESTree.PropertyDefinition} */ (\n                      item)?.key)?.name;\n                  /* c8 ignore next 3 -- Guard */\n                  if (!property) {\n                    return '';\n                  }\n\n                  return `${name}.${property}`;\n                }).filter(Boolean),\n              ];\n            case 'ImportDefaultSpecifier':\n            case 'ImportNamespaceSpecifier':\n            case 'ImportSpecifier':\n              imports.push(name);\n              break;\n            case 'TSInterfaceDeclaration':\n              return [\n                name,\n                ...globalItem.body.body.map((item) => {\n                  const property = /** @type {import('@typescript-eslint/types').TSESTree.Identifier} */ (\n                    /** @type {import('@typescript-eslint/types').TSESTree.TSPropertySignature} */ (\n                      item)?.key)?.name;\n                  /* c8 ignore next 3 -- Guard */\n                  if (!property) {\n                    return '';\n                  }\n\n                  return `${name}.${property}`;\n                }).filter(Boolean),\n              ];\n            case 'VariableDeclarator':\n              if (/** @type {import('@typescript-eslint/types').TSESTree.Identifier} */ (\n                /** @type {import('@typescript-eslint/types').TSESTree.CallExpression} */ (\n                  globalItem?.init\n                )?.callee)?.name === 'require'\n              ) {\n                imports.push(/** @type {import('@typescript-eslint/types').TSESTree.Identifier} */ (\n                  globalItem.id\n                ).name);\n                break;\n              }\n\n              return [];\n          }\n\n          return [\n            name,\n          ];\n        /* c8 ignore next */\n        }) : [],\n    )\n    .concat(extraTypes)\n    .concat(typedefDeclarations)\n    .concat(importTags)\n    .concat(definedTypes)\n    .concat(/** @type {string[]} */ (definedPreferredTypes))\n    .concat((() => {\n      // Other methods are not in scope, but we need them, and we grab them here\n      if (node?.type === 'MethodDefinition') {\n        return /** @type {import('estree').ClassBody} */ (node.parent).body.flatMap((methodOrProp) => {\n          if (methodOrProp.type === 'MethodDefinition') {\n            // eslint-disable-next-line unicorn/no-lonely-if -- Pattern\n            if (methodOrProp.key.type === 'Identifier') {\n              return [\n                methodOrProp.key.name,\n                `${/** @type {import('estree').ClassDeclaration} */ (\n                  node.parent?.parent\n                )?.id?.name}.${methodOrProp.key.name}`,\n              ];\n            }\n          }\n\n          if (methodOrProp.type === 'PropertyDefinition') {\n            // eslint-disable-next-line unicorn/no-lonely-if -- Pattern\n            if (methodOrProp.key.type === 'Identifier') {\n              return [\n                methodOrProp.key.name,\n                `${/** @type {import('estree').ClassDeclaration} */ (\n                  node.parent?.parent\n                )?.id?.name}.${methodOrProp.key.name}`,\n              ];\n            }\n          }\n          /* c8 ignore next 2 -- Not yet built */\n\n          return '';\n        }).filter(Boolean);\n      }\n\n      return [];\n    })())\n    .concat(...getValidRuntimeIdentifiers(node && (\n      (sourceCode.getScope &&\n      /* c8 ignore next 2 */\n      sourceCode.getScope(node)) ||\n      context.getScope()\n    )))\n    .concat(\n      settings.mode === 'jsdoc' ?\n        [] :\n        [\n          ...settings.mode === 'typescript' ? typescriptGlobals : [],\n          ...closureGenericTypes,\n        ],\n    ));\n\n  /**\n   * @typedef {{\n   *   parsedType: import('jsdoc-type-pratt-parser').RootResult;\n   *   tag: import('comment-parser').Spec|import('@es-joy/jsdoccomment').JsdocInlineTagNoType & {\n   *     line?: import('../iterateJsdoc.js').Integer\n   *   }\n   * }} TypeAndTagInfo\n   */\n\n  /**\n   * @param {string} propertyName\n   * @returns {(tag: (import('@es-joy/jsdoccomment').JsdocInlineTagNoType & {\n   *     name?: string,\n   *     type?: string,\n   *     line?: import('../iterateJsdoc.js').Integer\n   *   })|import('comment-parser').Spec & {\n   *     namepathOrURL?: string\n   *   }\n   * ) => undefined|TypeAndTagInfo}\n   */\n  const tagToParsedType = (propertyName) => {\n    return (tag) => {\n      try {\n        const potentialType = tag[\n          /** @type {\"type\"|\"name\"|\"namepathOrURL\"} */ (propertyName)\n        ];\n        return {\n          parsedType: mode === 'permissive' ?\n            tryParseType(/** @type {string} */ (potentialType)) :\n            parseType(/** @type {string} */ (potentialType), mode),\n          tag,\n        };\n      } catch {\n        return undefined;\n      }\n    };\n  };\n\n  const typeTags = utils.filterTags(({\n    tag,\n  }) => {\n    return tag !== 'import' && utils.tagMightHaveTypePosition(tag) && (tag !== 'suppress' || settings.mode !== 'closure');\n  }).map(tagToParsedType('type'));\n\n  const namepathReferencingTags = utils.filterTags(({\n    tag,\n  }) => {\n    return utils.isNamepathReferencingTag(tag);\n  }).map(tagToParsedType('name'));\n\n  const namepathOrUrlReferencingTags = utils.filterAllTags(({\n    tag,\n  }) => {\n    return utils.isNamepathOrUrlReferencingTag(tag);\n  }).map(tagToParsedType('namepathOrURL'));\n\n  const tagsWithTypes = /** @type {TypeAndTagInfo[]} */ ([\n    ...typeTags,\n    ...namepathReferencingTags,\n    ...namepathOrUrlReferencingTags,\n    // Remove types which failed to parse\n  ].filter(Boolean));\n\n  for (const {\n    parsedType,\n    tag,\n  } of tagsWithTypes) {\n    traverse(parsedType, (nde, parentNode) => {\n      /**\n       * @type {import('jsdoc-type-pratt-parser').NameResult & {\n       *   _parent?: import('jsdoc-type-pratt-parser').NonRootResult\n       * }}\n       */\n      // eslint-disable-next-line canonical/id-match -- Avoid clashes\n      (nde)._parent = parentNode;\n      const {\n        type,\n        value,\n      } = /** @type {import('jsdoc-type-pratt-parser').NameResult} */ (nde);\n\n      let val = value;\n\n      /** @type {import('jsdoc-type-pratt-parser').NonRootResult|undefined} */\n      let currNode = nde;\n      do {\n        currNode =\n          /**\n           * @type {import('jsdoc-type-pratt-parser').NameResult & {\n           *   _parent?: import('jsdoc-type-pratt-parser').NonRootResult\n           * }}\n           */ (currNode)._parent;\n        if (\n          // Avoid appending for imports and globals since we don't want to\n          //  check their properties which may or may not exist\n          !imports.includes(val) && !globals.includes(val) &&\n          !importTags.includes(val) &&\n          !extraTypes.includes(val) &&\n          !typedefDeclarations.includes(val) &&\n          currNode && 'right' in currNode &&\n          currNode.right?.type === 'JsdocTypeProperty') {\n          val = val + '.' + currNode.right.value;\n        }\n      } while (currNode?.type === 'JsdocTypeNamePath');\n\n      if (type === 'JsdocTypeName') {\n        const structuredTypes = structuredTags[tag.tag]?.type;\n        if (!allDefinedTypes.has(val) &&\n          (!Array.isArray(structuredTypes) || !structuredTypes.includes(val))\n        ) {\n          if (!disableReporting) {\n            report(`The type '${val}' is undefined.`, null, tag);\n          }\n        } else if (markVariablesAsUsed && !extraTypes.includes(val)) {\n          if (sourceCode.markVariableAsUsed) {\n            sourceCode.markVariableAsUsed(val);\n          /* c8 ignore next 3 */\n          } else {\n            context.markVariableAsUsed(val);\n          }\n        }\n      }\n    });\n  }\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    docs: {\n      description: 'Checks that types in jsdoc comments are defined.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/no-undefined-types.md#repos-sticky-header',\n    },\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          definedTypes: {\n            items: {\n              type: 'string',\n            },\n            type: 'array',\n          },\n          disableReporting: {\n            type: 'boolean',\n          },\n          markVariablesAsUsed: {\n            type: 'boolean',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"mappings":"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","ignoreList":[]}